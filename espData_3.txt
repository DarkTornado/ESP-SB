if(type==0){
if(n==-1){
f1 = [];
f2 = [];
f2x = [];
f2y = [];
f2z = [];
f3 = [];
f4 = [];
f1a = [];
f2a = [];
f3a = [];
f4a = [];
f4b = [];
f4c = [];
f4d = [];
fx = [];
fy = [];
fz = [];
f0 = [];
}
else{
f1.splice(n, 1);
f2.splice(n, 1);
f2x.splice(n, 1);
f2y.splice(n, 1);
f2z.splice(n, 1);
f3.splice(n, 1);
f4.splice(n, 1);
f1a.splice(n, 1);
f2a.splice(n, 1);
f3a.splice(n, 1);
f4a.splice(n, 1);
f4b.splice(n, 1);
f4c.splice(n, 1);
f4d.splice(n, 1);
fx.splice(n, 1);
fy.splice(n, 1);
fz.splice(n, 1);
f0.splice(n, 1);
}
}
else if(type==1){
if(n==-1){
w1 = [];
w2 = [];
w3 = [];
w4 = [];
w1a = [];
w2a = [];
w3a = [];
w4a = [];
w1b = [];
w1c = [];
wx = [];
wy = [];
wz = [];
w4b = [];
w4c = [];
wxa = [];
wya = [];
wza = [];
w3b = [];
w3c = [];
wxb = [];
wyb = [];
wzb = [];
w2x = [];
w2y = [];
w2z = [];
water2 = false;
w1aa = 0;
w1x, w1y, w1z = null;
w2aa = 0;
w3aa = 0;
w3ab = false;
w3x, w3y, w3z = null;
w4aa = false;
w5 = -1;
w5a = 0;
}
else{
w1.splice(n, 1);
w2.splice(n, 1);
w3.splice(n, 1);
w4.splice(n, 1);
w1a.splice(n, 1);
w2a.splice(n, 1);
w3a.splice(n, 1);
w4a.splice(n, 1);
w1b.splice(n, 1);
w1c.splice(n, 1);
wx.splice(n, 1);
wy.splice(n, 1);
wz.splice(n, 1);
w4b.splice(n, 1);
w4c.splice(n, 1);
wxa.splice(n, 1);
wya.splice(n, 1);
wza.splice(n, 1);
w3b.splice(n, 1);
w3c.splice(n, 1);
wxb.splice(n, 1);
wyb.splice(n, 1);
wzb.splice(n, 1);
w2x.splice(n, 1);
w2y.splice(n, 1);
w2z.splice(n, 1);
if(n==0){
water2 = false;
w1aa = 0;
w1x, w1y, w1z = null;
w2aa = 0;
w3aa = 0;
w3ab = false;
w3x, w3y, w3z = null;
w4aa = false;
w5 = -1;
w5a = 0;
}
}
}
else if(type==2){
if(n==-1){
t1 = [];
t2 = [];
t3 = [];
t4 = [];
t1a = [];
t2a = [];
t3a = [];
t3b = [];
t4a = [];
t4b = [];
tx = [];
ty = [];
tz = [];
}
else{
t1.splice(n, 1);
t2.splice(n, 1);
t3.splice(n, 1);
t4.splice(n, 1);
t1a.splice(n, 1);
t2a.splice(n, 1);
t3a.splice(n, 1);
t3b.splice(n, 1);
t4a.splice(n, 1);
t4b.splice(n, 1);
tx.splice(n, 1);
ty.splice(n, 1);
tz.splice(n, 1);
}
}
else if(type==3){
if(n==-1){
c1 = [];
c2 = [];
c3 = [];
c4 = [];
c1a = [];
c2a = [];
c2x = [];
c2y = [];
c2z = [];
c3a = [];
c4a = [];
c1b = [];
c1c = [];
c1d = [];
cx = [];
cy = [];
cz = [];
c1e = [];
c1f = [];
cx1 = [];
cy1 = [];
cz1 = [];
cx2 = [];
cy2 = [];
cz2 = [];
cx3 = [];
cy3 = [];
cz3 = [];
}
else{
c1.splice(n, 1);
c2.splice(n, 1);
c3.splice(n, 1);
c4.splice(n, 1);
c1a.splice(n, 1);
c2a.splice(n, 1);
c2x.splice(n, 1);
c2y.splice(n, 1);
c2z.splice(n, 1);
c3a.splice(n, 1);
c4a.splice(n, 1);
c1b.splice(n, 1);
c1c.splice(n, 1);
c1d.splice(n, 1);
cx.splice(n, 1);
cy.splice(n, 1);
cz.splice(n, 1);
c1e.splice(n, 1);
c1f.splice(n, 1);
cx1.splice(n, 1);
cy1.splice(n, 1);
cz1.splice(n, 1);
cx2.splice(n, 1);
cy2.splice(n, 1);
cz2.splice(n, 1);
cx3.splice(n, 1);
cy3.splice(n, 1);
cz3.splice(n, 1);
}
}
else if(type==4){
if(n==-1){
s1 = [];
s2 = [];
s3 = [];
s4 = [];
s1a = [];
s2a = [];
s2x = [];
s2y = [];
s2z = [];
s3a = [];
s4a = [];
sx = [];
sy = [];
sz = [];
}
else{
s1.splice(n, 1);
s2.splice(n, 1);
s3.splice(n, 1);
s4.splice(n, 1);
s1a.splice(n, 1);
s2a.splice(n, 1);
s2x.splice(n, 1);
s2y.splice(n, 1);
s2z.splice(n, 1);
s3a.splice(n, 1);
s4a.splice(n, 1);
sx.splice(n, 1);
sy.splice(n, 1);
sz.splice(n, 1);
}
}
else if(type==5){
if(n==-1){
ss1 = [];
ss2 = [];
ss3 = [];
ss4 = [];
ss1a = [];
ss2a = [];
ss3a = [];
ss4a = [];
}
else{
ss1.splice(n, 1);
ss2.splice(n, 1);
ss3.splice(n, 1);
ss4.splice(n, 1);
ss1a.splice(n, 1);
ss2a.splice(n, 1);
ss3a.splice(n, 1);
ss4a.splice(n, 1);
}
}
else if(type==6){
if(n==-1){
l1 = [];
l2 = [];
l3 = [];
l4 = [];
l1a = [];
l2a = [];
l3a = [];
l4a = [];
l3b = [];
l3c = [];
lx = [];
ly = [];
lz = [];
lxa = [];
lya = [];
lza = [];
}
else{
l1.splice(n, 1);
l2.splice(n, 1);
l3.splice(n, 1);
l4.splice(n, 1);
l1a.splice(n, 1);
l2a.splice(n, 1);
l3a.splice(n, 1);
l4a.splice(n, 1);
l3b.splice(n, 1);
l3c.splice(n, 1);
lx.splice(n, 1);
ly.splice(n, 1);
lz.splice(n, 1);
lxa.splice(n, 1);
lya.splice(n, 1);
lza.splice(n, 1);
}
}
else if(type==7){
if(n==-1){
d1 = [];
d2 = [];
d3 = [];
d4 = [];
d1a = [];
d2a = [];
d3a = [];
d4a = [];
dx = [];
dy = [];
dz = [];
d3b = [];
d3c = [];
dxa = [];
dya = [];
dza = [];
d1b = [];
d1c = [];
dxb = [];
dyb = [];
dzb = [];
}
else{
d1.splice(n, 1);
d2.splice(n, 1);
d3.splice(n, 1);
d4.splice(n, 1);
d1a.splice(n, 1);
d2a.splice(n, 1);
d3a.splice(n, 1);
d4a.splice(n, 1);
dx.splice(n, 1);
dy.splice(n, 1);
dz.splice(n, 1);
d3b.splice(n, 1);
d3c.splice(n, 1);
dxa.splice(n, 1);
dya.splice(n, 1);
dza.splice(n, 1);
d1b.splice(n, 1);
d1c.splice(n, 1);
dxb.splice(n, 1);
dyb.splice(n, 1);
dzb.splice(n, 1);
}
}
else if(type==8){
if(n==-1){
i1 = [];
i2 = [];
i3 = [];
i4 = [];
i1a = [];
i2a = [];
i3a = [];
i4a = [];
i1b = [];
i1c = [];
ix = [];
iy = [];
iz = [];
i3b = [];
i3c = [];
ixa = [];
iya = [];
iza = [];
ixb = [];
izb = [];
ixc = [];
iyc = [];
izc = [];
}
else{
i1.splice(n, 1);
i2.splice(n, 1);
i3.splice(n, 1);
i4.splice(n, 1);
i1a.splice(n, 1);
i2a.splice(n, 1);
i3a.splice(n, 1);
i4a.splice(n, 1);
i1b.splice(n, 1);
i1c.splice(n, 1);
ix.splice(n, 1);
iy.splice(n, 1);
iz.splice(n, 1);
i3b.splice(n, 1);
i3c.splice(n, 1);
ixa.splice(n, 1);
iya.splice(n, 1);
iza.splice(n, 1);
ixb.splice(n, 1);
izb.splice(n, 1);
ixc.splice(n, 1);
iyc.splice(n, 1);
izc.splice(n, 1);
}
}
else if(type==9){
if(n==-1){
m1 = [];
m2 = [];
m3 = [];
m4 = [];
m1a = [];
m2a = [];
m3a = [];
m3x  = [];
m3y = [];
m3z = [];
m4a = [];
m4x = [];
m4y = [];
m4z = [];
}
else{
m1.splice(n, 1);
m2.splice(n, 1);
m3.splice(n, 1);
m4.splice(n, 1);
m1a.splice(n, 1);
m2a.splice(n, 1);
m3a.splice(n, 1);
m3x .splice(n, 1);
m3y.splice(n, 1);
m3z.splice(n, 1);
m4a.splice(n, 1);
m4x.splice(n, 1);
m4y.splice(n, 1);
m4z.splice(n, 1);
}
}
else if(type==10){
if(n==-1){
b1 = [];
b2 = [];
b3 = [];
b4 = [];
b1a = [];
b2a = [];
b3a = [];
b4a = [];
b4b = [];
}
else{
b1.splice(n, 1);
b2.splice(n, 1);
b3.splice(n, 1);
b4.splice(n, 1);
b1a.splice(n, 1);
b2a.splice(n, 1);
b3a.splice(n, 1);
b4a.splice(n, 1);
b4b.splice(n, 1);
}
}
else if(type==11){
if(n==-1){
a1 = [];
a2 = [];
a3 = [];
a4 = [];
a1a = [];
a2a = [];
a2b = [];
a2x = [];
a2y = [];
a2z = [];
a3a = [];
a4a = [];
air2 = false;
a1aa = 0;
a1x, a1y, a1z = null;
a2aa = 0;
a3aa = 0;
a3x, a3y, a3z = null;
a4aa = false;
a4ab = 0;
ax, ay, az = null;
a5 = -1;
a5a = 0;
}
else{
a1.splice(n, 1);
a2.splice(n, 1);
a3.splice(n, 1);
a4.splice(n, 1);
a1a.splice(n, 1);
a2a.splice(n, 1);
a2b.splice(n, 1);
a2x.splice(n, 1);
a2y.splice(n, 1);
a2z.splice(n, 1);
a3a.splice(n, 1);
a4a.splice(n, 1);
if(n==0){
air2 = false;
a1aa = 0;
a1x, a1y, a1z = null;
a2aa = 0;
a3aa = 0;
a3x, a3y, a3z = null;
a4aa = false;
a4ab = 0;
ax, ay, az = null;
a5 = -1;
a5a = 0;
}
}
}
else if(type==12){
if(n==-1){
e1 = [];
e2 = [];
e3 = [];
e4 = [];
e1a = [];
e2a = [];
e3a = [];
e3b = [];
e3c = [];
ex = [];
ey = [];
ez = [];
e4a = [];
ex4 = [];
ey4 = [];
ez4 = [];
}
else{
e1.splice(n, 1);
e2.splice(n, 1);
e3.splice(n, 1);
e4.splice(n, 1);
e1a.splice(n, 1);
e2a.splice(n, 1);
e3a.splice(n, 1);
e3b.splice(n, 1);
e3c.splice(n, 1);
ex.splice(n, 1);
ey.splice(n, 1);
ez.splice(n, 1);
e4a.splice(n, 1);
ex4.splice(n, 1);
ey4.splice(n, 1);
ez4.splice(n, 1);
}
}
else if(type==13){
if(n==-1){
th1 = [];
th2 = [];
th3 = [];
th4 = [];
th1a = [];
th1b = null;
th1c = [];
th2a = [];
th3a = [];
th3b = [];
th4a = [];
thx = [];
thy = [];
thz = [];
thxa = [];
thya = [];
thza = [];
thxb = [];
thyb = [];
thzb = [];
}
else{
th1.splice(n, 1);
th2.splice(n, 1);
th3.splice(n, 1);
th4.splice(n, 1);
th1a.splice(n, 1);
th1b = null;
th1c.splice(n, 1);
th2a.splice(n, 1);
th3a.splice(n, 1);
th3b.splice(n, 1);
th4a.splice(n, 1);
thx.splice(n, 1);
thy.splice(n, 1);
thz.splice(n, 1);
thxa.splice(n, 1);
thya.splice(n, 1);
thza.splice(n, 1);
thxb.splice(n, 1);
thyb.splice(n, 1);
thzb.splice(n, 1);
}
}
else if(type==14){
if(n==-1){
tt1 = [];
tt2 = [];
tt3 = [];
tt4 = [];
tt1a = [];
tt2a = [];
tt3a = [];
tt4a = [];
tt4b = [];
tt4c = [];
ttx = [];
tty = [];
ttz = [];
tt2b = [];
ttxa = [];
ttya = [];
ttza = [];
ttxb = [];
ttyb = [];
ttzb = [];
}
else{
tt1.splice(n, 1);
tt2.splice(n, 1);
tt3.splice(n, 1);
tt4.splice(n, 1);
tt1a.splice(n, 1);
tt2a.splice(n, 1);
tt3a.splice(n, 1);
tt4a.splice(n, 1);
tt4b.splice(n, 1);
tt4c.splice(n, 1);
ttx.splice(n, 1);
tty.splice(n, 1);
ttz.splice(n, 1);
tt2b.splice(n, 1);
ttxa.splice(n, 1);
ttya.splice(n, 1);
ttza.splice(n, 1);
ttxb.splice(n, 1);
ttyb.splice(n, 1);
ttzb.splice(n, 1);
}
}
else if(type==15){
if(n==-1){
bb1 = [];
bb2 = [];
bb3 = [];
bb4 = [];
bb1a = [];
bb2a = [];
bb3a = [];
bb4a = [];
bb4b = [];
bb4c = [];
bbx = [];
bby = [];
bbz = [];
bind2 = false;
b1aa = 0;
b2aa = 0;
b3aa = 0;
b3ab = false;
b3x, b3y, b3z = null;
b4aa = false;
bx, by, bz = null;
b5 = -1;
b5a = 0;
}
else{
bb1.splice(n, 1);
bb2.splice(n, 1);
bb3.splice(n, 1);
bb4.splice(n, 1);
bb1a.splice(n, 1);
bb2a.splice(n, 1);
bb3a.splice(n, 1);
bb4a.splice(n, 1);
bb4b.splice(n, 1);
bb4c.splice(n, 1);
bbx.splice(n, 1);
bby.splice(n, 1);
bbz.splice(n, 1);
if(n==0){
bind2 = false;
b1aa = 0;
b2aa = 0;
b3aa = 0;
b3ab = false;
b3x, b3y, b3z = null;
b4aa = false;
bx, by, bz = null;
b5 = -1;
b5a = 0;
}
}
}
else if(type==16){
if(n==-1){
mm1 = [];
mm2 = [];
mm3 = [];
mm4 = [];
mm1a = [];
mmx1 = [];
mmy1 = [];
mmz1 = [];
mmx2a = [];
mmy2a = [];
mmz2a = [];
mm2a = [];
mm3a = [];
mm3b = [];
mmx = [];
mmy = [];
mmz = [];
mmx2 = [];
mmy2 = [];
mmz2 = [];
mm4a = [];
mmx4 = [];
mmy4 = [];
mmz4 = [];
}
else{
mm1.splice(n, 1);
mm2.splice(n, 1);
mm3.splice(n, 1);
mm4.splice(n, 1);
mm1a.splice(n, 1);
mmx1.splice(n, 1);
mmy1.splice(n, 1);
mmz1.splice(n, 1);
mmx2a.splice(n, 1);
mmy2a.splice(n, 1);
mmz2a.splice(n, 1);
mm2a.splice(n, 1);
mm3a.splice(n, 1);
mm3b.splice(n, 1);
mmx.splice(n, 1);
mmy.splice(n, 1);
mmz.splice(n, 1);
mmx2.splice(n, 1);
mmy2.splice(n, 1);
mmz2.splice(n, 1);
mm4a.splice(n, 1);
mmx4.splice(n, 1);
mmy4.splice(n, 1);
mmz4.splice(n, 1);
}
}
else if(type==17){
if(n==-1){
tn1 = [];
tn2 = [];
tn3 = [];
tn4 = [];
tn1a = [];
tn1x = [];
tn1y = [];
tn1z = [];
tn2a = [];
tnx = [];
tny = [];
tnz = [];
tn3a = [];
tnx3 = [];
tny3 = [];
tnz3 = [];
tn4a = [];
tnx2 = [];
tny2 = [];
tnz2 = [];
}
else{
tn1.splice(n, 1);
tn2.splice(n, 1);
tn3.splice(n, 1);
tn4.splice(n, 1);
tn1a.splice(n, 1);
tn1x.splice(n, 1);
tn1y.splice(n, 1);
tn1z.splice(n, 1);
tn2a.splice(n, 1);
tnx.splice(n, 1);
tny.splice(n, 1);
tnz.splice(n, 1);
tn3a.splice(n, 1);
tnx3.splice(n, 1);
tny3.splice(n, 1);
tnz3.splice(n, 1);
tn4a.splice(n, 1);
tnx2.splice(n, 1);
tny2.splice(n, 1);
tnz2.splice(n, 1);
}
}
else if(type==18){
if(n==-1){
tr1 = [];
tr2 = [];
tr3 = [];
tr4 = [];
tr1a = [];
tr1b = [];
trx1 = [];
try1 = [];
trz1 = [];
tr2a = [];
tr2b = [];
trx2 = [];
try2 = [];
trz2 = [];
tr3a = [];
tr3b = [];
trx3 = [];
try3 = [];
trz3 = [];
tr4a = [];
tr4b = [];
trx4 = [];
try4 = [];
trz4 = [];
}
else{
tr1.splice(n, 1);
tr2.splice(n, 1);
tr3.splice(n, 1);
tr4.splice(n, 1);
tr1a.splice(n, 1);
tr1b.splice(n, 1);
trx1.splice(n, 1);
try1.splice(n, 1);
trz1.splice(n, 1);
tr2a.splice(n, 1);
tr2b.splice(n, 1);
trx2.splice(n, 1);
try2.splice(n, 1);
trz2.splice(n, 1);
tr3a.splice(n, 1);
tr3b.splice(n, 1);
trx3.splice(n, 1);
try3.splice(n, 1);
trz3.splice(n, 1);
tr4a.splice(n, 1);
tr4b.splice(n, 1);
trx4.splice(n, 1);
try4.splice(n, 1);
trz4.splice(n, 1);
}
}
else if(type==19){
if(n==-1){
h1 = [];
h2 = [];
h3 = [];
h4 = [];
h1a = [];
h2a = [];
h3a = [];
h4a = [];
h4b = [];
heal2 = false;
h1aa = 0;
h2aa = 0;
h3aa = 0;
h3ab;
h4aa = false;
h5 = -1;
h5a;
}
else{
h1.splice(n, 1);
h2.splice(n, 1);
h3.splice(n, 1);
h4.splice(n, 1);
h1a.splice(n, 1);
h2a.splice(n, 1);
h3a.splice(n, 1);
h4a.splice(n, 1);
h4b.splice(n, 1);
if(n==0){
heal2 = false;
h1aa = 0;
h2aa = 0;
h3aa = 0;
h3ab;
h4aa = false;
h5 = -1;
h5a;
}
}
}
else if(type==20){
if(n==-1){
n1 = [];
n2 = [];
n3 = [];
n4 = [];
n1a = [];
n2a = [];
n2x = [];
n2y = [];
n2z = [];
n3a = [];
n4a = [];
nx = [];
ny = [];
nz = [];
}
else{
n1.splice(n, 1);
n2.splice(n, 1);
n3.splice(n, 1);
n4.splice(n, 1);
n1a.splice(n, 1);
n2a.splice(n, 1);
n2x.splice(n, 1);
n2y.splice(n, 1);
n2z.splice(n, 1);
n3a.splice(n, 1);
n4a.splice(n, 1);
nx.splice(n, 1);
ny.splice(n, 1);
nz.splice(n, 1);
}
}
else if(type==21){
if(n==-1){
cc1 = [];
cc2 = [];
cc3 = [];
cc4 = [];
cc1a = [];
cc2a = [];
cc2b = [];
cc3a = [];
cc3b = [];
cc3c = [];
cc3d = [];
cc4a = [];
ccx = [];
ccy = [];
ccz = [];
ccx1 = [];
ccy1 = [];
ccz1 = [];
ccx2 = [];
ccy2 = [];
ccz2 = [];
mmxc = [];
mmyc = [];
mmzc = [];
}
else{
cc1.splice(n, 1);
cc2.splice(n, 1);
cc3.splice(n, 1);
cc4.splice(n, 1);
cc1a.splice(n, 1);
cc2a.splice(n, 1);
cc2b.splice(n, 1);
cc3a.splice(n, 1);
cc3b.splice(n, 1);
cc3c.splice(n, 1);
cc3d.splice(n, 1);
cc4a.splice(n, 1);
ccx.splice(n, 1);
ccy.splice(n, 1);
ccz.splice(n, 1);
ccx1.splice(n, 1);
ccy1.splice(n, 1);
ccz1.splice(n, 1);
ccx2.splice(n, 1);
ccy2.splice(n, 1);
ccz2.splice(n, 1);
mmxc.splice(n, 1);
mmyc.splice(n, 1);
mmzc.splice(n, 1);
}
}
else if(type==22){
if(n==-1){
as1 = [];
as2 = [];
as3 = [];
as4 = [];
as1a = [];
as2a = [];
as3a = [];
as4a = [];
}
else{
as1.splice(n, 1);
as2.splice(n, 1);
as3.splice(n, 1);
as4.splice(n, 1);
as1a.splice(n, 1);
as2a.splice(n, 1);
as3a.splice(n, 1);
as4a.splice(n, 1);
}
}
else if(type==23){
if(n==-1){
ar1 = [];
ar2 = [];
ar3 = [];
ar4 = [];
ar1a = [];
ar1x = [];
ar1y = [];
ar1z = [];
ar2a = [];
arx2 = [];
ary2 = [];
arz2 = [];
ar3a = [];
ar4a = [];
arx = [];
ary = [];
arz = [];
}
else{
ar1.splice(n, 1);
ar2.splice(n, 1);
ar3.splice(n, 1);
ar4.splice(n, 1);
ar1a.splice(n, 1);
ar1x.splice(n, 1);
ar1y.splice(n, 1);
ar1z.splice(n, 1);
ar2a.splice(n, 1);
arx2.splice(n, 1);
ary2.splice(n, 1);
arz2.splice(n, 1);
ar3a.splice(n, 1);
ar4a.splice(n, 1);
arx.splice(n, 1);
ary.splice(n, 1);
arz.splice(n, 1);
}
}
else if(type==24){
if(n==-1){
ma1 = [];
ma2 = [];
ma3 = [];
ma4 = [];
ma1a = [];
ma2a = [];
ma2b = [];
max2 = [];
may2 = [];
maz2 = [];
ma3a = [];
ma4a = [];
max = [];
may = [];
maz = [];
}
else{
ma1.splice(n, 1);
ma2.splice(n, 1);
ma3.splice(n, 1);
ma4.splice(n, 1);
ma1a.splice(n, 1);
ma2a.splice(n, 1);
ma2b.splice(n, 1);
max2.splice(n, 1);
may2.splice(n, 1);
maz2.splice(n, 1);
ma3a.splice(n, 1);
ma4a.splice(n, 1);
max.splice(n, 1);
may.splice(n, 1);
maz.splice(n, 1);
}
}
else if(type==25){
if(n==-1){
de1 = [];
de2 = [];
de3 = [];
de4 = [];
de1a = [];
de2a = [];
de3a = [];
de3b = [];
dex3 = [];
dey3 = [];
dez3 = [];
de4a = [];
de4b = [];
dex = [];
dey = [];
dez = [];
}
else{
de1.splice(n, 1);
de2.splice(n, 1);
de3.splice(n, 1);
de4.splice(n, 1);
de1a.splice(n, 1);
de2a.splice(n, 1);
de3a.splice(n, 1);
de3b.splice(n, 1);
dex3.splice(n, 1);
dey3.splice(n, 1);
dez3.splice(n, 1);
de4a.splice(n, 1);
de4b.splice(n, 1);
dex.splice(n, 1);
dey.splice(n, 1);
dez.splice(n, 1);
}
}
else if(type==26){
if(n==-1){
p1 = [];
p2 = [];
p3 = [];
p4 = [];
p1a = [];
p1b = [];
p2a = [];
p2xa = [];
p2ya = [];
p2za = [];
p3a = [];
p3b = [];
p4a = [];
p4x = [];
p4y = [];
p4z = [];
}
else{
p1.splice(n, 1);
p2.splice(n, 1);
p3.splice(n, 1);
p4.splice(n, 1);
p1a.splice(n, 1);
p1b.splice(n, 1);
p2a.splice(n, 1);
p2xa.splice(n, 1);
p2ya.splice(n, 1);
p2za.splice(n, 1);
p3a.splice(n, 1);
p3b.splice(n, 1);
p4a.splice(n, 1);
p4x.splice(n, 1);
p4y.splice(n, 1);
p4z.splice(n, 1);
}
}
else if(type==27){
if(n==-1){
me1 = [];
me2 = [];
me3 = [];
me4 = [];
me1a = [];
me1x = [];
me1y = [];
me1z = [];
me2a = [];
me2x = [];
me2y = [];
me2z = [];
mexa = [];
meza = [];
me3a = [];
me4a = [];
mex = [];
mey = [];
mez = [];
}
else{
me1.splice(n, 1);
me2.splice(n, 1);
me3.splice(n, 1);
me4.splice(n, 1);
me1a.splice(n, 1);
me1x.splice(n, 1);
me1y.splice(n, 1);
me1z.splice(n, 1);
me2a.splice(n, 1);
me2x.splice(n, 1);
me2y.splice(n, 1);
me2z.splice(n, 1);
mexa.splice(n, 1);
meza.splice(n, 1);
me3a.splice(n, 1);
me4a.splice(n, 1);
mex.splice(n, 1);
mey.splice(n, 1);
mez.splice(n, 1);
}
}
else if(type==28){
if(n==-1){
hf1 = [];
hf2 = [];
hf3 = [];
hf4 = [];
hf1a = [];
hf1x = [];
hf1y = [];
hf1z = [];
hf2a = [];
hf2x = [];
hf2y = [];
hf2z = [];
hf3a = [];
hf3b = [];
hf3c = [];
hf3x = [];
hf3y = [];
hf3z = [];
hf4a = [];
hfx = [];
hfy = [];
hfz = [];
}
else{
hf1.splice(n, 1);
hf2.splice(n, 1);
hf3.splice(n, 1);
hf4.splice(n, 1);
hf1a.splice(n, 1);
hf1x.splice(n, 1);
hf1y.splice(n, 1);
hf1z.splice(n, 1);
hf2a.splice(n, 1);
hf2x.splice(n, 1);
hf2y.splice(n, 1);
hf2z.splice(n, 1);
hf3a.splice(n, 1);
hf3b.splice(n, 1);
hf3c.splice(n, 1);
hf3x.splice(n, 1);
hf3y.splice(n, 1);
hf3z.splice(n, 1);
hf4a.splice(n, 1);
hfx.splice(n, 1);
hfy.splice(n, 1);
hfz.splice(n, 1);
}
}
else if(type==29){
if(n==-1){
bu1 = [];
bu2 = [];
bu3 = [];
bu4 = [];
bu1a = [];
bu2a = [];
bu2b = [];
bu2x = [];
bu2y = [];
bu2z = [];
bu3a = [];
bu3b = [];
bu3x = [];
bu3y = [];
bu3z = [];
bu4a = [];
bu4b = [];
bux = [];
buy = [];
buz = [];
}
else{
bu1.splice(n, 1);
bu2.splice(n, 1);
bu3.splice(n, 1);
bu4.splice(n, 1);
bu1a.splice(n, 1);
bu2a.splice(n, 1);
bu2b.splice(n, 1);
bu2x.splice(n, 1);
bu2y.splice(n, 1);
bu2z.splice(n, 1);
bu3a.splice(n, 1);
bu3b.splice(n, 1);
bu3x.splice(n, 1);
bu3y.splice(n, 1);
bu3z.splice(n, 1);
bu4a.splice(n, 1);
bu4b.splice(n, 1);
bux.splice(n, 1);
buy.splice(n, 1);
buz.splice(n, 1);
}
}
else if(type==30){
if(n==-1){
so1 = [];
so2 = [];
so3 = [];
so4 = [];
so1a = [];
so2a = [];
so2b = [];
so2x = [];
so2y = [];
so2z = [];
so3a = [];
so4a = [];
so4b = [];
so4c = [];
sox = [];
soy = [];
soz = [];
}
else{
so1.splice(n, 1);
so2.splice(n, 1);
so3.splice(n, 1);
so4.splice(n, 1);
so1a.splice(n, 1);
so2a.splice(n, 1);
so2b.splice(n, 1);
so2x.splice(n, 1);
so2y.splice(n, 1);
so2z.splice(n, 1);
so3a.splice(n, 1);
so4a.splice(n, 1);
so4b.splice(n, 1);
so4c.splice(n, 1);
sox.splice(n, 1);
soy.splice(n, 1);
soz.splice(n, 1);
}
}
else if(type==31){
if(n==-1){
asu1 = [];
asu2 = [];
asu3 = [];
asu4 = [];
asu1a = [];
asu2a = [];
asu2x = [];
asu2y = [];
asu2z = [];
asu3a = [];
asu4a = [];
}
else{
asu1.splice(n, 1);
asu2.splice(n, 1);
asu3.splice(n, 1);
asu4.splice(n, 1);
asu1a.splice(n, 1);
asu2a.splice(n, 1);
asu2x.splice(n, 1);
asu2y.splice(n, 1);
asu2z.splice(n, 1);
asu3a.splice(n, 1);
asu4a.splice(n, 1);
}
}
else if(type==32){
if(n==-1){
bus1 = [];
bus2 = [];
bus3 = [];
bus4 = [];
bus1a = [];
bus1b = [];
bus1c = [];
bus1x = [];
bus1y = [];
bus1z = [];
bus2a = [];
bus3a = [];
bus4a = [];
busx = [];
busy = [];
busz = [];
}
else{
bus1.splice(n, 1);
bus2.splice(n, 1);
bus3.splice(n, 1);
bus4.splice(n, 1);
bus1a.splice(n, 1);
bus1b.splice(n, 1);
bus1c.splice(n, 1);
bus1x.splice(n, 1);
bus1y.splice(n, 1);
bus1z.splice(n, 1);
bus2a.splice(n, 1);
bus3a.splice(n, 1);
bus4a.splice(n, 1);
busx.splice(n, 1);
busy.splice(n, 1);
busz.splice(n, 1);
}
}
else if(type==33){
if(n==-1){
wa1 = [];
wa2 = [];
wa3 = [];
wa4 = [];
wa1a = [];
wa1x = [];
wa1y = [];
wa1z = [];
waxa = [];
waza = [];
wa2a = [];
wa3a = [];
wa4a = [];
wax = [];
way = [];
waz = [];
}
else{
wa1.splice(n, 1);
wa2.splice(n, 1);
wa3.splice(n, 1);
wa4.splice(n, 1);
wa1a.splice(n, 1);
wa1x.splice(n, 1);
wa1y.splice(n, 1);
wa1z.splice(n, 1);
waxa.splice(n, 1);
waza.splice(n, 1);
wa2a.splice(n, 1);
wa3a.splice(n, 1);
wa4a.splice(n, 1);
wax.splice(n, 1);
way.splice(n, 1);
waz.splice(n, 1);
}
}
else if(type==34){
if(n==-1){
o1 = [];
o2 = [];
o3 = [];
o4 = [];
o1a = [];
o2a = [];
o3a = [];
o3x = [];
o3y = [];
o3z = [];
o4a = [];
o4b = [];
o4c = [];
ox = [];
oy = [];
oz = [];
}
else{
o1.splice(n, 1);
o2.splice(n, 1);
o3.splice(n, 1);
o4.splice(n, 1);
o1a.splice(n, 1);
o2a.splice(n, 1);
o3a.splice(n, 1);
o3x.splice(n, 1);
o3y.splice(n, 1);
o3z.splice(n, 1);
o4a.splice(n, 1);
o4b.splice(n, 1);
o4c.splice(n, 1);
ox.splice(n, 1);
oy.splice(n, 1);
oz.splice(n, 1);
}
}
else if(type==35){
if(n==-1){
r1 = [];
r2 = [];
r3 = [];
r4 = [];
r1a = [];
r1x = [];
r1y = [];
r1z = [];
r2a = [];
r3a = [];
r4a = [];
rx = [];
ry = [];
rz = [];
}
else{
r1.splice(n, 1);
r2.splice(n, 1);
r3.splice(n, 1);
r4.splice(n, 1);
r1a.splice(n, 1);
r1x.splice(n, 1);
r1y.splice(n, 1);
r1z.splice(n, 1);
r2a.splice(n, 1);
r3a.splice(n, 1);
r4a.splice(n, 1);
rx.splice(n, 1);
ry.splice(n, 1);
rz.splice(n, 1);
}
}
else if(type==36){
if(n==-1){
tp1 = [];
tp2 = [];
tp3 = [];
tp4 = [];
tp1a = [];
tp2a = [];
tp3a = [];
tp4a = [];
tp4b = [];
tpx = []
tpy = []
tpz = [];
}
else{
tp1.splice(n, 1);
tp2.splice(n, 1);
tp3.splice(n, 1);
tp4.splice(n, 1);
tp1a.splice(n, 1);
tp2a.splice(n, 1);
tp3a.splice(n, 1);
tp4a.splice(n, 1);
tp4b.splice(n, 1);
tpx.splice(n, 1)
tpy.splice(n, 1)
tpz.splice(n, 1);
}
}
else if(type==37){
if(n==-1){
sp1 = [];
sp2 = [];
sp3 = [];
sp4 = [];
sp1a = [];
sp2a = [];
sp2x = [];
sp2y = [];
sp2z = [];
spxa = [];
spza = [];
sp3a = [];
sp3x = [];
sp3y = [];
sp3z = [];
sp4a = [];
sp4b = [];
spx = [];
spy = [];
spz = [];
}
else{
sp1.splice(n, 1);
sp2.splice(n, 1);
sp3.splice(n, 1);
sp4.splice(n, 1);
sp1a.splice(n, 1);
sp2a.splice(n, 1);
sp2x.splice(n, 1);
sp2y.splice(n, 1);
sp2z.splice(n, 1);
spxa.splice(n, 1);
spza.splice(n, 1);
sp3a.splice(n, 1);
sp3x.splice(n, 1);
sp3y.splice(n, 1);
sp3z.splice(n, 1);
sp4a.splice(n, 1);
sp4b.splice(n, 1);
spx.splice(n, 1);
spy.splice(n, 1);
spz.splice(n, 1);
}
}
else if(type==38){
if(n==-1){
sa1 = [];
sa2 = [];
sa3 = [];
sa4 = [];
sa1a = [];
sa1x = [];
sa1y = [];
sa1z = [];
sa2a = [];
sa2x = [];
sa2y = [];
sa2z = [];
sa3a = [];
sa3x = [];
sa3y = [];
sa3z = [];
sa4a = [];
sa4b = [];
sax = [];
say = [];
saz = [];
}
else{
sa1.splice(n, 1);
sa2.splice(n, 1);
sa3.splice(n, 1);
sa4.splice(n, 1);
sa1a.splice(n, 1);
sa1x.splice(n, 1);
sa1y.splice(n, 1);
sa1z.splice(n, 1);
sa2a.splice(n, 1);
sa2x.splice(n, 1);
sa2y.splice(n, 1);
sa2z.splice(n, 1);
sa3a.splice(n, 1);
sa3x.splice(n, 1);
sa3y.splice(n, 1);
sa3z.splice(n, 1);
sa4a.splice(n, 1);
sa4b.splice(n, 1);
sax.splice(n, 1);
say.splice(n, 1);
saz.splice(n, 1);
}
}
if(type==39){
if(n==-1){
fo1 = [];
fo2 = [];
fo3 = [];
fo4 = [];
fo1a = [];
fo1x = [];
fo1y = [];
fo1z = [];
fo2a = [];
fo2x = [];
fo2y = [];
fo2z = [];
foxa = [];
foza = [];
fo3a = [];
fo4a = [];
fox = [];
foy = [];
foz = [];
}
else{
fo1.splice(n, 1);
fo2.splice(n, 1);
fo3.splice(n, 1);
fo4.splice(n, 1);
fo1a.splice(n, 1);
fo1x.splice(n, 1);
fo1y.splice(n, 1);
fo1z.splice(n, 1);
fo2a.splice(n, 1);
fo2x.splice(n, 1);
fo2y.splice(n, 1);
fo2z.splice(n, 1);
foxa.splice(n, 1);
foza.splice(n, 1);
fo3a.splice(n, 1);
fo4a.splice(n, 1);
fox.splice(n, 1);
foy.splice(n, 1);
foz.splice(n, 1);
}
}
if(type==40){
if(n==-1){
re1 = [];
re2 = [];
re3 = [];
re4 = [];
re1a = [];
re1x = [];
re1y = [];
re1z = [];
re2a = [];
re2x = [];
re2z = [];
re3a = [];
re2x = [];
re2y = [];
re2z = [];
re4a = [];
rex = [];
rey = [];
rez = [];
}
else{
re1.splice(n, 1);
re2.splice(n, 1);
re3.splice(n, 1);
re4.splice(n, 1);
re1a.splice(n, 1);
re1x.splice(n, 1);
re1y.splice(n, 1);
re1z.splice(n, 1);
re2a.splice(n, 1);
re2x.splice(n, 1);
re2z.splice(n, 1);
re3a.splice(n, 1);
re2x.splice(n, 1);
re2y.splice(n, 1);
re2z.splice(n, 1);
re4a.splice(n, 1);
rex.splice(n, 1);
rey.splice(n, 1);
rez.splice(n, 1);
}
}
if(type==41){
if(n==-1){
mag1 = [];
mag2 = [];
mag3 = [];
mag4 = [];
mag1a = [];
mag2a = [];
mag3a = [];
mag3x = [];
mag3y = [];
mag3z = [];
mag4a = [];
mag4b = [];
magx = [];
magy = [];
magz = [];
}
else{
mag1.splice(n, 1);
mag2.splice(n, 1);
mag3.splice(n, 1);
mag4.splice(n, 1);
mag1a.splice(n, 1);
mag2a.splice(n, 1);
mag3a.splice(n, 1);
mag3x.splice(n, 1);
mag3y.splice(n, 1);
mag3z.splice(n, 1);
mag4a.splice(n, 1);
mag4b.splice(n, 1);
magx.splice(n, 1);
magy.splice(n, 1);
magz.splice(n, 1);
}
}
if(type==42){
if(n==-1){
st1 = [];
st2 = [];
st3 = [];
st4 = [];
st1a = [];
st2a = [];
st2b = [];
st2x = [];
st2y = [];
st2z = [];
st2c = [];
st3a = [];
st4a = [];
stx = [];
sty = [];
stz = [];
}
else{
st1.splice(n, 1);
st2.splice(n, 1);
st3.splice(n, 1);
st4.splice(n, 1);
st1a.splice(n, 1);
st2a.splice(n, 1);
st2b.splice(n, 1);
st2x.splice(n, 1);
st2y.splice(n, 1);
st2z.splice(n, 1);
st2c.splice(n, 1);
st3a.splice(n, 1);
st4a.splice(n, 1);
stx.splice(n, 1);
sty.splice(n, 1);
stz.splice(n, 1);
}
}
if(type==43){
if(n==-1){
he1 = [];
he2 = [];
he3 = [];
he4 = [];
he1a = [];
he1b = [];
he1x = [];
he1y = [];
he1z = [];
he1c = [];
he1d = [];
he2a = [];
he2b = [];
he2x = [];
he2y = [];
he2z = [];
he3a = [];
he3x = [];
he3y = [];
he3z = [];
he4a = [];
hex = [];
hey = [];
hez = [];
}
else{
he1.splice(n, 1);
he2.splice(n, 1);
he3.splice(n, 1);
he4.splice(n, 1);
he1a.splice(n, 1);
he1b.splice(n, 1);
he1x.splice(n, 1);
he1y.splice(n, 1);
he1z.splice(n, 1);
he1c.splice(n, 1);
he1d.splice(n, 1);
he2a.splice(n, 1);
he2b.splice(n, 1);
he2x.splice(n, 1);
he2y.splice(n, 1);
he2z.splice(n, 1);
he3a.splice(n, 1);
he3x.splice(n, 1);
he3y.splice(n, 1);
he3z.splice(n, 1);
he4a.splice(n, 1);
hex.splice(n, 1);
hey.splice(n, 1);
hez.splice(n, 1);
}
}
if(type==44){
if(n==-1){
her1 = [];
her2 = [];
her3 = [];
her4 = [];
her1a = [];
her2a = [];
her2b = [];
her2x = [];
her2y = [];
her2z = [];
her3a = [];
her3b = [];
her3x = [];
her3y = [];
her3z = [];
her4a = [];
herx = [];
hery = [];
herz = [];
}
else{
her1.splice(n, 1);
her2.splice(n, 1);
her3.splice(n, 1);
her4.splice(n, 1);
her1a.splice(n, 1);
her2a.splice(n, 1);
her2b.splice(n, 1);
her2x.splice(n, 1);
her2y.splice(n, 1);
her2z.splice(n, 1);
her3a.splice(n, 1);
her3b.splice(n, 1);
her3x.splice(n, 1);
her3y.splice(n, 1);
her3z.splice(n, 1);
her4a.splice(n, 1);
herx.splice(n, 1);
hery.splice(n, 1);
herz.splice(n, 1);
}
}
if(type==45){
if(n==-1){
cl1 = [];
cl2 = [];
cl3 = [];
cl4 = [];
cl1a = [];
cl2a = [];
cl2x = [];
cl2y = [];
cl2z = [];
cl3a = [];
cl3x = [];
cl3y = [];
cl3z = [];
cl4a = [];
clx = [];
cly = [];
clz = [];
}
else{
cl1.splice(n, 1);
cl2.splice(n, 1);
cl3.splice(n, 1);
cl4.splice(n, 1);
cl1a.splice(n, 1);
cl2a.splice(n, 1);
cl2x.splice(n, 1);
cl2y.splice(n, 1);
cl2z.splice(n, 1);
cl3a.splice(n, 1);
cl3x.splice(n, 1);
cl3y.splice(n, 1);
cl3z.splice(n, 1);
cl4a.splice(n, 1);
clx.splice(n, 1);
cly.splice(n, 1);
clz.splice(n, 1);
}
}
if(type==46){
if(n==-1){
k1 = [];
k2 = [];
k3 = [];
k4 = [];
k1a = [];
kxa = [];
kza = [];
k2a = [];
k2x = [];
k2y = [];
k2z = [];
k3a = [];
k4a = [];
k4b = [];
kx = [];
ky = [];
kz = [];
}
else{
k1.splice(n, 1);
k2.splice(n, 1);
k3.splice(n, 1);
k4.splice(n, 1);
k1a.splice(n, 1);
kxa.splice(n, 1);
kza.splice(n, 1);
k2a.splice(n, 1);
k2x.splice(n, 1);
k2y.splice(n, 1);
k2z.splice(n, 1);
k3a.splice(n, 1);
k4a.splice(n, 1);
k4b.splice(n, 1);
kx.splice(n, 1);
ky.splice(n, 1);
kz.splice(n, 1);
}
}
if(type==47){
if(n==-1){
j1 = [];
j2 = [];
j3 = [];
j4 = [];
j1a = [];
j2a = [];
jxa = [];
jza = [];
j3a = [];
j3b = [];
j3x = [];
j3y = [];
j3z = [];
j4a = [];
j4b = [];
jx = [];
jy = [];
jz = [];
}
else{
j1.splice(n, 1);
j2.splice(n, 1);
j3.splice(n, 1);
j4.splice(n, 1);
j1a.splice(n, 1);
j2a.splice(n, 1);
jxa.splice(n, 1);
jza.splice(n, 1);
j3a.splice(n, 1);
j3b.splice(n, 1);
j3x.splice(n, 1);
j3y.splice(n, 1);
j3z.splice(n, 1);
j4a.splice(n, 1);
j4b.splice(n, 1);
jx.splice(n, 1);
jy.splice(n, 1);
jz.splice(n, 1);
}
}
if(type==48){
if(n==-1){
ka1 = [];
ka2 = [];
ka3 = [];
ka4 = [];
ka1a = [];
ka2a = [];
ka3a = [];
ka3b = [];
ka3x = [];
ka3y = [];
ka3z = [];
ka4a = [];
kax = [];
kay = [];
kaz = [];
}
else{
ka1.splice(n, 1);
ka2.splice(n, 1);
ka3.splice(n, 1);
ka4.splice(n, 1);
ka1a.splice(n, 1);
ka2a.splice(n, 1);
ka3a.splice(n, 1);
ka3b.splice(n, 1);
ka3x.splice(n, 1);
ka3y.splice(n, 1);
ka3z.splice(n, 1);
ka4a.splice(n, 1);
kax.splice(n, 1);
kay.splice(n, 1);
kaz.splice(n, 1);
}
}
if(type==49){
if(n==-1){
ti1 = [];
ti2 = [];
ti3 = [];
ti4 = [];
ti1a = [];
ti2a = [];
ti3a = [];
ti3b = [];
ti3x = [];
ti3y = [];
ti3z = [];
ti4a = [];
ti4b = [];
tix = [];
tiy = [];
tiz = [];
}
else{
ti1.splice(n, 1);
ti2.splice(n, 1);
ti3.splice(n, 1);
ti4.splice(n, 1);
ti1a.splice(n, 1);
ti2a.splice(n, 1);
ti3a.splice(n, 1);
ti3b.splice(n, 1);
ti3x.splice(n, 1);
ti3y.splice(n, 1);
ti3z.splice(n, 1);
ti4a.splice(n, 1);
ti4b.splice(n, 1);
tix.splice(n, 1);
tiy.splice(n, 1);
tiz.splice(n, 1);
}
}
if(type==50){
if(n==-1){
sn1 = [];
sn2 = [];
sn3 = [];
sn4 = [];
sn1a = [];
sn2a = [];
sn3a = [];
sn4a = [];
sn4b = [];
sn4c = [];
sn4d = [];
snx = [];
sny = [];
snz = [];
sn4x = [];
sn4y = [];
sn4z = [];
}
else{
sn1.splice(n, 1);
sn2.splice(n, 1);
sn3.splice(n, 1);
sn4.splice(n, 1);
sn1a.splice(n, 1);
sn2a.splice(n, 1);
sn3a.splice(n, 1);
sn4a.splice(n, 1);
sn4b.splice(n, 1);
sn4c.splice(n, 1);
sn4d.splice(n, 1);
snx.splice(n, 1);
sny.splice(n, 1);
snz.splice(n, 1);
sn4x.splice(n, 1);
sn4y.splice(n, 1);
sn4z.splice(n, 1);
}
}
if(type==51){
if(n==-1){
z1 = [];
z2 = [];
z3 = [];
z4 = [];
z1a = [];
z2a = [];
z2b = [];
z3a = [];
z3b = [];
z3x = [];
z3y = [];
z3z = [];
z4a = [];
}
else{
z1.splice(n, 1);
z2.splice(n, 1);
z3.splice(n, 1);
z4.splice(n, 1);
z1a.splice(n, 1);
z2a.splice(n, 1);
z2b.splice(n, 1);
z3a.splice(n, 1);
z3b.splice(n, 1);
z3x.splice(n, 1);
z3y.splice(n, 1);
z3z.splice(n, 1);
z4a.splice(n, 1);
}
}
if(type==52){
if(n==-1){
ne1 = [];
ne2 = [];
ne3 = [];
ne4 = [];
ne1a = [];
ne2a = [];
ne3a = [];
ne4a = [];
ne4b = [];
ne4c = [];
nex = [];
ney = [];
nez = [];
}
else{
ne1.splice(n, 1);
ne2.splice(n, 1);
ne3.splice(n, 1);
ne4.splice(n, 1);
ne1a.splice(n, 1);
ne2a.splice(n, 1);
ne3a.splice(n, 1);
ne4a.splice(n, 1);
ne4b.splice(n, 1);
ne4c.splice(n, 1);
nex.splice(n, 1);
ney.splice(n, 1);
nez.splice(n, 1);
}
}
if(type==53){
if(n==-1){
asn1 = [];
asn2 = [];
asn3 = [];
asn4 = [];
asn1a = [];
asn2a = [];
asnx = [];
asny = [];
asnz = [];
asn3a = [];
asn3b = [];
asn4a = [];
}
else{
asn1.splice(n, 1);
asn2.splice(n, 1);
asn3.splice(n, 1);
asn4.splice(n, 1);
asn1a.splice(n, 1);
asn2a.splice(n, 1);
asnx.splice(n, 1);
asny.splice(n, 1);
asnz.splice(n, 1);
asn3a.splice(n, 1);
asn3b.splice(n, 1);
asn4a.splice(n, 1);
}
}
if(type==54){
if(n==-1){
ho1 = [];
ho2 = [];
ho3 = [];
ho4 = [];
ho1a = [];
ho2a = [];
ho3a = [];
ho4a = [];
hox = [];
hoy = [];
hoz = [];
}
else{
ho1.splice(n, 1);
ho2.splice(n, 1);
ho3.splice(n, 1);
ho4.splice(n, 1);
ho1a.splice(n, 1);
ho2a.splice(n, 1);
ho3a.splice(n, 1);
ho4a.splice(n, 1);
hox.splice(n, 1);
hoy.splice(n, 1);
hoz.splice(n, 1);
}
}
if(type==55){
if(n==-1){
sol1 = [];
sol2 = [];
sol3 = [];
sol4 = [];
sol1a = [];
sol2a = [];
sol3a = [];
sol4a = [];
solx = [];
soly = [];
solz = [];
}
else{
sol1.splice(n, 1);
sol2.splice(n, 1);
sol3.splice(n, 1);
sol4.splice(n, 1);
sol1a.splice(n, 1);
sol2a.splice(n, 1);
sol3a.splice(n, 1);
sol4a.splice(n, 1);
solx.splice(n, 1);
soly.splice(n, 1);
solz.splice(n, 1);
}
}
if(type==56){
if(n==-1){
lu1 = [];
lu2 = [];
lu3 = [];
lu4 = [];
lu1a = [];
lu2a = [];
lu3a = [];
lu4a = [];
lux = [];
luy = [];
luz = [];
}
else{
lu1.splice(n, 1);
lu2.splice(n, 1);
lu3.splice(n, 1);
lu4.splice(n, 1);
lu1a.splice(n, 1);
lu2a.splice(n, 1);
lu3a.splice(n, 1);
lu4a.splice(n, 1);
lux.splice(n, 1);
luy.splice(n, 1);
luz.splice(n, 1);
}
}
if(type==57){
if(n==-1){
ha1 = [];
ha2 = [];
ha3 = [];
ha4 = [];
ha1a = [];
ha2a = [];
ha2x = [];
ha2y = [];
ha2z = [];
ha3a = [];
ha4a = [];
}
else{
ha1.splice(n, 1);
ha2.splice(n, 1);
ha3.splice(n, 1);
ha4.splice(n, 1);
ha1a.splice(n, 1);
ha2a.splice(n, 1);
ha2x.splice(n, 1);
ha2y.splice(n, 1);
ha2z.splice(n, 1);
ha3a.splice(n, 1);
ha4a.splice(n, 1);
}
}
if(type==58){
if(n==-1){
ra1 = [];
ra2 = [];
ra3 = [];
ra4 = [];
ra1a = [];
ra1b = [];
ra2a = [];
ra2b = [];
ra3a = [];
ra3b = [];
ra4a = [];
ra4b = [];
rax = [];
ray = [];
raz = [];
}
else{
ra1.splice(n, 1);
ra2.splice(n, 1);
ra3.splice(n, 1);
ra4.splice(n, 1);
ra1a.splice(n, 1);
ra1b.splice(n, 1);
ra2a.splice(n, 1);
ra2b.splice(n, 1);
ra3a.splice(n, 1);
ra3b.splice(n, 1);
ra4a.splice(n, 1);
ra4b.splice(n, 1);
rax.splice(n, 1);
ray.splice(n, 1);
raz.splice(n, 1);
}
}
if(type==59){
if(n==-1){
zw1 = [];
zw2 = [];
zw3 = [];
zw4 = [];
zw1a = [];
zw2a = [];
zw2x = [];
zw2y = [];
zw2z = [];
zw3a = [];
zw3b = [];
zw3x = [];
zw3y = [];
zw3z = [];
zw4a = [];
zw4b = [];
zwx = [];
zwy = [];
zwz = [];
}
else{
zw1.splice(n, 1);
zw2.splice(n, 1);
zw3.splice(n, 1);
zw4.splice(n, 1);
zw1a.splice(n, 1);
zw2a.splice(n, 1);
zw2x.splice(n, 1);
zw2y.splice(n, 1);
zw2z.splice(n, 1);
zw3a.splice(n, 1);
zw3b.splice(n, 1);
zw3x.splice(n, 1);
zw3y.splice(n, 1);
zw3z.splice(n, 1);
zw4a.splice(n, 1);
zw4b.splice(n, 1);
zwx.splice(n, 1);
zwy.splice(n, 1);
zwz.splice(n, 1);
}
}
if(type==60){
if(n==-1){
dec1 = [];
dec2 = [];
dec3 = [];
dec4 = [];
dec1a = [];
dec2a = [];
dec3a = [];
dec3x = [];
dec3y = [];
dec3z = [];
dec4a = [];
dec4c = [];
decx = [];
decy = [];
decz = [];
}
else{
dec1.splice(n, 1);
dec2.splice(n, 1);
dec3.splice(n, 1);
dec4.splice(n, 1);
dec1a.splice(n, 1);
dec2a.splice(n, 1);
dec3a.splice(n, 1);
dec3x.splice(n, 1);
dec3y.splice(n, 1);
dec3z.splice(n, 1);
dec4a.splice(n, 1);
dec4c.splice(n, 1);
decx.splice(n, 1);
decy.splice(n, 1);
decz.splice(n, 1);
}
}
if(type==61){
if(n==-1){
hs1 = [];
hs2 = [];
hs3 = [];
hs4 = [];
hs1a = [];
hs2a = [];
hs3a = [];
hs4a = [];
}
else{
hs1.splice(n, 1);
hs2.splice(n, 1);
hs3.splice(n, 1);
hs4.splice(n, 1);
hs1a.splice(n, 1);
hs2a.splice(n, 1);
hs3a.splice(n, 1);
hs4a.splice(n, 1);
}
}
if(type==62){
if(n==-1){
cli1 = [];
cli2 = [];
cli3 = [];
cli4 = [];
cli1a = [];
cli1b = [];
cli2a = [];
cli3a = [];
cli4a = [];
clix = [];
cliy = [];
cliz = [];
}
else{
cli1.splice(n, 1);
cli2.splice(n, 1);
cli3.splice(n, 1);
cli4.splice(n, 1);
cli1a.splice(n, 1);
cli1b.splice(n, 1);
cli2a.splice(n, 1);
cli3a.splice(n, 1);
cli4a.splice(n, 1);
clix.splice(n, 1);
cliy.splice(n, 1);
cliz.splice(n, 1);
}
}
if(type==63){
if(n==-1){
rr1 = [];
rr2 = [];
rr3 = [];
rr4 = [];
rr1a = [];
rr2a = [];
rr3a = [];
rr4a = [];
rr0 = [];
}
else{
rr1.splice(n, 1);
rr2.splice(n, 1);
rr3.splice(n, 1);
rr4.splice(n, 1);
rr1a.splice(n, 1);
rr2a.splice(n, 1);
rr3a.splice(n, 1);
rr4a.splice(n, 1);
rr0.splice(n, 1);
}
}
if(type==64){
if(n==-1){
wi1 = [];
wi2 = [];
wi3 = [];
wi4 = [];
wi1a = [];
wi2a = [];
wi3a = [];
wi4a = [];
wi4b = [];
wix = [];
wiy = [];
wiz = [];
}
else{
wi1.splice(n, 1);
wi2.splice(n, 1);
wi3.splice(n, 1);
wi4.splice(n, 1);
wi1a.splice(n, 1);
wi2a.splice(n, 1);
wi3a.splice(n, 1);
wi4a.splice(n, 1);
wi4b.splice(n, 1);
wix.splice(n, 1);
wiy.splice(n, 1);
wiz.splice(n, 1);
}
}
if(type==65){
if(n==-1){
en1 = [];
en2 = [];
en3 = [];
en4 = [];
en1a = [];
en1x = [];
en1y = [];
en1z = [];
en2a = [];
en3a = [];
en3x = [];
en3y = [];
en3z = [];
en4a = [];
en4b = [];
}
else{
en1.splice(n, 1);
en2.splice(n, 1);
en3.splice(n, 1);
en4.splice(n, 1);
en1a.splice(n, 1);
en1x.splice(n, 1);
en1y.splice(n, 1);
en1z.splice(n, 1);
en2a.splice(n, 1);
en3a.splice(n, 1);
en3x.splice(n, 1);
en3y.splice(n, 1);
en3z.splice(n, 1);
en4a.splice(n, 1);
en4b.splice(n, 1);
}
}
if(type==66){
if(n==-1){
g1 = [];
g2 = [];
g3 = [];
g4 = [];
g1a = [];
g2a = [];
g2x = [];
g2y = [];
g2z = [];
g3a = [];
g3x = [];
g3y = [];
g3z = [];
g4a = [];
g4b = [];
gx = [];
gy = [];
gz = [];
}
else{
g1.splice(n, 1);
g2.splice(n, 1);
g3.splice(n, 1);
g4.splice(n, 1);
g1a.splice(n, 1);
g2a.splice(n, 1);
g2x.splice(n, 1);
g2y.splice(n, 1);
g2z.splice(n, 1);
g3a.splice(n, 1);
g3x.splice(n, 1);
g3y.splice(n, 1);
g3z.splice(n, 1);
g4a.splice(n, 1);
g4b.splice(n, 1);
gx.splice(n, 1);
gy.splice(n, 1);
gz.splice(n, 1);
}
}
if(type==67){
if(n==-1){
se1 = [];
se2 = [];
se3 = [];
se4 = [];
se1a = [];
se2a = [];
se3a = [];
se4a = [];
se4b = [];
se4c = [];
sex = [];
sey = [];
sez = [];
}
else{
se1.splice(n, 1);
se2.splice(n, 1);
se3.splice(n, 1);
se4.splice(n, 1);
se1a.splice(n, 1);
se2a.splice(n, 1);
se3a.splice(n, 1);
se4a.splice(n, 1);
se4b.splice(n, 1);
se4c.splice(n, 1);
sex.splice(n, 1);
sey.splice(n, 1);
sez.splice(n, 1);
}
}
if(type==68){
if(n==-1){
ou1 = [];
ou2 = [];
ou3 = [];
ou4 = [];
ou1a = [];
ou2a = [];
ou3a = [];
ou4a = [];
oux = [];
ouy = [];
ouz = [];
}
else{
ou1.splice(n, 1);
ou2.splice(n, 1);
ou3.splice(n, 1);
ou4.splice(n, 1);
ou1a.splice(n, 1);
ou2a.splice(n, 1);
ou3a.splice(n, 1);
ou4a.splice(n, 1);
oux.splice(n, 1);
ouy.splice(n, 1);
ouz.splice(n, 1);
}
}
if(type==69){
if(n==-1){
rg1 = [];
rg2 = [];
rg3 = [];
rg4 = [];
rg1a = [];
rg2a = [];
rg3a = [];
rg3x = [];
rg3y = [];
rg3z = [];
rg4a = [];
rgx = [];
rgy = [];
rgz = [];
}
else{
rg1.splice(n, 1);
rg2.splice(n, 1);
rg3.splice(n, 1);
rg4.splice(n, 1);
rg1a.splice(n, 1);
rg2a.splice(n, 1);
rg3a.splice(n, 1);
rg3x.splice(n, 1);
rg3y.splice(n, 1);
rg3z.splice(n, 1);
rg4a.splice(n, 1);
rgx.splice(n, 1);
rgy.splice(n, 1);
rgz.splice(n, 1);
}
}
if(type==70){
if(n==-1){
co1 = [];
co2 = [];
co3 = [];
co4 = [];
co1a = [];
co1x = [];
co1y = [];
co1z = [];
co2a = [];
co2x = [];
co2y = [];
co2z = [];
co3a = [];
co3b = [];
co3x = [];
co3y = [];
co3z = [];
co4a = [];
cox = [];
coy = [];
coz = [];
}
else{
co1.splice(n, 1);
co2.splice(n, 1);
co3.splice(n, 1);
co4.splice(n, 1);
co1a.splice(n, 1);
co1x.splice(n, 1);
co1y.splice(n, 1);
co1z.splice(n, 1);
co2a.splice(n, 1);
co2x.splice(n, 1);
co2y.splice(n, 1);
co2z.splice(n, 1);
co3a.splice(n, 1);
co3b.splice(n, 1);
co3x.splice(n, 1);
co3y.splice(n, 1);
co3z.splice(n, 1);
co4a.splice(n, 1);
cox.splice(n, 1);
coy.splice(n, 1);
coz.splice(n, 1);
}
}
if(type==71){
if(n==-1){
dr1 = [];
dr2 = [];
dr3 = [];
dr4 = [];
dr1a = [];
dr2a = [];
dr3a = [];
dr4a = [];
drx = [];
dry = [];
drz = [];
}
else{
dr1.splice(n, 1);
dr2.splice(n, 1);
dr3.splice(n, 1);
dr4.splice(n, 1);
dr1a.splice(n, 1);
dr2a.splice(n, 1);
dr3a.splice(n, 1);
dr4a.splice(n, 1);
drx.splice(n, 1);
dry.splice(n, 1);
drz.splice(n, 1);
}
}
if(type==72){
if(n==-1){
hw1 = [];
hw2 = [];
hw3 = [];
hw4 = [];
hw1a = [];
hw1x = [];
hw1y = [];
hw1z = [];
hw2a = [];
hwxa = [];
hwya = [];
hwza = [];
hw2x = [];
hw2y = [];
hw2z = [];
hw3a = [];
hw4a = [];
hwx = [];
hwy = [];
hwz = [];
}
else{
hw1.splice(n, 1);
hw2.splice(n, 1);
hw3.splice(n, 1);
hw4.splice(n, 1);
hw1a.splice(n, 1);
hw1x.splice(n, 1);
hw1y.splice(n, 1);
hw1z.splice(n, 1);
hw2a.splice(n, 1);
hwxa.splice(n, 1);
hwya.splice(n, 1);
hwza.splice(n, 1);
hw2x.splice(n, 1);
hw2y.splice(n, 1);
hw2z.splice(n, 1);
hw3a.splice(n, 1);
hw4a.splice(n, 1);
hwx.splice(n, 1);
hwy.splice(n, 1);
hwz.splice(n, 1);
}
}
if(type==73){
if(n==-1){
sd1 = [];
sd2 = [];
sd3 = [];
sd4 = [];
sd1a = [];
sd2a = [];
sd3a = [];
sd4a = [];
sd4x = [];
sd4y = [];
sd4z = [];
sdx = [];
sdy = [];
sdz = [];
}
else{
sd1.splice(n, 1);
sd2.splice(n, 1);
sd3.splice(n, 1);
sd4.splice(n, 1);
sd1a.splice(n, 1);
sd2a.splice(n, 1);
sd3a.splice(n, 1);
sd4a.splice(n, 1);
sd4x.splice(n, 1);
sd4y.splice(n, 1);
sd4z.splice(n, 1);
sdx.splice(n, 1);
sdy.splice(n, 1);
sdz.splice(n, 1);
}
}
if(type==74){
if(n==-1){
gr1 = [];
gr2 = [];
gr3 = [];
gr4 = [];
gr1a = [];
gr1b = [];
gr1c = [];
gr1x = [];
gr1y = [];
gr1z = [];
gr2a = [];
gr3a = [];
gr3x = [];
gr3y = [];
gr3z = [];
gr4a = [];
grx = [];
gry = [];
grz = [];
}
else{
gr1.splice(n, 1);
gr2.splice(n, 1);
gr3.splice(n, 1);
gr4.splice(n, 1);
gr1a.splice(n, 1);
gr1b.splice(n, 1);
gr1c.splice(n, 1);
gr1x.splice(n, 1);
gr1y.splice(n, 1);
gr1z.splice(n, 1);
gr2a.splice(n, 1);
gr3a.splice(n, 1);
gr3x.splice(n, 1);
gr3y.splice(n, 1);
gr3z.splice(n, 1);
gr4a.splice(n, 1);
grx.splice(n, 1);
gry.splice(n, 1);
grz.splice(n, 1);
}
}
if(type==75){
if(n==-1){
hass1 = [];
hass2 = [];
hass3 = [];
hass4 = [];
hass1a = [];
hass2a = [];
hass2b = [];
hass2x = [];
hass2y = [];
hass2z = [];
hass3a = [];
hass3b = [];
hass4a = [];
hass4b = [];
}
else{
hass1.splice(n, 1);
hass2.splice(n, 1);
hass3.splice(n, 1);
hass4.splice(n, 1);
hass1a.splice(n, 1);
hass2a.splice(n, 1);
hass2b.splice(n, 1);
hass2x.splice(n, 1);
hass2y.splice(n, 1);
hass2z.splice(n, 1);
hass3a.splice(n, 1);
hass3b.splice(n, 1);
hass4a.splice(n, 1);
hass4b.splice(n, 1);
}
}
if(type==76){
if(n==-1){
sk1 = [];
sk2 = [];
sk3 = [];
sk4 = [];
sk1a = [];
sk2a = [];
sk2b = [];
sk3a = [];
sk4a = [];
skx = [];
sky = [];
skz = [];
}
else{
sk1.splice(n, 1);
sk2.splice(n, 1);
sk3.splice(n, 1);
sk4.splice(n, 1);
sk1a.splice(n, 1);
sk2a.splice(n, 1);
sk2b.splice(n, 1);
sk3a.splice(n, 1);
sk4a.splice(n, 1);
skx.splice(n, 1);
sky.splice(n, 1);
skz.splice(n, 1);
}
}
if(type==77){
if(n==-1){
bl1 = [];
bl2 = [];
bl3 = [];
bl4 = [];
bl1a = [];
bl2a = [];
bl3a = [];
bl4a = [];
blx = [];
bly = [];
blz = [];
}
else{
bl1.splice(n, 1);
bl2.splice(n, 1);
bl3.splice(n, 1);
bl4.splice(n, 1);
bl1a.splice(n, 1);
bl2a.splice(n, 1);
bl3a.splice(n, 1);
bl4a.splice(n, 1);
blx.splice(n, 1);
bly.splice(n, 1);
blz.splice(n, 1);
}
}
if(type==78){
if(n==-1){
sl1 = [];
sl2 = [];
sl3 = [];
sl4 = [];
sl1a = [];
sl2a = [];
sl3a = [];
sl3x = [];
sl3y = [];
sl3z = [];
sl4a = [];
slx = [];
sly = [];
slz = [];
}
else{
sl1.splice(n, 1);
sl2.splice(n, 1);
sl3.splice(n, 1);
sl4.splice(n, 1);
sl1a.splice(n, 1);
sl2a.splice(n, 1);
sl3a.splice(n, 1);
sl3x.splice(n, 1);
sl3y.splice(n, 1);
sl3z.splice(n, 1);
sl4a.splice(n, 1);
slx.splice(n, 1);
sly.splice(n, 1);
slz.splice(n, 1);
}
}
if(type==79){
if(n==-1){
ni1 = [];
ni2 = [];
ni3 = [];
ni4 = [];
ni1a = [];
ni2a = [];
ni3a = [];
ni4a = [];
}
else{
ni1.splice(n, 1);
ni2.splice(n, 1);
ni3.splice(n, 1);
ni4.splice(n, 1);
ni1a.splice(n, 1);
ni2a.splice(n, 1);
ni3a.splice(n, 1);
ni4a.splice(n, 1);
}
}
if(type==80){
if(n==-1){
ge1 = [];
ge2 = [];
ge3 = [];
ge4 = [];
ge1a = [];
ge2a = [];
ge3a = [];
ge4a = [];
}
else{
ge1.splice(n, 1);
ge2.splice(n, 1);
ge3.splice(n, 1);
ge4.splice(n, 1);
ge1a.splice(n, 1);
ge2a.splice(n, 1);
ge3a.splice(n, 1);
ge4a.splice(n, 1);
}
}
if(type==81){
if(n==-1){
dc1 = [];
dc2 = [];
dc3 = [];
dc4 = [];
dc1a = [];
dc2a = [];
dc3a = [];
dc4a = [];
dc4b = [];
dc4c = [];
}
else{
dc1.splice(n, 1);
dc2.splice(n, 1);
dc3.splice(n, 1);
dc4.splice(n, 1);
dc1a.splice(n, 1);
dc2a.splice(n, 1);
dc3a.splice(n, 1);
dc4a.splice(n, 1);
dc4b.splice(n, 1);
dc4c.splice(n, 1);
}
}
if(type==82){
if(n==-1){
mu1 = [];
mu2 = [];
mu3 = [];
mu4 = [];
mu1a = [];
mu2a = [];
mu3a = [];
mu4a = [];
mux = [];
muy = [];
muz = [];
}
else{
mu1.splice(n, 1);
mu2.splice(n, 1);
mu3.splice(n, 1);
mu4.splice(n, 1);
mu1a.splice(n, 1);
mu2a.splice(n, 1);
mu3a.splice(n, 1);
mu4a.splice(n, 1);
mux.splice(n, 1);
muy.splice(n, 1);
muz.splice(n, 1);
}
}
if(type==83){
if(n==-1){
end1 = [];
end2 = [];
end3 = [];
end4 = [];
end1a = [];
end2a = [];
end3a = [];
end4a = [];
endx = [];
endy = [];
endz = [];
}
else{
end1.splice(n, 1);
end2.splice(n, 1);
end3.splice(n, 1);
end4.splice(n, 1);
end1a.splice(n, 1);
end2a.splice(n, 1);
end3a.splice(n, 1);
end4a.splice(n, 1);
endx.splice(n, 1);
endy.splice(n, 1);
endz.splice(n, 1);
}
}
if(type==84){
if(n==-1){
ta1 = [];
ta2 = [];
ta3 = [];
ta4 = [];
ta1a = [];
ta2a = [];
ta3a = [];
ta4a = [];
tax = [];
tay = [];
taz = [];
}
else{
ta1.splice(n, 1);
ta2.splice(n, 1);
ta3.splice(n, 1);
ta4.splice(n, 1);
ta1a.splice(n, 1);
ta2a.splice(n, 1);
ta3a.splice(n, 1);
ta4a.splice(n, 1);
tax.splice(n, 1);
tay.splice(n, 1);
taz.splice(n, 1);
}
}
if(type==85){
if(n==-1){
ru1 = [];
ru2 = [];
ru3 = [];
ru4 = [];
ru1a = [];
ru1b = [];
ru2a = [];
ru3a = [];
ru3x = [];
ru3y = [];
ru3z = [];
ru4a = [];
rux = [];
ruy = [];
ruz = [];
}
else{
ru1.splice(n, 1);
ru2.splice(n, 1);
ru3.splice(n, 1);
ru4.splice(n, 1);
ru1a.splice(n, 1);
ru1b.splice(n, 1);
ru2a.splice(n, 1);
ru3a.splice(n, 1);
ru3x.splice(n, 1);
ru3y.splice(n, 1);
ru3z.splice(n, 1);
ru4a.splice(n, 1);
rux.splice(n, 1);
ruy.splice(n, 1);
ruz.splice(n, 1);
}
}
if(type==86){
if(n==-1){
sw1 = [];
sw2 = [];
sw3 = [];
sw4 = [];
sw1a = [];
sw2a = [];
sw3a = [];
sw4a = [];
sw4b = [];
swx = [];
swy = [];
swz = [];
}
else{
sw1.splice(n, 1);
sw2.splice(n, 1);
sw3.splice(n, 1);
sw4.splice(n, 1);
sw1a.splice(n, 1);
sw2a.splice(n, 1);
sw3a.splice(n, 1);
sw4a.splice(n, 1);
sw4b.splice(n, 1);
swx.splice(n, 1);
swy.splice(n, 1);
swz.splice(n, 1);
}
}
if(type==87){
if(n==-1){
asum1 = [];
asum2 = [];
asum3 = [];
asum4 = [];
asum1a = [];
asum2a = [];
asum3a = [];
asum4a = [];
}
else{
asum1.splice(n, 1);
asum2.splice(n, 1);
asum3.splice(n, 1);
asum4.splice(n, 1);
asum1a.splice(n, 1);
asum2a.splice(n, 1);
asum3a.splice(n, 1);
asum4a.splice(n, 1);
}
}
if(type==88){
if(n==-1){
am1 = [];
am2 = [];
am3 = [];
am4 = [];
am1a = [];
am2a = [];
am3a = [];
am3x = [];
am3y = [];
am3z = [];
am4a = [];
am4b = [];
amx = [];
amy = [];
amz = [];
am4x = [];
am4y = [];
am4z = [];
}
else{
am1.splice(n, 1);
am2.splice(n, 1);
am3.splice(n, 1);
am4.splice(n, 1);
am1a.splice(n, 1);
am2a.splice(n, 1);
am3a.splice(n, 1);
am3x.splice(n, 1);
am3y.splice(n, 1);
am3z.splice(n, 1);
am4a.splice(n, 1);
am4b.splice(n, 1);
amx.splice(n, 1);
amy.splice(n, 1);
amz.splice(n, 1);
am4x.splice(n, 1);
am4y.splice(n, 1);
am4z.splice(n, 1);
}
}
if(type==89){
if(n==-1){
pm1 = [];
pm2 = [];
pm3 = [];
pm4 = [];
pm1a = [];
pm2a = [];
pm3a = [];
pm3b = [];
pmx = [];
pmy = [];
pmz = [];
pm4a = [];
pm4x = [];
pm4y = [];
pm4z = [];
}
else{
pm1.splice(n, 1);
pm2.splice(n, 1);
pm3.splice(n, 1);
pm4.splice(n, 1);
pm1a.splice(n, 1);
pm2a.splice(n, 1);
pm3a.splice(n, 1);
pm3b.splice(n, 1);
pmx.splice(n, 1);
pmy.splice(n, 1);
pmz.splice(n, 1);
pm4a.splice(n, 1);
pm4x.splice(n, 1);
pm4y.splice(n, 1);
pm4z.splice(n, 1);
}
}
if(type==90){
if(n==-1){
hb1 = [];
hb2 = [];
hb3 = [];
hb4 = [];
hb1a = [];
hb2a = [];
hb3a = [];
hb3b = [];
hb4a = [];
hbx = [];
hby = [];
hbz = [];
}
else{
hb1.splice(n, 1);
hb2.splice(n, 1);
hb3.splice(n, 1);
hb4.splice(n, 1);
hb1a.splice(n, 1);
hb2a.splice(n, 1);
hb3a.splice(n, 1);
hb3b.splice(n, 1);
hb4a.splice(n, 1);
hbx.splice(n, 1);
hby.splice(n, 1);
hbz.splice(n, 1);
}
}
if(type==91){
if(n==-1){
sc1 = [];
sc2 = [];
sc3 = [];
sc4 = [];
sc1a = [];
sc1x = [];
sc1y = [];
sc1z = [];
sc2a = [];
sc3a = [];
sc3x = [];
sc3y = [];
sc3z = [];
sc4a = [];
scx = [];
scy = [];
scz = [];
}
else{
sc1.splice(n, 1);
sc2.splice(n, 1);
sc3.splice(n, 1);
sc4.splice(n, 1);
sc1a.splice(n, 1);
sc1x.splice(n, 1);
sc1y.splice(n, 1);
sc1z.splice(n, 1);
sc2a.splice(n, 1);
sc3a.splice(n, 1);
sc3x.splice(n, 1);
sc3y.splice(n, 1);
sc3z.splice(n, 1);
sc4a.splice(n, 1);
scx.splice(n, 1);
scy.splice(n, 1);
scz.splice(n, 1);
}
}
if(type==92){
if(n==-1){
v1 = [];
v2 = [];
v3 = [];
v4 = [];
v1a = [];
v1x = [];
v1y = [];
v1z = [];
vxa = [];
vza = [];
v2a = [];
v3a = [];
v3b = [];
v3x = [];
v3y = [];
v3z = [];
vsin = [];
vcos = [];
v4a = [];
v4b = [];
vx = [];
vy = [];
vz = [];
}
else{
v1.splice(n, 1);
v2.splice(n, 1);
v3.splice(n, 1);
v4.splice(n, 1);
v1a.splice(n, 1);
v1x.splice(n, 1);
v1y.splice(n, 1);
v1z.splice(n, 1);
vxa.splice(n, 1);
vza.splice(n, 1);
v2a.splice(n, 1);
v3a.splice(n, 1);
v3b.splice(n, 1);
v3x.splice(n, 1);
v3y.splice(n, 1);
v3z.splice(n, 1);
vsin.splice(n, 1);
vcos.splice(n, 1);
v4a.splice(n, 1);
v4b.splice(n, 1);
vx.splice(n, 1);
vy.splice(n, 1);
vz.splice(n, 1);
}
}
if(type==93){
if(n==-1){
te1 = [];
te2 = [];
te3 = [];
te4 = [];
te1a = [];
te2a = [];
te2x = [];
te2y = [];
te2z = [];
te3a = [];
te4a = [];
te4b = [];
tex = [];
tey = [];
tez = [];
}
else{
te1.splice(n, 1);
te2.splice(n, 1);
te3.splice(n, 1);
te4.splice(n, 1);
te1a.splice(n, 1);
te2a.splice(n, 1);
te2x.splice(n, 1);
te2y.splice(n, 1);
te2z.splice(n, 1);
te3a.splice(n, 1);
te4a.splice(n, 1);
te4b.splice(n, 1);
tex.splice(n, 1);
tey.splice(n, 1);
tez.splice(n, 1);
}
}
if(type==94){
if(n==-1){
ame1 = [];
ame2 = [];
ame3 = [];
ame4 = [];
ame1a = [];
ame2a = [];
ame2x = [];
ame2y = [];
ame2z = [];
ame3a = [];
ame3b = [];
ame3x = [];
ame3y = [];
ame3z = [];
ame4a = [];
amex = [];
amey = [];
amez = [];
}
else{
ame1.splice(n, 1);
ame2.splice(n, 1);
ame3.splice(n, 1);
ame4.splice(n, 1);
ame1a.splice(n, 1);
ame2a.splice(n, 1);
ame2x.splice(n, 1);
ame2y.splice(n, 1);
ame2z.splice(n, 1);
ame3a.splice(n, 1);
ame3b.splice(n, 1);
ame3x.splice(n, 1);
ame3y.splice(n, 1);
ame3z.splice(n, 1);
ame4a.splice(n, 1);
amex.splice(n, 1);
amey.splice(n, 1);
amez.splice(n, 1);
}
}
if(type==95){
if(n==-1){
sea1 = [];
sea2 = [];
sea3 = [];
sea4 = [];
sea1a = [];
sea2a = [];
sea3a = [];
sea3b = [];
sea3x = [];
sea3y = [];
sea3z = [];
sea4a = [];
sea4b = [];
seax = [];
seay = [];
seaz = [];
}
else{
sea1.splice(n, 1);
sea2.splice(n, 1);
sea3.splice(n, 1);
sea4.splice(n, 1);
sea1a.splice(n, 1);
sea2a.splice(n, 1);
sea3a.splice(n, 1);
sea3b.splice(n, 1);
sea3x.splice(n, 1);
sea3y.splice(n, 1);
sea3z.splice(n, 1);
sea4a.splice(n, 1);
sea4b.splice(n, 1);
seax.splice(n, 1);
seay.splice(n, 1);
seaz.splice(n, 1);
}
}
if(type==96){
if(n==-1){
an1 = [];
an2 = [];
an3 = [];
an4 = [];
an1a = [];
an2a = [];
an2b = [];
an2x = [];
an2y = [];
an2z = [];
an3a = [];
an4a = [];
anx = [];
any = [];
anz = [];
}
else{
an1.splice(n, 1);
an2.splice(n, 1);
an3.splice(n, 1);
an4.splice(n, 1);
an1a.splice(n, 1);
an2a.splice(n, 1);
an2b.splice(n, 1);
an2x.splice(n, 1);
an2y.splice(n, 1);
an2z.splice(n, 1);
an3a.splice(n, 1);
an4a.splice(n, 1);
anx.splice(n, 1);
any.splice(n, 1);
anz.splice(n, 1);
}
}
if(type==97){
if(n==-1){
wh1 = [];
wh2 = [];
wh3 = [];
wh4 = [];
wh1a = [];
wh2a = [];
wh2x = [];
wh2y = [];
wh2z = [];
wh3a = [];
wh3b = [];
wh4a = [];
whx = [];
why = [];
whz = [];
}
else{
wh1.splice(n, 1);
wh2.splice(n, 1);
wh3.splice(n, 1);
wh4.splice(n, 1);
wh1a.splice(n, 1);
wh2a.splice(n, 1);
wh2x.splice(n, 1);
wh2y.splice(n, 1);
wh2z.splice(n, 1);
wh3a.splice(n, 1);
wh3b.splice(n, 1);
wh4a.splice(n, 1);
whx.splice(n, 1);
why.splice(n, 1);
whz.splice(n, 1);
}
}
if(type==98){
if(n==-1){
mt1 = [];
mt2 = [];
mt3 = [];
mt4 = [];
mt1a = [];
mt1b = [];
mt1x = [];
mt1y = [];
mt1z = [];
mt2a = [];
mt3a = [];
mt4a = [];
mt4b = [];
mt4c = [];
mtx = [];
mty = [];
mtz = [];
}
else{
mt1.splice(n, 1);
mt2.splice(n, 1);
mt3.splice(n, 1);
mt4.splice(n, 1);
mt1a.splice(n, 1);
mt1b.splice(n, 1);
mt1x.splice(n, 1);
mt1y.splice(n, 1);
mt1z.splice(n, 1);
mt2a.splice(n, 1);
mt3a.splice(n, 1);
mt4a.splice(n, 1);
mt4b.splice(n, 1);
mt4c.splice(n, 1);
mtx.splice(n, 1);
mty.splice(n, 1);
mtz.splice(n, 1);
}
}
if(type==99){
if(n==-1){
wo1 = [];
wo2 = [];
wo3 = [];
wo4 = [];
wo1a = [];
wo2a = [];
wo3a = [];
wo3b = [];
wo3x = [];
wo3y = [];
wo3z = [];
wo4a = [];
wo4b = [];
wox = [];
woy = [];
woz = [];
}
else{
wo1.splice(n, 1);
wo2.splice(n, 1);
wo3.splice(n, 1);
wo4.splice(n, 1);
wo1a.splice(n, 1);
wo2a.splice(n, 1);
wo3a.splice(n, 1);
wo3b.splice(n, 1);
wo3x.splice(n, 1);
wo3y.splice(n, 1);
wo3z.splice(n, 1);
wo4a.splice(n, 1);
wo4b.splice(n, 1);
wox.splice(n, 1);
woy.splice(n, 1);
woz.splice(n, 1);
}
}