//초능력자 대전(ESP-SB)
//Made by Dark Tornado
//version 7.9.0
/*
© 2014 Dark Tornado All rights reserved.

무단공유&리뷰는 허용하나, 무단수정, 제작자속이기 등을 할 시에는 싸대기 때리러 감.
그리고 무한공유는 허용하나, 비덧공유는 불허함.

능력자 관리 창(ESP Manager)에서는 능력자 전송, 사살, 회복, 능력 활성화/비활성화가 가능하며,
다른 스크립트의 능력자의 경우, 능력 활성화/비활성화는 불가능합니다.

운영자 권한 : 시계&나침반(&명령어)

아이템 이름  사슬투구 사슬갑옷 사슬레깅스 사슬부츠
아이템 코드    302      303       304       304
  쿨타임       10초     20초      20초      2분
   비고       기본기   스킬1     스킬2     궁극기

각성블록은 능력 이름이 적혀있는 표지판+옵시디언입니다.
Mass Titan은 궁극기 쿨타임이 2분 30초 입니다.
Air Bander, The Teleporter의 기본기는 쿨타임이 5초 입니다.
이 스크립트 경우, 15틱을 1초라고 가정하고 만들었습니다.
따라서, 지속시간이나 쿨타임이 전체적으로 3/4로 줄어들어 있습니다.
Dark Tornado jr.은 서버장만 사용해 주시길 바랍니다.
능력제한 푸는법은 안알려줌(?)ㅎㅎ
레벨이 2 이하인 초능력자들은 철칼로 때릴 때, 체력을 1씩 더 떨어뜨립니다.
Water Controller, Air Bander, The Binder는 2차각성이 있습니다.
The Healer는 흑화가 있습니다
2차각성과 흑화는 능력 활성화 시점으로부터 1분뒤이며, 쿨타임이 5분입니다.
2차각성은 체력 10, 흑화는 15을 소모합니다.
인공지능 능력자는 멀티 지원이 되지 않습니다.
정확히는 서버원들에게는 거미로 보입니다.

초능력자 레벨(1~5)
Fire User - 3.5
Water Controller - 2
Nature Guardian- 3
I am Creeper - 5
Soil Master - 4
The Summoner - 2
The Luminous - 2.5
The Darkness - 4
The Freezer - 2
Desert Maker - 2.5
The Vampire - 5
Air Bander - 2.5
I am Elsa - 3
Mass Titan - 3.5
Thunder Breaker - 5
The Binder - 2
The Mechanic - 4
TNT Expert - 5
Trap Creater - 4
The Healer - 2.5
Nether Man - 3
Cloud Manager - 3.5
The Assassin - 4
Arrow Shooter - 2
The Mage - 3
The Defenser - 2.5
Poison Maven - 3.5
Ground Melter - 4.5
Hyper Freezer - 3.5
The Builder - 3
The Soldier - 3.5
The Assaulter - 4
The Burster - 5
The Warrior - 4
Ore Collecter - 3.5
The Rich - 3
The Teleporter - 3.5
Space Warpper - 3
Surround Attacker - 4
Force Shifter - 4.5
I am ReinForce - 5
Magnetism Distorter - 3
I am Steve - 3.5
I am Herobrine - 5
The Hermit - 3
Clay Gatherer - 3.5
I am Kirito - 5
Jungle Former - 3.5
I am Kanade - 5
Time Traveler - 5
The Sniper - 4.5
Zombie Employer - 3
The Necromancer - 4
I am Asuna - 4.5
Holy Knight - 4
Solar Paladin - 4
Lunar Wizard - 4
Hyper Assaulter - 5
Random Ability - 3.5
Reinforce Zwei - 4
The Decorater - 3.5
Hyper Summoner - 3
Climate Changer - 3.5
Remote Raider - 4
Wind Operater - 3.5
Energy Transfer - 3.5
The Genocider - 5
Server Dominator - 5
The Outsider - 4
I am Railgun - 5
Copying Eye - 4
Dragon Trainer - 5
Hawk Eye - 4
The Solidifier - 3.5
Gravity Twister - 4
Hyper Assassin - 5
Silent Killer - 3
Black Slayer - 4
The Slasher - 3.5
Night Worker - 4
Light Gemstone - 2
The Dracula - 5
Mushroom Grower - 3
Ender Girl - 2
Taiga Appearer - 2.5
The Ruiner - 4
Swamp Generater - 3
Arch Summoner - 3
Arch Mage - 3.5
Puella Magica - 2.5
Hyper Builder - 3
Scalar Increaser - 4
Vector Reflacter - 4.5
Tensor Veerer - 5
Arch Mechanic - 4
The Sealer - 3
The Archangel - 4
White Eye - 3.5
Mental Out - 3
World Editor - 3

Water Controller sr. - 4.5
Air Bander sr. - 4.5
The Binder sr. - 4.5

Dark Healer - 4

Fire Expert - 3.5

Dark Tornado jr. - 5.5(6)

Electric Current - 4
The Shader - 5


//-----------
version 0.4.3+
불-268(나무칼)-269(나무삽)-270(나무 곡괭이)-271(나무도끼)
물-272(돌칼)-273(돌삽)-274(돌곡괭이)-275(돌도끼)
나무-280(막대기)-281(그릇)-288(깃털)-289(화약)
크리퍼-가죽세트(298~301)
흙-290(나무괭이)-291(돌괭이)-292(철괭이)-294(금괭이)
소환-금갑빠세트(314~317)
빛-레드스톤-눈덩이-가죽-점토벽돌(331, 332, 334, 336)
어둠-석탄-다이아-철-금(263~266)
얼음-부싯돌(318)-밀(296)-종이(339)-발광석 가루(348)
*/

//Item
ModPE.setItem(511, "book_writable", 0, "Dark Tornado's Book");

//blocks
Block.defineBlock(250, "Cyan Time Stone", [["end_stone", 0]]);
Block.setColor(250, [0x00ffff]);
Block.setLightLevel(250, 10);
Block.setDestroyTime(250, -1);
Block.setExplosionResistance(250, 6000);
Block.defineBlock(251, "Red Time Stone", [["end_stone", 0]]);
Block.setColor(251, [0xff44aa]);
Block.setLightLevel(251, 10);
Block.setDestroyTime(251, -1);
Block.setExplosionResistance(251, 6000);
Block.defineBlock(252, "Time Pillar", [["quartz_block", 4], ["quartz_block", 4], ["quartz_block", 3], ["quartz_block", 3], ["quartz_block", 3], ["quartz_block", 3]]);
Block.setColor(252, [0x00ffff]);
Block.setLightLevel(252, 5);
Block.setDestroyTime(252, -1);
Block.setExplosionResistance(252, 6000);
Block.defineBlock(242, "Time Jump Stone", [["quartz_block", 5]]);
Block.setColor(242, [0xff00ff]);
Block.setLightLevel(242, 15);
Block.setDestroyTime(242, -1);
Block.setExplosionResistance(242, 6000);
Block.defineBlock(69, "Quartz Ore", [["quartz_ore", 0]]);
Block.defineBlock(70, "Soul Sand", [["soul_sand", 0]]);
Block.setDestroyTime(69, 1.5);
Block.setDestroyTime(70, 0.1);
Block.defineBlock(241, "ESI Stone", [["quartz_block", 5]]);
Block.setColor(241, [0xffff00]);
Block.setShape(241, 0.01, 0.15, 0.01, 0.99, 0.85, 0.99);
Block.setLightLevel(241, 15);
Block.setDestroyTime(241, -1);
Block.setExplosionResistance(241, 6000);
Block.defineBlock(240, "ESI Stone 2", [["quartz_block", 5]]);
Block.setColor(240, [0xffff00]);
Block.setShape(240, 0.3, -1.5, 0.3, 0.7, 0.5, 0.7);
Block.setLightLevel(240, 15);
Block.setDestroyTime(240, -1);
Block.setExplosionResistance(240, 6000);
Block.defineBlock(239, "Link Stone", [["quartz_block", 0]]);
Block.setColor(239, [0x00ffff]);
Block.setShape(239, 0.3, 0, 0.3, 0.7, 1, 0.7);
Block.setLightLevel(239, 15);
Block.setDestroyTime(239, -1);
Block.setExplosionResistance(239, 6000);
Block.defineBlock(238, "Cyan Stone", [["quartz_block", 0]]);
Block.setColor(238, [0x00ffff]);
Block.setShape(238, 0, 0, 0, 1, 0.999, 1);
Block.setLightLevel(238, 8);
Block.setDestroyTime(238, -1);
Block.setExplosionResistance(238, 6000);
Block.defineBlock(237, "Green Stone", [["quartz_block", 0]]);
Block.setColor(237, [0x00ff00]);
Block.setLightLevel(237, 8);
Block.setDestroyTime(237, -1);
Block.setExplosionResistance(237, 6000);
Block.defineBlock(236, "Link Stone : on", [["quartz_block", 0]]);
Block.setColor(236, [0xffaaff]);
Block.setLightLevel(236, 5);
Block.setDestroyTime(236, 1);
Block.setExplosionResistance(236, 500);
Block.defineBlock(235, "Push Stone", [["quartz_block", 0]]);
Block.setColor(235, [0xaaffff]);
Block.setLightLevel(235, 5);
Block.setDestroyTime(235, 1);
Block.setExplosionResistance(235, 500);
Block.defineBlock(233, "Spell Stone : off", [["end_stone", 0]]);
Block.setColor(233, [0x89ff89]);
Block.setLightLevel(233, 15);
Block.setDestroyTime(233, 5);
Block.setExplosionResistance(233, 500);
Block.defineBlock(234, "Spell Stone : off", [["end_stone", 0]]);
Block.setColor(234, [0x45dd45]);
Block.setDestroyTime(234, 5);
Block.setExplosionResistance(234, 500);
Block.defineBlock(232, "Link Stone : off", [["quartz_block", 0]]);
Block.setColor(232, [0xffaaff]);
Block.setDestroyTime(232, 1);
Block.setExplosionResistance(232, 500);


//recipe
try{
var verss = ModPE.getMinecraftVersion().toString().split(".");
if(Number(verss[1])>=12){
Item.addShapedRecipe(511, 1, 0, ["   ", " i ", "   "], ["i", 340, 0]);
Item.addShapedRecipe(320, 8, 0, ["   ", " i ", "   "], ["i", 511, 0]);
Item.addShapedRecipe(49, 1, 0, ["   ", " i ", "   "], ["i", 511, 0]);
Item.addShapedRecipe(246, 1, 0, ["   ", " i ", "   "], ["i", 511, 0]);
Item.addShapedRecipe(19, 1, 0, ["   ", " i ", "   "], ["i", 511, 0]);
Item.addShapedRecipe(351, 1, 0, ["   ", " i ", "   "], ["i", 511, 0]);
Item.addShapedRecipe(329, 1, 0, ["   ", " i ", "   "], ["i", 511, 0]);
Item.addShapedRecipe(302, 1, 0, ["   ", " i ", "   "], ["i", 511, 0]);
Item.addShapedRecipe(303, 1, 0, ["   ", " i ", "   "], ["i", 511, 0]);
Item.addShapedRecipe(304, 1, 0, ["   ", " i ", "   "], ["i", 511, 0]);
Item.addShapedRecipe(305, 1, 0, ["   ", " i ", "   "], ["i", 511, 0]);
}
else{
addRecipes();
}
}
catch(e){
addRecipes();
}
function addRecipes(){
Item.addCraftRecipe(511, 1, 0, [340, 1, 0]);
Item.addCraftRecipe(320, 8, 0, [511, 1, 0]);
Item.addCraftRecipe(49, 1, 0, [511, 1, 0]);
Item.addCraftRecipe(246, 1, 0, [511, 1, 0]);
Item.addCraftRecipe(19, 1, 0, [511, 1, 0]);
Item.addCraftRecipe(351, 2, 0, [511, 1, 0]);
Item.addCraftRecipe(329, 2, 0, [511, 1, 0]);
Item.addCraftRecipe(302, 1, 0, [511, 1, 0]);
Item.addCraftRecipe(303, 1, 0, [511, 1, 0]);
Item.addCraftRecipe(304, 1, 0, [511, 1, 0]);
Item.addCraftRecipe(305, 1, 0, [511, 1, 0]);
}

//else
/*
Player.addItemCreativeInv(246, 1, 0);
Player.addItemCreativeInv(511, 1, 0);
Player.addItemCreativeInv(329, 1, 0);
Player.addItemCreativeInv(305, 1, 0);
Player.addItemCreativeInv(304, 1, 0);
Player.addItemCreativeInv(303, 1, 0);
Player.addItemCreativeInv(302, 1, 0);
Player.addItemCreativeInv(70, 1, 0);
Player.addItemCreativeInv(69, 1, 0);
Player.addItemCreativeInv(242, 1, 0);
Player.addItemCreativeInv(252, 1, 0);
Player.addItemCreativeInv(251, 1, 0);
Player.addItemCreativeInv(250, 1, 0);
Player.addItemCreativeInv(236, 1, 0);
Player.addItemCreativeInv(232, 1, 0);
Player.addItemCreativeInv(235, 1, 0);
Player.addItemCreativeInv(234, 1, 0);
Player.addItemCreativeInv(233, 1, 0);
*/

ModPE.overrideTexture("images/mob/darkTornado.png", "http:\/\/darktornado.dothome.co.kr\/000+\/darkTornado.png");



var admin = 0;
var admin2 = 0;
var fill = false;
var adx = null;
var ady = null;
var adz = null;
var gun = null;
var tym = false;
var ad1 = false;
var ad1a = 0;
var ho = false;
var ad;
var adt = 0;
var adH = 20;
var adt1 = 0;
var adt2 = 0;
var adt3 = 0;
var adt4 = 0;
var adsc = false;
var hhhhh = 0;
var cree = new Array(5);
var mchh = new Array(2);
var wl = {
t : 0, o : 0, pn : new Array(),
bgm  : new android.media.MediaPlayer(),
m : function(m){
clientMessage("<???> "+m);
}

};
var exp = {
onoff : false, c : 0, x : null, y : null, z : null
};
var p = {party : [], c : []};
var Party = {
isSame : function(p1, p2){
for(var n in p.party){
if(p.party[n].indexOf(p1)!=-1&&p.party[n].indexOf(p2)!=-1)
return true;
}
return false;
},
heal : function(pp, pn){
for each(var e in p.party[pn]){
if(pp!=e)
Entity.setHealth(e, Entity.getHealth(e)+6);
}
Entity.setHealth(pp, Entity.getHealth(pp)-6);
p.c[pn] = 450;
},
getParty : function(pp){
for(var n in p.party){
if(p.party[n].indexOf(pp)!=-1)
return n;
}
return -1;
},
isBlock : function(x, y, z){
if(getTile(x, y, z)==133&&getTile(x+1, y, z)==98&&getTile(x-1, y, z)==98&&getTile(x, y, z+1)==98&&getTile(x, y, z-1)==98&&getTile(x+1, y, z+1)==22&&getTile(x+1, y, z-1)==22&&getTile(x-1, y, z+1)==22&&getTile(x-1, y, z-1)==22){
return true;
}
else{
return false;
}
},
makeHouse : function(x, y, z){
setTile(x-3, y, z-3, 98);
setTile(x-3, y, z-2, 109);
setTile(x-3, y, z-1, 109);
setTile(x-3, y, z, 109);
setTile(x-3, y, z+1, 109);
setTile(x-3, y, z+2, 109);
setTile(x-3, y, z+3, 98);
setTile(x-3, y+1, z-3, 98);
setTile(x-3, y+1, z+3, 98);
setTile(x-3, y+2, z-3, 98);
setTile(x-3, y+2, z+3, 98);
setTile(x-3, y+3, z-3, 98);
setTile(x-3, y+3, z+3, 98);
setTile(x-3, y+4, z-3, 98, 3);
setTile(x-3, y+4, z-2, 98);
setTile(x-3, y+4, z-1, 98);
setTile(x-3, y+4, z, 98);
setTile(x-3, y+4, z+1, 98);
setTile(x-3, y+4, z+2, 98);
setTile(x-3, y+4, z+3, 98, 3);
setTile(x-2, y, z-3, 109, 2);
setTile(x-2, y, z-2, 22);
setTile(x-2, y, z-1, 98);
setTile(x-2, y, z, 98);
setTile(x-2, y, z+1, 98);
setTile(x-2, y, z+2, 22);
setTile(x-2, y, z+3, 109, 3);
setTile(x-2, y+4, z-3, 98);
setTile(x-2, y+4, z+3, 98);
setTile(x-2, y+5, z-2, 44, 5);
setTile(x-2, y+5, z-1, 44, 5);
setTile(x-2, y+5, z, 44, 5);
setTile(x-2, y+5, z+1, 44, 5);
setTile(x-2, y+5, z+2, 44, 5);
setTile(x-1, y, z-3, 109, 2);
setTile(x-1, y, z-2, 98);
setTile(x-1, y, z-1, 22);
setTile(x-1, y, z, 98);
setTile(x-1, y, z+1, 22);
setTile(x-1, y, z+2, 98);
setTile(x-1, y, z+3, 109, 3);
setTile(x-1, y+4, z-3, 98);
setTile(x-1, y+4, z+3, 98);
setTile(x-1, y+5, z-2, 44, 5);
setTile(x-1, y+5, z-1, 44, 13);
setTile(x-1, y+5, z, 44, 13);
setTile(x-1, y+5, z+1, 44, 13);
setTile(x-1, y+5, z+2, 44, 5);
setTile(x, y, z-3, 109, 2);
setTile(x, y, z-2, 98);
setTile(x, y, z-1, 98);
setTile(x, y, z, 133);
setTile(x, y, z+1, 98);
setTile(x, y, z+2, 98);
setTile(x, y, z+3, 109, 3);
setTile(x, y+4, z-3, 98);
setTile(x, y+4, z+3, 98);
setTile(x, y+5, z-2, 44, 5);
setTile(x, y+5, z-1, 44, 13);
setTile(x, y+5, z, 89);
setTile(x, y+5, z+1, 44, 13);
setTile(x, y+5, z+2, 44, 5);
setTile(x, y+6, z, 44, 5);
setTile(x+1, y, z-3, 109, 2);
setTile(x+1, y, z-2, 98);
setTile(x+1, y, z-1, 22);
setTile(x+1, y, z, 98);
setTile(x+1, y, z+1, 22);
setTile(x+1, y, z+2, 98);
setTile(x+1, y, z+3, 109, 3);
setTile(x+1, y+4, z-3, 98);
setTile(x+1, y+4, z+3, 98);
setTile(x+1, y+5, z-2, 44, 5);
setTile(x+1, y+5, z-1, 44, 13);
setTile(x+1, y+5, z, 44, 13);
setTile(x+1, y+5, z+1, 44, 13);
setTile(x+1, y+5, z+2, 44, 5);
setTile(x+2, y, z-3, 109, 2);
setTile(x+2, y, z-2, 22);
setTile(x+2, y, z-1, 98);
setTile(x+2, y, z, 98);
setTile(x+2, y, z+1, 98);
setTile(x+2, y, z+2, 22);
setTile(x+2, y, z+3, 109, 3);
setTile(x+2, y+4, z-3, 98);
setTile(x+2, y+4, z+3, 98);
setTile(x+2, y+5, z-2, 44, 5);
setTile(x+2, y+5, z-1, 44, 5);
setTile(x+2, y+5, z, 44, 5);
setTile(x+2, y+5, z+1, 44, 5);
setTile(x+2, y+5, z+2, 44, 5);
setTile(x+3, y, z-3, 98);
setTile(x+3, y, z-2, 109, 1);
setTile(x+3, y, z-1, 109, 1);
setTile(x+3, y, z, 109, 1);
setTile(x+3, y, z+1, 109, 1);
setTile(x+3, y, z+2, 109, 1);
setTile(x+3, y, z+3, 98);
setTile(x+3, y+1, z-3, 98);
setTile(x+3, y+1, z+3, 98);
setTile(x+3, y+2, z-3, 98);
setTile(x+3, y+2, z+3, 98);
setTile(x+3, y+3, z-3, 98);
setTile(x+3, y+3, z+3, 98);
setTile(x+3, y+4, z-3, 98, 3);
setTile(x+3, y+4, z-2, 98);
setTile(x+3, y+4, z-1, 98);
setTile(x+3, y+4, z, 98);
setTile(x+3, y+4, z+1, 98);
setTile(x+3, y+4, z+2, 98);
setTile(x+3, y+4, z+3, 98, 3);
setTile(x+3, y+5, z-3, 50, 5);
setTile(x+3, y+5, z+3, 50, 5);
setTile(x+3, y+3, z-2, 50, 3);
setTile(x+3, y+3, z+2, 50, 4);
setTile(x+2, y+3, z-3, 50, 2);
setTile(x+2, y+3, z+3, 50, 2);
setTile(x-3, y+3, z-2, 50, 3);
setTile(x-3, y+3, z+2, 50, 4);
setTile(x-3, y+5, z-3, 50, 5);
setTile(x-3, y+5, z+3, 50, 5);
setTile(x-2, y+3, z-3, 50, 1);
setTile(x-2, y+3, z+3, 50, 1);
setTile(x, y+1, z, 0);
},
openManager : function(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var menuP = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Party\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
var button = new Array();
for(var n in p.party){
button[n] = new android.widget.Button(ctx);
button[n].setText("Party "+n);
button[n].setId(n);
button[n].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
Party.openParty(v.getId());
}
});
layout.addView(button[n]);
}
var padd = new android.widget.Button(ctx);
padd.setText("New Party");
padd.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.toast("Party "+p.party.length+" was added.");
p.party.push(new Array());
}
});
layout.addView(padd);
var preset = new android.widget.Button(ctx);
preset.setText("Remove All");
preset.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
p.party = new Array();
ESP.toast("Every party was removed.");
}
});
layout.addView(preset);
var exit = new android.widget.Button(ctx);
exit.setText("EXIT");
exit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(menuP!=null){
menuP.dismiss();
menuP = null;
}
}
});
layout.addView(exit);
var scroll = makeScroll(layout,menuP);
menuP.setContentView(scroll);
menuP.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menuP.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
},
openParty : function(n){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var partyMember = new Array();
for(var nn in p.party[n])
partyMember.push(" "+Player.getName(p.party[n][nn]));
var text = new android.widget.TextView(ctx);
text.setText("  파티원 수 : "+partyMember.length+"명\n  파티원 :"+partyMember);
text.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
var padd = new android.widget.Button(ctx);
padd.setText("파티원 추가");
padd.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
Party.selectPlayer(n, true);
ESP.toast("파티원이 될 플레이어를 선택하세요.");
}
});
var premove = new android.widget.Button(ctx);
premove.setText("파티원 삭제");
premove.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
Party.selectPlayer(n, false);
ESP.toast("제외할 파티원을 선택하세요.");
}
});
var pdelete = new android.widget.Button(ctx);
pdelete.setText("파티 삭제");
pdelete.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.toast("Party "+n+"(이)가 삭제되었습니다.");
p.party.splice(p.party.indexOf(p.party[n]), 1);
}
});
layout.addView(padd);
layout.addView(premove);
layout.addView(pdelete);
var dialog = makeDialog("Party "+n, layout, "확인", null);
dialog.show();
}
catch(e){
ESP.sbm(e+", "+e.lineNumber);
}
}
}));
},
selectPlayer : function(nn, tf){
ctx.runOnUiThread(new java.lang.Runnable({
run : function(){
try{
var playerTarget = null;
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
if(tf==true){
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e))
players.push(e);
}
for(var n in players){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
playerTarget = players[checkedId];
}
}));
}
else if(tf==false){
for(var n=0;n<p.party[nn].length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(p.party[nn][n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
playerTarget = p.party[nn][checkedId];
}
}));
}
layout.addView(radios);
var dialog = makeDialog("플래이어 선택", layout, "취소", null, "확인", function(){
if(tf==true){
p.party[nn].push(playerTarget);
ESP.toast(Player.getName(playerTarget)+"가 추가되었습니다.");
}
else if(tf==false){
p.party[nn].splice(p.party[nn].indexOf(playerTarget), 1);
ESP.toast(Player.getName(playerTarget)+"가 삭제되었습니다.");
}
});
dialog.show();
}
catch(e) {
clientMessage(e+", "+e.lineNumber);
}
}
}));
}


};
var ra = {
p : new Array(), t : 0, x : null, y : null, z : null, t2 : null, t3 : 0,
n : ["Fire User", "Water Controller", "Nature Guardian", "I am Creeper", "Soil Master", "The Summoner", "The Luminous", "The Darkness", "The Freezer", "Desert Maker", "The Vampire", "Air Bander", "I am Elsa", "Mass Titan", "Thunder Breaker", "The Binder", "The Mechanic", "TNT Expert", "Trap Creater", "The Healer", "Nether Man", "Cloud Manager", "The Assassin", "Arrow Shooter", "The Mage", "The Defenser", "Poison Maven", "Ground Melter", "Hyper Freezer", "The Builder", "The Soldier", "The Assaulter", "The Burster", "The Warrior", "Ore Collecter", "The Rich", "The Teleporter", "Space Warpper", "Surround Attacker", "Force Shifter", "I am Reinforce", "Magnetism Distorter", "I am Steve", "I am Herobrine", "The Hermit", "Clay Gatherer", "I am Kirito", "Jungle Former", "I am Kanade", "Time Traveler", "The Sniper", "Zombie Employer", "The Necromancer", "I am Asuna", "Holy Knight", "Solar Paladin", "Lunar Wizard", "Hyper Assaulter", "Random Ability", "Reinforce Zwei", "The Decorater", "Hyper Summoner", "Climate Changer", "Remote Raider", "Wind Operater", "Energy Transfer", "The Genocider", "Server Dominator", "The Outsider", "I am Railgun", "Copying Eye", "Dragon Trainer", "Hawk Eye", "The Solidifier", "Gravity Twister", "Hyper Assassin", "Silent Killer", "Black Slayer", "The Slasher", "Night Worker", "Light Gemstone", "The Dracula", "Mushroom Grower", "Ender Girl", "Taiga Appearer", "The Ruiner", "Swamp Generater", "Arch Summoner", "Arch Mage", "Puella Magica", "Hyper Builder", "Scalar Increaser", "Vector Reflacter", "Tensor Veerer", "Arch Mechanic", "The Sealer", "The Archangel", "White Eye", "Mental Out", "World Editor"]
};
var espCode = ["fire", "water", "tree", "creeper", "soil", "summon", "light", "dark",  "ice",  "sand",  "blood",  "air",  "elsa",  "titan",  "thunder",  "bind",  "meca",  "tnt",  "trap",  "heal",  "nether",  "cloud",  "assassin",  "arrow",  "mage",  "defense",  "poison",  "melt",  "hfreeze",  "builder",  "soldier",  "assault",  "burst",  "warrior",  "ore",  "rich",  "tp",  "space",  "sattack",  "force", "rein", "magnet", "steve", "hero", "hermit", "clay", "kirito", "jungle", "kanade", "time", "snipe", "zombie", "necro", "asuna", "holy", "solar", "lunar", "has", "random", "zwei", "deco", "hsum", "climate", "raid", "wind", "energy", "geno", "server", "out", "rgun", "copy", "dragon", "hawk", "solid", "gravity", "hass", "sikill", "black", "slash", "night", "gem", "dra", "mush", "ender", "taiga", "ruin", "swamp", "asum", "amage", "puella", "hbuild", "scalar", "vector", "tensor", "ameca", "seal", "angel", "white", "mental", "world"];
var espCodes = ["fire[0]", "water[0]", "tree[0]", "creeper[0]", "soil[0]", "summon[0]", "light[0]", "dark[0]",  "ice[0]",  "sand[0]",  "blood[0]",  "air[0]",  "elsa[0]",  "titan[0]",  "thunder[0]",  "bind[0]",  "meca[0]",  "tnt[0]",  "trap[0]",  "heal[0]",  "nether[0]",  "cloud[0]",  "assassin[0]",  "arrow[0]",  "mage[0]",  "defense[0]",  "poison[0]",  "melt[0]",  "hfreeze[0]",  "builder[0]",  "soldier[0]",  "assault[0]",  "burst[0]",  "warrior[0]",  "ore[0]",  "rich[0]",  "tp[0]",  "space[0]",  "sattack[0]",  "force[0]", "rein[0]", "magnet[0]", "steve[0]", "hero[0]", "hermit[0]", "clay[0]", "kirito[0]", "jungle[0]", "kanade[0]", "time[0]", "snipe[0]", "zombie[0]", "necro[0]", "asuna[0]", "holy[0]", "solar[0]", "lunar[0]", "has[0]", "random[0]", "zwei[0]", "deco[0]", "hsum[0]", "climate[0]", "raid[0]", "wind[0]", "energy[0]", "geno[0]", "server[0]", "out[0]", "rgun[0]", "copy[0]", "dragon[0]", "hawk[0]", "solid[0]", "gravity[0]", "hass", "sikill", "black", "slash", "night", "gem", "dra", "mush", "ender", "taiga", "ruin", "swamp", "asum", "amage", "puella", "hbuild", "scalar", "vector", "tensor", "ameca", "seal", "angel", "white", "mental", "world"];
var srs = [1, 11, 15, 19];
var sb2Code = ["t2hor", "w2ater", "k2ill", "m2isaka", "e2lsa", "p2ush", "f2ire", "f2aster", "k2ick", "t2ree", "l2ava", "b2ind", "s2and"];
var wizardCode = ["wfire", "wwater", "wtree", "wair", "wburst", "wearth", "wlight", "wdark", "wbind", "wlightn"];


var mp = false;
var mp2 = false;
var mp3 = false;
var mpk = false;
var auto = false;
var expl = -1;
var lang = 0;
var espch = new Array(3);
var item = getCarriedItem;
var version;
var espn;
var fixt = 0;
var mcpev = false;
var passOnoff = false;
var town = false;
var espOnoff = false;
var streetLight = false;
var slt = 0;
var slt2 = false;
var darkRender = Renderer.createHumanoidRenderer();
addDarkRender(darkRender);
var mcpev3 = false;
var mcpev4 = false;


var se = {
tf : false,
menus : ["ESP off", "Send ESP", "Kill ESP", "Heal ESP"], locate : 0,
demon : undefined, d1 : 0, d2 : 0, d3 : 0, d4 : 0,
dx : undefined, dy : null, dz : null,
burst : undefined, b1 : 0, b2 : 0, b3 : 0, b4 : 0,
bx : undefined, by : null, bz : null,
geno : undefined, g1 : 0, g2 : 0, g3 : 0, g4 : 0,
lolita : undefined, l1 : 0, l2 : 0, l3 : 0, l4 : 0,
avenge : undefined, a1 : 0, a2 : 0, a3 : 0, a4 : 0, a4a : null,
hide : undefined, h1 : 0, h2 : 0, h3 : 0, h4 : 0,
gamble : undefined, ga1 : 0, ga2 : 0, ga3 : 0, ga4 : 0,
gr : undefined,
reaper : undefined, r1 : 0, r2 : 0, r3 : 0, r4 : 0,
rx : undefined, ry : null, rz : null,
ima : undefined, i1 : 0, i2 : 0, i3 : 0, i4 : 0,
i2a : undefined, ix : null, iy : null, iz : null,
over : undefined, o1 : 0, o2 : 0, o3 : 0, o4 : 0,
or : new Array(), or2 : null,
bls : undefined, bl1 : 0, bl2 : 0, bl3 : 0, bl4 : 0,
bl3a : false, blx : null, bly : null, blz : null,
c : undefined, c1 : 0, c2 : 0, c3 : 0, c4 : 0,
doctor : undefined, do1 : 0, do2 : 0, do3 : 0, do4 : 0,
htp : undefined, ht1 : 0, ht2 : 0, ht3 : 0, ht4 : 0,
ht3a : false, hx : null, hy : null, hz : null,
evil : undefined, e1 : 0, e2 : 0, e3 : 0, e4 : 0,
exa : undefined, eza : null, ex : null, ey : null, ez : null,
code : ["se.demon", "se.burst", "se.geno", "se.lolita", "se.avenge", "se.hide", "se.gamble", "se.reaper", "se.ima", "se.over", "se.bls", "se.c", "se.doctor", "se.htp", "se.evil"]

};

var dc = {
p : new Array(),
c : new Array(),
t : new Array()
};

var he = {
on : false,
names : ["Electric Current", "The Shader", "Tornado Striker", "Buf Exerter", "The X"],
menus : ["ESP off", "Send ESP", "Kill ESP", "Heal ESP"],
elect : undefined,
shade : undefined,
torn : undefined,
buf : undefined,
x : undefined,
e1 : 0, e2 : 0, e3 : 0, e4 : 0,
e3a : false, e3b : 0, e3x : null, e3y : null, e3z : null,
ex : null, ey : null, ez : null,
s1 : 0, s2 : 0, s3 : 0, s4 : 0,
s2a : null, s4a : new Array(),
t1 : 0, t2 : 0, t3 : 0, t4 : 0,
tx : null, ty : null, tz : null,
b1 : 0, b2 : 0, b3 : 0, b4 : 0,
b3a : null, b4a : null,
x1 : 0, x2 : 0, x3 : 0, x4 : 0,
xx : null, xy : null, xz : null

};

var pa = {sin : null, cos : null, n : 0};
var dt = {p : undefined, tf : false, f : false, t : 0, ek : 1, r : null, x : null, y : null, z : null, s : null, c : null, n : 0, sin : null, cos : null, s2 : null, c2 : null, l : false};

var r = {x : null, y : null, z : null, n : 0};

const ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
const sdcard = android.os.Environment.getExternalStorageDirectory().getAbsolutePath();
var media = new android.media.MediaPlayer();
var bgm = new android.media.MediaPlayer();
var btn = null;
var btnTime = null;
var btnSS = null;
var btnPlayer = null;
var menu = null;
var menu2 = null;
var menu3 = null;
var menu4 = null;
var menu5 = null;
var menu6 = null;
var menu7 = null;
var menu8 = null;
var menu9 = null;
var menu10 = null;
var menu11 = null;
var menu12 = null;
var menu13 = null;
var menuP = null;
var menuS = null;
var menuH = null;
var menuI = null;
var menuD = null;
var locate = 0;
var emcolor = 0;
var adding = false;
var addid, addamount, adddemage;
var playerTarget;
var espN = null;
var p0w = new Array(2);
var bgmOnoff = false;
var bgmTime = 0;
var themeSong = false;
var dn = null;
var d2 = null;
var multi = false;
var banList = new Array();
var banData = new Array();
var banName = new Array();
var tttt = new Array();


var dtj;
var dtl = false;
var dtla = 0;
var dt1 = false;
var dt2 = false;
var dt3 = false;
var dt4 = false;
var dt1a = 0;
var dt2a = 0;
var dt3a = 0;
var dt4a = 0;
var dtx, dtz, dtz = null;

var fe;
var fe1 = false;
var fe2 = false;
var fe3 = false;
var fe4 = false;
var fe1a = 0;
var fexa, feza = null;
var fe2a = 0;
var fe2x, fe2y, fe2z = null;
var fe3a = 0;
var fe4a = 0;
var fe4b = false;
var fex, fey, fez = null;


var fire = new Array();
var water = new Array();
var tree = new Array();
var creeper = new Array();
var soil = new Array();
var summon = new Array();
var light = new Array();
var dark = new Array();
var ice = new Array();
var sand = new Array();
var blood = new Array();
var air = new Array();
var thunder = new Array();
var elsa = new Array();
var titan = new Array();
var bind = new Array();
var meca = new Array();
var tnt = new Array();
var trap = new Array();
var heal = new Array();
var nether = new Array();
var cloud = new Array();
var assassin = new Array();
var arrow = new Array();
var mage = new Array();
var defense = new Array();
var poison = new Array();
var melt = new Array();
var hfreeze = new Array();
var builder = new Array();
var soldier = new Array();
var assault = new Array();
var burst = new Array();
var warrior = new Array();
var ore = new Array();
var rich = new Array();
var tp = new Array();
var space = new Array();
var sattack = new Array();
var force = new Array();
var rein = new Array();
var magnet = new Array();
var steve = new Array();
var hero = new Array();
var hermit = new Array();
var clay = new Array();
var kirito = new Array();
var jungle = new Array();
var kanade = new Array();
var time = new Array();
var snipe = new Array();
var zombie = new Array();
var necro = new Array();
var asuna = new Array();
var holy = new Array();
var solar = new Array();
var lunar = new Array();
var has = new Array();
var random = new Array();
var zwei = new Array();
var deco = new Array();
var hsum = new Array();
var climate = new Array();
var raid = new Array();
var wind = new Array();
var energy = new Array();
var geno = new Array();
var server = new Array();
var out = new Array();
var rgun = new Array();
var copy = new Array();
var dragon = new Array();
var hawk = new Array();
var solid = new Array();
var gravity = new Array();
var sikill;
var hass;
var black;
var slash;
var night;
var gem;
var dra;
var mush;
var ender;
var taiga;
var ruin;
var swamp;
var asum;
var amage;
var puella;
var hbuild;
var scalar;
var vector;
var tensor;
var ameca;
var seal;
var angel;
var white;
var mental;
var world;


var f1 = new Array();
var f2 = new Array();
var f2x = new Array();
var f2y = new Array();
var f2z = new Array();
var f3 = new Array();
var f4 = new Array();
var f1a = new Array();
var f2a = new Array();
var f3a = new Array();
var f4a = new Array();
var f4b = new Array();
var f4c = new Array();
var f4d = new Array();
var fx = new Array();
var fy = new Array();
var fz = new Array();

var w1 = new Array();
var w2 = new Array();
var w3 = new Array();
var w4 = new Array();
var w1a = new Array();
var w2a = new Array();
var w3a = new Array();
var w4a = new Array();
var w1b = new Array();
var w1c = new Array();
var wx = new Array();
var wy = new Array();
var wz = new Array();
var w4b = new Array();
var w4c = new Array();
var wxa = new Array();
var wya = new Array();
var wza = new Array();
var w3b = new Array();
var w3c = new Array();
var wxb = new Array();
var wyb = new Array();
var wzb = new Array();
var w2x = new Array();
var w2y = new Array();
var w2z = new Array();
var water2 = false;
var w1aa = 0;
var w1x, w1y, w1z = null;
var w2aa = 0;
var w3aa = 0;
var w3ab = false;
var w3x, w3y, w3z = null;
var w4aa = false;
var w5 = -1;
var w5a = 0;

var t1 = new Array();
var t2 = new Array();
var t3 = new Array();
var t4 = new Array();
var t1a = new Array();
var t2a = new Array();
var t3a = new Array();
var t3b = new Array();
var t3x = new Array();
var t3y = new Array();
var t3z = new Array();
var t4a = new Array();
var t4b = new Array();
var tx = new Array();
var ty = new Array();
var tz = new Array();

var c1 = new Array();
var c2 = new Array();
var c3 = new Array();
var c4 = new Array();
var c1a = new Array();
var c2a = new Array();
var c2x = new Array();
var c2y = new Array();
var c2z = new Array();
var c3a = new Array();
var c4a = new Array();
var c1b = new Array();
var c1c = new Array();
var c1d = new Array();
var cx = new Array();
var cy = new Array();
var cz = new Array();
var c1e = new Array();
var c1f = new Array();
var cx1 = new Array();
var cy1 = new Array();
var cz1 = new Array();
var cx2 = new Array();
var cy2 = new Array();
var cz2 = new Array();
var cx3 = new Array();
var cy3 = new Array();
var cz3 = new Array();

var s1 = new Array();
var s2 = new Array();
var s3 = new Array();
var s4 = new Array();
var s1a = new Array();
var s2a = new Array();
var s2x =  new Array();
var s2y = new Array();
var s2z = new Array();
var s3a = new Array();
var s4a = new Array();
var sx = new Array();
var sy = new Array();
var sz = new Array();

var ss1 = new Array();
var ss2 = new Array();
var ss3 = new Array();
var ss4 = new Array();
var ss1a = new Array();
var ss2a = new Array();
var ss3a = new Array();
var ss4a = new Array();

var l1 = new Array();
var l2 = new Array();
var l3 = new Array();
var l4 = new Array();
var l1a = new Array();
var l2a = new Array();
var l3a = new Array();
var l4a = new Array();
var l3b = new Array();
var l3c = new Array();
var lx = new Array();
var ly = new Array();
var lz = new Array();
var lxa = new Array();
var lya = new Array();
var lza = new Array();

var d1 = new Array();
var d2 = new Array();
var d3 = new Array();
var d4 = new Array();
var d1a = new Array();
var d2a = new Array();
var d3a = new Array();
var d4a = new Array();
var dx = new Array();
var dy = new Array();
var dz = new Array();
var d3b = new Array();
var d3c = new Array();
var dxa = new Array();
var dya = new Array();
var dza = new Array();
var d1b = new Array();
var d1c = new Array();
var dxb = new Array();
var dyb = new Array();
var dzb = new Array();

var i1 = new Array();
var i2 = new Array();
var i3 = new Array();
var i4 = new Array();
var i1a = new Array();
var i2a = new Array();
var i3a = new Array();
var i4a = new Array();
var i1b = new Array();
var i1c = new Array();
var ix = new Array();
var iy = new Array();
var iz = new Array();
var i3b = new Array();
var i3c = new Array();
var ixa = new Array();
var iya = new Array();
var iza = new Array();
var ixb = new Array();
var izb = new Array();
var ixc = new Array();
var iyc = new Array();
var izc = new Array();

var m1 = new Array();
var m2 = new Array();
var m3 = new Array();
var m4 = new Array();
var m1a = new Array();
var m2a = new Array();
var m3a = new Array();
var m3x  = new Array();
var m3y = new Array();
var m3z = new Array();
var m4a = new Array();
var m4x = new Array();
var m4y = new Array();
var m4z = new Array();

var b1 = new Array();
var b2 = new Array();
var b3 = new Array();
var b4 = new Array();
var b1a = new Array();
var b2a = new Array();
var b3a = new Array();
var b4a = new Array();
var b4b = new Array();

var a1 = new Array();
var a2 = new Array();
var a3 = new Array();
var a4 = new Array();
var a1a = new Array();
var a2a = new Array();
var a2b = new Array();
var a2x = new Array();
var a2y = new Array();
var a2z = new Array();
var a3a = new Array();
var a4a = new Array();
var air2 = false;
var a1aa = 0;
var a1x, a1y, a1z = null;
var a2aa = 0;
var a3aa = 0;
var a3x, a3y, a3z = null;
var a4aa = false;
var a4ab = 0;
var ax, ay, az = null;
var a5 = -1;
var a5a = 0;

var th1 = new Array();
var th2 = new Array();
var th3 = new Array();
var th4 = new Array();
var th1a = new Array();
var th1b = null;
var th1c = new Array();
var th2a = new Array();
var th3a = new Array();
var th3b = new Array();
var th4a = new Array();
var thx = new Array();
var thy = new Array();
var thz = new Array();
var thxa = new Array();
var thya = new Array();
var thza = new Array();
var thxb = new Array();
var thyb = new Array();
var thzb = new Array();

var e1 = new Array();
var e2 = new Array();
var e3 = new Array();
var e4 = new Array();
var e1a = new Array();
var e2a = new Array();
var e3a = new Array();
var e3b = new Array();
var e3c = new Array();
var ex = new Array();
var ey = new Array();
var ez = new Array();
var e4a = new Array();
var ex4 = new Array();
var ey4 = new Array();
var ez4 = new Array();

var tt1 = new Array();
var tt2 = new Array();
var tt3 = new Array();
var tt4 = new Array();
var tt1a = new Array();
var tt2a = new Array();
var tt3a = new Array();
var tt4a = new Array();
var tt4b = new Array();
var tt4c = new Array();
var ttx = new Array();
var tty = new Array();
var ttz = new Array();
var tt2b = new Array();
var ttxa = new Array();
var ttya = new Array();
var ttza = new Array();
var ttxb = new Array();
var ttyb = new Array();
var ttzb = new Array();

var bb1 = new Array();
var bb2 = new Array();
var bb3 = new Array();
var bb4 = new Array();
var bb1a = new Array();
var bb2a = new Array();
var bb3a = new Array();
var bb4a = new Array();
var bb4b = new Array();
var bb4c = new Array();
var bbx = new Array();
var bby = new Array();
var bbz = new Array();
var bind2 = false;
var b1aa = 0;
var b2aa = 0;
var b3aa = 0;
var b3ab = false;
var b3x, b3y, b3z = null;
var b4aa = false;
var bx, by, bz = null;
var b5 = -1;
var b5a = 0;

var mm1 = new Array();
var mm2 = new Array();
var mm3 = new Array();
var mm4 = new Array();
var mm1a = new Array();
var mmx1 = new Array();
var mmy1 = new Array();
var mmz1 = new Array();
var mmx2a = new Array();
var mmy2a = new Array();
var mmz2a = new Array();
var mm2a = new Array();
var mm3a = new Array();
var mm3b = new Array();
var mmx = new Array();
var mmy = new Array();
var mmz = new Array();
var mmx2 = new Array();
var mmy2 = new Array();
var mmz2 = new Array();
var mm4a = new Array();
var mmx4 = new Array();
var mmy4 = new Array();
var mmz4 = new Array();

var tn1 = new Array();
var tn2 = new Array();
var tn3 = new Array();
var tn4 = new Array();
var tn1a = new Array();
var tn1x = new Array();
var tn1y = new Array();
var tn1z = new Array();
var tn2a = new Array();
var tnx = new Array();
var tny = new Array();
var tnz = new Array();
var tn3a = new Array();
var tnx3 = new Array();
var tny3 = new Array();
var tnz3 = new Array();
var tn4a = new Array();
var tnx2 = new Array();
var tny2 = new Array();
var tnz2 = new Array();

var tr1 = new Array();
var tr2 = new Array();
var tr3 = new Array();
var tr4 = new Array();
var tr1a = new Array();
var tr1b = new Array();
var trx1 = new Array();
var try1 = new Array();
var trz1 = new Array();
var tr2a = new Array();
var tr2b = new Array();
var trx2 = new Array();
var try2 = new Array();
var trz2 = new Array();
var tr3a = new Array();
var tr3b = new Array();
var trx3 = new Array();
var try3 = new Array();
var trz3 = new Array();
var tr4a = new Array();
var tr4b = new Array();
var trx4 = new Array();
var try4 = new Array();
var trz4 = new Array();

var h1 = new Array();
var h2 = new Array();
var h3 = new Array();
var h4 = new Array();
var h1a = new Array();
var h2a = new Array();
var h3a = new Array();
var h4a = new Array();
var hx = new Array()
var hy = new Array();
var hz = new Array();
var heal2 = false;
var h1aa = 0;
var h2aa = 0;
var h3aa = 0;
var h3ab;
var h4aa = false;
var h5 = -1;
var h5a;


var n1 = new Array();
var n2 = new Array();
var n3 = new Array();
var n4 = new Array();
var n1a = new Array();
var n2a = new Array();
var n2x = new Array();
var n2y = new Array();
var n2z = new Array();
var n3a = new Array();
var n4a = new Array();
var nx = new Array();
var ny = new Array();
var nz = new Array();

var cc1 = new Array();
var cc2 = new Array();
var cc3 = new Array();
var cc4 = new Array();
var cc1a = new Array();
var cc2a = new Array();
var cc2b = new Array();
var cc3a = new Array();
var cc3b = new Array();
var cc3c = new Array();
var cc3d = new Array();
var cc4a = new Array();
var ccx = new Array();
var ccy = new Array();
var ccz = new Array();
var ccx1 = new Array();
var ccy1 = new Array();
var ccz1 = new Array();
var ccx2 = new Array();
var ccy2 = new Array();
var ccz2 = new Array();
var mmxc = new Array();
var mmyc = new Array();
var mmzc = new Array();

var as1 = new Array();
var as2 = new Array();
var as3 = new Array();
var as4 = new Array();
var as1a = new Array();
var as2a = new Array();
var as3a = new Array();
var as4a = new Array();

var ar1 = new Array();
var ar2 = new Array();
var ar3 = new Array();
var ar4 = new Array();
var ar1a = new Array();
var ar1x = new Array();
var ar1y = new Array();
var ar1z = new Array();
var ar2a = new Array();
var arx2 = new Array();
var ary2 = new Array();
var arz2 = new Array();
var ar3a = new Array();
var ar4a = new Array();
var arx = new Array();
var ary = new Array();
var arz = new Array();

var ma1 = new Array();
var ma2 = new Array();
var ma3 = new Array();
var ma4 = new Array();
var ma1a = new Array();
var ma2a = new Array();
var ma2b = new Array();
var max2 = new Array();
var may2 = new Array();
var maz2 = new Array();
var ma3a = new Array();
var max3 = null;
var maz3 = null;
var ma4a = new Array();
var max = new Array();
var may = new Array();
var maz = new Array();

var de1 = new Array();
var de2 = new Array();
var de3 = new Array();
var de4 = new Array();
var de1a = new Array();
var de2a = new Array();
var de3a = new Array();
var de3b = new Array();
var dex3 = new Array();
var dey3 = new Array();
var dez4 = new Array();
var de4a = new Array();
var de4b = new Array();
var dex = new Array();
var dey = new Array();
var dez = new Array();
var dexa, deza = null;

var p1 = new Array();
var p2 = new Array();
var p3 = new Array();
var p4 = new Array();
var p1a = new Array();
var p1b = new Array();
var p2a = new Array();
var p2xa = [], p2ya = [], p2za = [];
var p3a = new Array();
var p3b = new Array();
var p4a = new Array();
var p4x = [], p4y = [], p4z = [];

var me1 = new Array();
var me2 = new Array();
var me3 = new Array();
var me4 = new Array();
var me1a = new Array();
var me1x = [], me1y = [], me1z = [];
var me2a = new Array();
var me2x = [], me2y = [], me2z = [];
var mexa = [], meza = [];
var me3a = new Array();
var me4a = new Array();
var mex = [], mey = [], mez = [];

var hf1 = new Array();
var hf2 = new Array();
var hf3 = new Array();
var hf4 = new Array();
var hf1a = new Array();
var hfx1 = [], hf1y = [], hf1z = [];
var hf2a = new Array();
var hf2x = [], hf2y = [], hf2z = [];
var hf3a = new Array();
var hf3b = new Array();
var hf3c = new Array();
var hf3x = [], hf3y = [], hf3z = [];
var hf4a = new Array();
var hfx = [], hfy = [], hfz = [];

var bu1 = new Array();
var bu2 = new Array();
var bu3 = new Array();
var bu4 = new Array();
var bu1a = new Array();
var bu1x, bu1z = null;
var bu2a = new Array();
var bu2b = new Array();
var bu2x = [], bu2y = [], bu2z = [];
var bu3a = new Array();
var bu3b = new Array();
var bu3x = [], bu3y = [], bu3z = [];
var bu4a = new Array();
var bu4b = new Array();
var bux = [], buy = [], buz = [];

var so1 = new Array();
var so2 = new Array();
var so3 = new Array();
var so4 = new Array();
var so1a = new Array();
var so2a = new Array();
var so2b = new Array();
var so2x = [], so2y = [], so2z = [];
var so3a = new Array();
var so4a = new Array();
var so4b = new Array();
var so4c = new Array();
var sox = [], soy = [], soz = [];

var asu1 = new Array();
var asu2 = new Array();
var asu3 = new Array();
var asu4 = new Array();
var asu1a = new Array();
var asu2a = new Array();
var asu2x = [], asu2y = [], asu2z = [];
var asu3a = new Array();
var asu4a = new Array();

var bus1 = new Array();
var bus2 = new Array();
var bus3 = new Array();
var bus4 = new Array();
var bus1a = new Array();
var bus1b = new Array();
var bus1c = new Array();
var bus1x = [], bus1y = [], bus1z = [];
var bus2a = new Array();
var bus3a = new Array();
var bus4a = new Array();
var busx = [], busy = [], busz = [];

var wa1 = new Array();
var wa2 = new Array();
var wa3 = new Array();
var wa4 = new Array();
var wa1a = new Array();
var wa1x = new Array();
var wa1y = new Array();
var wa1z = new Array();
var waxa = [], waza = [];
var wa2a = new Array();
var wa3a = new Array();
var wa4a = new Array();
var wax = new Array();
var way = new Array();
var waz = new Array();

var o1 = [];
var o2 = [];
var o3 = [];
var o4 = [];
var o1a = [];
var o2a = [];
var o3a = [];
var o3x = [];
var o3y = [];
var o3z = [];
var o4a = [];
var o4b = [];
var o4c = [];
var o4d = [];
var ox = [];
var oy = [];
var oz = [];

var r1 = [];
var r2 = [];
var r3 = [];
var r4 = [];
var r1a = [];
var r1x = [];
var r1y = [];
var r1z = [];
var r2a = [];
var r3a = [];
var r3x, r3z = null;
var r4a = [];
var rx = [];
var ry = [];
var rz = [];

var tp1 = [];
var tp2 = [];
var tp3 = [];
var tp4 = [];
var tp1a = [];
var tp1x, tp1z = null;
var tp2a = [];
var tp3a = [];
var tp4a = [];
var tp4b = [];
var tpx = []
var tpy = []
var tpz = [];

var sp1 = [];
var sp2 = [];
var sp3 = [];
var sp4 = [];
var sp1a = [];
var sp1x, sp1z = null;
var sp2a = [];
var sp2x = [];
var sp2y = [];
var sp2z = [];
var spxa = [];
var spza = [];
var sp3a = [];
var sp3x = [];
var sp3y = [];
var sp3z = [];
var sp4a = [];
var sp4b = [];
var spx = [];
var spy = [];
var spz = [];

var sa1 = [];
var sa2 = [];
var sa3 = [];
var sa4 = [];
var sa1a = [];
var sa1x = [];
var sa1y = [];
var sa1z = [];
var sa2a = [];
var sa2x = [];
var sa2y = [];
var sa2z = [];
var sa3a = [];
var sa3x = [];
var sa3y = [];
var sa3z = [];
var sa4a = [];
var sa4b = [];
var sax = [];
var say = [];
var saz = [];

var fo1 = [];
var fo2 = [];
var fo3 = [];
var fo4 = [];
var fo1a = [];
var fo1x = [];
var fo1y = [];
var fo1z = [];
var fo2a = [];
var fo2x = [];
var fo2y = [];
var fo2z = [];
var foxa = [];
var foza = [];
var fo3a = [];
var fo4a = [];
var fox = [];
var foy = [];
var foz = [];

var re1 = [];
var re2 = [];
var re3 = [];
var re4 = [];
var re1a = [];
var re1x = [];
var re1y = [];
var re1z = [];
var re2a = [];
var re2x = [];
var re2z = [];
var re3a = [];
var re3x = [];
var re3y = [];
var re3z = [];
var re4a = [];
var rex = [];
var rey = [];
var rez = [];

var mag1 = [];
var mag2 = [];
var mag3 = [];
var mag4 = [];
var mag1a = [];
var mag1b;
var mag2a = [];
var mag2x , mag2z = null;
var mag3a = [];
var mag3x = [];
var mag3y = [];
var mag3z = [];
var mag4a = [];
var mag4b = [];
var magx = [];
var magy = [];
var magz = [];

var st1 = [];
var st2 = [];
var st3 = [];
var st4 = [];
var st1a = [];
var st2a = [];
var st2b = [];
var st2x = [];
var st2y = [];
var st2z = [];
var stxa, stza = null;
var st2c = [];
var st3a = [];
var st4a = [];
var stx = [];
var sty = [];
var stz = [];

var he1 = [];
var he2 = [];
var he3 = [];
var he4 = [];
var he1a = [];
var he1b = [];
var he1x = [];
var he1y = [];
var he1z = [];
var he1c = [];
var he1d = [];
var he2a = [];
var he2b = [];
var he2x = [];
var he2y = [];
var he2z = [];
var hexa, heza;
var he3a = [];
var he3x = [];
var he3y = [];
var he3z = [];
var he4a = [];
var hex = [];
var hey = [];
var hez = [];

var her1 = [];
var her2 = [];
var her3 = [];
var her4 = [];
var her1a = [];
var her2a = [];
var her2b = [];
var her2x = [];
var her2y = [];
var her2z = [];
var her3a = [];
var her3b = [];
var her3x = [];
var her3y = [];
var her3z = [];
var her4a = [];
var herx = [];
var hery = [];
var herz = [];

var cl1 = [];
var cl2 = [];
var cl3 = [];
var cl4 = [];
var cl1a = [];
var clxa, clza;
var cl2a = [];
var cl2x = [];
var cl2y = [];
var cl2z = [];
var cl3a = [];
var cl3x = [];
var cl3y = [];
var cl3z = [];
var cl4a = [];
var clx = [];
var cly = [];
var clz = [];

var k1 = [];
var k2 = [];
var k3 = [];
var k4 = [];
var k1a = [];
var kxa = [];
var kza = [];
var k2a = [];
var k2x = [];
var k2y = [];
var k2z = [];
var k3a = [];
var k4a = [];
var k4b = [];
var kx = [];
var ky = [];
var kz = [];

var j1 = [];
var j2 = [];
var j3 = [];
var j4 = [];
var j1a = [];
var j2a = [];
var jxa = [];
var jza = [];
var j3a = [];
var j3b = [];
var j3x = [];
var j3y = [];
var j3z = [];
var j4a = [];
var j4b = [];
var jx = [];
var jy = [];
var jz = [];

var ka1 = [];
var ka2 = [];
var ka3 = [];
var ka4 = [];
var ka1a = [];
var ka2a = [];
var ka3a = [];
var ka3b = [];
var ka3x = [];
var ka3y = [];
var ka3z = [];
var ka4a = [];
var kax = [];
var kay = [];
var kaz = [];

var ti1 = [];
var ti2 = [];
var ti3 = [];
var ti4 = [];
var ti1a = [];
var ti2a = [];
var ti3a = [];
var ti3b = [];
var ti3x = [];
var ti3y = [];
var ti3z = [];
var ti4a = [];
var ti4b = new Array();
var ti4c = 0;
var tix = new Array();
var tiy = new Array();
var tiz = new Array();

var sn1 = [];
var sn2 = [];
var sn3 = [];
var sn4 = [];
var sn1a = [];
var sn2a = [];
var sn3a = [];
var sn4a = [];
var sn4b = [];
var sn4c = [];
var sn4d = [];
var snx = [];
var sny = [];
var snz = [];
var sn4x = [];
var sn4y = [];
var sn4z = [];

var z1 = [];
var z2 = [];
var z3 = [];
var z4 = [];
var z1a = [];
var z2a = [];
var z2b = [];
var z3a = [];
var z3b = [];
var z3x = [];
var z3y = [];
var z3z = [];
var z4a = [];

var ne1 = [];
var ne2 = [];
var ne3 = [];
var ne4 = [];
var ne1a = [];
var ne2a = [];
var ne3a = [];
var ne4a = [];
var ne4b = [];
var ne4c = [];
var nex = [];
var ney = [];
var nez = [];

var asn1 = [];
var asn2 = [];
var asn3 = [];
var asn4 = [];
var asn1a = [];
var asn2a = [];
var asnx = [];
var asny = [];
var asnz = [];
var asn3a = [];
var asn3b = [];
var asn4a = [];

var ho1 = [];
var ho2 = [];
var ho3 = [];
var ho4 = [];
var ho1a = [];
var ho2a = [];
var ho3a = [];
var ho4a = [];
var hox = new Array();
var hoy = [];
var hoz = new Array();

var sol1 = [];
var sol2 = [];
var sol3 = [];
var sol4 = [];
var sol1a = [];
var sol2a = [];
var sol3a = [];
var sol4a = [];
var solx = [];
var soly = [];
var solz = [];

var lu1 = [];
var lu2 = [];
var lu3 = [];
var lu4 = [];
var lu1a = [];
var lu2a = [];
var lu3a = [];
var luxa = null;
var luza = null;
var lu4a = [];
var lux = [];
var luy = [];
var luz = [];

var ha1 = [];
var ha2 = [];
var ha3 = [];
var ha4 = [];
var ha1a = [];
var ha2a = [];
var ha2x = [];
var ha2y = [];
var ha2z = [];
var ha3a = [];
var ha4a = [];

var ra1 = [];
var ra2 = [];
var ra3 = [];
var ra4 = [];
var ra1a = [];
var ra1b = [];
var ra2a = [];
var ra2b = [];
var raxa, raza = null;
var ra3a = [];
var ra3b = [];
var ra4a = [];
var ra4b = [];
var rax = [];
var ray = [];
var raz = [];

var zw1 = [];
var zw2 = [];
var zw3 = [];
var zw4 = [];
var zw1a = [];
var zw2a = [];
var zw2x = [];
var zw2y = [];
var zw2z = [];
var zw3a = [];
var zw3b = [];
var zw3x = [];
var zw3y = [];
var zw3z = [];
var zw4a = [];
var zw4b = [];
var zwx = [];
var zwy = [];
var zwz = [];

var dec1 = [];
var dec2 = [];
var dec3 = [];
var dec4 = [];
var dec1a = [];
var dec2a = [];
var decxa, decza;
var dec3a = [];
var dec3x = [];
var dec3y = [];
var dec3z = [];
var dec4a = [];
var dec4c = [];
var decx = [];
var decy = [];
var decz = [];

var hs1 = [];
var hs2 = [];
var hs3 = [];
var hs4 = [];
var hs1a = [];
var hs2a = [];
var hs3a = [];
var hs4a = [];

var cli1 = [];
var cli2 = [];
var cli3 = [];
var cli4 = [];
var cli1a = [];
var cli1b = [];
var cli2a = [];
var cli3a = [];
var cli4a = [];
var clix = [];
var cliy = [];
var cliz = [];

var rr1 = [];
var rr2 = [];
var rr3 = [];
var rr4 = [];
var rr1a = [];
var rr2a = [];
var rr3a = [];
var rr4a = [];
var rr0 = [];

var wi1 = [];
var wi2 = [];
var wi3 = [];
var wi4 = [];
var wi1a = [];
var wi2a = [];
var wixa, wiza;
var wi3a = [];
var wi4a = [];
var wi4b = [];
var wix = [];
var wiy = [];
var wiz = [];

var en1 = [];
var en2 = [];
var en3 = [];
var en4 = [];
var en1a = [];
var en1x = [];
var en1y = [];
var en1z = [];
var en2a = [];
var en3a = [];
var en3x = [];
var en3y = [];
var en3z = [];
var en4a = [];
var en4b = [];

var g1 = [];
var g2 = [];
var g3 = [];
var g4 = [];
var g1a = [];
var g2a = [];
var g2x = [];
var g2y = [];
var g2z = [];
var g3a = [];
var g3x = [];
var g3y = [];
var g3z = [];
var g4a = [];
var g4b = [];
var gx = [];
var gy = [];
var gz = [];

var se1 = [];
var se2 = [];
var se3 = [];
var se4 = [];
var se1a = [];
var se1b = [];
var se2a = [];
var se2b = [];
var se3a = [];
var se4a = [];
var se4b = [];
var se4c = [];
var sex = [];
var sey = [];
var sez = [];

var ou1 = [];
var ou2 = [];
var ou3 = [];
var ou4 = [];
var ou1a = [];
var ou2a = [];
var ou3a = [];
var ou4a = [];
var oux = [];
var ouy = [];
var ouz = [];

var rg1 = [];
var rg2 = [];
var rg3 = [];
var rg4 = [];
var rg1a = [];
var rg2a = [];
var rg3a = [];
var rg3x = [];
var rg3y = [];
var rg3z = [];
var rg4a = [];
var rg4x = [];
var rg4y = [];
var rg4z = [];

var co1 = [];
var co2 = [];
var co3 = [];
var co4 = [];
var co1a = [];
var co1x = [];
var co1y = [];
var co1z = [];
var co2a = [];
var co2x = [];
var co2y = [];
var co2z = [];
var co3a = [];
var co3b = [];
var co3x = [];
var co3y = [];
var co3z = [];
var co4a = [];
var cox = [];
var coy = [];
var coz = [];

var dr1 = [];
var dr2 = [];
var dr3 = [];
var dr4 = [];
var dr1a = [];
var dr2a = [];
var dr3a = [];
var dr4a = [];
var drx = [];
var dry = [];
var drz = [];

var hw1 = [];
var hw2 = [];
var hw3 = [];
var hw4 = [];
var hw1a = [];
var hw1x = [];
var hw1y = [];
var hw1z = [];
var hw2a = [];
var hwxa = [];
var hwya = [];
var hwza = [];
var hw2x = [];
var hw2y = [];
var hw2z = [];
var hw3a = [];
var hw4a = [];
var hwx = [];
var hwy = [];
var hwz = [];

var sd1 = [];
var sd2 = [];
var sd3 = [];
var sd4 = [];
var sd1a = [];
var sdxa, sdza;
var sd2a = [];
var sd3a = [];
var sd4a = [];
var sd4x = [];
var sd4y = [];
var sd4z = [];
var sdx = [];
var sdy = [];
var sdz = [];

var gr1 = [];
var gr2 = [];
var gr3 = [];
var gr4 = [];
var gr1a = [];
var gr1b = [];
var gr1c = [];
var gr1x = [];
var gr1y = [];
var gr1z = [];
var gr2a = [];
var gr3a = [];
var gr3x = [];
var gr3y = [];
var gr3z = [];
var gr4a = [];
var grx = [];
var gry = [];
var grz = [];

var hass1 = false;
var hass2 = false;
var hass3 = false;
var hass4 = false;
var hass1a = 0;
var hass2a = 0;
var hass2b = false;
var hass2c = new Array(3);
var hass2x, hass2y, hass2z = null;
var hass3a = 0;
var hass3b;
var hass4a = 0;
var hass4b = new Array();

var sk1 = false;
var sk2 = false;
var sk3 = false;
var sk4 = false;
var sk1a = 0;
var sk2a = 0;
var sk2b;
var sk3a = 0;
var sk4a = 0;
var skx, sky, skz = null;

var bl1 = false;
var bl2 = false;
var bl3 = false;
var bl4 = false;
var bl1a = 0;
var bl2a = 0;
var bl3a = 0;
var bl4a = 0;
var blx, bly, blz = null;

var sl1 = false;
var sl2 = false;
var sl3 = false;
var sl4 = false;
var sl1a = 0;
var slxa, slza = null;
var sl2a = 0;
var sl3a = 0;
var sl3x, sl3y, sl3z = null;
var sl4a = 0;
var slx = new Array();
var sly = new Array();
var slz = new Array();

var ni1 = false;
var ni2 = false;
var ni3 = false;
var ni4 = false;
var ni1a = 0;
var ni2a = 0;
var ni3a = 0;
var ni4a = 0;

var ge1 = false;
var ge2 = false;
var ge3 = false;
var ge4 = false;
var ge1a = 0;
var ge2a = 0;
var ge3a = 0;
var ge4a = 0;

var dc1 = false;
var dc2 = false;
var dc3 = false;
var dc4 = false;
var dc1a = 0;
var dc2a = 0;
var dc3a = 0;
var dc4a = 0;
var dc4b = false;
var dc4c;

var mu1 = false;
var mu2 = false;
var mu3 = false;
var mu4 = false;
var mu1a = 0;
var mu2a = 0;
var mu3a = 0;
var mu4a = 0;
var mux, muy, muz = null;

var end1 = false;
var end2 = false;
var end3 = false;
var end4 = false;
var end1a = 0;
var endxa, endza = null;
var end2a = 0;
var end3a = 0;
var end4a = 0;
var endx, endy, endz = null;

var ta1 = false;
var ta2 = false;
var ta3 = false;
var ta4 = false;
var ta1a = 0;
var ta2a = 0;
var ta3a = 0;
var ta4a = 0;
var tax, tay, taz = null;

var ru1 = false;
var ru2 = false;
var ru3 = false;
var ru4 = false;
var ru1a = 0;
var ru1b = null;
var ru2a = 0;
var ru3a = 0;
var ru3x, ru3y, ru3z = null;
var ru4a = 0;
var rux, ruy, ruz = null;

var sw1 = false;
var sw2 = false;
var sw3 = false;
var sw4 = false;
var sw1a = 0;
var swxa, swza;
var sw2a = 0;
var sw3a = 0;
var sw4a = 0;
var sw4b = false;
var swx, swy, swz = null;

var asum1 = false;
var asum2 = false;
var asum3 = false;
var asum4 = false;
var asum1a = 0;
var asum2a = 0;
var asum3a = 0;
var asum4a = 0;

var am1 = false;
var am2 = false;
var am3 = false;
var am4 = false;
var am1a = 0;
var am2a = 0;
var am3a = 0;
var am3x, am3y, am3z = null;
var am4a = 0;
var am4b = false;
var amx, amy, amz = null;
var am4x, am4y, am4z = null;

var pm1 = false;
var pm2 = false;
var pm3 = false;
var pm4 = false;
var pm1a = 0;
var pm2a = 0;
var pm3a = 0;
var pm3b = 0;
var pmx, pmy, pmz = null;
var pm4a = 0;
var pm4x, pm4y, pm4z = null;

var hb1 = false;
var hb2 = false;
var hb3 = false;
var hb4 = false;
var hb1a = 0;
var hbxa, hbza;
var hb2a = 0;
var hb3a = 0;
var hb3b = 0;
var hb4a = 0;
var hbx, hby, hbz = null;

var sc1 = false;
var sc2 = false;
var sc3 = false;
var sc4 = false;
var sc1a = 0;
var sc1x, sc1y, sc1z;
var sc2a = 0;
var sc3a = 0;
var sc3x, sc3y, sc3z = null;
var sc4a = 0;
var scx = new Array();
var scy = new Array();
var scz = new Array();

var v1 = false;
var v2 = false;
var v3 = false;
var v4 = false;
var v1a = 0;
var v1x, v1y, v1z;
var vxa, vza;
var v2a = 0;
var v3a = 0;
var v3b = 25;
var v3x, v3y, v3z;
var vsin, vcos;
var v4a = 0;
var v4b = new Array();
var vx, vy, vz;

var te1 = false;
var te2 = false;
var te3 = false;
var te4 = false;
var te1a = 0;
var texa, teza;
var te2a = 0;
var te2x, te2y, te2z = null;
var te3a = 0;
var te4a = 0;
var te4b = new Array();
var tex = new Array();
var tey = new Array();
var tez = new Array();

var ame1 = false;
var ame2 = false;
var ame3 = false;
var ame4 = false;
var ame1a = 0;
var ame2a = 0;
var ame2x, ame2y, ame2z = null;
var ame3a = 0;
var ame3b = 0;
var ame3x, ame3y, ame3z = null;
var ame4a = 0;
var amex = new Array();
var amey = new Array();
var amez = new Array();

var sea1 = false;
var sea2 = false;
var sea3 = false;
var sea4 = false;
var sea1a = 0;
var sea2a = 0;
var sea3a = 0;
var sea3b = 0;
var sea3x, sea3y, sea3z;
var sea4a = 0;
var sea4b = null;
var seax, seay, seaz;

var an1 = false;
var an2 = false;
var an3 = false;
var an4 = false;
var an1a = 0;
var an2a = 0;
var an2b = 0;
var an2x, an2y, an2z = null;
var an3a = 0;
var an4a = 0;
var anx, any, anz;

var wh1 = false;
var wh2 = false;
var wh3 = false;
var wh4 = false;
var wh1a = 0;
var wh2a = 0;
var wh2x, wh2y, wh2z;
var wh3a = 0;
var wh3b = null;
var wh4a = 0;
var whx, why, whz;

var mt1 = false;
var mt2 = false;
var mt3 = false;
var mt4 = false;
var mt1a = 0;
var mt1b = null;
var mt1x, mt1y, mt1z = null;
var mt2a = 0;
var mt3a = 0;
var mt4a = 0;
var mt4b = null;
var mt4c = false;
var mtx, mty, mtz = null;

var wo1 = false;
var wo2 = false;
var wo3 = false;
var wo4 = false;
var wo1a = 0;
var wo2a = 0;
var wo3a = 0;
var wo3b = false;
var wo3x, wo3y, wo3z = null;
var wo4a = 0;
var wo4b = 0;
var wo4c = new Array(3);
var wox = new Array(5);
var woy = new Array(5);
var woz = new Array(5);


var h = {
rrr : undefined, r1 : 0, r2 : 0, r3 : 0, r4 : 0,
rx : null, ry : null, rz : null
};


var anti = false;
var anti2 = 0;
var anti3 = 0;
var anti4 = 0;


var f0 = new Array();
var w0 = new Array();
var t0 = 0;
var c0 = 0;
var i0 = 0;
var m0 = 0;
var b0 = null;
var e0 = 0;
var mm0 = 0;
var tn0 = null;
var tr0 = 0;
var h0 = 0;
var n0 = 0;
var cc0 = 0;
var ma0 = null;
var me0 = new Array();
var hf0 = new Array();
var her0 = 0;
var j0 = 0;
var ti0 = 0;
var ti0a = [];
var en0 = 0;
var ta0;

var d0 = [];
var hw0 = [];
var g0 = null;

//--0.4.3---
var ofire = 0;
var owater = 0;
var otree = 0;
var ocreeper = 0;
var osoil = 0;
var osummon = 0;
var olight = 0;
var odark = 0;
var oice = 0;


var of1 = 0;
var of2 = 0;
var of2x, of2y, of2z = null;
var of3 = 0;
var of4 = 0;
var ofx, ofy, ofz = null;

var ow1 = 0;
var ow1x, ow1y, ow1z = null;
var ow2 = 0;
var ow2x, ow2y, ow2z = null;
var ow3 = 0;
var ow3x, ow3y, ow3z = null;
var ow4 = 0;
var owx, owy, owz = null;

var ot1 = 0;
var ot2 = 0;
var ot3 = 0;
var ot4 = 0;

var oc1 = 0;
var oc2 = 0;
var oc3 = 0;
var oc4 = 0;
var ocx, ocy, ocz = null;

var os1 = 0;
var os2 = 0;
var os3 = 0;
var os3x, os3y, os3z = null;
var os4 = 0;
var osx, osy, osz = null;

var oss1 = 0;
var oss2 = 0;
var oss3 = 0;
var oss4 = 0;

var ol1 = 0;
var ol2 = 0;
var ol3 = 0;
var ol3x, ol3y, ol3z = null;
var ol4 = 0;
var olx, oly, olz = null;

var od1 = 0;
var od1x, od1y, od1z = null;
var od2 = 0;
var od3 = 0;
var od3x, od3y, od3z = null;
var od4 = 0;
var odx, ody, odz = null;

var oi1 = 0;
var oi1x, oi1y, oi1z = null;
var oi2 = 0;
var oi3 = 0;
var oi4 = 0;
var oix, oiy, oiz = null;

//--A.I.---
var aitype = null;
var aiOn = false;
var yaw, sin, cos;

var aifire;
var aif2 = 0;
var aifd = false;
var aifd2 = false;
var aift = -1;
var aifx, aify, aifz;

var aiwater;
var aiw2 = 0;
var aiwd = false;
var aiwd2 = false;
var aiwt = -1;
var aiwx, aiwy, aiwz;

var aitree;
var ait2 = 0;
var aitd = false;
var aitd2 = false;
var aitt = -1;
var aitx, aity, aitz;
var aimc = 0;

var aicreeper;
var aic2 = 0;
var aicd = false;
var aicd2 = false;
var aict = -1;
var aicx, aicy, aicz;

var aisoil;
var ais2 = 0;
var aisd = false;
var aisd2 = false;
var aist = -1;
var aisx, aisy, aisz;

var aisummon;
var aiss2 = 0;
var aissd = false;
var aissd2 = false;
var aisst = -1;
var aissx, aissy, aissz;


//--A.I.P.--
var ait;

var ai2fire = false;
var ai2fire2;
var ai2fire3 = null;
var ai2ft = -1;
var ai2fx, ai2fy, ai2fz;
var ai2fd = false;
var ai2fd2 = false;
var ai2fr = 0;

var ai2water = false;
var ai2water2;
var ai2water3 = null;
var ai2wt = -1;
var ai2wx, ai2wy, ai2wz;
var ai2wd = false;
var ai2wd2 = false;
var ai2wr = 0;

var ai2creeper = false;
var ai2creeper2;
var ai2creeper3 = null;
var ai2ct = -1;
var ai2cx, ai2cy, ai2cz;
var ai2cd = false;
var ai2cd2 = false;
var ai2cr = 0;

var ai2mage = false;
var ai2mage2;
var ai2mage3 = null;
var ai2mt = -1;
var ai2mx, ai2my, ai2mz;
var ai2md = false;
var ai2md2 = false;
var ai2mr = 0;

var ai2jungle = false;
var ai2jungle2;
var ai2jungle3 = null;
var ai2jt = -1;
var ai2jx, ai2jy, ai2jz;
var ai2jd = false;
var ai2jd2 = false;
var ai2jr = 0;

var ai2raid = false;
var ai2raid2;
var ai2raid3 = null;
var ai2raid4;
var ai2rt = -1;
var ai2rx, ai2ry, ai2rz;
var ai2rd = false;
var ai2rd2 = false;
var ai2rr = 0;


//-----

var t2hor;
var w2ater;
var k2ill;
var m2isaka;
var e2lsa;
var p2ush;
var f2ire;
var f2aster;
var k2ick;
var t2ree;
var l2ava;
var b2ind;
var s2and;

var wfire;
var wwater;
var wtree;
var wair;
var wburst;
var wearth;
var wlight;
var wdark;
var wbind;
var wlightn;

var bbh;
var bdk;
var bnb;
var bgamble;
var bthief;
var bdual;
var bcannon;

var tjunior;
var tblood;
var telectric;
var tspear;
var tteb;
var tice;
var tdust;
var tground;
var tflame;
var twater;

var frose;
var fprimula;
var fivy;
var fdaisy;
var frose2;
var fpeony;
var forchid;
var fviolet;

var efm;
var esa;
var emuin;
var egm;
var etb;
var efight;
var esk;
var eeb;
var edragon;
var eaf;
var esu;
var esb;
var edevil;
var emf;
var emt;
var etm;
var esm;
var eta;
var elaunch;
var eba;
var etb;
var ebm;
var ehero;
var eca;
var els;
var epriest;
var eangel;
var eDevil;
var egr;

var elhyper;
var elbupper;
var elgc;
var eljbl;
var elrb;
var eljoker;
var elshadow;
var elninja;

var swest;
var seast;
var snorth;
var ssouth;

var sfire;
var swater;
var stree;
var sburst;
var ssoil;
var sair;
var slight;
var sdark;
var sblood;

var np = {
menus : ["Send ESP", "Kill ESP", "Heal ESP", "EXIT"],
feoh : null, uruz : null, thurisaz : null, ansur : null, raidho : null, kenaz : null, geofu : null, hagall : null, winn : null, nyd : null, is : null, zera : null, yr : null, peroth : null, elho : null, sigal : null, tir : null, beorc : null, ehwaz : null, mannaz : null, laguz : null, ing : null, othel : null, daeg : null
};

var sd = {
melt : null, flower : null, cho : null, pre : null, buf : null, dbuf : null, remain : null, cure : null, blood : null, ice : null, flame : null, sand : null, tp : null, exp : null, lighn : null, food : null, tree : null, mons : null,
code : ["sd.melt", "sd.flower", "sd.cho", "sd.pre", "sd.buf", "sd.dbuf", "sd.remain", "sd.cure", "sd.blood", "sd.ice", "sd.flame", "sd.sand", "sd.tp", "sd.exp", "sd.lighn", "sd.food", "sd.tree", "sd.mons"]
};

//fixing error over 0.11.1
Entity.getHealth = function(e){
if(e==null||Entity.getEntityTypeId(e)>=64) return;
else return net.zhuoweizhang.mcpelauncher.ScriptManager.nativeGetMobHealth(e);
};
Entity.setHealth = function(e, n, tf){
if(e==null||Entity.getEntityTypeId(e)>=64){
return;
}
else{
if(tf){
net.zhuoweizhang.mcpelauncher.ScriptManager.nativeSetMobHealth(e, n);
}
else{
try{
var vers = ModPE.getMinecraftVersion().toString().split(".");
if(Number(vers[1])>=12&&ESP.isPlayer(e)&&n<=20){
net.zhuoweizhang.mcpelauncher.ScriptManager.nativeSetMobHealth(e, Number(n)+6);
Entity.addEffect(e, MobEffect.harm, 10, 0, true, false);
}
else{
net.zhuoweizhang.mcpelauncher.ScriptManager.nativeSetMobHealth(e, n);
}
}
catch(e){
net.zhuoweizhang.mcpelauncher.ScriptManager.nativeSetMobHealth(e, n);
}
}
}
};
Entity.setFireTicks = function(e, n){
if(e==null) return;
else net.zhuoweizhang.mcpelauncher.ScriptManager.nativeSetOnFire(e, n);
};
Entity.getEntityTypeId = function(e){
if(e==null) return;
else return net.zhuoweizhang.mcpelauncher.ScriptManager.nativeGetEntityTypeId(e);
};
Entity.getX = function(e){
if(e==null) return;
else return net.zhuoweizhang.mcpelauncher.ScriptManager.nativeGetEntityLoc(e, 0);
};
Entity.getY = function(e){
if(e==null) return;
else return net.zhuoweizhang.mcpelauncher.ScriptManager.nativeGetEntityLoc(e, 1);
};
Entity.getZ = function(e){
if(e==null) return;
else return net.zhuoweizhang.mcpelauncher.ScriptManager.nativeGetEntityLoc(e, 2);
};
Entity.getYaw = function(e){
if(e==null) return;
else return net.zhuoweizhang.mcpelauncher.ScriptManager.nativeGetYaw(e);
};
Entity.getPitch = function(e){
if(e==null) return;
else return net.zhuoweizhang.mcpelauncher.ScriptManager.nativeGetPitch(e);
};


//Esper Function
var ESP = {
send : function(esp){
if(mp3==true){
if(mp==false){
teleport(esp, 116, 52, 25);
}
else if(mp==true){
teleport(esp, 24, 52, 23);
}
}
else if(mpk){
teleport(esp, 11, 22, 18);
}
else{
teleport(esp, Entity.getX(ad), Entity.getY(ad)+1, Entity.getZ(ad));
}
},
checkSkill : function(n){
return Level.getSignText(espch[0], espch[1]+1, espch[2], n);
},
sendHuman : function(name){
for each(var e in Entity.getAll()){
if(Player.getName(e)==name){
if(mp3==true){
if(mp==false){
teleport(esp, 116, 52, 25);
}
else if(mp==true){
teleport(esp, 24, 52, 23);
}
}
else if(mpk){
teleport(esp, 11, 22, 18);
}
else{
teleport(esp, Entity.getX(ad), Entity.getY(ad)+1, Entity.getZ(ad));
}
ESP.sbm(Player.getName(e)+" was sent");
}
}
preventDefault();
},
kill : function(e){
Entity.setHealth(e, 0);
},
heal : function(e){
Entity.setHealth(e, 30);
},
setHealth : function(esp, n){
Entity.setHealth(esp, n);
},
mapCheck : function(t){
var map = Level.getWorldName().toString().split(" ");
if(map[1]=="Battle"&&map[2]!=null){
mp = true;
}
else{
mp = false;
}
if(map[0]=="§bThe"){
auto = true;
mp3 = true;
}
else{
auto = false;
mp3 = false;
}
if(Level.getWorldName()==t){
mp2 = true;
}
else{
mp2 = false;
}
if(Level.getWorldName()=="§bThe Kaian"||Level.getWorldName()=="§bThe 능력찾기 쉬운 맵"){
town = false;
mpk = true;
}
},
reset : function(){
fire = [];
water = [];
tree = [];
creeper = [];
soil = [];
summon = [];
light = [];
dark = [];
ice = [];
sand = [];
blood = [];
air = [];
thunder = [];
elsa = [];
titan = [];
bind = [];
meca = [];
tnt = [];
trap = [];
heal = [];
nether = [];
cloud = [];
assassin = [];
arrow = [];
mage = [];
defense = [];
poison = [];
melt = [];
hfreeze = [];
builder = [];
soldier = [];
assasult = [];
burst = [];
warrior = [];
ore = [];
rich = [];
tp = [];
space = [];
sattack = [];
force = [];
rein = [];
magnet = [];
steve = [];
hero = [];
hermit = [];
clay = [];
kirito = [];
jungle = [];
kanade = [];
time = [];
snipe = [];
zombie = [];
necro = [];
asuna = [];
holy = [];
solar = [];
lunar = [];
has = [];
random = [];
zwei = [];
deco = [];
hsum = [];
climate = [];
raid = [];
wind = [];
enery = [];
geno = [];
server = [];
out = [];
rgun = [];
copy = [];
dragon = [];
hawk = [];
solid = [];
gravity = [];
for(var n=0;n<75;n++)
SB.removeUserData(n, -1);
hass = null;
sikill = null;
black = null;
slash = null;
night = null;
gem = null;
dra = null;
mush = null;
ender = null;
taiga = null;
ruin = null;
swamp = null;
asum = null;
amage = null;
puella = null;
hbuild = null;
scalar = null;
vector = null;
tensor = null;
ameca = null;
seal = null;
angel = null;
white = null;
mental = null;
world = null;
he.elect = null;
he.shade = null;
he.torn = null;
he.buf = null;
he.x = null;
},
antiLack : function(tick){
anti = true;
anti2 = tick;
},
getUser : function(){
return Player.getEntity();
},
showDialog : function(msg){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var dialog = new android.app.AlertDialog.Builder(ctx,android.app.AlertDialog.THEME_HOLO_DARK);
var text = new android.widget.TextView(ctx);
text.setText("무단 공유는 허용하나, 무단 수정 및 자신이 만들었다고 주장하는 행위는 금지하며, 그냥 또는 학습을 위해 열어보는 것은 허용합니다.\n사용법은 명령어 \"/help\"또는 \"/도움말\"을 치시면 나옵니다.");
text.setTextSize(18);
var txt = new android.widget.TextView(ctx);
if(mp2==true){
txt.setText("     자동수복 활성화");
}
if(mp2==false){
txt.setText("     자동수복 활성화, 스크립트와 맵의 버전이 다릅니다.");
}
txt.setTextSize(15);
var maker = new android.widget.TextView(ctx);
maker.setText("© 2014 Dark Tornado     \nhttp:\/\/blog.naver.com\/dt3141592     ");
maker.setGravity(android.view.Gravity.RIGHT);
maker.setTextSize(15);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(txt);
layout.addView(maker);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle(msg);
dialog.setView(scroll);
dialog.setNegativeButton("확인",null);
dialog.show();
}
catch(e){
ESP.sbm(msg+" by Dark Tornado");
if(mp2==true){
ESP.toast("자동수복 활성화");
}
else if(mp2==false){
ESP.toast("자동수복 활성화, 스크립트와 맵의 버전이 다릅니다.");
}
}}}));
},
sbm : function(msg){
clientMessage("<S.B.> "+msg);
},
toast : function(msg){
ctx.runOnUiThread(new java.lang.Runnable({
run : function(){
var toast = android.widget.Toast.makeText(ctx, "<S.B.> "+msg, android.widget.Toast.LENGTH_LONG);
toast.show();
}
}));
},
timeStop : function(tf, n){
if(tf==true){
for each(var e in Entity.getAll()){
var type = Entity.getEntityTypeId(e);
if(e!=time[n]&&((type>=32&&type<62)||type==14||type==15||ESP.isPlayer(e))){
ti4b.push(e);
tix.push(Entity.getX(e));
if(!mcpev3){
if(ESP.isPlayer(e))
tiy.push(Math.floor(Entity.getY(e)-2)+1.5);
else
tiy.push(Math.floor(Entity.getY(e))-0.25);
}
else{
tiy.push(Entity.getY(e));
}
tiz.push(Entity.getZ(e));
ti4c++;
}
}
for each(var ent in ti4b){
if(getTile(Entity.getX(ent), Entity.getY(ent)-2, Entity.getZ(ent))==0&&ESP.isPlayer(ent))
setTile(Entity.getX(ent), Entity.getY(ent)-2, Entity.getZ(ent), 95);
}
}
if(tf==false){
for each(var ent in ti4b){
if(getTile(Entity.getX(ent), Entity.getY(ent)-2, Entity.getZ(ent))==95&&ESP.isPlayer(ent))
setTile(Entity.getX(ent), Entity.getY(ent)-2, Entity.getZ(ent), 0);
}
ti4b = [];
tix = [];
tiy = [];
tiy = [];
ti4c = 0;
}
},
removeMob : function(){
for each(var e in Entity.getAll()){
if(Entity.getEntityTypeId(e)>=23&&Entity.getEntityTypeId(e)<40){
Entity.remove(e);
}
}
},
getSniperX : function(n){
px = Entity.getX(snipe[n]);
py = Entity.getY(snipe[n]);
pz = Entity.getZ(snipe[n]);
yaw = Math.floor(Entity.getYaw(snipe[n]));
pitch = Math.floor(Entity.getPitch(snipe[n]));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
tan = -Math.sin(pitch/180*Math.PI);
pcos = Math.cos(pitch/180*Math.PI);
if(Cool.isFalse(sn4b[n])){
for(var gun=5;gun<51;gun++){
if(!(getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==0||getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==8||getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==9)){
return Math.floor(px+gun*sin*pcos);
break;
}
}
}
else{
for(var gun=5;gun<101;gun++){
if(!(getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==0||getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==8||getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==9)){
return Math.floor(px+gun*sin*pcos);
break;
}
}
}
},
getSniperY : function(n){
px = Entity.getX(snipe[n]);
py = Entity.getY(snipe[n]);
pz = Entity.getZ(snipe[n]);
yaw = Math.floor(Entity.getYaw(snipe[n]));
pitch = Math.floor(Entity.getPitch(snipe[n]));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
tan = -Math.sin(pitch/180*Math.PI);
pcos = Math.cos(pitch/180*Math.PI);
if(Cool.isFalse(sn4b[n])){
for(var gun=5;gun<51;gun++){
if(!(getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==0||getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==8||getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==9)){
return Math.floor(py+gun*tan);
break;
}
}
}
else{
for(var gun=5;gun<101;gun++){
if(!(getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==0||getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==8||getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==9)){
return Math.floor(py+gun*tan);
break;
}
}
}
},
getSniperZ : function(n){
px = Entity.getX(snipe[n]);
py = Entity.getY(snipe[n]);
pz = Entity.getZ(snipe[n]);
yaw = Math.floor(Entity.getYaw(snipe[n]));
pitch = Math.floor(Entity.getPitch(snipe[n]));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
tan = -Math.sin(pitch/180*Math.PI);
pcos = Math.cos(pitch/180*Math.PI);
if(Cool.isFalse(sn4b[n])){
for(var gun=5;gun<51;gun++){
if(!(getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==0||getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==8||getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==9)){
return Math.floor(pz+gun*cos*pcos);
break;
}
}
}
else{
for(var gun=5;gun<101;gun++){
if(!(getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==0||getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==8||getTile(px+gun*sin*pcos, py+gun*tan, pz+gun*cos*pcos)==9)){
return Math.floor(pz+gun*cos*pcos);
break;
}
}
}
},
healNG : function(n){
for(var xx=Entity.getX(tree[n])-2;xx<Entity.getX(tree[n])+3;xx++){
for(var yy=Entity.getY(tree[n])-2;yy<Entity.getY(tree[n])+2;yy++){
for(var zz=Entity.getZ(tree[n])-2;zz<Entity.getZ(tree[n])+3;zz++){
if((getTile(xx, yy, zz)==17||getTile(xx, yy, zz)==18)&&Entity.getHealth(tree[n])<=25){
ESP.setHealth(tree[n], Entity.getHealth(tree[n])+2);
return;
}
}}}
},
healFreezer : function(n){
for(var xx=Entity.getX(ice[n])-2;xx<Entity.getX(ice[n])+3;xx++){
for(var yy=Entity.getY(ice[n])-2;yy<Entity.getY(ice[n])+2;yy++){
for(var zz=Entity.getZ(ice[n])-2;zz<Entity.getZ(ice[n])+3;zz++){
if((getTile(xx, yy, zz)==79||getTile(xx, yy, zz)==80||getTile(xx, yy, zz)==78)&&Entity.getHealth(ice[n])<=25){
ESP.setHealth(ice[n], Entity.getHealth(ice[n])+2);
return;
}
}}}
},
healHermit : function(n){
for(var xx=Entity.getX(hermit[n])-2;xx<Entity.getX(hermit[n])+3;xx++){
for(var yy=Entity.getY(hermit[n])-2;yy<Entity.getY(hermit[n])+2;yy++){
for(var zz=Entity.getZ(hermit[n])-2;zz<Entity.getZ(hermit[n])+3;zz++){
if((getTile(xx, yy, zz)==17||getTile(xx, yy, zz)==18)&&Entity.getHealth(hermit[n])<=25){
ESP.setHealth(hermit[n], Entity.getHealth(hermit[n])+2);
return;
}
}}}
},
healJF : function(n){
for(var xx=Entity.getX(jungle[n])-2;xx<Entity.getX(jungle[n])+3;xx++){
for(var yy=Entity.getY(jungle[n])-2;yy<Entity.getY(jungle[n])+2;yy++){
for(var zz=Entity.getZ(jungle[n])-2;zz<Entity.getZ(jungle[n])+3;zz++){
if((getTile(xx, yy, zz)==17||getTile(xx, yy, zz)==18)&&Entity.getHealth(jungle[n])<=25){
ESP.setHealth(jungle[n], Entity.getHealth(jungle[n])+1);
return;
}
}}}
},
findHuman : function(name){
for each(var e in Entity.getAll()){
if(Player.getName(e)==name){
return e;
}
}
},
zombieFireAttack : function(n){
px = Math.floor(Entity.getX(z2b[n]));
py = Entity.getY(z2b[n])-1;
pz = Math.floor(Entity.getZ(z2b[n]));
yaw = Math.floor(Entity.getYaw(z2b[n]));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
var z2c = Math.floor(Math.random()*2);
if(z2c==0){
for(var xx=px+5*sin-1;xx<px+5*sin+2;xx++)
for(var zz=pz+5*cos-1;zz<pz+5*cos+2;zz++)
setTile(xx, py+1, zz, 51);
}
if(z2c==1){
for(var gun=3;gun<20;gun++)
setTile(px+gun*sin, py+1, pz+gun*cos, 51);
}
},
zombieWaterAttack : function(n){
px = Math.floor(Entity.getX(z3b[n]));
py = Entity.getY(z3b[n])-1;
pz = Math.floor(Entity.getZ(z3b[n]));
yaw = Math.floor(Entity.getYaw(z3b[n]));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
var z3c = Math.floor(Math.random()*2);
if(z3c==0){
setTile(px+5*sin, py+1, pz+5*cos, 8);
z3x[n] = px+5*sin;
z3y[n] = py+1;
z3z[n] = pz+5*cos;
}
if(z3c==1){
for(var yy=py+1;yy<py+4;yy++)
setTile(px+6*sin, yy, pz+6*cos, 79);
}
},
necroAttack : function(n){
px = Math.floor(Entity.getX(ne4b[n]));
py = Entity.getY(ne4b[n])-1;
pz = Math.floor(Entity.getZ(ne4b[n]));
yaw = Math.floor(Entity.getYaw(ne4b[n]));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
var ne4d = Math.floor(Math.random()*5);
if(ne4d==0){
for(var xx=px+5*sin-1;xx<px+5*sin+2;xx++)
for(var zz=pz+5*cos-1;zz<pz+5*cos+2;zz++)
setTile(xx+1, py+1, zz, 51);
}
if(ne4d==1){
for(var gun=3;gun<20;gun++)
explode(px+gun*sin, py+2, pz+gun*cos, 1.5);
}
if(ne4d==2){
for(var gun=5;gun<15;gun++)
setTile(px+gun*sin, py+1, pz+gun*cos, 30);
}
if(ne4d==3){
for(var xx=px+5*sin-1;xx<px+5*sin+2;xx++)
for(var yy=py-1;yy<py+1;yy++)
for(var zz=pz+5*cos-1;zz<pz+5*cos+2;zz++)
setTile(xx, yy, zz-2, 0);
}
if(ne4d==4){
ESP.antiLack(3);
explode(px+5*sin, py+1, pz+5*cos, 3);
}
},
kiritoHyperPlus : function(s, ep, r, n){
var px, py, pz;
for each(var e in Entity.getAll()){
px = Math.abs(Entity.getX(s)-Entity.getX(e));
py = Math.abs((Entity.getY(s)-1)-Entity.getY(e));
pz = Math.abs(Entity.getZ(s)-Entity.getZ(e));
if(px<=r&&py<=r&&pz<=r&&!(e==s||e==ep)&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-n);
}
}
},
solarHyperPlus : function(s, r){
var px, py, pz;
for each(var e in Entity.getAll()){
px = Math.abs(Entity.getX(s)-Entity.getX(e));
py = Math.abs((Entity.getY(s)+1)-Entity.getY(e));
pz = Math.abs(Entity.getZ(s)-Entity.getZ(e));
if(px<=r&&py<=r&&pz<=r&&s!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-15);
Entity.setFireTicks(e, 20);
}
}
},
lunarHyperPlus : function(s, r){
var px, py, pz;
for each(var e in Entity.getAll()){
px = Math.abs(Entity.getX(s)-Entity.getX(e));
py = Math.abs((Entity.getY(s)+1)-Entity.getY(e));
pz = Math.abs(Entity.getZ(s)-Entity.getZ(e));
if(px<=r&&py<=r&&pz<=r&&s!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-17);
if(ESP.isPlayer(e)) setTile(Entity.getX(e), Entity.getY(e)-1, Entity.getZ(e), 30);
else setTile(Entity.getX(e), Entity.getY(e), Entity.getZ(e), 30);
}
}
},
addEMButton : function(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
btn = new android.widget.PopupWindow();
var layout = new android.widget.RelativeLayout(ctx);
var button = new android.widget.Button(ctx);
button.setText("EM");
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
adH = Entity.getHealth(ad);
if(multi==false){
openESPManager();
}
else if(multi==true){
openSemiESPManager();
}
}}));
if(emcolor==0){
button.setBackgroundColor(android.graphics.Color.argb(70, 0, 0, 0));
}
else if(emcolor==1){
button.setBackgroundColor(android.graphics.Color.argb(70, 255, 255, 255));
}
else if(emcolor==2){
button.setBackgroundColor(android.graphics.Color.argb(0, 0, 0, 0));
}
layout.addView(button);
btn.setContentView(layout);
btn.setWidth(dip2px(ctx, 48));
btn.setHeight(dip2px(ctx, 48));
btn.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
if(locate==1){
btn.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 150, 70);
}
else if(locate==2){
btn.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.TOP, 2, 0);
}
else if(locate==3){
btn.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 2, 110);
}
else if(locate==4){
btn.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.CENTER, 2, 0);
}
else if(locate==5){
btn.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);
}
else if(locate==6){
btn.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.CENTER, 2, 0);
}
else if(locate==8){
btn.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.BOTTOM, 2, 0);
}
else if(locate==9){
btn.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.BOTTOM, 2, 2);
}
else if(locate==10){
btn.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, ESP.read("btnX"), ESP.read("btnY"));
}
else{
btn.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.BOTTOM, 2, 2);
}
}
catch(e){
ESP.toast("이 디바이스에서는 ESP Maganer를 사용할 수 없습니다.");
}
}
}));
},
random : function(n){
return Math.floor(Math.random()*n);
},
zweiHyperPlus : function(s, r, n){
var px, py, pz;
zw4b[n] = [];
for each(var e in Entity.getAll()){
px = Math.abs(Entity.getX(s)-Entity.getX(e));
py = Math.abs(Entity.getY(s)-Entity.getY(e));
pz = Math.abs(Entity.getZ(s)-Entity.getZ(e));
if(px<=r&&py<=r&&pz<=r&&s!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-3);
zwx[n] = Entity.getX(e);
if(ESP.isPlayer(e)) zwy[n] = Entity.getY(e)-2;
else zwy[n] = Entity.getY(e)-1;
zwz[n] = Entity.getZ(e);
setTile(zwx[n]+1, zwy[n]+2, zwz[n]+1, 79);
setTile(zwx[n]+1, zwy[n]+2, zwz[n]-1, 79);
setTile(zwx[n]-1, zwy[n]+2, zwz[n]+1, 79);
setTile(zwx[n]-1, zwy[n]+2, zwz[n]-1, 79);
zw4b[n].push([zwx[n], zwy[n], zwz[n]]);
}
}
},
skillInfo : function(title, msg){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var dialog = new android.app.AlertDialog.Builder(ctx,android.app.AlertDialog.THEME_HOLO_DARK);
var text = new android.widget.TextView(ctx);
text.setText(msg);
text.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle(title);
dialog.setView(scroll);
dialog.setNegativeButton("확인",null);
dialog.show();
}
catch(e){
ESP.sbm(e+", "+e.lineNumber);
}
}}));
},
infoDialog : function(title, msg, maker){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var text = new android.widget.TextView(ctx);
text.setText(msg);
text.setTextSize(18);
var txt = new android.widget.TextView(ctx);
txt.setText("© "+maker);
txt.setTextSize(15);
txt.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(txt);
var dialog = makeDialog(title, layout, "확인", null);
dialog.show();
}
catch(e){
ESP.sbm(e+", "+e.lineNumber);
}
}
}));
},
energyHyperPlus : function(s, r, n){
var px, py, pz;
for each(var e in Entity.getAll()){
px = Math.abs(Entity.getX(s)-Entity.getX(e));
py = Math.abs((Entity.getY(s)+1)-Entity.getY(e));
pz = Math.abs(Entity.getZ(s)-Entity.getZ(e));
if(px<=r&&py<=r&&pz<=r&&s!=e&&Entity.getEntityTypeId(e)<64){
explode(Entity.getX(e), Entity.getY(e)+0.3, Entity.getZ(e), 1.5);
en4b[n].push(e);
}
}
},
aiSbm : function(msg){
clientMessage("<S.B.-a.i.> "+msg);
},
aipType : function(){
return Level.getSignText(espch[0], espch[1]+1, espch[2], 2);
},
isPlayer : function(e){
if(Entity.getEntityTypeId(ESP.getUser())==Entity.getEntityTypeId(e)){
return true;
}
else{
return false;
}
},
healTA : function(){
for(var xx=Entity.getX(taiga)-2;xx<Entity.getX(taiga)+3;xx++){
for(var yy=Entity.getY(taiga)-2;yy<Entity.getY(taiga)+2;yy++){
for(var zz=Entity.getZ(taiga)-2;zz<Entity.getZ(taiga)+3;zz++){
if((getTile(xx, yy, zz)==17||getTile(xx, yy, zz)==18)&&Entity.getHealth(taiga)<=25){
ESP.setHealth(taiga, Entity.getHealth(taiga)+1);
return;
}
}}}
},
setBlock : function(x, y, z, s){
var r = ESP.random(5)+1;
if(s==0) setTile(x, y-1, z, r);
if(s==1) setTile(x, y+1, z, r);
if(s==2) setTile(x, y, z-1, r);
if(s==3) setTile(x, y, z+1, r);
if(s==4) setTile(x-1, y, z, r);
if(s==5) setTile(x+1, y, z, r);
},
getDisBetwPoints : function(x, y, z){
var px, py, pz, dis;
px = x-wox[1];
py = y-woy[1];
pz = z-woz[1];
dis = Math.sqrt(Math.pow(px, 2)+Math.pow(py, 2)+Math.pow(pz, 2));
return dis;
},
getNearEntity : function(s, r){
var px, py, pz;
var ee = new Array();
var dis = new Array();
var rr = Math.pow(r, 2);
for each(var e in Entity.getAll()){
px = Math.pow(Entity.getX(s)-Entity.getX(e), 2);
py = Math.pow(Entity.getY(s)-Entity.getY(e), 2);
pz = Math.pow(Entity.getZ(s)-Entity.getZ(e), 2);
if(px<=rr&&py<=rr&&pz<=rr&&s!=e&&Entity.getEntityTypeId(e)<64){
ee.push(e);
dis.push(px+py+pz);
}
}
if(ee[0]==null){
return -1;
}
else{
var min = dis[0];
var e2 = ee[0];
for(var n=0;n<ee.length;n++){
if(min>dis[n]){
min = dis[n];
e2 = ee[n];
}
}
return e2;
}
},
save : function(name, msg){
try{
var file = new java.io.File(sdcard+"/darkTornado/ESP-SB/"+name+".txt");
var fos = new java.io.FileOutputStream(file);
var str = new java.lang.String(msg);
fos.write(str.getBytes());
fos.close();
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
},
read : function(name){
try{
var file = new java.io.File(sdcard+"/darkTornado/ESP-SB/"+name+".txt");
if(!(file.exists())) return "";
var fis = new java.io.FileInputStream(file);
var isr = new java.io.InputStreamReader(fis);
var br = new java.io.BufferedReader(isr);
var str = br.readLine();
var line = "";
while((line = br.readLine()) != null){
str += "\n" + line;
}
fis.close();
isr.close();
br.close();
return str;
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
},
makeDir : function(){
try{
var forder = new java.io.File(sdcard+"/darkTornado/");
var forder2 = new java.io.File(sdcard+"/darkTornado/ESP-SB/");
forder.mkdir();
forder2.mkdir();
}
catch(e){
ES.toast(e+", "+e.lineNumber);
}
},
download : function(url, name){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var file = new java.io.File(sdcard+"/darkTornado/ESP-SB/"+name);
if(file.exists()){
ESP.toast("이미 다운되어 있습니다.");
return;
}
if(checkInternet()){
var uri = new android.net.Uri.parse(url);
var dm = new android.app.DownloadManager.Request(uri);
dm.setTitle("초능력자 대전 추가 파일 다운로드");
dm.setDescription("추가 파일 다운로드 중...");
dm.setDestinationInExternalPublicDir("darkTornado/ESP-SB", name);
dm.setNotificationVisibility(1);
ctx.getSystemService(android.content.Context.DOWNLOAD_SERVICE).enqueue(dm);
ESP.toast("추가 파일 다운로드를 시작합니다.");
}
else{
ESP.toast("인터넷에 연결되어있지 않습니다.");
}
}
catch(e){
ESP.toast("다운로드 실패. 오류 : "+e);
}
}
}));
}




};


function dip2px(ctx, dips){
return Math.ceil(dips * ctx.getResources().getDisplayMetrics().density);
}


function dtm(msg){
clientMessage("<§0Dark Tornado§f> "+msg);
}


function hcm(msg){
clientMessage("<§bHidden Command§f> "+msg);
}


function addDarkRender(renderer){
var sin, cos;
var model = renderer.getModel();
var head = model.getPart("head");
var body = model.getPart("body");
var rArm = model.getPart("rightArm");
var lArm = model.getPart("leftArm");
var rLeg = model.getPart("rightLeg");
var lLeg = model.getPart("leftLeg");
head.clear();
body.clear();
rLeg.clear();
lLeg.clear();
rArm.clear();
lArm.clear();
head.setTextureOffset(0, 0);
head.addBox(-4, -8, -4, 8, 8, 8);
body.setTextureOffset(16, 16);
body.addBox(-4, 0, -2, 8, 12, 4);
rLeg.setTextureOffset(0, 16);
rLeg.addBox(-2, 0, -2, 4, 12, 4);
lLeg.setTextureOffset(0, 16);
lLeg.addBox(-2, 0, -2, 4, 12, 4);
lArm.setTextureOffset(40, 16);
lArm.addBox(-1, -2, -1.5, 4, 12, 4); 
rArm.setTextureOffset(40, 16);
rArm.addBox(-3, -2, -1.5, 4, 12, 4); 

head.setTextureOffset(40, 20);
head.addBox(-1, -12, -2, 2, 2, 2);
for(var n=0;n<360;n++){
sin = Math.sin(n*Math.PI/27);
cos = Math.cos(n*Math.PI/27);
head.addBox(-1+3*sin, -11, -2+3*cos, 2, 2, 2);
head.addBox(-1+5*sin, -10, -2+5*cos, 2, 2, 2);
head.addBox(-1+7*sin, -9, -2+7*cos, 2, 2, 2);
head.addBox(-1+9*sin, -8, -2+9*cos, 2, 2, 2);
head.addBox(-1+11*sin, -7, -2+11*cos, 2, 2, 2);
head.addBox(-1+13*sin, -6, -2+13*cos, 2, 2, 2);
}
}


function checkInternet(){
try{
var cm = ctx.getSystemService(android.content.Context.CONNECTIVITY_SERVICE);
var mobile = cm.getNetworkInfo(cm.TYPE_MOBILE);
var wifi = cm.getNetworkInfo(cm.TYPE_WIFI);
if(mobile.isConnected()||wifi.isConnected()){
return true;
}
else{
return false;
}
}
catch(e){
print(e);
}
}


//Teleportation
function teleport(e, x, y, z){
if(ESP.isPlayer(e)){
var ttt = Level.spawnMob(x, y, z, 81);
Entity.rideAnimal(e, ttt);
if(!mcpev3) Entity.remove(ttt);
else tttt.push({tp : ttt, tt : 3});
ModPE.showTipMessage("");
preventDefault();
}
else{
Entity.setPosition(e, x, y, z);
}

}


//Remote Killing
function killPlayer(name){
for each(var e in Entity.getAll()){
if(Player.getName(e)==name){
Entity.setHealth(e, 0);
ESP.sbm(Player.getName(e)+" was killed");
}
}
preventDefault();
}


//Remote Healing
function healPlayer(name){
for each(var e in Entity.getAll()){
if(Player.getName(e)==name){
Entity.setHealth(e, 20);
ESP.sbm(Player.getName(e)+" was healed");
}
}
preventDefault();
}


//Arrow Removing
function removeArrow(){
for(var e in Entity.getAll()){
if(Entity.getEntityTypeId(e)==80)
Entity.remove(e);
}

}


//checking night
function nightCheck(){
var nc1, nc2, nc3;
nc1 = Level.getTime();
try{
var vers = ModPE.getMinecraftVersion().toString().split(".");
if(Number(vers[1])>=12) nc2 = nc1/24000;
else nc2 = nc1/19200;
}
catch(e){
nc2 = nc1/19200;
}
nc3 = nc2-Math.floor(nc2);
if(nc3<0.5) return false;
else if(nc3>=0.5) return true;

}


function assaulterHyperPlus(s, r, n){
var px, py, pz;
for each(var e in Entity.getAll()){
px = Math.abs(Entity.getX(s)-Entity.getX(e));
py = Math.abs((Entity.getY(s)-1)-Entity.getY(e));
pz = Math.abs(Entity.getZ(s)-Entity.getZ(e));
if(px<=r&&py<=r&&pz<=r&&s!=e&&Entity.getEntityTypeId(e)<64)
Entity.setHealth(e, Entity.getHealth(e)-n);
}
}


function vampireHyperPlus(s, ec, r, n){
var px, py, pz;
for each(var e in Entity.getAll()){
px = Math.abs(Entity.getX(s)-Entity.getX(e));
py = Math.abs((Entity.getY(s)-1)-Entity.getY(e));
pz = Math.abs(Entity.getZ(s)-Entity.getZ(e));
if(px<=r&&py<=r&&pz<=r&&!(s==e||ec==e)&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-n);
}
}
}


function arroundMobHealthDown(s, r, n){
var px, py, pz;
for each(var e in Entity.getAll()){
px = Math.abs(Entity.getX(s)-Entity.getX(e));
py = Math.abs((Entity.getY(s)+1)-Entity.getY(e));
pz = Math.abs(Entity.getZ(s)-Entity.getZ(e));
if(px<=r&&py<=r&&pz<=r&&s!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-n);
}
}

}


function arroundMobFireTicks(s, r, n){
var px, py, pz;
for each(var e in Entity.getAll()){
px = Math.abs(Entity.getX(s)-Entity.getX(e));
py = Math.abs((Entity.getY(s)+1)-Entity.getY(e));
pz = Math.abs(Entity.getZ(s)-Entity.getZ(e));
if(px<=r&&py<=r&&pz<=r&&s!=e&&Entity.getEntityTypeId(e)<64){
Entity.setFireTicks(e, n);
}
}

}


function arroundMobBindPlus(s, r){
var px, py, pz;
for each(var e in Entity.getAll()){
px = Math.abs(Entity.getX(s)-Entity.getX(e));
py = Math.abs((Entity.getY(s)+1)-Entity.getY(e));
pz = Math.abs(Entity.getZ(s)-Entity.getZ(e));
if(px<=r&&py<=r&&pz<=r&&s!=e&&Entity.getEntityTypeId(e)<64){
if(Entity.getEntityTypeId(e)==0||Entity.getEntityTypeId(e)==63){
setTile(Entity.getX(e), Entity.getY(e)-1, Entity.getZ(e), 30);
}
else{
setTile(Entity.getX(e), Entity.getY(e), Entity.getZ(e), 30);
}
Entity.setHealth(e, Entity.getHealth(e)-5);
}
}

}


function skillCool(user, n){
if(user==ad){
if(n==1){
if(air.indexOf(ad)!=-1||ad==tp){
adt1 = 75;
}
else{
adt1 = 150;
}
}
if(n==2){
adt2 = 300;
}
if(n==3){
adt3 = 300;
}
if(n==4){
if(titan.indexOf(ad)!=-1){
adt4 = 2700;
}
else{
adt4 = 1800;
}
}
}

}


function selectUser(arr, type, text){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var player = null;
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<arr.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(arr[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = arr[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var dialog = makeDialog("Select User("+text+")", layout, "취소", null, "확인", function(){
if(type==1){
ESP.send(player);
ESP.toast(text+" was sent.");
}
else if(type==2){
ESP.kill(player);
ESP.toast(text+" was killed.");
}
else if(type==3){
ESP.heal(player);
ESP.toast(text+" was healed.");
}
else if(type==4){
teleport(player, Entity.getX(ad), Entity.getY(ad)+1, Entity.getZ(ad));
ESP.toast(text+" was called.");
}
});
dialog.show();
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}


var Cool = {
isFinished : function(t){
if(t==0||t==null||t==undefined){
return true;
}
else{
return false;
}
},
isFalse : function(t){
if(t==false||t==null||t==undefined){
return true;
}
else{
return false;
}
}

};


//town protection
function townCheck(x, z){
if(town&&x>=110&&x<=255&&z<=92&&z>=0){
return true;
}
else{
return false;
}

}


function nox(){
return Level.getSignText(espch[0], espch[1]+1, espch[2], 1);
}


function autoRecover(x, y, z, r, b){
for(var xx=x-r;xx<x+r+1;xx++)
for(var zz=z-r;zz<z+r+1;zz++)
setTile(xx, y, zz, b);
}


function setTiles(x1, x2, y1, y2, z1, z2, b, bd){
for(var xx=x1;xx<x2+1;xx++){
for(var yy=y1;yy<y2+1;yy++){
for(var zz=z1;zz<z2+1;zz++){
setTile(xx, yy, zz, b, bd);
}}}
}


//passive+
function defenserHit(esp, n){
if(n>1){
ESP.setHealth(esp, Entity.getHealth(esp)+2);
}
else{
ESP.setHealth(esp, Entity.getHealth(esp)+1);
}

}

function hawkEyeHit(n){
ESP.setHealth(hawk[n], Entity.getHealth(hawk[n])+1);
}

function lightGemstoneHit(){
if(nightCheck()==false){
ESP.setHealth(gem, Entity.getHealth(gem)+1);
}

}


/*auto update
function autoUpdate(){
var day = new Date();
var y = day.getFullYear();
var m = day.getMonth()+1;
var d = day.getDate();
if(y>=2015&&m>=11&&d>=1){
return 3;
}
else if(y>=2015&&m>=10&&d>=1){
return 2;
}
else if(y>=2015&&m>=9&&d>=1){
return 1;
}
else{
return 0;
}

}
*/

ESP.makeDir();

function newLevel(){
//script version & map check
version = "7.9.0";
espn = 100;
ESP.mapCheck("§bThe Battle70&Boss");

//read data
locate = ESP.read("em");
emcolor = ESP.read("em2");


//message
if(auto==true){
ESP.showDialog("초능력자 대전 "+version);
}
else{
ESP.toast("초능력자 대전 "+version+" by Dark Tornado\n                       자동수복 비활성화");
}

//Removing Mob +α
if(auto==true){
anti3 = 2700;
anti4 = 900;
}

//finding admin
adt = 46;

//Item+
ModPE.setItem(511, "book_writable", 0, "Dark Tornado's Book");

//adding button
if(mp3==true)
ESP.addEMButton();

//MCPE version check
try{
Player.setCanFly(true);
mcpev = true;
exp.onoff = true;
try{
var mcpev2 = ModPE.getMinecraftVersion().toString.split(".");
if(mcpev2[1]=="12"){
mcpev4 = true;
exp.onoff = false;
}
}
catch(e){
ESP.toast("0.9.0~0.9.5에서는 일부 기능이 작동하지 않습니다.");
}
}
catch(e){
ESP.toast("이 스크립트는 더이상 0.8.1 이하를 지원하지 않습니다.");
mcpev = false;
}
if(mp&&mp3&&mpk){
town = true;
}
espOnoff = true;


//passive on
passOnoff = true;

//else
if(auto==true&&ESP.random(20)==0){
hhhhh = 150;
ESP.toast("They are Coming...");
}

try{
Entity.addEffect(Player.getEntity(), MobEffect.nightVision, 1, 0, true, false);
mcpev3 = true;
ESP.toast("MCPE 0.11.1 이상에서는 순간이동을 할 때, 눈덩이가 보이고 딜레이가 발생합니다.");
}
catch(e){
mcpev3 = false;
}



}


//select&ability
function useItem(x, y, z, i, b, s, it, bd){
//admin's
if(i==347){
if(admin2==0){
Entity.setPosition(Player.getEntity(), x ,y+3, z);
}
if(admin2==1){
pe = Player.getEntity();
Entity.setVelX(pe, x-Player.getX());
Entity.setVelY(pe, y-Player.getY());
Entity.setVelZ(pe, z-Player.getZ());
}
if(admin2==2){
pe = Player.getEntity();
Entity.setVelX(pe, x-Player.getX());
Entity.setVelY(pe, 0.7);
Entity.setVelZ(pe, z-Player.getZ());
}
if(admin2==3){
Entity.setVelY(Player.getEntity(), 1);
}
if(admin2==4){
teleport(Player.getEntity(), x ,y+3, z);
}

}
if(i==345&&multi==false){
if(admin==0){
for(var xx=x-2;xx<x+3;xx++){
for(var zz=z-2;zz<z+3;zz++){
setTile(xx,y,zz,2);
for(var yy=y-2;yy<y;yy++)
setTile(xx,yy,zz,3);}}
}
if(admin==1){
if(b==2){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
}
if(b!=2){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
}
}
if(admin==2){
if(b==2){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
for(var xx=x-2;xx<x+3;xx++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx,y,zz,2);
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y-2;yy<y;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx,yy,zz,3);
}
if(b!=2){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
for(var xx=x-2;xx<x+3;xx++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx,y-1,zz,2);
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y-3;yy<y-1;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx,yy,zz,3);
}
}
if(admin==3){
px = Math.floor(Player.getX());
py = Math.floor(Player.getY());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
pitch = Math.floor(getPitch());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
tan = -Math.sin(pitch/180*Math.PI);
pcos = Math.cos(pitch/180*Math.PI);
for(gun=4;gun<50;gun++)
explode(px+gun*sin*pcos, py+0.8+gun*tan, pz+gun*cos*pcos, 2);
}
if(admin==4){
for(var xx=x-8;xx<x+9;xx++)
for(var yy=y+1;yy<y+11;yy++)
for(var zz=z-8;zz<z+9;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
for(var xx=x-8;xx<x+9;xx++)
for(var zz=z-8;zz<z+9;zz++)
if(getTile(xx, yy, zz)!=98){
setTile(xx,y,zz,2);
}
for(var xx=x-8;xx<x+9;xx++)
for(var yy=y-5;yy<y;yy++)
for(var zz=z-8;zz<z+9;zz++)
setTile(xx,yy,zz,3);
}
if(admin==5){
Player.setHealth(Entity.getHealth(Player.getEntity())+2);
preventDefault();
}
if(admin==7){
if(tym==false){
Level.setTime(10000);
setNightMode(12000);
preventDefault();
tym = true;
}
else if(tym==true){
ad1 = true;
ad1a = 225;
Level.setTime(14000);
preventDefault();
tym = false;
}
}

}
if(b==44&&bd==2){
Entity.setPosition(Player.getEntity(),18,13,19);
ESP.sbm("Warped to Hideout");
}
if(b==101){
if(mp==false){
Entity.setPosition(Player.getEntity(),127,53,23);
}
if(mp==true){
Entity.setPosition(Player.getEntity(),6,53.5,23);
}
ESP.sbm("Returned to Admin's House");
}
if(b==47){
if(multi==false){
Level.dropItem(x, y+0.6, z, 0.6, 340, 1, 0);
}
else if(multi==true){
addItemInventory(340, 1, 0);
}
}

//Dark Tornado jr.
if(dtj==ESP.getUser()&&townCheck(x, z)==false){
if(i==302&&dt1a==0){
if(dtl==false){
explode(Math.floor(x)+0.5, y+1, Math.floor(z)+0.5, 3);
for(var xx=x-3;xx<x+4;xx++)
for(var yy=y-5;yy<y+1;yy++)
for(var zz=z-3;zz<z+4;zz++)
if(getTile(xx, yy, zz)==0){
setTile(xx, yy, zz, 51);
}
}
else if(dtl==true){
explode(x, y+2, z, 4);
for(var xx=x-4;xx<x+5;xx++)
for(var yy=y-7;yy<y+1;yy++)
for(var zz=z-4;zz<z+5;zz++)
if(getTile(xx, yy, zz)==0){
setTile(xx, yy, zz, 51);
}
}
dt1 = true;
dt1a = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&dt2a==0){
px = Math.floor(Player.getX());
py = Math.floor(Player.getY());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
pitch = Math.floor(getPitch());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
tan = -Math.sin(pitch/180*Math.PI);
pcos = Math.cos(pitch/180*Math.PI);
if(dtl==false){
for(var gun=4;gun<35;gun++)
setTile(px+gun*sin*pcos, py+gun*tan+0.8, pz+gun*cos*pcos, 79);
}
else if(dtl==true){
for(var gun=4;gun<50;gun++)
setTile(px+gun*sin*pcos, py+gun*tan+0.8, pz+gun*cos*pcos, 79);
}
dt2 = true;
dt2a = 300;
skillCool(ESP.getUser(), 2);
}
if(i==305&&dt4a==0){
ESP.sbm("Elemental Assault");
if(dtl==false){
Player.setHealth(Entity.getHealth(Player.getEntity())+20);
}
else if(dtl==true){
Player.setHealth(Entity.getHealth(Player.getEntity())+30);
}
dtx = Player.getX();
dty = Player.getY()-2;
dtz = Player.getZ();
setTile(dtx+14, dty+8, dtz, 8);
setTile(dtx-14, dty+8, dtz, 8);
setTile(dtx, dty+8, dtz+14, 8);
setTile(dtx, dty+8, dtz-14, 8);
for(var xx=dtx-13;xx<dtx+14;xx++){
setTile(xx, dty+1, dtz+13, 30);
setTile(xx, dty+1, dtz-13, 30);
}
for(var zz=dtz-13;zz<dtz+14;zz++){
setTile(dtx+13, dty+1, zz, 30);
setTile(dtx-13, dty+1, zz, 30);
}
for(var xx=dtx-12;xx<dtx+13;xx++){
for(var zz=dtz-12;zz<dtz+13;zz++){
setTile(xx, dty, zz, 87);
setTile(xx, dty+1, zz, 51);}}
for(var xx=dtx-10;xx<dtx+11;xx++){
for(var zz=dtz-10;zz<dtz+11;zz++){
setTile(xx, dty, zz, 2);
setTile(xx, dty+1, zz, 0);}}
setTile(dtx+10, dty+1, dtz+10, 18);
setTile(dtx+10, dty+1, dtz-10, 18);
setTile(dtx-10, dty+1, dtz+10, 18);
setTile(dtx-10, dty+1, dtz-10, 18);
setTile(dtx+10, dty+10, dtz, 79);
setTile(dtx, dty+10, dtz+10, 79);
setTile(dtx-10, dty+10, dtz, 79);
setTile(dtx, dty+10, dtz-10, 79);
setTile(dtx+7, dty+1, dtz+7, 49);
setTile(dtx+7, dty+1, dtz-7, 49);
setTile(dtx-7, dty+1, dtz+7, 49);
setTile(dtx-7, dty+1, dtz-7, 49);
setTile(dtx+7, dty+7, dtz, 155);
setTile(dtx, dty+7, dtz+7, 155);
setTile(dtx-7, dty+7, dtz, 155);
setTile(dtx, dty+7, dtz-7, 155);
setTile(dtx+4, dty+1, dtz+4, 46);
setTile(dtx+4, dty+1, dtz-4, 46);
setTile(dtx-4, dty+1, dtz+4, 46);
setTile(dtx-4, dty+1, dtz-4, 46);
for(var xx=dtx-2;xx<dtx+3;xx++){
for(var zz=dtz-2;zz<dtz+3;zz++){
setTile(xx, dty+1, zz, 17);
setTile(xx, dty+2, zz, 18);}}
for(var xx=dtx-1;xx<dtx+2;xx++){
for(var yy=dty+1;yy<dty+3;yy++)
for(var zz=dtz-1;zz<dtz+2;zz++){
setTile(xx, yy, zz, 0);
setTile(xx, dty+5, zz, 20);}}
for(var xx=dtx-9;xx<dtx+10;xx++)
for(var zz=dtz-9;zz<dtz+10;zz++)
Level.spawnMob(xx, dty+52, zz, 80, "");
dt4 = true;
dt4a = 1800;
skillCool(ESP.getUser(), 4);
}

}
//fire expert
if(fe==ESP.getUser()&&townCheck(x, z)==false){
if(i==302&&fe1a==0){
fexa = Math.abs(x-Player.getX());
feza = Math.abs(z-Player.getZ());
if(fexa>feza){
for(var zz=z-2;zz<z+3;zz++){
setTile(x, y+1, zz, 51);
setTile(x, y+2, zz, 87);
setTile(x, y+3, zz, 51);
}
}
else if(fexa<feza){
for(var xx=x-2;xx<x+3;xx++){
setTile(xx, y+1, z, 51);
setTile(xx, y+2, z, 87);
setTile(xx, y+3, z, 51);
}
}
fe1 = true;
fe1a = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&fe2a==0){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<30;gun++){
setTile(px+gun*sin, y, pz+gun*cos, 0);
setTile(px+gun*sin, y-1, pz+gun*cos, 51);
}
fe2 = true;
fe2a = 300;
skillCool(ESP.getUser(), 2);
}
if(i==305){
if(fe4a==0&&fe4b==false){
ESP.heal(fe);
ESP.sbm("Heated Area");
fex = Player.getX();
fey = Player.getY()-2;
fez = Player.getZ();
for(var xx=fex-9;xx<fex+10;xx++){
for(var zz=fez-9;zz<fez+10;zz++){
setTile(xx, fey, zz, 87);
setTile(xx, fey+1, zz, 51);
}}
for(var fff=2;fff<11;fff++){
setTile(fex+fff, fey, fez+fff, 11);
setTile(fex+fff, fey, fez-fff, 11);
setTile(fex-fff, fey, fez+fff, 11);
setTile(fex-fff, fey, fez-fff, 11);
}
for(var xx=fex-1;xx<fex+2;xx++)
for(var zz=fez-1;zz<fez+2;zz++)
setTile(xx, fey, zz, 89);
for(var xx=fex-10;xx<fex+11;xx++){
for(var zz=fez-10;zz<fez+11;zz++){
setTile(fex+10, fey, zz, 11);
setTile(fex-10, fey, zz, 11);
setTile(xx, fey, fez+10, 11);
setTile(xx, fey, fez-10, 11);
setTile(fex+11, fey, zz, 11);
setTile(fex-11, fey, zz, 11);
setTile(xx, fey, fez+11, 11);
setTile(xx, fey, fez-11, 11);
}}
fe4b = true;
fe4 = true;
fe4a = 1800;
skillCool(ESP.getUser(), 4);
}
else if(fe4b==true){
for(var xx=fex-11;xx<fex+12;xx++){
for(var zz=fez-11;zz<fez+12;zz++){
setTile(xx, fey, zz, 2);
setTile(xx, fey+1, zz, 0);
}}
fe4b = false;
}
}

}

//select
if(multi==false){
//on
if(b==49){
espch = [x, y, z];
if(ESP.checkSkill(1)=="Fire"&&ESP.checkSkill(2)=="User"){
fire[0] = ESP.getUser();
ESP.sbm("Fire User on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Water"&&ESP.checkSkill(2)=="Controller"){
water[0] = ESP.getUser();
ESP.sbm("Water Controller on");
setTile(x, y, z, 246);
Level.dropItem(x, y+1, z, 0.5, 329, 1, 0);
w5 = 900;
preventDefault();
}
if(ESP.checkSkill(1)=="Nature"&&ESP.checkSkill(2)=="Guardian"){
tree[0] = ESP.getUser();
ESP.sbm("Nature Guardian on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Creeper"){
creeper[0] = ESP.getUser();
ESP.sbm("I am Creeper on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Soil"&&ESP.checkSkill(2)=="Master"){
soil[0] = ESP.getUser();
ESP.sbm("Soil Master on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Summoner"){
summon[0] = ESP.getUser();
ESP.sbm("The Summoner on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Luminous"){
light[0] = ESP.getUser();
ESP.sbm("The Luminous on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Darkness"){
dark[0] = ESP.getUser();
ESP.sbm("The Darkness on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Freezer"){
ice[0] = ESP.getUser();
ESP.sbm("The Freezer on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Desert"&&ESP.checkSkill(2)=="Maker"){
sand[0] = ESP.getUser();
ESP.sbm("Desert Maker on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Vampire"){
blood[0] = ESP.getUser();
ESP.sbm("The Vampire on");
setTile(x, y, z, 246);
if(mp3==true){
if(nightCheck()==true&&ESP.random(5)==0){
hhhhh = 150;
ESP.toast("They are coming.");
}
}
preventDefault();
}
if(ESP.checkSkill(1)=="Air"&&ESP.checkSkill(2)=="Bander"){
air[0] = ESP.getUser();
ESP.sbm("Air Bander on");
setTile(x, y, z, 246);
Level.dropItem(x, y+1, z, 0.5, 329, 1, 0);
a5 = 900;
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Elsa"){
elsa[0] = ESP.getUser();
ESP.sbm("I am Elsa on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Mass"&&ESP.checkSkill(2)=="Titan"){
titan[0] = ESP.getUser();
ESP.sbm("Mass Titan on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Binder"){
bind[0] = ESP.getUser();
ESP.sbm("The Binder on");
setTile(x, y, z, 246);
Level.dropItem(x, y+1, z, 0.5, 329, 1, 0);
b5 = 900;
preventDefault();
}
if(ESP.checkSkill(1)=="Thunder"&&ESP.checkSkill(2)=="Breaker"){
thunder[0] = ESP.getUser();
ESP.sbm("Thunder Breaker on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Mechanic"){
meca[0] = ESP.getUser();
ESP.sbm("The Mechanic on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="TNT"&&ESP.checkSkill(2)=="Expert"){
tnt[0] = ESP.getUser();
ESP.sbm("TNT Expert on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Trap"&&ESP.checkSkill(2)=="Creater"){
trap[0] = ESP.getUser();
ESP.sbm("Trap Creater on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Healer"){
heal[0] = ESP.getUser();
ESP.sbm("The Healer on");
setTile(x, y, z, 246);
Level.dropItem(x, y+1, z, 0.5, 329, 1, 0);
h5 = 900;
preventDefault();
}
if(ESP.checkSkill(1)=="Nether"&&ESP.checkSkill(2)=="Man"){
nether[0] = ESP.getUser();
ESP.sbm("Nether Man on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Cloud"&&ESP.checkSkill(2)=="Manager"){
cloud[0] = ESP.getUser();
ESP.sbm("Cloud Manager on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Assassin"){
assassin[0] = ESP.getUser();
ESP.sbm("The Assassin on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Arrow"&&ESP.checkSkill(2)=="Shooter"){
arrow[0] = ESP.getUser();
ESP.sbm("Arrow Shooter on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Mage"){
mage[0] = ESP.getUser();
ESP.sbm("The Mage on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Defenser"){
defense[0] = ESP.getUser();
ESP.sbm("The Defenser on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Poison"&&ESP.checkSkill(2)=="Maven"){
poison[0] = ESP.getUser();
ESP.sbm("Poison Maven on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Ground"&&ESP.checkSkill(2)=="Melter"){
melt[0] = ESP.getUser();
ESP.sbm("Ground Melter on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Hyper"&&ESP.checkSkill(2)=="Freezer"){
hfreeze[0] = ESP.getUser();
ESP.sbm("Hyper Freezer on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Builder"){
builder[0] = ESP.getUser();
ESP.sbm("The Builder on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Soldier"){
soldier[0] = ESP.getUser();
ESP.sbm("The Soldier on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Assaulter"){
assault[0] = ESP.getUser();
ESP.sbm("The Assaulter on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Burster"){
burst[0] = ESP.getUser();
ESP.sbm("The Burster on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Warrior"){
warrior[0] = ESP.getUser();
ESP.sbm("The Warrior on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Ore"&&ESP.checkSkill(2)=="Collecter"){
ore[0] = ESP.getUser();
ESP.sbm("Ore Collecter on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Rich"){
rich[0] = ESP.getUser();
ESP.sbm("The Rich on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Teleporter"){
tp[0] = ESP.getUser();
ESP.sbm("The Teleporter on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Space"&&ESP.checkSkill(2)=="Warpper"){
space[0] = ESP.getUser();
ESP.sbm("Space Warpper on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Surround"&&ESP.checkSkill(2)=="Attacker"){
sattack[0] = ESP.getUser();
ESP.sbm("Surround Attacker on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Force"&&ESP.checkSkill(2)=="Shifter"){
force[0] = ESP.getUser();
ESP.sbm("Force Shifter on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Reinforce"){
rein[0] = ESP.getUser();
ESP.sbm("I am Reinforce on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Magnetism"&&ESP.checkSkill(2)=="Distorter"){
magnet[0] = ESP.getUser();
ESP.sbm("Magnetism Distorter on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Steve"){
steve[0] = ESP.getUser();
ESP.sbm("I am Steve on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Herobrine"){
hero[0] = ESP.getUser();
ESP.sbm("I am Herobrine on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Hermit"){
hermit[0] = ESP.getUser();
ESP.sbm("The Hermit on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Clay"&&ESP.checkSkill(2)=="Gatherer"){
clay[0] = ESP.getUser();
ESP.sbm("Clay Gatherer on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Kirito"){
kirito[0] = ESP.getUser();
ESP.sbm("I am Kirito on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Jungle"&&ESP.checkSkill(2)=="Former"){
jungle[0] = ESP.getUser();
ESP.sbm("Jungle Former on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Kanade"){
kanade[0] = ESP.getUser();
ESP.sbm("I am Kanade on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Time"&&ESP.checkSkill(2)=="Traveler"){
time[0] = ESP.getUser();
ESP.sbm("Time Traveler on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Sniper"){
snipe[0] = ESP.getUser();
ESP.sbm("The Sniper on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Zombie"&&ESP.checkSkill(2)=="Employer"){
zombie[0] = ESP.getUser();
ESP.sbm("Zombie Employer on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Necromancer"){
necro[0] = ESP.getUser();
ESP.sbm("The Necromancer on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Asuna"){
asuna[0] = ESP.getUser();
ESP.sbm("I am Asuna on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Holy"&&ESP.checkSkill(2)=="Knight"){
holy[0] = ESP.getUser();
ESP.sbm("Holy Knight on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Solar"&&ESP.checkSkill(2)=="Paladin"){
solar[0] = ESP.getUser();
ESP.sbm("Solar Paladin on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Lunar"&&ESP.checkSkill(2)=="Wizard"){
lunar[0] = ESP.getUser();
ESP.sbm("Lunar Wizard on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Hyper"&&ESP.checkSkill(2)=="Assaulter"){
has[0] = ESP.getUser();
ESP.sbm("Hyper Assaulter on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Random"&&ESP.checkSkill(2)=="Ability"){
random[0] = ESP.getUser();
ESP.sbm("Random Ability on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Reinforce"&&ESP.checkSkill(2)=="Zwei"){
zwei[0] = ESP.getUser();
ESP.sbm("Reinforce Zwei on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Decorater"){
deco[0] = ESP.getUser();
ESP.sbm("The Decorater on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Hyper"&&ESP.checkSkill(2)=="Summoner"){
hsum[0] = ESP.getUser();
ESP.sbm("Hyper Summoner on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Climate"&&ESP.checkSkill(2)=="Changer"){
climate[0] = ESP.getUser();
ESP.sbm("Climate Changer on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Remote"&&ESP.checkSkill(2)=="Raider"){
raid[0] = ESP.getUser();
ESP.sbm("Remote Raider on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Wind"&&ESP.checkSkill(2)=="Operater"){
wind[0] = ESP.getUser();
ESP.sbm("Wind Operater on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Energy"&&ESP.checkSkill(2)=="Transfer"){
energy[0] = ESP.getUser();
ESP.sbm("Energy Transfer on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Genocider"){
geno[0] = ESP.getUser();
ESP.sbm("The Genocider on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Server"&&ESP.checkSkill(2)=="Dominator"){
server[0] = ESP.getUser();
ESP.sbm("Server Dominator on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Outsider"){
out[0] = ESP.getUser();
ESP.sbm("The Outsider on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Railgun"){
rgun[0] = ESP.getUser();
ESP.sbm("I am Railgun on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Copying"&&ESP.checkSkill(2)=="Eye"){
copy[0] = ESP.getUser();
ESP.sbm("Copying Eye on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Dragon"&&ESP.checkSkill(2)=="Trainer"){
dragon[0] = ESP.getUser();
ESP.sbm("Dragon Trainer on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Hawk"&&ESP.checkSkill(2)=="Eye"){
hawk[0] = ESP.getUser();
ESP.sbm("Hawk Eye on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Solidifier"){
solid[0] = ESP.getUser();
ESP.sbm("The Solidifier on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Gravity"&&ESP.checkSkill(2)=="Twister"){
gravity[0] = ESP.getUser();
ESP.sbm("Gravity Twister on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Hyper"&&ESP.checkSkill(2)=="Assassin"){
hass = ESP.getUser();
ESP.sbm("Hyper Assassin on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Silent"&&ESP.checkSkill(2)=="Killer"){
sikill = ESP.getUser();
ESP.sbm("Silent Killer on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Black"&&ESP.checkSkill(2)=="Slayer"){
black = ESP.getUser();
ESP.sbm("Black Slayer on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Slasher"){
slash = ESP.getUser();
ESP.sbm("The Slasher on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Night"&&ESP.checkSkill(2)=="Worker"){
night = ESP.getUser();
ESP.sbm("Night Worker on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Light"&&ESP.checkSkill(2)=="Gemstone"){
gem = ESP.getUser();
ESP.sbm("Light Gemstone on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Dracula"){
dra = ESP.getUser();
ESP.sbm("The Dracula on");
setTile(x, y, z, 246);
if(mp3){
if(nightCheck()&&ESP.random(2)==0){
hhhhh = 150;
ESP.toast("They are coming.");
}
else if(!nightCheck()&&ESP.random(10)==0){
hhhhh = 150;
ESP.toast("They are coming.");
}
}
preventDefault();
}
if(ESP.checkSkill(1)=="Mushroom"&&ESP.checkSkill(2)=="Grower"){
if(mcpev){
mush = ESP.getUser();
ESP.sbm("Mushroom Grower on");
setTile(x, y, z, 246);
}
else{
ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
}
preventDefault();
}
if(ESP.checkSkill(1)=="Ender"&&ESP.checkSkill(2)=="Girl"){
if(mcpev){
ender = ESP.getUser();
ESP.sbm("Ender Girl on");
setTile(x, y, z, 246);
}
else{
ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
}
preventDefault();
}
if(ESP.checkSkill(1)=="Taiga"&&ESP.checkSkill(2)=="Appearer"){
if(mcpev){
taiga = ESP.getUser();
ESP.sbm("Taiga Appearer on");
setTile(x, y, z, 246);
}
else{
ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
}
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Ruiner"){
ruin = ESP.getUser();
ESP.sbm("The Ruiner on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Swamp"&&ESP.checkSkill(2)=="Generater"){
if(mcpev){
swamp = ESP.getUser();
ESP.sbm("Swamp Generater on");
setTile(x, y, z, 246);
}
else{
ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
}
preventDefault();
}
if(ESP.checkSkill(1)=="Arch"&&ESP.checkSkill(2)=="Summoner"){
if(mcpev){
asum = ESP.getUser();
ESP.sbm("Arch Summoner on");
setTile(x, y, z, 246);
}
else{
ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
}
preventDefault();
}
if(ESP.checkSkill(1)=="Arch"&&ESP.checkSkill(2)=="Mage"){
arch = ESP.getUser();
ESP.sbm("Arch Mage on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Puella"&&ESP.checkSkill(2)=="Magica"){
puella = ESP.getUser();
ESP.sbm("Puella Magica on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Hyper"&&ESP.checkSkill(2)=="Builder"){
hbuild = ESP.getUser();
ESP.sbm("Hyper Builder on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Scalar"&&ESP.checkSkill(2)=="Increaser"){
scalar = ESP.getUser();
ESP.sbm("Scalar Increaser on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Vector"&&ESP.checkSkill(2)=="Reflacter"){
vector = ESP.getUser();
ESP.sbm("Vector Reflacter on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Tensor"&&ESP.checkSkill(2)=="Veerer"){
tensor = ESP.getUser();
ESP.sbm("Tensor Veerer on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Arch"&&ESP.checkSkill(2)=="Mechanic"){
ameca = ESP.getUser();
ESP.sbm("Arch Mechanic on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Sealer"){
seal = ESP.getUser();
ESP.sbm("The Sealer on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Archangel"){
angel = ESP.getUser();
ESP.sbm("The Archangel on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="White"&&ESP.checkSkill(2)=="Eye"){
white = ESP.getUser();
ESP.sbm("White Eye on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Mental"&&ESP.checkSkill(2)=="Out"){
mental = ESP.getUser();
ESP.sbm("Mental Out on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="World"&&ESP.checkSkill(2)=="Editor"){
world = ESP.getUser();
ESP.sbm("World Editor on");
setTile(x, y, z, 246);
preventDefault();
}

if(ESP.checkSkill(1)=="Dark"&&ESP.checkSkill(2)=="Tornado jr."){
dtj = ESP.getUser();
ESP.sbm("Dark Tornado jr. on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Fire"&&ESP.checkSkill(2)=="Expert"){
fe = ESP.getUser();
ESP.sbm("Fire Expert on");
setTile(x, y, z, 246);
preventDefault();
}
if(ESP.checkSkill(1)=="Hidden"&&ESP.checkSkill(2)=="Ability"){
h.rrr = ESP.getUser();
ESP.sbm("Hidden Ability on");
setTile(x, y, z, 246);
preventDefault();
}

//-----
if(ESP.checkSkill(1)=="토르"){
t2hor = ESP.getUser();
}
if(ESP.checkSkill(1)=="포세이돈"){
w2ater = ESP.getUser();
}
if(ESP.checkSkill(1)=="카이지"){
k2ill = ESP.getUser();
}
if(ESP.checkSkill(1)=="미사카 미코토"){
m2isaka = ESP.getUser();
}
if(ESP.checkSkill(1)=="엘사"){
e2lsa = ESP.getUser();
}
if(ESP.checkSkill(1)=="푸서"){
p2ush = ESP.getUser();
}
if(ESP.checkSkill(1)=="에이스"){
f2ire = ESP.getUser();
}
if(ESP.checkSkill(1)=="패스터"){
f2aster = ESP.getUser();
}
if(ESP.checkSkill(1)=="록 리"){
k2ick = ESP.getUser();
}
if(ESP.checkSkill(1)=="목둔"){
t2ree = ESP.getUser();
}
if(ESP.checkSkill(1)=="아카이누"){
l2ava = ESP.getUser();
}
if(ESP.checkSkill(1)=="슬로워"){
b2ind = ESP.getUser();
}
if(ESP.checkSkill(1)=="가아라"){
s2and = ESP.getUser();
}
if(ESP.checkSkill(2)=="Wizard"){
if(ESP.checkSkill(1)=="Fire"){
wfire = ESP.getUser();
}
if(ESP.checkSkill(1)=="Water"){
wwater = ESP.getUser();
}
if(ESP.checkSkill(1)=="Tree"){
wtree = ESP.getUser();
}
if(ESP.checkSkill(1)=="Air"){
wair = ESP.getUser();
}
if(ESP.checkSkill(1)=="Burst"){
wburst = ESP.getUser();
}
if(ESP.checkSkill(1)=="Earth"){
wearth = ESP.getUser();
}
if(ESP.checkSkill(1)=="Light"){
wlight = ESP.getUser();
}
if(ESP.checkSkill(1)=="Dark"){
wdark = ESP.getUser();
}
if(ESP.checkSkill(1)=="Bind"){
wbind = ESP.getUser();
}
if(ESP.checkSkill(1)=="Lightning"){
wlightn = ESP.getUser();
}
}
if(ESP.checkSkill(1)=="Bright"&&ESP.checkSkill(2)=="Hurricane jr."){
bbh = ESP.getUser();
}
if(ESP.checkSkill(1)=="Dark"&&ESP.checkSkill(2)=="Knight"){
bdk = ESP.getUser();
}
if(ESP.checkSkill(1)=="Nature"&&ESP.checkSkill(2)=="Breaker"){
bnb = ESP.getUser();
}
if(ESP.checkSkill(1)=="Gambler"){
bgamble = ESP.getUser();
}
if(ESP.checkSkill(1)=="Thief"){
bthief = ESP.getUser();
}
if(ESP.checkSkill(1)=="Dual"&&ESP.checkSkill(2)=="Blade"){
bdual = ESP.getUser();
}
if(ESP.checkSkill(1)=="Cannon"&&ESP.checkSkill(2)=="Shooter"){
bcannon = ESP.getUser();
}
if(ESP.checkSkill(2)=="Transfer"){
if(ESP.checkSkill(1)=="S-Junior"){
tjunior = ESP.getUser();
}
if(ESP.checkSkill(1)=="S-Blood"){
tblood = ESP.getUser();
}
if(ESP.checkSkill(1)=="S-Electric"){
telectric = ESP.getUser();
}
if(ESP.checkSkill(1)=="S-Sword"){
tspear = ESP.getUser();
}
if(ESP.checkSkill(1)=="S-T.E.B"){
tteb = ESP.getUser();
}
if(ESP.checkSkill(1)=="S-Ice"){
tice = ESP.getUser();
}
if(ESP.checkSkill(1)=="S-Dust"){
tdust = ESP.getUser();
}
if(ESP.checkSkill(1)=="S-Ground"){
tground = ESP.getUser();
}
if(ESP.checkSkill(1)=="S-Flame"){
tflame = ESP.getUser();
}
if(ESP.checkSkill(1)=="S-Water"){
twater = ESP.getUser();
}
}
if(ESP.checkSkill(1)=="Queen"&&ESP.checkSkill(2)=="Rose"){
frose = ESP.getUser();
}
if(ESP.checkSkill(1)=="Yellow"&&ESP.checkSkill(2)=="Primula"){
fprimula = ESP.getUser();
}
if(ESP.checkSkill(1)=="Green"&&ESP.checkSkill(2)=="Ivy"){
fivy = ESP.getUser();
}
if(ESP.checkSkill(1)=="White"&&ESP.checkSkill(2)=="Daisy"){
fdaisy = ESP.getUser();
}
if(ESP.checkSkill(1)=="Rose de"&&ESP.checkSkill(2)=="Darkness"){
frose2 = ESP.getUser();
}
if(ESP.checkSkill(1)=="Pink"&&ESP.checkSkill(2)=="Peony"){
fpeony = ESP.getUser();
}
if(ESP.checkSkill(1)=="Blue"&&ESP.checkSkill(2)=="Orchid"){
forchid = ESP.getUser();
}
if(ESP.checkSkill(1)=="Purple"&&ESP.checkSkill(2)=="Violet"){
fviolet = ESP.getUser();
}
if(ESP.checkSkill(1)=="Flame"&&ESP.checkSkill(2)=="Master"){
efm = ESP.getUser();
}
if(ESP.checkSkill(1)=="Soul"&&ESP.checkSkill(2)=="Assaulter"){
esa = ESP.getUser();
}
if(ESP.checkSkill(1)=="무인"){
emuin = ESP.getUser();
}
if(ESP.checkSkill(1)=="Grand"&&ESP.checkSkill(2)=="Master"){
egm = ESP.getUser();
}
if(ESP.checkSkill(1)=="Tornado"&&ESP.checkSkill(2)=="Breaker"){
etb = ESP.getUser();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Fighter"){
efight = ESP.getUser();
}
if(ESP.checkSkill(1)=="Solar"&&ESP.checkSkill(2)=="Knight"){
esk = ESP.getUser();
}
if(ESP.checkSkill(1)=="Earth"&&ESP.checkSkill(2)=="Breaker"){
eeb = ESP.getUser();
}
if(ESP.checkSkill(1)=="Dragonian"){
edragon = ESP.getUser();
}
if(ESP.checkSkill(1)=="Amazing"&&ESP.checkSkill(2)=="Fighter"){
eaf = ESP.getUser();
}
if(ESP.checkSkill(1)=="Sonic"&&ESP.checkSkill(2)=="User"){
esu = ESP.getUser();
}
if(ESP.checkSkill(1)=="Sonic"&&ESP.checkSkill(2)=="Breaker"){
esb = ESP.getUser();
}
if(ESP.checkSkill(1)=="악마계약자"){
edevil = ESP.getUser();
}
if(ESP.checkSkill(1)=="마더파더"){
emf = ESP.getUser();
}
if(ESP.checkSkill(0)=="The"&&ESP.checkSkill(1)=="Techenician"&&ESP.checkSkill(2)=="TNT"){
emt = ESP.getUser();
}
if(ESP.checkSkill(1)=="Space"&&ESP.checkSkill(2)=="Man"){
esm = ESP.getUser();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Archone"){
eta = ESP.getUser();
}
if(ESP.checkSkill(1)=="Launcher"){
elaunch = ESP.getUser();
}
if(ESP.checkSkill(1)=="Blood"&&ESP.checkSkill(2)=="Assaulter"){
eba = ESP.getUser();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Mom"){
etm = ESP.getUser();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Bomber"){
etb = ESP.getUser();
}
if(ESP.checkSkill(1)=="Bounse"&&ESP.checkSkill(2)=="Master"){
ebm = ESP.getUser();
}
if(ESP.checkSkill(1)=="Herobring"){
ehero = ESP.getUser();
}
if(ESP.checkSkill(1)=="Counter"&&ESP.checkSkill(2)=="Attacker"){
eca = ESP.getUser();
}
if(ESP.checkSkill(1)=="Legendary"&&ESP.checkSkill(2)=="Slasher"){
els = ESP.getUser();
}
if(ESP.checkSkill(1)=="Priest"){
epriest = ESP.getUser();
}
if(ESP.checkSkill(1)=="Angel"){
eangel = ESP.getUser();
}
if(ESP.checkSkill(1)=="Devil"){
eDevil = ESP.getUser();
}
if(ESP.checkSkill(1)=="Grim"&&ESP.checkSkill(2)=="Reaper"){
egr = ESP.getUser();
}
if(ESP.checkSkill(1)=="Hyper"){
elhyper = ESP.getUser();
}
if(ESP.checkSkill(1)=="Buffer"){
elbupper = ESP.getUser();
}
if(ESP.checkSkill(1)=="God's"&&ESP.checkSkill(2)=="Controlling"){
elgc = ESP.getUser();
}
if(ESP.checkSkill(1)=="지브릴"){
eljbl = ESP.getUser();
}
if(ESP.checkSkill(1)=="Rule"&&ESP.checkSkill(2)=="Breaker"){
elrb = ESP.getUser();
}
if(ESP.checkSkill(1)=="Joker"){
eljoker = ESP.getUser();
}
if(ESP.checkSkill(1)=="Shadow"){
elshadow = ESP.getUser();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Ninja"){
elninja = ESP.getUser();
}
if(ESP.checkSkill(2)=="Operater"){
if(ESP.checkSkill(1)=="Fire"){
sfire = ESP.getUser();
}
if(ESP.checkSkill(1)=="Water"){
swater = ESP.getUser();
}
if(ESP.checkSkill(1)=="Tree"){
stree = ESP.getUser();
}
if(ESP.checkSkill(1)=="Burst"){
sburst = ESP.getUser();
}
if(ESP.checkSkill(1)=="Soil"){
ssoil = ESP.getUser();
}
if(ESP.checkSkill(1)=="Air"){
sair = ESP.getUser();
}
if(ESP.checkSkill(1)=="Light"){
slight = ESP.getUser();
}
if(ESP.checkSkill(1)=="Dark"){
sdark = ESP.getUser();
}
if(ESP.checkSkill(1)=="Blood"){
sblood = ESP.getUser();
}
}
if(ESP.checkSkill(1)=="Melt"&&ESP.checkSkill(2)=="Downer"){
sd.melt = ESP.getUser();
}
if(ESP.checkSkill(1)=="Flower"&&ESP.checkSkill(2)=="Planter"){
sd.flower = ESP.getUser();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Chobits"){
sd.cho = ESP.getUser();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Precipitater"){
sd.pre = ESP.getUser();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Buffer"){
sd.buf = ESP.getUser();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Debuffer"){
sd.dbuf = ESP.getUser();
}
if(ESP.checkSkill(1)=="Remain"&&ESP.checkSkill(2)=="Constructer"){
sd.remain = ESP.getUser();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Curer"){
sd.cure = ESP.getUser();
}
if(ESP.checkSkill(1)=="Blood"&&ESP.checkSkill(2)=="Absorber"){
sd.blood = ESP.getUser();
}
if(ESP.checkSkill(1)=="Ice"&&ESP.checkSkill(2)=="Maker"){
sd.ice = ESP.getUser();
}
if(ESP.checkSkill(1)=="Flame"&&ESP.checkSkill(2)=="User"){
sd.flame = ESP.getUser();
}
if(ESP.checkSkill(1)=="Sand"&&ESP.checkSkill(2)=="Controller"){
sd.sand = ESP.getUser();
}
if(ESP.checkSkill(1)=="Teleport"&&ESP.checkSkill(2)=="Master"){
sd.tp = ESP.getUser();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Exploder"){
sd.exp = ESP.getUser();
}
if(ESP.checkSkill(1)=="Lightning"&&ESP.checkSkill(2)=="Striker"){
sd.lightn = ESP.getUser();
}
if(ESP.checkSkill(1)=="Food"&&ESP.checkSkill(2)=="Eater"){
sd.food = ESP.getUser();
}
if(ESP.checkSkill(1)=="Tree"&&ESP.checkSkill(2)=="Grower"){
sd.tree = ESP.getUser();
}
if(ESP.checkSkill(1)=="Monster"&&ESP.checkSkill(2)=="Rider"){
sd.mons = ESP.getUser();
}

//-----

}

if(b==255&&Level.getSignText(x, y+1, z, 1)=="Hidden"&&Level.getSignText(x, y+1, z, 2)=="Ability"){
setTile(x, y, z, 49);
ESP.toast("Hidden Ability 각성블록 활성화");
}

//off
if(b==246){
espch = [x, y, z];
if(ESP.checkSkill(1)=="Fire"&&ESP.checkSkill(2)=="User"){
fire[0] = null;
ESP.sbm("Fire User off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Water"&&ESP.checkSkill(2)=="Controller"){
water[0] = null;
ESP.sbm("Water Controller off");
setTile(x, y, z, 49);
w5 = -1;
preventDefault();
}
if(ESP.checkSkill(1)=="Nature"&&ESP.checkSkill(2)=="Guardian"){
tree[0] = null;
ESP.sbm("Nature Guardian off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Creeper"){
creeper[0] = null;
ESP.sbm("I am Creeper off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Soil"&&ESP.checkSkill(2)=="Master"){
soil[0] = null;
ESP.sbm("Soil Master off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Summoner"){
summon[0] = null;
ESP.sbm("The Summoner off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Luminous"){
light[0] = null;
ESP.sbm("The Luminous off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Darkness"){
dark[0] = null;
ESP.sbm("The Darkness off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Freezer"){
ice[0] = null;
ESP.sbm("The Freezer off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Desert"&&ESP.checkSkill(2)=="Maker"){
sand[0] = null;
ESP.sbm("Desert Maker off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Vampire"){
blood[0] = null;
ESP.sbm("The Vampire off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Air"&&ESP.checkSkill(2)=="Bander"){
air[0] = null;
ESP.sbm("Air Bander off");
setTile(x, y, z, 49);
a5 = -1;
preventDefault();
}
if(ESP.checkSkill(1)=="Thunder"&&ESP.checkSkill(2)=="Breaker"){
thunder[0] = null;
ESP.sbm("Thunder Breaker off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Elsa"){
elsa[0] = null;
ESP.sbm("I am Elsa off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Mass"&&ESP.checkSkill(2)=="Titan"){
titan[0] = null;
ESP.sbm("Mass Titan off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Binder"){
bind[0] = null;
ESP.sbm("The Binder off");
setTile(x, y, z, 49);
b5 = -1;
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Mechanic"){
meca[0] = null;
ESP.sbm("The Mechanic off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="TNT"&&ESP.checkSkill(2)=="Expert"){
tnt[0] = null;
ESP.sbm("TNT Expert off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Trap"&&ESP.checkSkill(2)=="Creater"){
trap[0] = null;
ESP.sbm("Trap Creater off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Healer"){
heal[0] = null;
ESP.sbm("The Healer off");
setTile(x, y, z, 49);
preventDefault();
h5 = -1;
}
if(ESP.checkSkill(1)=="Nether"&&ESP.checkSkill(2)=="Man"){
nether[0] = null;
ESP.sbm("Nether Man off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Cloud"&&ESP.checkSkill(2)=="Manager"){
cloud[0] = null;
ESP.sbm("Cloud Manager off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Assassin"){
assassin[0] = null;
ESP.sbm("The Assassin off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Arrow"&&ESP.checkSkill(2)=="Shooter"){
arrow[0] = null;
ESP.sbm("Arrow Shooter off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Mage"){
mage[0] = null;
ESP.sbm("The Mage off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Defenser"){
defense[0] = null;
ESP.sbm("The Defenser off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Poison"&&ESP.checkSkill(2)=="Maven"){
poison[0] = null;
ESP.sbm("Poison Maven off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Ground"&&ESP.checkSkill(2)=="Melter"){
melt[0] = null;
ESP.sbm("Ground Melter off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Hyper"&&ESP.checkSkill(2)=="Freezer"){
hfreeze[0] = null;
ESP.sbm("Hyper Freezer off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Builder"){
builder[0] = null;
ESP.sbm("The Builder off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Soldier"){
soldier[0] = null;
ESP.sbm("The Soldier off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Assaulter"){
assault[0] = null;
ESP.sbm("The Assaulter off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Burster"){
burst[0] = null;
ESP.sbm("The Burster off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Warrior"){
warrior[0] = null;
ESP.sbm("The Warrior off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Ore"&&ESP.checkSkill(2)=="Collecter"){
ore[0] = null;
ESP.sbm("Ore Collecter off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Rich"){
rich[0] = null;
ESP.sbm("The Rich off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Teleporter"){
tp[0] = null;
ESP.sbm("The Teleporter off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Space"&&ESP.checkSkill(2)=="Warpper"){
space[0] = null;
ESP.sbm("Space Warpper off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Surround"&&ESP.checkSkill(2)=="Attacker"){
sattack[0] = null;
ESP.sbm("Surround Attacker off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Force"&&ESP.checkSkill(2)=="Shifter"){
force[0] = null;
ESP.sbm("Force Shifter off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Reinforce"){
rein[0] = null;
ESP.sbm("I am Reinforce off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Magnetism"&&ESP.checkSkill(2)=="Distorter"){
magnet[0] = null;
ESP.sbm("Magnetism Distorter off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Steve"){
steve[0] = null;
ESP.sbm("I am Steve off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Herobrine"){
hero[0] = null;
ESP.sbm("I am Herobrine off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Hermit"){
hermit[0] = null;
ESP.sbm("The Hermit off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Clay"&&ESP.checkSkill(2)=="Gatherer"){
clay[0] = null;
ESP.sbm("Clay Gatherer off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Kirito"){
kirito[0] = null;
ESP.sbm("I am Kirito off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Jungle"&&ESP.checkSkill(2)=="Former"){
jungle[0] = null;
ESP.sbm("Jungle Former off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Kanade"){
kanade[0] = null;
ESP.sbm("I am Kanade off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Time"&&ESP.checkSkill(2)=="Traveler"){
time[0] = null;
ESP.sbm("Time Traveler off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Sniper"){
snipe[0] = null;
ESP.sbm("The Sniper off");
setTile(x, y, z, 49);
setTile(snx[0], sny[0], snz[0], sn4c[0], sn4d[0]);
preventDefault();
}
if(ESP.checkSkill(1)=="Zombie"&&ESP.checkSkill(2)=="Employer"){
zombie[0] = null;
ESP.sbm("Zombie Employer off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Necromancer"){
necro[0] = null;
ESP.sbm("The Necromancer off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Asuna"){
asuna[0] = null;
ESP.sbm("I am Asuna off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Holy"&&ESP.checkSkill(2)=="Knight"){
holy[0] = null;
ESP.sbm("Holy Knight off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Solar"&&ESP.checkSkill(2)=="Paladin"){
solar[0] = null;
ESP.sbm("Solar Paladin off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Lunar"&&ESP.checkSkill(2)=="Wizard"){
lunar[0] = null;
ESP.sbm("Lunar Wizard off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Hyper"&&ESP.checkSkill(2)=="Assaulter"){
has[0] = null;
ESP.sbm("Hyper Assaulter off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Random"&&ESP.checkSkill(2)=="Ability"){
random[0] = null;
ESP.sbm("The Random off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Reinforce"&&ESP.checkSkill(2)=="Zwei"){
zwei[0] = null;
ESP.sbm("Reinforce Zwei off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Decorater"){
deco[0] = null;
ESP.sbm("The Decorater off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Hyper"&&ESP.checkSkill(2)=="Summoner"){
hsum[0] = null;
ESP.sbm("Hyper Summoner off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Climate"&&ESP.checkSkill(2)=="Changer"){
climate[0] = null;
ESP.sbm("Climate Changer off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Remote"&&ESP.checkSkill(2)=="Raider"){
raid[0] = null;
ESP.sbm("Remote Raider off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Wind"&&ESP.checkSkill(2)=="Operater"){
wind[0] = null;
ESP.sbm("Wind Operater off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Energy"&&ESP.checkSkill(2)=="Transfer"){
energy[0] = null;
ESP.sbm("Energy Transfer off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Genocider"){
geno[0] = null;
ESP.sbm("The Genocider off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Server"&&ESP.checkSkill(2)=="Dominator"){
server[0] = null;
ESP.sbm("Server Dominator off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Outsider"){
out[0] = null;
ESP.sbm("The Outsider off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Railgun"){
rgun[0] = null;
ESP.sbm("I am Railgun off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Copying"&&ESP.checkSkill(2)=="Eye"){
copy[0] = null;
ESP.sbm("Copying Eye off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Dragon"&&ESP.checkSkill(2)=="Trainer"){
dragon[0] = null;
ESP.sbm("Dragon Trainer off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Hawk"&&ESP.checkSkill(2)=="Eye"){
hawk[0] = null;
ESP.sbm("Hawk Eye off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Solidifier"){
solid[0] = null;
ESP.sbm("The Solidifier off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Gravity"&&ESP.checkSkill(2)=="Twister"){
gravity[0] = null;
ESP.sbm("Gravity Twister off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Hyper"&&ESP.checkSkill(2)=="Assassin"){
hass = null;
ESP.sbm("Hyper Assassin off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Silent"&&ESP.checkSkill(2)=="Killer"){
sikill = null;
ESP.sbm("Silent Killer off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Black"&&ESP.checkSkill(2)=="Slayer"){
black = null;
ESP.sbm("Black Slayer off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Slasher"){
slash = null;
ESP.sbm("The Slasher off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Night"&&ESP.checkSkill(2)=="Worker"){
night = null;
ESP.sbm("Night Worker off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Light"&&ESP.checkSkill(2)=="Gemstone"){
gem = null;
ESP.sbm("Light Gemstone off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Dracula"){
dra = null;
ESP.sbm("The Dracula off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Mushroom"&&ESP.checkSkill(2)=="Grower"){
mush = null;
ESP.sbm("Mushroom Grower off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Ender"&&ESP.checkSkill(2)=="Girl"){
ender = null;
ESP.sbm("Ender Girl off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Taiga"&&ESP.checkSkill(2)=="Appearer"){
taiga = null;
ESP.sbm("Taiga Appearer off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Ruiner"){
ruin = null;
ESP.sbm("The Ruiner off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Swamp"&&ESP.checkSkill(2)=="Generater"){
swamp = null;
ESP.sbm("Swamp Generater off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Arch"&&ESP.checkSkill(2)=="Summoner"){
asum = null;
ESP.sbm("Arch Summoner off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Arch"&&ESP.checkSkill(2)=="Mage"){
arch = null;
ESP.sbm("Arch Mage off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Puella"&&ESP.checkSkill(2)=="Magica"){
puella = null;
ESP.sbm("Puella Magica off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Hyper"&&ESP.checkSkill(2)=="Builder"){
hbuild = null;
ESP.sbm("Hyper Builder off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Scalar"&&ESP.checkSkill(2)=="Increaser"){
scalar = null;
ESP.sbm("Scalar Increaser off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Vector"&&ESP.checkSkill(2)=="Reflacter"){
vector = null;
ESP.sbm("Vector Reflacter off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Tensor"&&ESP.checkSkill(2)=="Veerer"){
tensor = null;
ESP.sbm("Tensor Veerer off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Arch"&&ESP.checkSkill(2)=="Mechanic"){
ameca = null;
ESP.sbm("Arch Mechanic off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Sealer"){
seal = null;
ESP.sbm("The Sealer off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Archangel"){
angel = null;
ESP.sbm("The Archangel off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="White"&&ESP.checkSkill(2)=="Eye"){
white = null;
ESP.sbm("White Eye off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Mental"&&ESP.checkSkill(2)=="Out"){
mental = null;
ESP.sbm("Mental Out off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="World"&&ESP.checkSkill(2)=="Editor"){
world = null;
ESP.sbm("World Editor off");
setTile(x, y, z, 49);
preventDefault();
}

if(ESP.checkSkill(1)=="Dark"&&ESP.checkSkill(2)=="Tornado jr."){
dtj = null;
ESP.sbm("Dark Tornado jr. off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Fire"&&ESP.checkSkill(2)=="Expert"){
fe = null;
ESP.sbm("Fire Expert off");
setTile(x, y, z, 49);
preventDefault();
}
if(ESP.checkSkill(1)=="Hidden"&&ESP.checkSkill(2)=="Ability"){
h.rrr = null;
ESP.sbm("Hidden Ability off");
setTile(x, y, z, 49);
preventDefault();
}

//-----
if(ESP.checkSkill(1)=="토르"){
t2hor = null;
}
if(ESP.checkSkill(1)=="포세이돈"){
w2ater = null;
}
if(ESP.checkSkill(1)=="카이지"){
k2ill = null;
}
if(ESP.checkSkill(1)=="미사카 미코토"){
m2isaka = null;
}
if(ESP.checkSkill(1)=="엘사"){
e2lsa = null;
}
if(ESP.checkSkill(1)=="푸서"){
p2ush = null;
}
if(ESP.checkSkill(1)=="에이스"){
f2ire = null;
}
if(ESP.checkSkill(1)=="패스터"){
f2aster = null;
}
if(ESP.checkSkill(1)=="록 리"){
k2ick = null;
}
if(ESP.checkSkill(1)=="목둔"){
t2ree = null;
}
if(ESP.checkSkill(1)=="아카이누"){
l2ava = null;
}
if(ESP.checkSkill(1)=="슬로워"){
b2ind = null;
}
if(ESP.checkSkill(1)=="가아라"){
s2and = null;
}
if(ESP.checkSkill(2)=="Wizard"){
if(ESP.checkSkill(1)=="Fire"){
wfire = null;
}
if(ESP.checkSkill(1)=="Water"){
wwater = null;
}
if(ESP.checkSkill(1)=="Tree"){
wtree = null;
}
if(ESP.checkSkill(1)=="Air"){
wair = null;
}
if(ESP.checkSkill(1)=="Burst"){
wburst = null;
}
if(ESP.checkSkill(1)=="Earth"){
wearth = null;
}
if(ESP.checkSkill(1)=="Light"){
wlight = null;
}
if(ESP.checkSkill(1)=="Dark"){
wdark = null;
}
if(ESP.checkSkill(1)=="Bind"){
wbind = null;
}
if(ESP.checkSkill(1)=="Lightning"){
wlightn = null;
}
}
if(ESP.checkSkill(1)=="Bright"&&ESP.checkSkill(2)=="Hurricane jr."){
bbh = null;
}
if(ESP.checkSkill(1)=="Dark"&&ESP.checkSkill(2)=="Knight"){
bdk = null;
}
if(ESP.checkSkill(1)=="Nature"&&ESP.checkSkill(2)=="Breaker"){
bnb = null;
}
if(ESP.checkSkill(1)=="Gambler"){
bgamble = null;
}
if(ESP.checkSkill(1)=="Thief"){
bthief = null;
}
if(ESP.checkSkill(1)=="Dual"&&ESP.checkSkill(2)=="Blade"){
bdual = null;
}
if(ESP.checkSkill(1)=="Cannon"&&ESP.checkSkill(2)=="Shooter"){
bcannon = null;
}
if(ESP.checkSkill(2)=="Transfer"){
if(ESP.checkSkill(1)=="S-Junior"){
tjunior = null;
}
if(ESP.checkSkill(1)=="S-Blood"){
tblood = null;
}
if(ESP.checkSkill(1)=="S-Electric"){
telectric = null;
}
if(ESP.checkSkill(1)=="S-Sword"){
tspear = null;
}
if(ESP.checkSkill(1)=="S-T.E.B"){
tteb = null;
}
if(ESP.checkSkill(1)=="S-Ice"){
tice = null;
}
if(ESP.checkSkill(1)=="S-Dust"){
tdust = null;
}
if(ESP.checkSkill(1)=="S-Ground"){
tground = null;
}
if(ESP.checkSkill(1)=="S-Flame"){
tflame = null;
}
if(ESP.checkSkill(1)=="S-Water"){
twater = null;
}
}
if(ESP.checkSkill(1)=="Queen"&&ESP.checkSkill(2)=="Rose"){
frose = null;
}
if(ESP.checkSkill(1)=="Yellow"&&ESP.checkSkill(2)=="Primula"){
fprimula = null;
}
if(ESP.checkSkill(1)=="Green"&&ESP.checkSkill(2)=="Ivy"){
fivy = null;
}
if(ESP.checkSkill(1)=="White"&&ESP.checkSkill(2)=="Daisy"){
fdaisy = null;
}
if(ESP.checkSkill(1)=="Rose de"&&ESP.checkSkill(2)=="Darkness"){
frose2 = null;
}
if(ESP.checkSkill(1)=="Pink"&&ESP.checkSkill(2)=="Peony"){
fpeony = null;
}
if(ESP.checkSkill(1)=="Blue"&&ESP.checkSkill(2)=="Orchid"){
forchid = null;
}
if(ESP.checkSkill(1)=="Purple"&&ESP.checkSkill(2)=="Violet"){
fviolet = null;
}
if(ESP.checkSkill(1)=="Flame"&&ESP.checkSkill(2)=="Master"){
efm = null;
}
if(ESP.checkSkill(1)=="Soul"&&ESP.checkSkill(2)=="Assaulter"){
esa = null;
}
if(ESP.checkSkill(1)=="무인"){
emuin = null;
}
if(ESP.checkSkill(1)=="Grand"&&ESP.checkSkill(2)=="Master"){
egm = null;
}
if(ESP.checkSkill(1)=="Tornado"&&ESP.checkSkill(2)=="Breaker"){
etb = null;
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Fighter"){
efight = null;
}
if(ESP.checkSkill(1)=="Solar"&&ESP.checkSkill(2)=="Knight"){
esk = null;
}
if(ESP.checkSkill(1)=="Earth"&&ESP.checkSkill(2)=="Breaker"){
eeb = null;
}
if(ESP.checkSkill(1)=="Dragonian"){
edragon = null;
}
if(ESP.checkSkill(1)=="Amazing"&&ESP.checkSkill(2)=="Fighter"){
eaf = null;
}
if(ESP.checkSkill(1)=="Sonic"&&ESP.checkSkill(2)=="User"){
esu = null;
}
if(ESP.checkSkill(1)=="Sonic"&&ESP.checkSkill(2)=="Breaker"){
esb = null;
}
if(ESP.checkSkill(1)=="악마계약자"){
edevil = null;
}
if(ESP.checkSkill(1)=="마더파더"){
emf = null;
}
if(ESP.checkSkill(0)=="The"&&ESP.checkSkill(1)=="Techenician"&&ESP.checkSkill(2)=="TNT"){
emt = null;
}
if(ESP.checkSkill(1)=="Space"&&ESP.checkSkill(2)=="Man"){
esm = null;
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Archone"){
eta = null;
}
if(ESP.checkSkill(1)=="Launcher"){
elaunch = null;
}
if(ESP.checkSkill(1)=="Blood"&&ESP.checkSkill(2)=="Assaulter"){
eba = null;
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Mom"){
etm = null;
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Bomber"){
etb = null;
}
if(ESP.checkSkill(1)=="Bounse"&&ESP.checkSkill(2)=="Master"){
ebm = null;
}
if(ESP.checkSkill(1)=="Herobring"){
ehero = null;
}
if(ESP.checkSkill(1)=="Counter"&&ESP.checkSkill(2)=="Attacker"){
eca = null;
}
if(ESP.checkSkill(1)=="Legendary"&&ESP.checkSkill(2)=="Slasher"){
els = null;
}
if(ESP.checkSkill(1)=="Priest"){
epriest = null;
}
if(ESP.checkSkill(1)=="Angel"){
eangel = null;
}
if(ESP.checkSkill(1)=="Devil"){
eDevil = null;
}
if(ESP.checkSkill(1)=="Grim"&&ESP.checkSkill(2)=="Reaper"){
egr = null;
}
if(ESP.checkSkill(1)=="Hyper"){
elhyper = null;
}
if(ESP.checkSkill(1)=="Buffer"){
elbupper = null;
}
if(ESP.checkSkill(1)=="God's"&&ESP.checkSkill(2)=="Controlling"){
elgc = null;
}
if(ESP.checkSkill(1)=="지브릴"){
eljbl = null;
}
if(ESP.checkSkill(1)=="Rule"&&ESP.checkSkill(2)=="Breaker"){
elrb = null;
}
if(ESP.checkSkill(1)=="Joker"){
eljoker = null;
}
if(ESP.checkSkill(1)=="Shadow"){
elshadow = null;
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Ninja"){
elninja = null;
}
if(ESP.checkSkill(2)=="Operater"){
if(ESP.checkSkill(1)=="Fire"){
sfire = null;
}
if(ESP.checkSkill(1)=="Water"){
swater = null;
}
if(ESP.checkSkill(1)=="Tree"){
stree = null;
}
if(ESP.checkSkill(1)=="Burst"){
sburst = null;
}
if(ESP.checkSkill(1)=="Soil"){
ssoil = null;
}
if(ESP.checkSkill(1)=="Air"){
sair = null;
}
if(ESP.checkSkill(1)=="Light"){
slight = null;
}
if(ESP.checkSkill(1)=="Dark"){
sdark = null;
}
if(ESP.checkSkill(1)=="Blood"){
sblood = null;
}
}
if(ESP.checkSkill(1)=="Melt"&&ESP.checkSkill(2)=="Downer"){
sd.melt = null;
}
if(ESP.checkSkill(1)=="Flower"&&ESP.checkSkill(2)=="Planter"){
sd.flower = null;
}
if(ESP.checkSkill(1)=="I am"&&ESP.checkSkill(2)=="Chobits"){
sd.cho = null;
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Precipitater"){
sd.pre = null;
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Buffer"){
sd.buf = null;
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Debuffer"){
sd.dbuf = null;
}
if(ESP.checkSkill(1)=="Remain"&&ESP.checkSkill(2)=="Constructer"){
sd.remain = null;
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Curer"){
sd.cure = null;
}
if(ESP.checkSkill(1)=="Blood"&&ESP.checkSkill(2)=="Absorber"){
sd.blood = null;
}
if(ESP.checkSkill(1)=="Ice"&&ESP.checkSkill(2)=="Maker"){
sd.ice = null;
}
if(ESP.checkSkill(1)=="Flame"&&ESP.checkSkill(2)=="User"){
sd.flame = null;
}
if(ESP.checkSkill(1)=="Sand"&&ESP.checkSkill(2)=="Controller"){
sd.sand = null;
}
if(ESP.checkSkill(1)=="Teleport"&&ESP.checkSkill(2)=="Master"){
sd.tp = null;
}
if(ESP.checkSkill(1)=="The"&&ESP.checkSkill(2)=="Exploder"){
sd.exp = null;
}
if(ESP.checkSkill(1)=="Lightning"&&ESP.checkSkill(2)=="Striker"){
sd.lightn = null;
}
if(ESP.checkSkill(1)=="Food"&&ESP.checkSkill(2)=="Eater"){
sd.food = null;
}
if(ESP.checkSkill(1)=="Tree"&&ESP.checkSkill(2)=="Grower"){
sd.tree = null;
}
if(ESP.checkSkill(1)=="Monster"&&ESP.checkSkill(2)=="Rider"){
sd.mons = null;
}

//-----

}

}

//reset
if(b==103&&Level.getSignText(x, y+1, z, 1)=="Reset"){
ESP.reset();
preventDefault();
ESP.sbm("Every ability was reseted.");
}
//support
if(b==91){
Level.dropItem(x, y+1.1, z, 0, 302, 1, 0);
Level.dropItem(x, y+1.1, z, 0, 303, 1, 0);
Level.dropItem(x, y+1.1, z, 0, 304, 1, 0);
Level.dropItem(x, y+1.1, z, 0, 305, 1, 0);
Level.dropItem(x, y+1.1, z, 0, 267, 1, 0);
Level.dropItem(x, y+1.1, z, 0, 354, 30, 0);
Level.dropItem(x, y+1.1, z, 0, 320, 30, 0);
Level.dropItem(x, y+1.1, z, 0, 306, 1, 0);
Level.dropItem(x, y+1.1, z, 0, 307, 1, 0);
Level.dropItem(x, y+1.1, z, 0, 308, 1, 0);
Level.dropItem(x, y+1.1, z, 0, 309, 1, 0);
if(mcpev4){
Level.dropItem(x, y+1.1, z, 0, 373, 30, 28);
Level.dropItem(x, y+1.1, z, 0, 373, 15, 30);
}
preventDefault();
}
//-----
if(getTile(x, y-1, z)==35){
espch = [x, y, z];
if(b==42){
Saint.getType();
}
else if(b==41){
Saint.resetType();
}
}
//-----
if(b==98&&bd==3){
espch = [x, y, z];
if(nox()=="Feoh"||nox()=="페오"){
np.feoh = ESP.getUser();
}
if(nox()=="Uruz"||nox()=="울"){
np.ueuz = ESP.getUser();
}
if(nox()=="Thurisaz"||nox()=="손"){
np.thurisaz = ESP.getUser();
}
if(nox()=="Ansur"||nox()=="안소르"){
np.ansur = ESP.getUser();
}
if(nox()=="Raidho"||nox()=="라이도"){
np.raidho = ESP.getUser();
}
if(nox()=="Kenaz"||nox()=="케나즈"){
np.kenaz = ESP.getUser();
}
if(nox()=="Geofu"||nox()=="규후"){
np.geofu = ESP.getUser();
}
if(nox()=="Winn"||nox()=="윈"){
np.winn = ESP.getUser();
}
if(nox()=="Hagall"||nox()=="하걀"){
np.hagall = ESP.getUser();
}
if(nox()=="Nyd"||nox()=="니이드"){
np.nyd = ESP.getUser();
}
if(nox()=="Is"||nox()=="이스"){
np.is = ESP.getUser();
}
if(nox()=="Zera"||nox()=="제라"){
np.zera = ESP.getUser();
}
if(nox()=="Yr"||nox()=="율"){
np.yr = ESP.getUser();
}
if(nox()=="Peroth"||nox()=="페오스"){
np.peroth = ESP.getUser();
}
if(nox()=="Elho"||nox()=="에오로"){
np.elho = ESP.getUser();
}
if(nox()=="Sigal"||nox()=="시겔"){
np.sigal = ESP.getUser();
}
if(nox()=="Tir"||nox()=="티르"){
np.tir = ESP.getUser();
}
if(nox()=="Beroc"||nox()=="베오르크"){
np.beroc = ESP.getUser();
}
if(nox()=="Ehwaz"||nox()=="에와즈"){
np.ehwaz = ESP.getUser();
}
if(nox()=="Laguz"||nox()=="라구"){
np.laguz = ESP.getUser();
}
if(nox()=="Mannaz"||nox()=="마나즈"){
np.mannaz = ESP.getUser();
}
if(nox()=="Ing"||nox()=="잉그"){
np.ing = ESP.getUser();
}
if(nox()=="Othel"||nox()=="오셸"){
np.othel = ESP.getUser();
}
if(nox()=="Daeg"||nox()=="다에그"){
np.daeg = ESP.getUser();
}
}
else if(b==1){
espch = [x, y, z];
if(nox()=="Feoh"||nox()=="페오"){
np.feoh = null;
}
if(nox()=="Uruz"||nox()=="울"){
np.ueuz = null;
}
if(nox()=="Thurisaz"||nox()=="손"){
np.thurisaz = null;
}
if(nox()=="Ansur"||nox()=="안소르"){
np.ansur = null;
}
if(nox()=="Raidho"||nox()=="라이도"){
np.raidho = null;
}
if(nox()=="Kenaz"||nox()=="케나즈"){
np.kenaz = null;
}
if(nox()=="Geofu"||nox()=="규후"){
np.geofu = null;
}
if(nox()=="Winn"||nox()=="윈"){
np.winn = null;
}
if(nox()=="Hagall"||nox()=="하걀"){
np.hagall = null;
}
if(nox()=="Nyd"||nox()=="니이드"){
np.nyd = null;
}
if(nox()=="Is"||nox()=="이스"){
np.is = null;
}
if(nox()=="Zera"||nox()=="제라"){
np.zera = null;
}
if(nox()=="Yr"||nox()=="율"){
np.yr = null;
}
if(nox()=="Peroth"||nox()=="페오스"){
np.peroth = null;
}
if(nox()=="Elho"||nox()=="에오로"){
np.elho = null;
}
if(nox()=="Sigal"||nox()=="시겔"){
np.sigal = null;
}
if(nox()=="Tir"||nox()=="티르"){
np.tir = null;
}
if(nox()=="Beroc"||nox()=="베오르크"){
np.beroc = null;
}
if(nox()=="Ehwaz"||nox()=="에와즈"){
np.ehwaz = null;
}
if(nox()=="Laguz"||nox()=="라구"){
np.laguz = null;
}
if(nox()=="Mannaz"||nox()=="마나즈"){
np.mannaz = null;
}
if(nox()=="Ing"||nox()=="잉그"){
np.ing = null;
}
if(nox()=="Othel"||nox()=="오셸"){
np.othel = null;
}
if(nox()=="Daeg"||nox()=="다에그"){
np.daeg = null;
}
}
//-----

//Skills
if(!((b==49||b==246||b==22)&&((getTile(x, y+1, z)==63)||(getTile(x, y+1, z)==68)))&&!townCheck(x, z)&&espOnoff){
if(fire[0]!=null){
for(var n in fire){
if(fire[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(f1a[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+1, zz, 51);
setTile(x, y+1, z+2, 51);
setTile(x, y+1, z-2, 51);
setTile(x-2, y+1, z, 51);
setTile(x+2, y+1, z, 51);
f1[n] = true;
f1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(f2a[n])){
for(var xx=x-1;xx<x+2;xx++){
for(var zz=z-1;zz<z+2;zz++){
for(var yy=y-1;yy<y+1;yy++)
setTile(xx, yy, zz, 0);
setTile(xx, y-2, zz, 51);
setTile(xx, y-3, zz, 87);
}}
f2x[n] = x;
f2y[n] = y;
f2z[n] = z;
f2[n] = true;
f2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(f3a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var f3b=3;f3b<30;f3b++){
setTile(px+f3b*sin, y+1, pz+f3b*cos, 51);
setTile(px+f3b*sin+1, y+1, pz+f3b*cos+1, 51);
}
f3[n] = true;
f3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305){
if(Cool.isFalse(f4d[n])&&Cool.isFinished(f4a[n])){
ESP.sbm("Burning Area");
ESP.heal(fire[n]);
fx[n] = Player.getX();
fy[n] = Player.getY()-2;
fz[n] = Player.getZ();
for(var xx=fx[n]-10;xx<fx[n]+11;xx++){
for(var zz=fz[n]-10;zz<fz[n]+11;zz++){
setTile(xx,fy[n],zz,87);}}
for(var xx=fx[n]-1;xx<fx[n]+2;xx++)
for(var zz=fz[n]-1;zz<fz[n]+2;zz++)
setTile(xx, fy[n], zz, 89);
for(var xx=fx[n]-10;xx<fx[n]+11;xx++){
for(var zz=fz[n]-10;zz<fz[n]+11;zz++){
setTile(xx,fy[n]+1,zz,51);}}
setTile(fx[n]+12, fy[n], fz[n]+12, 11);
setTile(fx[n]+12, fy[n], fz[n]-12, 11);
setTile(fx[n]-12, fy[n], fz[n]+12, 11);
setTile(fx[n]-12, fy[n], fz[n]-12, 11);
setTile(fx[n]+12, fy[n], fz[n], 11);
setTile(fx[n], fy[n], fz[n]+12, 11);
setTile(fx[n]-12, fy[n], fz[n], 11);
setTile(fx[n], fy[n], fz[n]-12, 11);
for(var xx=fx[n]-11;xx<fx[n]+12;xx++){
setTile(xx, fy[n]+2, fz[n]+11, 87);
setTile(xx, fy[n]+2, fz[n]-11, 87);
setTile(xx, fy[n]+3, fz[n]+11, 51);
setTile(xx, fy[n]+3, fz[n]-11, 51);
}
for(var zz=fz[n]-10;zz<fz[n]+11;zz++){
setTile(fx[n]+11, fy[n]+2, zz, 87);
setTile(fx[n]-11, fy[n]+2, zz, 87);
setTile(fx[n]+11, fy[n]+3, zz, 51);
setTile(fx[n]-11, fy[n]+3, zz, 51);
}
f4b[n] = 600;
f4c[n] = true;
f4[n] = true;
f4a[n] = 1800;
skillCool(ESP.getUser(), 4);
f4d[n] = true;
}
else if(f4d[n]==true){
f4b[n] = 1;
}
}
}}}
if(water[0]==ESP.getUser()&&water2==false){
if(i==302&&Cool.isFinished(w1a[0])){
setTile(x, y+1, z, 8);
w1b[0] = 75;
w1c[0] = true;
wx[0] = x;
wy[0] = y;
wz[0] = z;
w1[0] = true;
w1a[0] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(w2a[0])){
for(var xx=x-2;xx<x+3;xx++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx, y, zz, 0);
setTile(x+2, y, z+2, 8);
setTile(x-2, y, z+2, 8);
setTile(x+2, y, z-2, 8);
setTile(x-2, y, z-2, 8);
w2x[0] = x;
w2y[0] = y;
w2z[0] = z;
w2[0] = true;
w2a[0] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(w3a[0])){
wxb[0] = Player.getX();
wyb[0] = Player.getY()-2;
wzb[0] = Player.getZ();
for(var xx=wxb[0]-2;xx<wxb[0]+3;xx++)
for(var zz=wzb[0]-2;zz<wzb[0]+3;zz++)
setTile(xx, wyb[0]+1, zz, 79);
for(var xx=wxb[0]-1;xx<wxb[0]+2;xx++)
for(var zz=wzb[0]-1;zz<wzb[0]+2;zz++)
setTile(xx, wyb[0]+1, zz, 0);
setTile(wxb[0]+3, wyb[0]+1, wzb[0], 8);
setTile(wxb[0]-3, wyb[0]+1, wzb[0], 8);
setTile(wxb[0], wyb[0]+1, wzb[0]+3, 8);
setTile(wxb[0], wyb[0]+1, wzb[0]-3, 8);
w3b[0] = 225;
w3c[0] = true;
w3[0] = true;
w3a[0] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(w4a)){
ESP.sbm("Wide Flood");
ESP.heal(water[0]);
arroundMobHealthDown(water[0], 20, 7);
for(var xx=x-11;xx<x+12;xx++){
for(var zz=z-11;zz<z+12;zz++){
setTile(xx,y,zz,0);}}
setTile(x+9, y+10, z+9, 8);
setTile(x+9, y+10, z-9, 8);
setTile(x-9, y+10, z+9, 8);
setTile(x-9, y+10, z-9, 8);
setTile(x+9, y+10, z, 8);
setTile(x-9, y+10, z, 8);
setTile(x, y+10, z+9, 8);
setTile(x, y+10, z-9, 8);
setTile(x+1, y, z, 79);
setTile(x-1, y, z, 79);
setTile(x, y, z+1, 79);
setTile(x, y, z-1, 79);
w4b[0] = 600;
w4c[0] = true;
wxa[0] = x;
wya[0] = y;
wza[0] = z;
w4[0] = true;
w4a[0] = 1800;
skillCool(ESP.getUser(), 4);
}
}
if(water[1]!=null){
for(var n=1;n<water.length;n++){
if(water[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(w1a[n])){
setTile(x, y+1, z, 8);
w1b[n] = 75;
w1c[n] = true;
wx[n] = x;
wy[n] = y;
wz[n] = z;
w1[n] = true;
w1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(w2a[n])){
for(var xx=x-2;xx<x+3;xx++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx, y, zz, 0);
setTile(x+2, y, z+2, 8);
setTile(x-2, y, z+2, 8);
setTile(x+2, y, z-2, 8);
setTile(x-2, y, z-2, 8);
w2x[n] = x;
w2y[n] = y;
w2z[n] = z;
w2[n] = true;
w2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(w3a[n])){
wxb[n] = Player.getX();
wyb[n] = Player.getY()-2;
wzb[n] = Player.getZ();
for(var xx=wxb[n]-2;xx<wxb[n]+3;xx++)
for(var zz=wzb[n]-2;zz<wzb[n]+3;zz++)
setTile(xx, wyb[n]+1, zz, 79);
for(var xx=wxb[n]-1;xx<wxb[n]+2;xx++)
for(var zz=wzb[n]-1;zz<wzb[n]+2;zz++)
setTile(xx, wyb[n]+1, zz, 0);
setTile(wxb[n]+3, wyb[n]+1, wzb[n], 8);
setTile(wxb[n]-3, wyb[n]+1, wzb[n], 8);
setTile(wxb[n], wyb[n]+1, wzb[n]+3, 8);
setTile(wxb[n], wyb[n]+1, wzb[n]-3, 8);
w3b[n] = 225;
w3c[n] = true;
w3[n] = true;
w3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(w4a)){
ESP.sbm("Wide Flood");
ESP.heal(water[n]);
arroundMobHealthDown(water[n], 20, 7);
for(var xx=x-11;xx<x+12;xx++){
for(var zz=z-11;zz<z+12;zz++){
setTile(xx,y,zz,0);}}
setTile(x+9, y+10, z+9, 8);
setTile(x+9, y+10, z-9, 8);
setTile(x-9, y+10, z+9, 8);
setTile(x-9, y+10, z-9, 8);
setTile(x+9, y+10, z, 8);
setTile(x-9, y+10, z, 8);
setTile(x, y+10, z+9, 8);
setTile(x, y+10, z-9, 8);
setTile(x+1, y, z, 79);
setTile(x-1, y, z, 79);
setTile(x, y, z+1, 79);
setTile(x, y, z-1, 79);
w4b[n] = 600;
w4c[n] = true;
wxa[n] = x;
wya[n] = y;
wza[n] = z;
w4[n] = true;
w4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(tree[0]!=null){
for(var n in tree){
if(tree[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(t1a[n])){
for(var yy=y+1;yy<y+7;yy++)
setTile(x, yy, z, 17);
setTile(x, y+7, z, 18);
for(var yy=y+6;yy<y+8;yy++){
setTile(x+1, yy, z, 18);
setTile(x, yy, z-1, 18);
setTile(x, yy, z+1, 18);
setTile(x-1, yy, z, 18);
}
for(var yy=y+4;yy<y+6;yy++){
setTile(x+1, yy, z+1, 18);
setTile(x+1, yy, z-1, 18);
setTile(x+1, yy, z, 18);
setTile(x-1, yy, z+1, 18);
setTile(x-1, yy, z-1, 18);
setTile(x-1, yy, z, 18);
setTile(x, yy, z+1, 18);
setTile(x, yy, z-1, 18);
setTile(x+2, yy, z+1, 18);
setTile(x+2, yy, z-1, 18);
setTile(x+2, yy, z, 18)
setTile(x-2, yy, z+1, 18);
setTile(x-2, yy, z-1, 18);
setTile(x-2, yy, z, 18);
setTile(x+1, yy, z+2, 18);
setTile(x-1, yy, z+2, 18);
setTile(x, yy, z+2, 18);
setTile(x+1, yy, z-2, 18);
setTile(x-1, yy, z-2, 18);
setTile(x, yy, z-2, 18);
}
t1[n] = true;
t1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(t2a[n])){
for(var yy=y+1;yy<y+4;yy++){
setTile(x+2, yy, z+2, 17);
setTile(x+1, yy, z+2, 17);
setTile(x, yy, z+2, 17);
setTile(x-1, yy, z+2, 17);
setTile(x-2, yy, z+2, 17);
setTile(x+2, yy, z-2, 17);
setTile(x+1, yy, z-2, 17);
setTile(x, yy, z-2, 17);
setTile(x-1, yy, z-2, 17);
setTile(x-2, yy, z-2, 17);
setTile(x-2, yy, z+1, 17);
setTile(x-2, yy, z, 17);
setTile(x-2, yy, z-1, 17);
setTile(x+2, yy, z+1, 17);
setTile(x+2, yy, z, 17);
setTile(x+2, yy, z-1, 17);
}
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+4, zz, 17);
setTile(x, y, z, 87);
setTile(x, y+1, z, 51);
t2[n] = true;
t2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(t3a[n])){
t3[n] = true;
t3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(t4a[n])){
if(Cool.isFalse(t4b[n])){
ESP.sbm("Lava Leaf...");
for(var xx=x-12;xx<x+13;xx++){
for(var zz=z-12;zz<z+13;zz++){
setTile(xx,y,zz,18);}}
tx[n] = x;
ty[n] = y;
tz[n] = z;
t4b[n] = true;
}
else if(t4b[n]==true){
ESP.sbm("Lava Leaf");
ESP.heal(tree[n]);
t4b[n] = false;
for(var xx=tx[n]-13;xx<tx[n]+14;xx++){
for(var zz=tz[n]-13;zz<tz[n]+14;zz++){
setTile(xx,ty[n]+2,zz,18);}}
for(var xx=tx[n]-12;xx<tx[n]+13;xx++){
for(var zz=tz[n]-12;zz<tz[n]+13;zz++){
setTile(xx,ty[n]+2,zz,0);}}
for(var xx=tx[n]-11;xx<tx[n]+12;xx++){
for(var zz=tz[n]-11;zz<tz[n]+12;zz++){
setTile(xx,ty[n]-1,zz,11);}}
for(var yy=ty[n]+1;yy<ty[n]+7;yy++)
setTile(tx[n], yy, tz[n], 17);
setTile(tx[n], ty[n]+7, tz[n], 18);
for(var yy=ty[n]+4;yy<ty[n]+8;yy++){
setTile(tx[n]+1, yy, tz[n], 18);
setTile(tx[n], yy, tz[n]-1, 18);
setTile(tx[n], yy, tz[n]+1, 18);
setTile(tx[n]-1, yy, tz[n], 18);
}
for(var yy=ty[n]+4;yy<ty[n]+6;yy++){
setTile(tx[n]+1, yy, tz[n]+1, 18);
setTile(tx[n]+1, yy, tz[n]-1, 18);
setTile(tx[n]-1, yy, tz[n]+1, 18);
setTile(tx[n]-1, yy, tz[n]-1, 18);
}
setTile(tx[n]+2, ty[n]+5, tz[n]+1, 18);
setTile(tx[n]+2, ty[n]+5, tz[n]-1, 18);
setTile(tx[n]+2, ty[n]+5, tz[n], 18);
setTile(tx[n]-2, ty[n]+5, tz[n]+1, 18);
setTile(tx[n]-2, ty[n]+5, tz[n]-1, 18);
setTile(tx[n]-2, ty[n]+5, tz[n], 18);
setTile(tx[n]+1, ty[n]+5, tz[n]+2, 18);
setTile(tx[n]-1, ty[n]+5, tz[n]+2, 18);
setTile(tx[n], ty[n]+5, tz[n]+2, 18);
setTile(tx[n]+1, ty[n]+5, tz[n]-2, 18);
setTile(tx[n]-1, ty[n]+5, tz[n]-2, 18);
setTile(tx[n], ty[n]+5, tz[n]-2, 18);
setTile(tx[n]+2, ty[n]+4, tz[n]+1, 18);
setTile(tx[n]+2, ty[n]+4, tz[n]-1, 18);
setTile(tx[n]+2, ty[n]+4, tz[n], 18);
setTile(tx[n]-2, ty[n]+4, tz[n]+1, 18);
setTile(tx[n]-2, ty[n]+4, tz[n]+1, 18);
setTile(tx[n]-2, ty[n]+4, tz[n], 18);
setTile(tx[n]+1, ty[n]+4, tz[n]+2, 18);
setTile(tx[n]-1, ty[n]+4, tz[n]+2, 18);
setTile(tx[n], ty[n]+4, tz[n]+2, 18);
setTile(tx[n]+1, ty[n]+4, tz[n]-2, 18);
setTile(tx[n]-1, ty[n]+4, tz[n]-2, 18);
setTile(tx[n], ty[n]+4, tz[n]-2, 18);
t4[n] = true;
t4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}
}}}
if(creeper[0]!=null){
for(var n in creeper){
if(creeper[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(c1a[n])){
ESP.antiLack(3);
explode(x, y, z, 3);
if(Cool.isFinished(c1d[n])){
c1b[n] = 270;
c1c[n] = true;
c1d[n] = 1;
cx[n] = x;
cy[n] = y;
cz[n] = z;
}
else if(c1d[n]==1){
c1e[n] = 270;
c1f[n] = true;
c1d[n] = 0;
cx1[n] = x;
cy1[n] = y;
cz1[n] = z;
}
c1[n] = true;
c1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(c2a[n])){
Level.spawnMob(x+0.5, y+12, z+0.5, 65);
setTile(x, y+1, z, 46);
setTile(x, y+2, z, 46);
c2x[n] = x;
c2y[n] = y;
c2z[n] = z;
ESP.antiLack(90);
c2[n] = true;
c2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(c3a[n])){
ESP.antiLack(3);
cx3[n] = Player.getX();
cy3[n] = Player.getY()-2;
cz3[n] = Player.getZ();
explode(cx3[n]+7, cy3[n], cz3[n]+7, 3);
explode(cx3[n]+7, cy3[n], cz3[n]-7, 3);
explode(cx3[n]+7, cy3[n], cz3[n], 3);
explode(cx3[n]-7, cy3[n], cz3[n]+7, 3);
explode(cx3[n]-7, cy3[n], cz3[n]-7, 3);
explode(cx3[n]-7, cy3[n], cz3[n], 3);
explode(cx3[n], cy3[n], cz3[n]+7, 3);
explode(cx3[n], cy3[n], cz3[n]-7, 3);
c3[n] = true;
c3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(c4a[n])){
ESP.sbm("Meteor");
ESP.heal(creeper[n]);
ESP.antiLack(90);
explode(x+8.5,y+1.5,z+8.5, 4.5);
explode(x+8.5,y+1.5,z-7.5, 4.5);
explode(x-7.5,y+1.5,z+8.5, 4.5);
explode(x-7.5,y+1.5,z-7.5, 4.5);
Level.spawnMob(x, y+5, z, 65);
Level.spawnMob(x+4, y+7, z, 65);
Level.spawnMob(x, y+15, z-7, 65);
Level.spawnMob(x-7, y+5, z-4, 65);
Level.spawnMob(x+6, y+17, z+3, 65);
Level.spawnMob(x-4, y+10, z-10, 65);
Level.spawnMob(x-5, y+7, z, 65);
Level.spawnMob(x, y+14, z+8, 65);
Level.spawnMob(x-9, y+9, z, 65);
Level.spawnMob(x-3, y+18, z+9, 65);
Level.spawnMob(x-2, y+13, z-6, 65);
Level.spawnMob(x+7, y+10, z-5, 65);
Level.spawnMob(x-5, y+8, z+5, 65);
Level.spawnMob(x-2, y+10, z+4, 65);
Level.spawnMob(x+2, y+7, z-4, 65);
Level.spawnMob(x+9, y+10, z+9, 65);
Level.spawnMob(x+10, y+3, z+6, 65);
Level.spawnMob(x+9, y+15, z-3, 65);
Level.spawnMob(x+10, y+8, z+2, 65);
Level.spawnMob(x-2, y+6, z-2, 65);
Level.spawnMob(x+3, y+6, z+5, 65);
cx2[n] = x;
cy2[n] = y;
cz2[n] = z;
c4[n] = true;
c4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(soil[0]!=null){
for(var n in soil){
if(soil[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(s1a[n])){
setTile(x+1, y, z+1, 13);
setTile(x+1, y, z, 13);
setTile(x+1, y, z-1, 13);
setTile(x, y, z+1, 13);
setTile(x, y, z, 13);
setTile(x, y, z-1, 13);
setTile(x-1, y, z+1, 13);
setTile(x-1, y, z, 13);
setTile(x-1, y, z-1, 13);
for(var yy=y-2;yy<y;yy++){
setTile(x+1, yy, z+1, 0);
setTile(x+1, yy, z, 0);
setTile(x+1, yy, z-1, 0);
setTile(x, yy, z+1, 0);
setTile(x, yy, z, 0);
setTile(x, yy, z-1, 0);
setTile(x-1, yy, z+1, 0);
setTile(x-1, yy, z, 0);
setTile(x-1, yy, z-1, 0);
}
for(var yy=y+7;yy<y+9;yy++){
setTile(x+1, yy, z-1, 13);
setTile(x+1, yy, z, 13);
setTile(x+1, yy, z+1, 13);
setTile(x, yy, z-1, 13);
setTile(x, yy, z, 13);
setTile(x, yy, z+1, 13);
setTile(x-1, yy, z-1, 13);
setTile(x-1, yy, z, 13);
setTile(x-1, yy, z+1, 13);
}
s1[n] = true;
s1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(s2a[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y-3;yy<y+1;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 0);
setTile(x, y-3, z, 11);
s2x[n] = x;
s2y[n] = y;
s2z[n] = z;
s2[n] = true;
s2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(s3a[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+4, zz, 24);
setTile(x-1, y+1, z+2, 24);
setTile(x, y+1, z+2, 24);
setTile(x+1, y+1, z+2, 24);
setTile(x-1, y+2, z+2, 24);
setTile(x, y+2, z+2, 24);
setTile(x+1, y+2, z+2, 24);
setTile(x, y+3, z+2, 24);
setTile(x+1, y+3, z+2, 24);
setTile(x-1, y+3, z+2, 24);
setTile(x+2, y+1, z+1, 24);
setTile(x+2, y+1, z, 24);
setTile(x+2, y+1, z-1, 24);
setTile(x+2, y+2, z+1, 24);
setTile(x+2, y+2, z, 24);
setTile(x+2, y+2, z-1, 24);
setTile(x+2, y+3, z+1, 24);
setTile(x+2, y+3, z, 24);
setTile(x+2, y+3, z-1, 24);
setTile(x-2, y+1, z+1, 24);
setTile(x-2, y+1, z, 24);
setTile(x-2, y+1, z-1, 24);
setTile(x-2, y+2, z+1, 24);
setTile(x-2, y+2, z, 24);
setTile(x-2, y+2, z-1, 24);
setTile(x-2, y+3, z+1, 24);
setTile(x-2, y+3, z, 24);
setTile(x-2, y+3, z-1, 24);
setTile(x-1, y+1, z-2, 24);
setTile(x, y+1, z-2, 24);
setTile(x+1, y+1, z-2, 24);
setTile(x-1, y+2, z-2, 24);
setTile(x, y+2, z-2, 24);
setTile(x+1, y+2, z-2, 24);
setTile(x, y+3, z-2, 24);
setTile(x+1, y+3, z-2, 24);
setTile(x-1, y+3, z-2, 24);
setTile(x, y, z+1, 0);
setTile(x, y, z-1, 0);
setTile(x+1, y, z+1, 0);
setTile(x+1, y, z, 0);
setTile(x+1, y, z-1, 0);
setTile(x-1, y, z+1, 0);
setTile(x-1, y, z, 0);
setTile(x-1, y, z-1, 0);
setTile(x, y, z, 11);
s3[n] = true;
s3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(s4a[n])){
ESP.sbm("Sink Hole");
ESP.heal(soil[n]);
sx[n] = Player.getX();
sy[n] = Player.getY()-2;
sz[n] = Player.getZ();
for(var xx=sx[n]-9;xx<sx[n]+10;xx++)
for(var yy=sy[n]-4;yy<sy[n]+1;yy++)
for(var zz=sz[n]-9;zz<sz[n]+10;zz++)
setTile(xx,yy,zz,0);
for(var xx=sx[n]-9;xx<sx[n]+10;xx++)
for(var zz=sz[n]-9;zz<sz[n]+10;zz++)
setTile(xx,sy[n]-5,zz,13);
setTile(sx[n]+7, sy[n]-4, sz[n]+7, 10);
setTile(sx[n]+7, sy[n]-4, sz[n]-7, 10);
setTile(sx[n]-7, sy[n]-4, sz[n]+7, 10);
setTile(sx[n]-7, sy[n]-4, sz[n]-7, 10);
setTile(sx[n]+7, sy[n]-4, sz[n], 10);
setTile(sx[n]-7, sy[n]-4, sz[n], 10);
setTile(sx[n], sy[n]-4, sz[n]+7, 10);
setTile(sx[n], sy[n]-4, sz[n]-7, 10);
for(var xx=sx[n];xx<sx[n]+10;xx++)
setTile(xx, sy[n], sz[n], 1);
s4[n] = true;
s4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(summon[0]!=null){
for(var n in summon){
if(summon[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(ss1a[n])){
Level.spawnMob(x+3, y+2, z, 32, "mob/zombie.png");
Level.spawnMob(x+3, y+2, z, 32, "mob/zombie.png");
Level.spawnMob(x+3, y+2, z, 32, "mob/zombie.png");
Level.spawnMob(x-3, y+2, z, 32, "mob/zombie.png");
Level.spawnMob(x, y+2, z, 36, "mob/pigzombie.png");
Level.spawnMob(x, y+2, z, 36, "mob/pigzombie.png");
ss1[n] = true;
ss1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(ss2a[n])){
Level.spawnMob(x, y+2, z, 33, "mob/creeper.png");
Level.spawnMob(x, y+2, z, 33, "mob/creeper.png");
Level.spawnMob(x, y+2, z, 33, "mob/creeper.png");
Level.spawnMob(x, y+2, z, 33, "mob/creeper.png");
Level.spawnMob(x, y+2, z, 33, "mob/creeper.png");
ss2[n] = true;
ss2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(ss3a[n])){
Level.spawnMob(x, y+2 , z, 34, "mob/skeleton.png");
Level.spawnMob(x+2, y+2 , z, 34, "mob/skeleton.png");
Level.spawnMob(x-2, y+2 , z, 34, "mob/skeleton.png");
Level.spawnMob(x, y+2 , z+2, 34, "mob/skeleton.png");
Level.spawnMob(x, y+2 , z-2, 34, "mob/skeleton.png");
uuu = Level.spawnMob(x,y+3,z,35,"mob/spider.png");
ooo = Level.spawnMob(x,y+3,z,34,"mob/skeleton.png");
rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x,y+3,z,35,"mob/spider.png");
ooo = Level.spawnMob(x,y+3,z,34,"mob/skeleton.png");
rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x,y+3,z,35,"mob/spider.png");
ooo = Level.spawnMob(x,y+3,z,34,"mob/skeleton.png");
rideAnimal(ooo, uuu);
ss3[n] = true;
ss3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(ss4a[n])){
ESP.sbm("Master Summon");
ESP.heal(summon[n]);
for(var nn=0;nn<15;nn++)
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+5 , z, 33, "mob/creeper.png");
Level.spawnMob(x, y+5 , z, 33, "mob/creeper.png");
Level.spawnMob(x, y+5 , z, 33, "mob/creeper.png");
Level.spawnMob(x, y+5 , z, 33, "mob/creeper.png");
Level.spawnMob(x, y+5 , z, 33, "mob/creeper.png");
Level.spawnMob(x, y+5 , z, 33, "mob/creeper.png");
Level.spawnMob(x, y+5 , z, 33, "mob/creeper.png");
uuu = Level.spawnMob(x,y+3,z,35,"mob/spider.png");
ooo = Level.spawnMob(x,y+3,z,34,"mob/skeleton.png");
rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x,y+3,z,35,"mob/spider.png");
ooo = Level.spawnMob(x,y+3,z,34,"mob/skeleton.png");
rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x,y+3,z,35,"mob/spider.png");
ooo = Level.spawnMob(x,y+3,z,34,"mob/skeleton.png");
rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x,y+3,z,35,"mob/spider.png");
ooo = Level.spawnMob(x,y+3,z,34,"mob/skeleton.png");
rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x,y+3,z,35,"mob/spider.png");
ooo = Level.spawnMob(x,y+3,z,34,"mob/skeleton.png");
rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x,y+3,z,12,"mob/pig.png");
ooo = Level.spawnMob(x,y+3,z,36,"mob/pigzombie.png");
rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x,y+3,z,12,"mob/pig.png");
ooo = Level.spawnMob(x,y+3,z,36,"mob/pigzombie.png");
rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x,y+3,z,12,"mob/pig.png");
ooo = Level.spawnMob(x,y+3,z,36,"mob/pigzombie.png");
rideAnimal(ooo, uuu);
ss4[n] = true;
ss4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(light[0]!=null){
for(var n in light){
if(light[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(l1a[n])){
setTile(x+1, y+1, z+1, 155);
setTile(x+1, y+1, z-1, 155);
setTile(x, y+1, z, 155);
setTile(x-1, y+1, z+1, 155);
setTile(x-1, y+1, z-1, 155);
setTile(x+1, y+2, z+1, 89);
setTile(x+1, y+2, z-1, 89);
setTile(x, y+2, z, 89);
setTile(x-1, y+2, z+1, 89);
setTile(x-1, y+2, z-1, 89);
setTile(x+1, y+1, z, 51);
setTile(x-1, y+1, z, 51);
setTile(x, y+1, z+1, 51);
setTile(x, y+1, z-1, 51);
l1[n] = true;
l1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(l2a[n])){
setTile(x+1, y, z+1, 155);
setTile(x+1, y, z, 155);
setTile(x+1, y, z-1, 155);
setTile(x, y, z+1, 155);
setTile(x, y, z, 155)
setTile(x, y, z-1, 155);
setTile(x-1, y, z+1, 155);
setTile(x-1, y, z, 155);
setTile(x-1, y, z-1, 155);
setTile(x+2, y+2, z+1, 155);
setTile(x+2, y+2, z, 155);
setTile(x+2, y+2, z-1, 155);
setTile(x-2, y+2, z+1, 155);
setTile(x-2, y+2, z, 155);
setTile(x-2, y+2, z-1, 155);
setTile(x+1, y+2, z+2, 155);
setTile(x, y+2, z+2, 155);
setTile(x-1, y+2, z+2, 155);
setTile(x+1, y+2, z-2, 155);
setTile(x, y+2, z-2, 155);
setTile(x-1, y+2, z-2, 155);
setTile(x, y+1, z, 51);
setTile(x, y+2, z, 30);
Level.spawnMob(x+0.5, y+10, z+0.5, 65);
l2[n] = true;
l2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(l3a[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y, zz, 155);
setTile(x+2, y+2, z+1, 155);
setTile(x+2, y+2, z, 155);
setTile(x+2, y+2, z-1, 155);
setTile(x-2, y+2, z+1, 155);
setTile(x-2, y+2, z, 155);
setTile(x-2, y+2, z-1, 155);
setTile(x+1, y+2, z+2, 155);
setTile(x, y+2, z+2, 155);
setTile(x-1, y+2, z+2, 155);
setTile(x+1, y+2, z-2, 155);
setTile(x, y+2, z-2, 155);
setTile(x-1, y+2, z-2, 155);
setTile(x+2, y+3, z, 8);
setTile(x-2, y+3, z, 8);
setTile(x, y+3, z+2, 8);
setTile(x, y+3, z-2, 8);
setTile(x, y+5, z, 89);
l3b[n] = 195;
l3c[n] = true;
lx[n] = x;
ly[n] = y;
lz[n] = z;
l3[n] = true;
l3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(l4a[n])){
ESP.sbm("Holy Arrow Strike");
lxa[n] = Player.getX();
lya[n] = Player.getY()-2;
lza[n] = Player.getZ();
ESP.heal(light[n]);
setTile(lxa[n]+4, lya[n]+1, lza[n]+4, 30);
setTile(lxa[n]+4, lya[n]+1, lza[n]+2, 30);
setTile(lxa[n]+4, lya[n]+1, lza[n], 30);
setTile(lxa[n]+4, lya[n]+1, lza[n]-2, 30);
setTile(lxa[n]+4, lya[n]+1, lza[n]-4, 30);
setTile(lxa[n]+2, lya[n]+1, lza[n]+4, 30);
setTile(lxa[n]+2, lya[n]+1, lza[n]+2, 30);
setTile(lxa[n]+2, lya[n]+1, lza[n], 30);
setTile(lxa[n]+2, lya[n]+1, lza[n]-2, 30);
setTile(lxa[n]+2, lya[n]+1, lza[n]-4, 30);
setTile(lxa[n], lya[n]+1, lza[n]+4, 30);
setTile(lxa[n], lya[n]+1, lza[n]+2, 30);
setTile(lxa[n], lya[n]+1, lza[n]-2, 30);
setTile(lxa[n], lya[n]+1, lza[n]-4, 30);
setTile(lxa[n]-4, lya[n]+1, lza[n]+4, 30);
setTile(lxa[n]-4, lya[n]+1, lza[n]+2, 30);
setTile(lxa[n]-4, lya[n]+1, lza[n], 30);
setTile(lxa[n]-4, lya[n]+1, lza[n]-2, 30);
setTile(lxa[n]-4, lya[n]+1, lza[n]-4, 30);
setTile(lxa[n]-2, lya[n]+1, lza[n]+4, 30);
setTile(lxa[n]-2, lya[n]+1, lza[n]+2, 30);
setTile(lxa[n]-2, lya[n]+1, lza[n], 30);
setTile(lxa[n]-2, lya[n]+1, lza[n]-2, 30);
setTile(lxa[n]-2, lya[n]+1, lza[n]-4, 30);
setTile(lxa[n]+7, lya[n]+1, lza[n]+7, 30);
setTile(lxa[n]+7, lya[n]+1, lza[n]-7, 30);
setTile(lxa[n]-7, lya[n]+1, lza[n]+7, 30);
setTile(lxa[n]-7, lya[n]+1, lza[n]-7, 30);
setTile(lxa[n]+8, lya[n]+1, lza[n], 30);
setTile(lxa[n], lya[n]+1, lza[n]+8, 30);
setTile(lxa[n]-8, lya[n]+1, lza[n], 30);
setTile(lxa[n], lya[n]+1, lza[n]-8, 30);
setTile(lxa[n], lya[n]+5, lza[n], 89);
for(var xx=lxa[n]-10;xx<lxa[n]+11;xx++)
for(var zz=lza[n]-10;zz<lza[n]+11;zz++)
Level.spawnMob(xx,lya[n]+32,zz, 80,"");
setTile(lxa[n]+9, lya[n]+10, lza[n]+9, 155);
setTile(lxa[n]+9, lya[n]+10, lza[n], 155);
setTile(lxa[n]+9, lya[n]+10, lza[n]-9, 155);
setTile(lxa[n], lya[n]+10, lza[n]+9, 155);
setTile(lxa[n], lya[n]+10, lza[n]-9, 155);
setTile(lxa[n]-9, lya[n]+10, lza[n]+9, 155);
setTile(lxa[n]-9, lya[n]+10, lza[n], 155);
setTile(lxa[n]-9, lya[n]+10, lza[n]-9, 155);
setTile(lxa[n]+9, lya[n]+9, lza[n]+9, 89);
setTile(lxa[n]+9, lya[n]+9, lza[n], 89);
setTile(lxa[n]+9, lya[n]+9, lza[n]-9, 89);
setTile(lxa[n], lya[n]+9, lza[n]+9, 89);
setTile(lxa[n], lya[n]+9, lza[n]-9, 89);
setTile(lxa[n]-9, lya[n]+9, lza[n]+9, 89);
setTile(lxa[n]-9, lya[n]+9, lza[n], 89);
setTile(lxa[n]-9, lya[n]+9, lza[n]-9, 89);
l4[n] = true;
l4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(dark[0]!=null){
for(var n in dark){
if(dark[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(d1a[n])){
setTile(x+1, y+1, z+1, 49);
setTile(x+1, y+1, z-1, 49);
setTile(x, y+1, z, 49);
setTile(x-1, y+1, z+1, 49);
setTile(x-1, y+1, z-1, 49);
setTile(x, y+2, z, 10);
d1b[n] = 90;
d1c[n] = true;
dxb[n] = x;
dyb[n] = y;
dzb[n] = z;
d1[n] = true;
d1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(d2a[n])){
for(var yy=y+1;yy<y+7;yy++)
setTile(x, yy, z, 49);
setTile(x, y+7, z, 35, 15);
for(var yy=y+6;yy<y+8;yy++){
setTile(x+1, yy, z, 35, 15);
setTile(x, yy, z-1, 35, 15);
setTile(x, yy, z+1, 35, 15);
setTile(x-1, yy, z, 35, 15);
}
for(var yy=y+4;yy<y+6;yy++){
for(var n=-1;n<2;n++){
setTile(x+1, yy, z+n, 35, 15);
setTile(x-1, yy, z+n, 35, 15);
setTile(x+2, yy, z+n, 35, 15);
setTile(x-2, yy, z+n, 35, 15);
setTile(x+n, yy, z+2, 35, 15);
setTile(x+n, yy, z-2, 35, 15);
setTile(x+n, yy, z+1, 35, 15);
setTile(x+n, yy, z-1, 35, 15);
}
}
d2[n] = true;
d2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(d3a[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y, zz, 49);
setTile(x+2, y+2, z+1, 49);
setTile(x+2, y+2, z, 49);
setTile(x+2, y+2, z-1, 49);
setTile(x-2, y+2, z+1, 49);
setTile(x-2, y+2, z, 49);
setTile(x-2, y+2, z-1, 49);
setTile(x+1, y+2, z+2, 49);
setTile(x, y+2, z+2, 49);
setTile(x-1, y+2, z+2, 49);
setTile(x+1, y+2, z-2, 49);
setTile(x, y+2, z-2, 49);
setTile(x-1, y+2, z-2, 49);
setTile(x, y+1, z, 10);
d3b[n] = 120;
d3c[n] = true;
dxa[n] = x;
dya[n] = y;
dza[n] = z;
d3[n] = true;
d3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(d4a[n])){
ESP.sbm("Diabolic Emission");
ESP.heal(dark[n]);
if(getTile(x, y+8, z)==0){
setTile(x, y+8, z, 49);
}
dx[n] = x;
dy[n] = y+8;
dz[n] = z;
d4[n] = true;
d4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(ice[0]!=null){
for(var n in ice){
if(ice[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(i1a[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y-3;yy<y+1;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 0);
i1b[n] = 45;
i1c[n] = true;
ix[n] = x;
iy[n] = y;
iz[n] = z;
i1[n] = true;
i1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(i2a[n])){
ixb[n] = x-Player.getX();
izb[n] = z-Player.getZ();
setTile(x+ixb[n]+2, y+1, z+izb[n], 79);
setTile(x+ixb[n]-2, y+1, z+izb[n], 79);
setTile(x+ixb[n], y+1, z+izb[n]+2, 79);
setTile(x+ixb[n], y+1, z+izb[n]-2, 79);
setTile(x+ixb[n]+1, y+1, z+izb[n]+1, 30);
setTile(x+ixb[n]+1, y+1, z+izb[n]-1, 30);
setTile(x+ixb[n]-1, y+1, z+izb[n]+1, 30);
setTile(x+ixb[n]-1, y+1, z+izb[n]-1, 30);
setTile(x+ixb[n]+2, y+1, z+izb[n]+2, 80);
setTile(x+ixb[n]+2, y+1, z+izb[n]-2, 80);
setTile(x+ixb[n]-2, y+1, z+izb[n]+2, 80);
setTile(x+ixb[n]-2, y+1, z+izb[n]-2, 80);
setTile(x+ixb[n]+2, y+1, z+izb[n]+1, 85);
setTile(x+ixb[n]+2, y+1, z+izb[n]-1, 85);
setTile(x+ixb[n]-2, y+1, z+izb[n]+1, 85);
setTile(x+ixb[n]-2, y+1, z+izb[n]-1, 85);
setTile(x+ixb[n]+1, y+1, z+izb[n]+2, 85);
setTile(x+ixb[n]-1, y+1, z+izb[n]+2, 85);
setTile(x+ixb[n]+1, y+1, z+izb[n]-2, 85);
setTile(x+ixb[n]-1, y+1, z+izb[n]-2, 85);
setTile(x+ixb[n]+2, y+2, z+izb[n]+2, 86);
setTile(x+ixb[n]+2, y+2, z+izb[n]-2, 86);
setTile(x+ixb[n]-2, y+2, z+izb[n]+2, 86);
setTile(x+ixb[n]-2, y+2, z+izb[n]-2, 86);
setTile(x+ixb[n], y+1, z+izb[n], 30);
i2[n] = true;
i2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(i3a[n])){
for(var xx=x-2;xx<x+3;xx++){
for(var yy=y+1;yy<y+6;yy++){
for(var zz=z-2;zz<z+3;zz++){
setTile(xx,yy,zz,79);}}}
i3b[n] = true;
i3c[n] = 75;
ixa[n] = Math.floor(x)+0.5;
iya[n] = Math.floor(y)+0.5;
iza[n] = Math.floor(z)+0.5;
i3[n] = true;
i3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(i4a[n])){
ESP.sbm("Igloo");
ESP.heal(ice[n]);
arroundMobHealthDown(ice[n], 20, 7);
for(var xx=x-6;xx<x+7;xx++)
for(var zz=z-6;zz<z+7;zz++)
setTile(xx,y,zz,79);
for(var xx=x-4;xx<x+5;xx++){
setTile(xx,y+1,z+4,79);
setTile(xx,y+1,z-4,79);
}
for(var zz=z-3;zz<z+4;zz++){
setTile(x+4,y+1,zz,79);
setTile(x-4,y+1,zz,79);
}
setTile(x+4,y+2,z+4,79);
setTile(x+3,y+2,z+4,79);
setTile(x+2,y+2,z+4,102);
setTile(x+1,y+2,z+4,79);
setTile(x,y+2,z+4,0);
setTile(x,y+1,z+4,0);
setTile(x-1,y+2,z+4,79);
setTile(x-2,y+2,z+4,102);
setTile(x-3,y+2,z+4,79);
setTile(x-4,y+2,z+4,79);
setTile(x+4,y+2,z-4,79);
setTile(x+3,y+2,z-4,79);
setTile(x+2,y+2,z-4,102);
setTile(x+1,y+2,z-4,102);
setTile(x,y+2,z-4,79);
setTile(x-1,y+2,z-4,102);
setTile(x-2,y+2,z-4,102);
setTile(x-3,y+2,z-4,79);
setTile(x-4,y+2,z-4,79);
setTile(x+4,y+2,z+3,79);
setTile(x+4,y+2,z+2,102);
setTile(x+4,y+2,z+1,102);
setTile(x+4,y+2,z,79);
setTile(x+4,y+2,z-1,102);
setTile(x+4,y+2,z-2,102);
setTile(x+4,y+2,z-3,79);
setTile(x-4,y+2,z+3,79);
setTile(x-4,y+2,z+2,102);
setTile(x-4,y+2,z+1,102);
setTile(x-4,y+2,z,79);
setTile(x-4,y+2,z-1,102);
setTile(x-4,y+2,z-2,102);
setTile(x-4,y+2,z-3,79);
for(var xx=x-4;xx<x+5;xx++){
setTile(xx,y+3,z+4,79);
setTile(xx,y+3,z-4,79);
}
for(var zz=z-3;zz<z+4;zz++){
setTile(x+4,y+3,zz,79);
setTile(x-4,y+3,zz,79);
}
for(var xx=x-4;xx<x+5;xx++){
for(var zz=z-4;zz<z+5;zz++){
setTile(xx,y+4,zz,79);}}
setTile(x+4,y+5,z+4,79);
setTile(x+3,y+5,z+4,79);
setTile(x+2,y+5,z+4,79);
setTile(x+1,y+5,z+4,79);
setTile(x,y+5,z+4,79);
setTile(x-1,y+5,z+4,79);
setTile(x-2,y+5,z+4,79);
setTile(x-3,y+5,z+4,79);
setTile(x-4,y+5,z+4,79);
setTile(x+4,y+5,z-4,79);
setTile(x+3,y+5,z-4,79);
setTile(x+2,y+5,z-4,79);
setTile(x+1,y+5,z-4,79);
setTile(x,y+5,z-4,79);
setTile(x-1,y+5,z-4,79);
setTile(x-2,y+5,z-4,79);
setTile(x-3,y+5,z-4,79);
setTile(x-4,y+5,z-4,79);
setTile(x+4,y+5,z+3,79);
setTile(x+4,y+5,z+2,79);
setTile(x+4,y+5,z+1,79);
setTile(x+4,y+5,z,79);
setTile(x+4,y+5,z-1,79);
setTile(x+4,y+5,z-2,79);
setTile(x+4,y+5,z-3,79);
setTile(x-4,y+5,z+3,79);
setTile(x-4,y+5,z+2,79);
setTile(x-4,y+5,z+1,79);
setTile(x-4,y+5,z,79);
setTile(x-4,y+5,z-1,79);
setTile(x-4,y+5,z-2,79);
setTile(x-4,y+5,z-3,79);
setTile(x+3,y+1,z-3,58);
setTile(x+2,y+1,z-3,61);
setTile(x+1,y+1,z-3,245);
setTile(x,y+1,z-3,54);
setTile(x-3,y+1,z-3,85);
setTile(x-3,y+2,z-3,158);
setTile(x-2,y+1,z-3,53);
i4[n] = true;
i4a[n] = 1800;
skillCool(ESP.getUser(), 4);
ixc[n] = x;
iyc[n] = y;
izc[n] = z;
}
}}}
if(sand[0]!=null){
for(var n in sand){
if(sand[n]==ESP.getUser()){
if(i==303&&Cool.isFinished(m2a[n])){
for(var xx=x-1;xx<x+2;xx++){
for(var yy=y-2;yy<y+1;yy++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx,yy,zz,0);}}}
setTile(x, y-3, z, 12);
setTile(x, y-2, z, 81);
setTile(x+1, y-3, z+1, 81);
setTile(x+1, y-3, z-1, 81);
setTile(x-1, y-3, z+1, 81);
setTile(x-1, y-3, z-1, 81);
m2[n] = true;
m2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(m3a[n])){
for(var xx=x-2;xx<x+3;xx++){
for(var zz=z-2;zz<z+3;zz++){
for(var yy=y+4;yy<y+8;yy++)
setTile(xx, yy, zz, 12);
setTile(xx, y, zz, 0);
}}
m3x[n] = x;
m3y[n] = y;
m3z[n] = z;
m3[n] = true;
m3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(m4a[n])){
ESP.sbm("Desert Summon");
ESP.heal(sand[n]);
arroundMobFireTicks(sand[n], 12, 30);
for(var xx=x-13;xx<x+14;xx++)
for(var zz=z-13;zz<z+14;zz++)
setTile(xx,y+2,zz,24);
for(var xx=x-12;xx<x+13;xx++){
for(var zz=z-12;zz<z+13;zz++){
setTile(xx,y-1,zz,24);
setTile(xx,y+2,zz,0);}}
for(var xx=x-12;xx<x+13;xx++)
for(var zz=z-12;zz<z+13;zz++)
setTile(xx,y,zz,12);
for(var yy=y+1;yy<y+4;yy++){
setTile(x+3, yy, z-3, 81);
setTile(x+7, yy, z, 81);
setTile(x+2, yy, z+4, 81);
setTile(x+5, yy, z+5, 81);
setTile(x, yy, z-7, 81);
setTile(x-5, yy, z+5, 81);
setTile(x-3, yy, z-4, 81);
setTile(x-5, yy, z, 81);
setTile(x-11, yy, z+1, 81);
setTile(x+4, yy, z-1, 81);
setTile(x-6, yy, z, 81);
setTile(x+4, yy, z+5, 81);
setTile(x-2, yy, z+5, 81);
setTile(x, yy, z+6, 81);
setTile(x-6, yy, z+4, 81);
setTile(x-4, yy, z, 81);
setTile(x-5, yy, z-2, 81);
setTile(x+2, yy, z+12, 81);
setTile(x+8, yy, z-7, 81);
setTile(x+7, yy, z, 81);
setTile(x+5, yy, z+2, 81);
setTile(x+12, yy, z+6, 81);
setTile(x, yy, z-4, 81);
setTile(x-4, yy, z+5, 81);
setTile(x-2, yy, z-5, 81);
setTile(x-8, yy, z, 81);
setTile(x-6, yy, z-11, 81);
setTile(x+7, yy, z-8, 81);
setTile(x-7, yy, z, 81);
setTile(x+5, yy, z+7, 81);
setTile(x-3, yy, z+9, 81);
setTile(x, yy, z, 81);
setTile(x-1, yy, z+5, 81);
setTile(x-3, yy, z, 81);
setTile(x-12, yy, z-1, 81);
setTile(x, yy, z+2, 81);
setTile(x-6, yy, z+12, 81);
setTile(x-9, yy, z+12, 81);
setTile(x+10, yy, z+11, 81);
setTile(x-11, yy, z-12, 81);
setTile(x+11, yy, z+11, 81);
setTile(x-12, yy, z-9, 81);
setTile(x-9, yy, z+10, 81);
setTile(x-6, yy, z+8, 81);
setTile(x-9, yy, z+8, 81);
setTile(x+10, yy, z+4, 81);
setTile(x-11, yy, z-6, 81);
setTile(x+8, yy, z+1, 81);
setTile(x-9, yy, z-9, 81);
setTile(x-7, yy, z+8, 81);
setTile(x-6, yy, z+5, 81);
setTile(x-2, yy, z+5, 81);
setTile(x+4, yy, z+4, 81);
setTile(x-5, yy, z-6, 81);
setTile(x+7, yy, z+1, 81);
setTile(x-5, yy, z-8, 81);
setTile(x-4, yy, z+3, 81);
setTile(x-5, yy, z+2, 81);
setTile(x-7, yy, z+4, 81);
setTile(x+1, yy, z+9, 81);
setTile(x-8, yy, z-7, 81);
setTile(x+9, yy, z+7, 81);
setTile(x-8, yy, z-7, 81);
setTile(x-7, yy, z+6, 81);
setTile(x-6, yy, z-9, 81);
setTile(x-9, yy, z-11, 81);
setTile(x-11, yy, z-11, 81);
setTile(x-11, yy, z-7, 81);
setTile(x-5, yy, z-11, 81);
setTile(x-7, yy, z-9, 81);
setTile(x-9, yy, z-10, 81);
setTile(x+6, yy, z-2, 81);
setTile(x+9, yy, z-12, 81);
setTile(x+10, yy, z-9, 81);
setTile(x-11, yy, z-12, 81);
setTile(x+11, yy, z-11, 81);
setTile(x+12, yy, z-9, 81);
setTile(x+9, yy, z-7, 81);
setTile(x+6, yy, z-2, 81);
setTile(x+9, yy, z-3, 81);
setTile(x+10, yy, z-6, 81);
setTile(x-11, yy, z-1, 81);
setTile(x+1, yy, z-4, 81);
setTile(x+12, yy, z-5, 81);
setTile(x+9, yy, z-7, 81);
setTile(x+1, yy, z-2, 81);
setTile(x+7, yy, z-12, 81);
setTile(x+8, yy, z-9, 81);
setTile(x-4, yy, z-12, 81);
setTile(x+7, yy, z-11, 81);
setTile(x+9, yy, z-9, 81);
setTile(x+5, yy, z-7, 81);
setTile(x+3, yy, z-6, 81);
setTile(x, yy, z-9, 81);
setTile(x-1, yy, z-7, 81);
setTile(x+1, yy, z-8, 81);
setTile(x-3, yy, z-12, 81);
setTile(x-2, yy, z+10, 81);
setTile(x+2, yy, z-8, 81);
}
m4x[n] = x;
m4y[n] = y;
m4z[n] = z;
m4[n] = true;
m4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(blood[0]!=null){
for(var n in blood){
if(blood[n]==ESP.getUser()){
if(i==304&&Cool.isFinished(b3a[n])){
teleport(ESP.getUser(), x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
b3[n] = true;
b3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(b4a[n])&&Cool.isFinished(b4b[n])){
ESP.sbm("Nightmare");
Player.setHealth(Entity.getHealth(ESP.getUser())+15);
Level.setTime(14000);
b4b[n] = 1;
}
}}}
if(air[0]==ESP.getUser()&&air2==false){
if(i==302&&Cool.isFinished(a1a[0])){
player = ESP.getUser();
Entity.setVelX(player, 3*x-3*Player.getX());
Entity.setVelZ(player, 3*z-3*Player.getZ());
a1[0] = true;
a1a[0] = 75;
skillCool(ESP.getUser(), 1);
}
if(i==303){
if(Cool.isFinished(a2a[0])&&Cool.isFalse(a2b[0])){
a2x[0] = x;
a2y[0] = y;
a2z[0] = z;
for(var xx=x-1;xx<x+2;xx++){
for(var yy=y+1;yy<y+4;yy++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx, yy, zz, 0);
setTile(xx, yy, z+2, 20);
setTile(xx, yy, z-2, 20);
setTile(x+2 ,yy, zz, 20);
setTile(x-2 ,yy, zz, 20);
setTile(xx, y+4, zz, 20);
}}}
a2[0] = true;
a2a[0] = 300;
skillCool(ESP.getUser(), 2);
a2b[0] = true;
}
else if(a2b[0]==true){
for(var xx=a2x[0]-1;xx<a2x[0]+2;xx++){
for(var yy=a2y[0]+1;yy<a2y[0]+4;yy++){
for(var zz=a2z[0]-1;zz<a2z[0]+2;zz++){
setTile(xx, yy, a2z[0]+2, 0);
setTile(xx, yy, a2z[0]-2, 0);
setTile(a2x[0]+2 ,yy, zz, 0);
setTile(a2x[0]-2 ,yy, zz, 0);
setTile(xx, a2y[0]+4, zz, 0);
}}}
a2b[0] = false;
}
}
}
if(air[1]!=null){
for(var n=1;n<air.length;n++){
if(air[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(a1a[n])){
player = ESP.getUser();
Entity.setVelX(player, 3*x-3*Player.getX());
Entity.setVelZ(player, 3*z-3*Player.getZ());
a1[n] = true;
a1a[n] = 75;
skillCool(ESP.getUser(), 1);
}
if(i==303){
if(Cool.isFinished(a2a[n])&&Cool.isFalse(a2b[n])){
a2x[n] = x;
a2y[n] = y;
a2z[n] = z;
for(var xx=x-1;xx<x+2;xx++){
for(var yy=y+1;yy<y+4;yy++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx, yy, zz, 0);
setTile(xx, yy, z+2, 20);
setTile(xx, yy, z-2, 20);
setTile(x+2 ,yy, zz, 20);
setTile(x-2 ,yy, zz, 20);
setTile(xx, y+4, zz, 20);
}}}
a2[n] = true;
a2a[n] = 300;
skillCool(ESP.getUser(), 2);
a2b[n] = true;
}
else if(a2b[n]==true){
for(var xx=a2x[n]-1;xx<a2x[n]+2;xx++){
for(var yy=a2y[n]+1;yy<a2y[n]+4;yy++){
for(var zz=a2z[n]-1;zz<a2z[n]+2;zz++){
setTile(xx, yy, a2z[n]+2, 0);
setTile(xx, yy, a2z[n]-2, 0);
setTile(a2x[n]+2 ,yy, zz, 0);
setTile(a2x[n]-2 ,yy, zz, 0);
setTile(xx, a2y[n]+4, zz, 0);
}}}
a2b[n] = false;
}
}
}}}
if(thunder[0]!=null){
for(var n in thunder){
if(thunder[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(th1a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
for(th1b=3;th1b<20;th1b++)
setTile(px+th1b*sin, y+2, pz+th1b*cos,89);
th1c[n] = y;
th1[n] = true;
th1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(th2a[n])){
ESP.antiLack(3);
setTile(x+5, y+4, z+5, 89);
setTile(x+5, y+4, z, 89);
setTile(x+5, y+4, z-5, 89);
setTile(x, y+4, z+5, 89);
setTile(x, y+4, z-5, 89);
setTile(x-5, y+4, z+5, 89);
setTile(x-5, y+4, z, 89);
setTile(x-5, y+4, z-5, 89);
thxa[n] = x;
thya[n] = y;
thza[n] = z;
th2[n] = true;
th2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(th3a[n])){
if(Cool.isFalse(th3b[n])){
setTile(x, y, z, 89);
thxb[n] = x;
thyb[n] = y;
thzb[n] = z;
th3b[n] = true;
}
else if(th3b[n]==true){
ESP.antiLack(3);
for(var yy=thyb[n]+1;yy<thyb[n]+7;yy++)
setTile(thxb[n], yy, thzb[n], 89);
th3b[n] = false;
th3[n] = true;
th3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}
if(i==305&&Cool.isFinished(th4a[n])){
ESP.sbm("Thunder Fall");
ESP.antiLack(20);
ESP.heal(thunder[n]);
arroundMobHealthDown(ESP.getUser(), 20, 6);
thx[n] = Player.getX();
thy[n] = Player.getY()-2;
thz[n] = Player.getZ();
setTile(thx[n], thy[n]+10, thz[n], 41);
setTile(thx[n]+9, thy[n]+9, thz[n]+9, 41);
setTile(thx[n]+9, thy[n]+9, thz[n]-9, 41);
setTile(thx[n]-9, thy[n]+9, thz[n]+9, 41);
setTile(thx[n]-9, thy[n]+9, thz[n]-9, 41);
for(var xx=thx[n]-14;xx<thx[n]+15;xx++){
for(var zz=thz[n]-14;zz<thz[n]+15;zz++){
setTile(thx[n]+14, thy[n]+2, zz, 89);
setTile(thx[n]-14, thy[n]+2, zz, 89);
setTile(xx, thy[n]+2, thz[n]+14, 89);
setTile(xx, thy[n]+2, thz[n]-14, 89);
}}
for(var xx=thx[n]-2;xx<thx[n]+3;xx++)
for(var zz=thz[n]-2;zz<thz[n]+3;zz++)
setTile(xx, thy[n]+2, zz, 89);
for(var xx=thx[n]-1;xx<thx[n]+2;xx++)
for(var zz=thz[n]-1;zz<thz[n]+2;zz++)
setTile(xx, thy[n]+2, zz, 0);
th4[n] = true;
th4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(elsa[0]!=null){
for(var n in elsa){
if(elsa[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(e1a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
explode(px+6*sin, y+2.5, pz+6*cos, 1);
explode(px+11*sin, y+2.5, pz+11*cos, 1);
explode(px+16*sin, y+2.5, pz+16*cos, 1);
explode(px+19*sin, y+2.5, pz+19*cos, 1);
for(var e1b=3;e1b<21;e1b++)
setTile(px+e1b*sin, y, pz+e1b*cos, 79);
setTile(px+20*sin, y+1, pz+20*cos, 79);
setTile(px+20*sin, y+2, pz+20*cos, 79);
e1[n] = true;
e1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(e2a[n])){
ESP.antiLack(3);
explode(x+5, y+3, z, 2);
explode(x-4, y+3, z, 2);
explode(x, y+3, z+5, 2);
explode(x, y+3, z-4, 2);
for(var xx=x-7;xx<x+8;xx++){
for(var zz=z-7;zz<z+8;zz++){
setTile(xx,y,zz,79);}}
e2[n] = true;
e2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(e3a[n])){
for(var yy=y+1;yy<y+4;yy++){
setTile(x+2,yy,z+1,79);
setTile(x+2,yy,z,79);
setTile(x+2,yy,z-1,79);
setTile(x-2,yy,z+1,79);
setTile(x-2,yy,z,79);
setTile(x-2,yy,z-1,79);
setTile(x+1,yy,z+2,79);
setTile(x,yy,z+2,79);
setTile(x-1,yy,z+2,79);
setTile(x+1,yy,z-2,79);
setTile(x,yy,z-2,79);
setTile(x-1,yy,z-2,79);
}
setTile(x+2,y+4,z+1,79);
setTile(x+2,y+4,z,79);
setTile(x+2,y+4,z-1,79);
setTile(x-2,y+4,z+1,79);
setTile(x-2,y+4,z,79);
setTile(x-2,y+4,z-1,79);
setTile(x+1,y+4,z+2,79);
setTile(x,y+4,z+2,79);
setTile(x-1,y+4,z+2,79);
setTile(x+1,y+4,z-2,79);
setTile(x,y+4,z-2,79);
setTile(x-1,y+4,z-2,79);
setTile(x+3,y+1,z,79);
setTile(x-3,y+1,z,79);
setTile(x,y+1,z+3,79);
setTile(x,y+1,z-3,79);
setTile(x+3,y+2,z,79);
setTile(x-3,y+2,z,79);
setTile(x,y+2,z+3,79);
setTile(x,y+2,z-3,79);
setTile(x+1,y+5,z-1,79);
setTile(x+1,y+5,z,79);
setTile(x+1,y+5,z+1,79);
setTile(x,y+5,z-1,79);
setTile(x,y+5,z,79);
setTile(x,y+5,z+1,79);
setTile(x-1,y+5,z-1,79);
setTile(x-1,y+5,z,79);
setTile(x-1,y+5,z+1,79);
setTile(x+1,y+6,z-1,79);
setTile(x+1,y+6,z,79);
setTile(x+1,y+6,z+1,79);
setTile(x,y+6,z-1,79);
setTile(x,y+6,z,79);
setTile(x,y+6,z+1,79);
setTile(x-1,y+6,z-1,79);
setTile(x-1,y+6,z,79);
setTile(x-1,y+6,z+1,79);
setTile(x+1,y+7,z-1,79);
setTile(x+1,y+7,z,79);
setTile(x+1,y+7,z+1,79);
setTile(x,y+7,z-1,79);
setTile(x,y+7,z,79);
setTile(x,y+7,z+1,79);
setTile(x-1,y+7,z-1,79);
setTile(x-1,y+7,z,79);
setTile(x-1,y+7,z+1,79);
setTile(x+1,y+8,z-1,79);
setTile(x+1,y+8,z,79);
setTile(x+1,y+8,z+1,79);
setTile(x,y+8,z-1,79);
setTile(x,y+8,z,79);
setTile(x,y+8,z+1,79);
setTile(x-1,y+8,z-1,79);
setTile(x-1,y+8,z,79);
setTile(x-1,y+8,z+1,79);
setTile(x+2,y+5,z,79);
setTile(x-2,y+5,z,79);
setTile(x,y+5,z+2,79);
setTile(x,y+5,z-2,79);
setTile(x+2,y+6,z,79);
setTile(x-2,y+6,z,79);
setTile(x,y+6,z+2,79);
setTile(x,y+6,z-2,79);
setTile(x+1,y+9,z,79);
setTile(x-1,y+9,z,79);
setTile(x,y+9,z+1,79);
setTile(x,y+9,z-1,79);
setTile(x+1,y+10,z,79);
setTile(x-1,y+10,z,79);
setTile(x,y+10,z+1,79);
setTile(x,y+10,z-1,79);
setTile(x+1,y+11,z,79);
setTile(x-1,y+11,z,79);
setTile(x,y+11,z+1,79);
setTile(x,y+11,z-1,79);
setTile(x+1,y+12,z,79);
setTile(x-1,y+12,z,79);
setTile(x,y+12,z+1,79);
setTile(x,y+12,z-1,79);
for(var yy=y+9;yy<y+17;yy++)
setTile(x,yy,z,79);
setTile(x,y+1,z,30);
e3b[n] = true;
e3c[n] = 75;
ex[n] = Math.floor(x)+0.5;
ey[n] = Math.floor(y)+0.5;
ez[n] = Math.floor(z)+0.5;
e3[n] = true;
e3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(e4a[n])){
ESP.sbm("Ice Palace");
ESP.heal(elsa[n]);
arroundMobHealthDown(elsa[n], 20, 7);
setTile(x,y+28,z,79);
setTile(x,y+29,z,79);
setTile(x,y+30,z,79);
setTile(x,y+31,z,79);
setTile(x,y+32,z,79);
autoRecover(x, y, z, 8, 79);
setTiles(x-5, x+5, y+1, y+15, z-5, z+5, 79);
setTiles(x-4, x+4, y+1, y+14, z-4, z+4, 79);
for(var yy=y+2;yy<y+14;yy++){
for(var xx=x-3;xx<x+4;xx++){
setTile(xx, yy, z+5, 20);
setTile(xx, yy, z-5, 20);
}
for(var zz=z-3;zz<z+4;zz++){
setTile(x+5, yy, zz, 20);
setTile(x-5, yy, zz, 20);
}
}
setTile(x+5,y+15,z+5,0);
setTile(x+5,y+15,z-5,0);
setTile(x-5,y+15,z+5,0);
setTile(x-5,y+15,z-5,0);
setTile(x+5,y+14,z+5,0);
setTile(x+5,y+14,z-5,0);
setTile(x+5,y+14,z+5,0);
setTile(x+5,y+14,z-5,0);
for(var xx=x-4;xx<x+5;xx++){
for(var zz=z-4;zz<z+5;zz++){
setTile(xx,y+16,zz,79);
setTile(xx,y+17,zz,79);
setTile(xx,y+18,zz,79);}}
for(var xx=x-3;xx<x+4;xx++){
for(var zz=z-3;zz<z+4;zz++){
setTile(xx,y+19,zz,79);
setTile(xx,y+20,zz,79);
setTile(xx,y+21,zz,79);}}
for(var xx=x-2;xx<x+3;xx++){
for(var zz=z-2;zz<z+3;zz++){
setTile(xx,y+22,zz,79);
setTile(xx,y+23,zz,79);
setTile(xx,y+24,zz,79);}}
for(var xx=x-1;xx<x+2;xx++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx,y+25,zz,79);
setTile(xx,y+26,zz,79);
setTile(xx,y+27,zz,79);}}
setTile(x+5,y+1,z,0);
setTile(x+5,y+2,z,0);
setTile(x+5,y+1,z+1,79);
setTile(x+5,y+2,z+1,79);
setTile(x+5,y+3,z+1,79);
setTile(x+5,y+1,z-1,79);
setTile(x+5,y+2,z-1,79);
setTile(x+5,y+3,z-1,79);
setTile(x+5,y+3,z,79);
setTile(x+1,y+1,z+4,79);
setTile(x+1,y+1,z+3,79);
setTile(x,y+2,z+4,79);
setTile(x,y+2,z+3,79);
setTile(x-1,y+3,z+4,79);
setTile(x-1,y+3,z+3,79);
setTile(x-2,y+4,z+4,79);
setTile(x-2,y+4,z+3,79);
setTile(x-3,y+5,z+4,79);
setTile(x-3,y+5,z+3,79);
setTile(x-4,y+5,z+4,79);
setTile(x-4,y+5,z+3,79);
setTile(x-4,y+6,z+2,79);
setTile(x-3,y+6,z+2,79);
setTile(x-4,y+7,z+1,79);
setTile(x-3,y+7,z+1,79);
setTile(x-4,y+8,z,79);
setTile(x-3,y+8,z,79);
setTile(x-4,y+9,z-1,79);
setTile(x-3,y+9,z-1,79);
setTile(x-4,y+10,z-2,79);
setTile(x-3,y+10,z-2,79);
setTile(x-4,y+11,z-3,79);
setTile(x-3,y+11,z-3,79);
setTile(x-4,y+11,z-4,79);
setTile(x-3,y+11,z-4,79);
setTile(x-2,y+11,z-3,79);
setTile(x-1,y+11,z-3,79);
setTile(x-2,y+11,z-4,79);
setTile(x-1,y+11,z-4,79);
setTile(x+1,y+11,z-3,79);
setTile(x,y+11,z-3,79);
setTile(x+1,y+11,z-4,79);
setTile(x,y+11,z-4,79);
setTile(x+2,y+11,z-3,79);
setTile(x+3,y+11,z-3,79);
setTile(x+2,y+11,z-4,79);
setTile(x+3,y+11,z-4,79);
setTile(x+4,y+11,z-3,79);
setTile(x+4,y+11,z-4,79);
setTile(x-2,y+11,z-2,79);
setTile(x-1,y+11,z-2,79);
setTile(x-2,y+11,z-1,79);
setTile(x-1,y+11,z-1,79);
setTile(x+1,y+11,z-2,79);
setTile(x,y+11,z-2,79);
setTile(x+1,y+11,z-1,79);
setTile(x,y+11,z-1,79);
setTile(x+2,y+11,z-2,79);
setTile(x+3,y+11,z-2,79);
setTile(x+2,y+11,z-1,79);
setTile(x+3,y+11,z-1,79);
setTile(x+4,y+11,z-2,79);
setTile(x+4,y+11,z-1,79);
setTile(x+5,y+13,z-3,0);
setTile(x+5,y+12,z-3,0);
setTile(x+5,y+11,z-3,8);
setTile(x+6,y,z-3,0);
setTile(x+7,y,z-3,0);
ex4[n] = x;
ey4[n] = y;
ez4[n] = z;
e4[n] = true;
e4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(titan[0]!=null){
for(var n in titan){
if(titan[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(tt1a[n])){
setTiles(x-4, x+4, y+1, y+1, z-4, z+4, 92);
Level.dropItem(x+3, y+2, z, 0, 320, 1, 0);
Level.dropItem(x-3, y+2, z, 0, 320, 1, 0);
Level.dropItem(x, y+2, z, 0, 320, 2, 0);
Level.dropItem(x, y+2, z+3, 0, 320, 1, 0);
Level.dropItem(x, y+2, z-3, 0, 320, 1, 0);
tt1[n] = true;
tt1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(tt2a[n])){
if(Cool.isFinished(tt2b[n])){
setTile(x, y+1, z, 92);
ttxa[n] = x;
ttya[n] = y+2;
ttza[n] = z;
tt2b[n] = 1;
}
else if(tt2b==1){
ESP.antiLack(3);
explode(ttxa[n], ttya[n], ttza[n], 3);
tt2b[n] = 0;
tt2[n] = true;
tt2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
}
if(i==304&&Cool.isFinished(tt3a[n])){
setTiles(x-3, x+3, y, y+7, z-3, z+3, 35, 6);
setTiles(x-2, x+2, y+1, y+6, z-2, z+2, 0);
setTile(x+2, y+1, z+2, 92);
setTile(x+2, y+1, z-2, 92);
setTile(x-2, y+1, z+2, 92);
setTile(x-2, y+1, z-2, 92);
setTile(x, y+6, z, 10);
ttxb[n] = x;
ttyb[n] = y;
ttzb[n] = z;
tt3[n] = true;
tt3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(tt4a[n])){
ESP.sbm("I am Titan");
ESP.heal(titan[n]);
setTile(x+1, y+1, z, 5, 2);
setTile(x+1, y+2, z, 5, 2);
setTile(x+1, y+3, z, 5, 2);
setTile(x-1, y+1, z, 5, 2);
setTile(x-1, y+2, z, 5, 2);
setTile(x-1, y+3, z, 5, 2);
setTiles(x-1, x+1, y+4, y+8, z, z, 5, 2);
setTile(x, y+9, z, 5, 2);
setTile(x+2, y+7, z, 5, 2);
setTile(x+3, y+7, z, 5, 2);
setTile(x+3, y+6, z, 5, 2);
setTile(x+3, y+5, z, 5, 2);
setTile(x+3, y+4, z, 5, 2);
setTile(x-2, y+7, z, 5, 2);
setTile(x-3, y+7, z, 5, 2);
setTile(x-3, y+6, z, 5, 2);
setTile(x-3, y+5, z, 5, 2);
setTile(x-3, y+4, z, 5, 2);
ttx[n] = x;
tty[n] = y;
ttz[n] = z;
tt4[n] = true;
tt4a[n] = 2250;
tt4d[n] = ESP.getUser();
}
}}
if(bind[0]==ESP.getUser()&&bind2==false){
if(i==302&&Cool.isFinished(bb1a[0])){
setTile(x, y+1, z, 30);
setTile(x+1, y+1, z, 30);
setTile(x-1, y+1, z, 30);
setTile(x, y+1, z+1, 30);
setTile(x, y+1, z-1, 30);
bb1[0] = true;
bb1a[0] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(bb2a[0])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var bb2b=3;bb2b<30;bb2b++)
setTile(px+bb2b*sin, y+1, pz+bb2b*cos, 30);
bb2[0] = true;
bb2a[0] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(bb3a[0])){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+1, zz, 30);
setTile(x, y+3, z, 46);
ESP.antiLack(60);
explode(x+0.5, y+3.9, z+0.5, 0.4);
bb3[0] = true;
bb3a[0] = 300;
skillCool(ESP.getUser(), 3);
}
}
for(var n=1;n<bind.length;n++){
if(bind[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(bb1a[n])){
setTile(x, y+1, z, 30);
setTile(x+1, y+1, z, 30);
setTile(x-1, y+1, z, 30);
setTile(x, y+1, z+1, 30);
setTile(x, y+1, z-1, 30);
bb1[n] = true;
bb1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(bb2a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var bb2b=3;bb2b<30;bb2b++)
setTile(px+bb2b*sin, y+1, pz+bb2b*cos, 30);
bb2[n] = true;
bb2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(bb3a[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+1, zz, 30);
setTile(x, y+3, z, 46);
ESP.antiLack(60);
explode(x+0.5, y+3.9, z+0.5, 0.4);
bb3[n] = true;
bb3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}}}
if(meca[0]!=null){
for(var n in meca){
if(meca[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(mm1a[n])){
mmx1[n] = Player.getX();
mmy1[n] = Player.getY()-2;
mmz1[n] = Player.getZ();
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(px+2*sin, y+1, pz+2*cos, 247);
setTile(px+2*sin, y+2, pz+2*cos, 247);
setTile(px+3*sin, y+2, pz+3*cos, 247);
setTile(px+4*sin, y+2, pz+4*cos, 247);
mm1[n] = true;
mm1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(mm2a[n])){
mmx2a[n] = Player.getX();
mmy2a[n] = Player.getY()-2;
mmz2a[n] = Player.getZ();
for(var xx=mmx2a[n]-6;xx<mmx2a[n]+7;xx++)
setTile(xx, mmy2a[n], mmz2a[n], 247);
for(var zz=mmz2a[n]-6;zz<mmz2a[n]+7;zz++)
setTile(mmx2a[n], mmy2a[n], zz, 247);
setTile(mmx2a[n], mmy2a[n], mmz2a[n]+7, 46);
setTile(mmx2a[n]+7, mmy2a[n], mmz2a[n], 46);
setTile(mmx2a[n]-7, mmy2a[n], mmz2a[n], 46);
setTile(mmx2a[n], mmy2a[n], mmz2a[n]-7, 46);
mm2[n] = true;
mm2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(mm3a[n])){
if(Cool.isFalse(mm3b[n])){
mmx[n] = x;
mmy[n] = y; 
mmz[n] = z;
setTile(x+1, y+9, z, 247);
setTile(x-1, y+9, z, 247);
setTile(x, y+9, z+1, 247);
setTile(x, y+9, z-1, 247);
mm3b[n] = true;
}
else if(mm3b[n]==true){
mmx2[n] = x;
mmy2[n] = y;
mmz2[n] = z;
setTile(x, y+1, z, 247)
setTile(x+1, y+1, z, 247);
setTile(x-1, y+1, z, 247);
setTile(x, y+1, z+1, 247);
setTile(x, y+1, z-1, 247);
setTile(x, y+2, z, 46);
mm3[n] = true;
mm3a[n] = 300;
skillCool(ESP.getUser(), 3);
mm3b[n] = false;
}
}
if(i==305&&Cool.isFinished(mm4a[n])){
ESP.sbm("Round Machine");
ESP.heal(meca[n]);
mmx4[n] = Player.getX();
mmy4[n] = Player.getY()-2;
mmz4[n] = Player.getZ();
for(var xx=mmx4[n]-1;xx<mmx4[n]+2;xx++)
setTile(xx, mmy4[n], mmz4[n], 247);
for(var zz=mmz4[n]-1;zz<mmz4[n]+2;zz++)
setTile(mmx4[n], mmy4[n], zz, 247);
mm4[n] = true;
mm4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(tnt[0]!=null){
for(var n in tnt){
if(tnt[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(tn1a[n])){
ESP.antiLack(45);
setTile(x, y+1, z, 46);
explode(x, y+2, z, 0.5);
tn1x[n] = x;
tn1y[n] = y;
tn1z[n] = z;
tn1[n] = true;
tn1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(tn2a[n])){
ESP.antiLack(90);
tnx[n] = x;
tny[n] = y;
tnz[n] = z;
for(var yy=y+1;yy<y+4;yy++)
setTile(x,yy,z,46);
tn2[n] = true;
tn2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(tn3a[n])){
tnx3[n] = x;
tny3[n] = y;
tnz3[n] = z;
Level.spawnMob(x+5.5, y+0.9, z+5.5, 65);
Level.spawnMob(x+5.5, y+0.9, z+0.5, 65);
Level.spawnMob(x+5.5, y+0.9, z-4.5, 65);
Level.spawnMob(x+0.5, y+0.9, z+5.5, 65);
Level.spawnMob(x+0.5, y+0.9, z-4.5, 65);
Level.spawnMob(x-4.5, y+0.9, z+5.5, 65);
Level.spawnMob(x-4.5, y+0.9, z+0.5, 65);
Level.spawnMob(x-4.5, y+0.9, z-4.5, 65);
tn3[n] = true;
tn3a[n] = 300;
skillCool(ESP.getUser(), 3);
ESP.antiLack(90);
}
if(i==305&&Cool.isFinished(tn4a[n])){
ESP.sbm("Underground Burst");
ESP.heal(tnt[n]);
for(var xx=x-6;xx<x+7;xx++)
setTile(xx, y-2, z, 46);
for(var zz=z-6;zz<z+7;zz++)
setTile(x, y-2, zz, 46);
for(var xx=x-2;xx<x+3;xx++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx,y-2,zz,0);
setTile(x, y, z, 46);
tnx2[n] = x;
tny2[n] = y;
tnz2[n] = z;
tn4[n] = true;
tn4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(trap[0]!=null){
for(var n in trap){
if(trap[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(tr1a[n])){
if(Cool.isFinished(tr1b[n])){
setTile(x, y+1, z, 38);
trx1[n] = x;
try1[n] = y;
trz1[n] = z;
tr1b[n] = true;
}
else if(tr1b[n]==true){
ESP.antiLack(3);
explode(trx1[n], try1[n]+1, trz1[n], 2.5);
tr1[n] = true;
tr1a[n] = 150;
skillCool(ESP.getUser(), 1);
tr1b[n] = false;
}
}
if(i==303&&Cool.isFinished(tr2a[n])){
if(Cool.isFinished(tr2b[n])){
setTile(x, y+1, z, 38);
trx2[n] = x;
try2[n] = y;
trz2[n] = z;
tr2b[n] = true;
}
else if(tr2b[n]==true){
for(var xx=trx2[n]-1;xx<trx2[n]+2;xx++){
for(var zz=trz2[n]-1;zz<trz2[n]+2;zz++){
setTile(xx, try2[n], zz, 0);
setTile(xx, try2[n]-1, zz, 51);
}}
tr2b[n] = false;
tr2[n] = true;
tr2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
}
if(i==304&&Cool.isFinished(tr3a[n])){
if(Cool.isFinished(tr3b[n])){
setTile(x, y+1, z, 38);
trx3[n] = x;
try3[n] = y;
trz3[n] = z;
tr3b[n] = true;
}
else if(tr3b[n]==true){
setTile(trx3[n], try3[n]+1, trz3[n], 10);
setTile(trx3[n]+2, try3[n]+1, trz3[n], 51);
setTile(trx3[n]-2, try3[n]+1, trz3[n], 51);
setTile(trx3[n], try3[n]+1, trz3[n]+2, 51);
setTile(trx3[n], try3[n]+1, trz3[n]-2, 51);
tr3b[n] = false;
tr3[n] = true;
tr3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}
if(i==305&&Cool.isFinished(tr4a[n])){
if(Cool.isFinished(tr4b[n])){
ESP.heal(trap[n]);
setTile(x, y+1, z, 38);
trx4[n] = x;
try4[n] = y;
trz4[n] = z;
tr4b[n] = true;
}
else if(tr4b[n]==true){
ESP.sbm("Trap of Hell");
for(var xx=trx4[n]-4;xx<trx4[n]+5;xx++)
for(var yy=try4[n];yy<try4[n]+5;yy++)
for(var zz=trz4[n]-4;zz<trz4[n]+5;zz++)
setTile(xx,yy,zz,7);
for(var xx=trx4[n]-3;xx<trx4[n]+4;xx++)
for(var yy=try4[n]+1;yy<try4[n]+4;yy++)
for(var zz=trz4[n]-3;zz<trz4[n]+4;zz++)
setTile(xx,yy,zz,0);
setTile(trx4[n], try4[n], trz4[n], 11);
setTile(trx4[n]+2, try4[n]+2, trz4[n], 46);
setTile(trx4[n]-2, try4[n]+2, trz4[n], 46);
setTile(trx4[n], try4[n]+2, trz4[n]+2, 46);
setTile(trx4[n], try4[n]+2, trz4[n]-2, 46);
tr4b[n] = false;
tr4[n] = true;
tr4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}
}}}
if(heal[0]==ESP.getUser()&&heal2==false){
if(i==302&&Cool.isFinished(h1a[0])){
Entity.setHealth(ESP.getUser(), Entity.getHealth(Player.getEntity())+6);
h1[0] = true;
h1a[0] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==304&&Cool.isFinished(h3a[0])){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx,y+1,zz,30);
h3[0] = true;
h3a[0] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(h4a[0])){
ESP.sbm("Immortality");
arroundMobHealthDown(heal[0], 20, 7);
if(Entity.getHealth(heal[0])<50)
Entity.setHealth(heal[0], 50);
hx[0] = Player.getX();
hy[0] = Player.getY()+2;
hz[0] = Player.getZ();
if(getTile(hx[0], hy[0], hz[0])==0)
setTile(hx[0], hy[0], hz[0], 89);
h4b[0] = Entity.getHealth(heal[0]);
h4[0] = true;
h4a[0] = 1800;
skillCool(ESP.getUser(), 4);
}
}
if(heal[1]!=null){
for(var n=1;n<heal.length;n++){
if(heal[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(h1a[n])){
Entity.setHealth(ESP.getUser(), Entity.getHealth(Player.getEntity())+6);
h1[n] = true;
h1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==304&&Cool.isFinished(h3a[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx,y+1,zz,30);
h3[n] = true;
h3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(h4a[n])){
ESP.sbm("Immortality");
arroundMobHealthDown(heal[n], 20, 7);
if(Entity.getHealth(heal[n])<50)
Entity.setHealth(heal[n], 50);
hx[n] = Player.getX();
hy[n] = Player.getY()+2;
hz[n] = Player.getZ();
if(getTile(hx[n], hy[n], hz[n])==0)
setTile(hx[n], hy[n], hz[n], 89);
h4b[n] = Entity.getHealth(heal[n]);
h4[n] = true;
h4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(nether[0]!=null){
for(var n in nether){
if(nether[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(n1a[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y, zz, 87);
setTile(x+2, y, z, 87);
setTile(x-2, y, z, 87);
setTile(x, y, z+2, 87);
setTile(x, y, z-2, 87);
setTile(x+1, y+1, z, 51);
setTile(x-1, y+1, z, 51);
setTile(x, y+1, z+1, 51);
setTile(x, y+1, z-1, 51);
n1[n] = true;
n1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(n2a[n])){
setTile(x, y+1, z, 10);
n2x[n] = x;
n2y[n] = y;
n2z[n] = z;
n2[n] = true;
n2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(n3a[n])){
for(var xx=x-2;xx<x+3;xx++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx,y+2,zz,87);
for(var xx=x-1;xx<x+2;xx++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx,y,zz,87);
setTile(xx,y+2,zz,0);}}
setTile(x+2, y+2, z+2, 0);
setTile(x+2, y+2, z-2, 0);
setTile(x-2, y+2, z+2, 0);
setTile(x-2, y+2, z-2, 0);
Level.spawnMob(x, y+3, z, 36);
n3[n] = true;
n3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(n4a[n])){
ESP.sbm("Nether Summon");
ESP.heal(nether[n]);
arroundMobHealthDown(nether[n], 20, 7);
nx[n] = Player.getX();
ny[n] = Player.getY()-2;
nz[n] = Player.getZ();
autoRecovery(nx[n], ny[n], nz[n], 12, 87);
autoRecovery(nx[n], ny[n]+7, nz[n], 12, 87);
setTile(nx[n]-3, ny[n]+6, nz[n], 89);
setTile(nx[n]-4, ny[n]+6, nz[n], 89);
setTile(nx[n]-5, ny[n]+6, nz[n], 89);
setTile(nx[n]-3, ny[n]+5, nz[n], 89);
setTile(nx[n]-3, ny[n]+5, nz[n]+1, 89);
setTiles(nx[n]-12, nx[n]-4, ny[n], ny[n], nz[n]-12, nz[n]-5, 11);
setTile(nx[n]-12, ny[n], nz[n]-4, 11);
setTile(nx[n]-11, ny[n], nz[n]-4, 11);
setTile(nx[n]-10, ny[n], nz[n]-4, 11);
setTile(nx[n]-9, ny[n], nz[n]-4, 11);
setTile(nx[n]-12, ny[n], nz[n]-3, 11);
setTile(nx[n]-11, ny[n], nz[n]-3, 11);
setTiles(nx[n], nx[n]+12, ny[n]+1, ny[n]+1, nz[n]+1, nz[n]+12, 87);
setTile(nx[n], ny[n]+1, nz[n]+1, 0);
setTile(nx[n], ny[n]+1, nz[n]+1, 0);
setTile(nx[n], ny[n]+1, nz[n]+1, 0);
setTiles(nx[n]+5, nx[n]+12, ny[n]+2, ny[n]+2, nz[n]+4, nz[n]+12, 87);
setTile(nx[n], ny[n]+4, nz[n], 89);
setTile(nx[n]+5, ny[n]+4, nz[n]+9, 89);
setTile(nx[n]+9, ny[n]+4, nz[n]-7, 89);
setTile(nx[n]-7, ny[n]+4, nz[n]+8, 89);
setTile(nx[n]-11, ny[n]+4, nz[n]-4, 89);
setTile(nx[n]+2, ny[n], nz[n]+2, 13);
setTile(nx[n]+3, ny[n], nz[n]+1, 13);
setTile(nx[n]+2, ny[n], nz[n]+1, 13);
setTile(nx[n]+2, ny[n]+2, nz[n]+5, 51);
setTile(nx[n]-6, ny[n]+1, nz[n]+9, 51);
setTile(nx[n]+7, ny[n]+1, nz[n], 51);
setTile(nx[n]-9, ny[n]+1, nz[n]-1, 51);
setTile(nx[n]+11, ny[n]+1, nz[n]-8, 51);
setTile(nx[n]-6, ny[n]+1, nz[n]+3, 51);
Level.spawnMob(nx[n]+9, ny[n]+3, nz[n]+9, 36);
Level.spawnMob(nx[n]+9, ny[n]+3, nz[n]-9, 36);
Level.spawnMob(nx[n]-9, ny[n]+3, nz[n]+9, 36);
Level.spawnMob(nx[n]-9, ny[n]+3, nz[n]-9, 36);
Level.spawnMob(nx[n]+9, ny[n]+3, nz[n], 36);
Level.spawnMob(nx[n]-9, ny[n]+3, nz[n], 36);
Level.spawnMob(nx[n], ny[n]+3, nz[n]+9, 36);
Level.spawnMob(nx[n], ny[n]+3, nz[n]-9, 36);
n4[n] = true;
n4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(cloud[0]!=null){
for(var n in cloud){
if(cloud[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(cc1a[n])){
explode(Math.floor(x)+0.5, y+3, Math.floor(z)+0.5, 1.5);
setTiles(x-1, x+1, y+1, y+3, z-1, z+1, 35);
ccx1[n] = x;
ccy1[n] = y;
ccz1[n] = z;
cc1[n] = true;
cc1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(cc2a[n])){
if(Cool.isFalse(cc2b[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y+5;yy<y+7;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 35);
cc2b[n] = true;
ccx2[n] = x;
ccy2[n] = y;
ccz2[n] = z;
}
else if(cc2b[n]==true){
for(var yy=ccy2[n]+1;yy<ccy2[n]+5;yy++)
setTile(ccx2[n], yy, ccz2[n], 89);
cc2b[n] = false;
cc2[n] = true;
cc2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
}
if(i==304){
if(Cool.isFinished(cc3a[n])&&Cool.isFalse(cc3b[n])){
cc3[n] = true;
cc3a[n] = 300;
skillCool(ESP.getUser(), 3);
cc3b[n] = true;
}
else if(cc3b[n]==true){
mmxc[n] = Entity.getX(cloud[n]);
mmyc[n] = Entity.getY(cloud[n])-2;
mmzc[n] = Entity.getZ(cloud[n]);
cc3b[n] = false;
cc3c[n] = true;
for(var xx=mmxc[n]-2;xx<mmxc[n]+3;xx++)
for(var yy=mmyc[n]-1;yy<mmyc[n]+1;yy++)
for(var zz=mmzc[n]-2;zz<mmzc[n]+3;zz++)
if(getTile(xx, yy, zz)==35){
setTile(xx, yy, zz, 0);
}
}
}
if(i==305&&Cool.isFinished(cc4a[n])){
ESP.sbm("Large Mist");
ccx[n] = Player.getX();
ccy[n] = Player.getY()-2;
ccz[n] = Player.getZ();
setTiles(ccx[n]-12, ccz[n]+12, ccy[n]+1, ccy[n]+3, ccz[n]-12, ccz[n]+12, 35);
for(var xx=ccx[n]-1;xx<ccx[n]+2;xx++)
for(var yy=ccy[n]+1;yy<ccy[n]+4;yy++)
for(var zz=ccz[n]-1;zz<ccz[n]+2;zz++)
setTile(xx, yy, zz, 9);
cc4[n] = true;
cc4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(assassin[0]!=null){
for(var n in assassin){
if(assassin[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(as1a[n])){
pe = Player.getEntity();
Entity.setVelX(pe, 1.5*x-1.5*Entity.getX(pe));
Entity.setVelY(pe, 0.7);
Entity.setVelZ(pe, 1.5*z-1.5*Entity.getZ(pe));
as1[n] = true;
as1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(as2a[n])){
teleport(ESP.getUser(), x+2*(x-Player.getX()), y+3, z+2*(z-Player.getZ()));
ESP.antiLack(3);
explode(x, y, z, 3);
as2[n] = true;
as2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(as3a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
explode(px-5*sin, y, pz-5*cos, 3);
as3[n] = true;
as3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}}}
if(arrow[0]!=null){
for(var n in arrow){
if(arrow[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(ar1a[n])){
var arr = Level.spawnMob(x+0.5, y+5, z+0.5, 80,"");
Entity.setFireTicks(arr, 30);
ar1x[n] = x;
ar1y[n] = y;
ar1z[n] = z;
ar1[n] = true;
ar1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(ar2a[n])){
Level.spawnMob(x, y+5, z, 80, "");
arx2[n] = x;
ary2[n] = y;
arz2[n] = z;
ar2[n] = true;
ar2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(ar3a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
arr = Level.spawnMob(px+2*sin, y+3, pz+2*cos, 34);
Entity.setVelX(arr, 2*sin);
Entity.setVelZ(arr, 2*cos);
ar3[n] = true;
ar3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(ar4a[n])){
ESP.heal(arrow[n]);
ESP.sbm("Arrow Rain Burst");
arx[n] = Player.getX();
ary[n] = Player.getY()-2;
arz[n] = Player.getZ();
for(var xx=arx[n]-10;xx<arx[n]+11;xx++){
for(var zz=arz[n]-10;zz<arz[n]+11;zz++){
setTile(xx, ary[n]+1, zz, 30);
Level.spawnMob(xx+0.5, ary[n]+52, zz+0.5, 80, "");
Level.spawnMob(xx+0.5, ary[n]+64, zz+0.5, 80, "");
}}
for(var xx=arx[n]-1;xx<arx[n]+2;xx++){
for(var zz=arz[n]-1;zz<arz[n]+2;zz++){
setTile(xx, ary[n]+1, zz, 0);
setTile(xx, ary[n]+4, zz, 20);
}}
var arr = Level.spawnMob(arx[n]+6.5, ary[n]+25, arz[n]+6.5, 80, "");
Entity.setFireTicks(arr, 60);
arr = Level.spawnMob(arx[n]+6.5, ary[n]+25, arz[n], 80, "");
Entity.setFireTicks(arr, 60);
arr = Level.spawnMob(arx[n]+6.5, ary[n]+25, arz[n]-5.5, 80, "");
Entity.setFireTicks(arr, 60);
arr = Level.spawnMob(arx[n], ary[n]+25, arz[n]+6.5, 80, "");
Entity.setFireTicks(arr, 60);
arr = Level.spawnMob(arx[n], ary[n]+25, arz[n]-5.5, 80, "");
Entity.setFireTicks(arr, 60);
arr = Level.spawnMob(arx[n]-5.5, ary[n]+25, arz[n]+6.5, 80, "");
Entity.setFireTicks(arr, 60);
arr = Level.spawnMob(arx[n]-5.5, ary[n]+25, arz[n], 80, "");
Entity.setFireTicks(arr, 60);
arr = Level.spawnMob(arx[n]-5.5, ary[n]+25, arz[n]-5.5, 80, "");
Entity.setFireTicks(arr, 60);
setTile(arx[n]+6, ary[n]+1, arz[n]+6, 46);
setTile(arx[n]+6, ary[n]+1, arz[n], 46);
setTile(arx[n]+6, ary[n]+1, arz[n]-6, 46);
setTile(arx[n], ary[n]+1, arz[n]+6, 46);
setTile(arx[n], ary[n]+1, arz[n]-6, 46);
setTile(arx[n]-6, ary[n]+1, arz[n]+6, 46);
setTile(arx[n]-6, ary[n]+1, arz[n], 46);
setTile(arx[n]-6, ary[n]+1, arz[n]-6, 46);
ar4[n] = true;
ar4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(mage[0]!=null){
for(var n in mage){
if(mage[n]==ESP.getUser()&&ma1a==0){
if(i==302&&Cool.isFinished(ma1a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var m1b=3;m1b<20;m1b++)
setTile(px+m1b*sin, y+1, pz+m1b*cos, 51);
ma1[n] = true;
ma1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(ma2a[n])){
max2[n] = Player.getX();
may2[n] = Player.getY()-2;
maz2[n] = Player.getZ();
setTile(max2[n]+2, may2[n]+1, maz2[n]+2, 8);
setTile(max2[n]+2, may2[n]+1, maz2[n]-2, 8);
setTile(max2[n]-2, may2[n]+1, maz2[n]+2, 8);
setTile(max2[n]-2, may2[n]+1, maz2[n]-2, 8);
ma2[n] = true;
ma2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(ma3a[n])){
max3 = Math.abs(x-Player.getX());
maz3 = Math.abs(z-Player.getZ());
if(max3>maz3){
for(var yy=y+1;yy<y+4;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(x, yy, zz, 17);
}
else if(max3<maz3){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+4;yy++)
setTile(xx, yy, z, 17);
}
ma3[n] = true;
ma3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(ma4a[n])){
ESP.heal(mage[n]);
ESP.sbm("Surround Explosion");
max[n] = Player.getX();
may[n] = Player.getY()-2;
maz[n] = Player.getZ();
explode(max[n]+5, may[n], maz[n]+5, 3);
ma4[n] = true;
ma4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(defense[0]!=null){
for(var n in defense){
if(defense[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(de1a[n])){
dexa = Math.abs(x-Player.getX());
deza = Math.abs(z-Player.getZ());
if(dexa>deza){
for(var yy=y+1;yy<y+3;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(x, yy, zz, 3);
}
else if(dexa<deza){
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y+1;yy<y+3;yy++)
setTile(xx, yy, z, 3);
}
de1[n] = true;
de1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(de2a[n])){
dexa = Math.abs(x-Player.getX());
deza = Math.abs(z-Player.getZ());
if(dexa>deza){
for(var yy=y+1;yy<y+4;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(x, yy, zz, 30);
}
else if(dexa<deza){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+4;yy++)
setTile(xx, yy, z, 30);
}
de2[n] = true;
de2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304){
if(Cool.isFinished(de3a[n])&&Cool.isFalse(de3b[n])){
dexa = Math.abs(x-Player.getX());
deza = Math.abs(z-Player.getZ());
if(dexa>deza){
for(var yy=y+1;yy<y+4;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(x, yy, zz, 20);
}
else if(dexa<deza){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+4;yy++)
setTile(xx, yy, z, 20);
}
dex3[n] = x;
dey3[n] = y;
dez3[n] = z;
de3b[n] = true;
de3[n] = true;
de3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
else if(de3b[n]==true){
ESP.antiLack(3);
explode(dex3[n], dey3[n]+1, dez3[n], 3);
de3b[n] = false;
}
}
if(i==305){
if(Cool.isFinished(de4a[n])&&Cool.isFalse(de4b[n])){
ESP.heal(defense[n]);
ESP.sbm("Hyper Protection Attack");
dex[n] = Player.getX();
dey[n] = Player.getY()-2;
dez[n] = Player.getZ();
for(var xx=dex[n]-2;xx<dex[n]+3;xx++)
for(var yy=dey[n];yy<dey[n]+4;yy++)
for(var zz=dez[n]-2;zz<dez[n]+3;zz++)
setTile(xx, yy, zz, 7);
for(var xx=dex[n]-1;xx<dex[n]+2;xx++)
for(var yy=dey[n]+1;yy<dey[n]+4;yy++)
for(var zz=dez[n]-1;zz<dez[n]+2;zz++)
setTile(xx, yy, zz, 0);
de4b[n] = true;
de4[n] = true;
de4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
else if(de4b[n]==true){
for(var xx=dex[n]-2;xx<dex[n]+3;xx++){
for(var yy=dey[n]+1;yy<dey[n]+4;yy++)
for(var zz=dez[n]-2;zz<dez[n]+3;zz++){
setTile(xx, yy, zz, 0);
setTile(xx, dey[n], zz, 2);}}
de4b[n] = false;
}
}
}}}
if(poison[0]!=null){
for(var n in poison){
if(poison[n]==ESP.getUser()){
if(i==303&&Cool.isFinished(p2a[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y+1;yy<y+5;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 20);
setTile(x, y+2, z, 35, 13);
setTile(x, y+3, z, 35, 13);
setTile(x, y+4, z, 0);
p2xa[n] = x;
p2ya[n] = y;
p2za[n] = z;
p2[n] = true;
p2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==305&&Cool.isFinished(p4a[n])){
ESP.heal(poison[n]);
ESP.sbm("Poison Mist Eruption");
p4x[n] = Player.getX();
p4y[n] = Player.getY()-2;
p4z[n] = Player.getZ();
for(var yy=p4y[n]+1;yy<p4y[n]+4;yy++){
for(var xx=p4x[n]-9;xx<p4x[n]+10;xx++)
for(var zz=p4z[n]-9;zz<p4z[n]+10;zz++)
setTile(xx, yy, zz, 35, 13);
for(var xx=p4x[n]-1;xx<p4x[n]+2;xx++)
for(var zz=p4z[n]-1;zz<p4z[n]+2;zz++)
setTile(xx, yy, zz, 0);
}
p4[n] = true;
p4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(melt[0]!=null){
for(var n in melt){
if(melt[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(me1a[n])){
setTile(x, y+1, z, 11);
setTile(x+1, y+1, z+1, 11);
setTile(x+1, y+1, z-1, 11);
setTile(x-1, y+1, z+1, 11);
setTile(x-1, y+1, z-1, 11);
me1x[n] = x;
me1y[n] = y;
me1z[n] = z;
me1[n] = true;
me1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(me2a[n])){
mexa[n] = Math.abs(x-Player.getX());
meza[n] = Math.abs(z-Player.getZ());
if(mexa[n]>meza[n]){
setTile(x, y+1, z+1, 11);
setTile(x, y+1, z-1, 11);
setTile(x, y+3, z+1, 11);
setTile(x, y+3, z-1, 11);
}
else if(mexa[n]<meza[n]){
setTile(x+1, y+1, z, 11);
setTile(x-1, y+1, z, 11);
setTile(x+1, y+3, z, 11);
setTile(x-1, y+3, z, 11);
}
setTile(x, y+2, z, 11);
me2x[n] = x;
me2y[n] = y;
me2z[n] = z;
me2[n] = true;
me2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(me3a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<30;gun++)
setTile(px+gun*sin, y, pz+gun*cos, 11);
me3[n] = true;
me3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(me4a[n])){
ESP.heal(melt[n]);
ESP.sbm("Lava Curtain");
mex[n] = Player.getX();
mey[n] = Player.getY()-2;
mez[n] = Player.getZ();
for(var xx=mex[n]-5;xx<mex[n]+6;xx++)
for(var zz=mez[n]-5;zz<mez[n]+6;zz++)
setTile(xx, mey[n]+4, zz, 49);
for(var xx=mex[n]-4;xx<mex[n]+5;xx++)
for(var zz=mez[n]-4;zz<mez[n]+5;zz++)
setTile(xx, mey[n]+4, zz, 10)
for(var xx=mex[n]-3;xx<mex[n]+4;xx++)
for(var zz=mez[n]-3;zz<mez[n]+4;zz++)
setTile(xx, mey[n]+4, zz, 49);
for(var xx=mex[n]-5;xx<mex[n]+6;xx++)
for(var zz=mez[n]-5;zz<mez[n]+6;zz++)
setTile(xx, mey[n], zz, 11);
for(var xx=mex[n]-3;xx<mex[n]+4;xx++)
for(var zz=mez[n]-3;zz<mez[n]+4;zz++)
setTile(xx, mey[n], zz, 2);
me4[n] = true;
me4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(hfreeze[0]!=null){
for(var n in hfreeze){
if(hfreeze[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(hf1a[n])){
setTile(x, y+1, z, 79);
setTile(x, y+2, z, 79);
hf1x[n] = x;
hf1y[n] = y;
hf1z[n] = z;
hf1[n] = true;
hf1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(hf2a[n])){
for(var xx=x-1;xx<x+2;xx++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx, y+2, z+2, 79);
setTile(xx, y+2, z-2, 79);
setTile(x+2, y+2, zz, 79);
setTile(x-2, y+2, zz, 79);
setTile(xx, y, zz, 79);
}}
hf2x[n] = x;
hf2y[n] = y;
hf2z[n] = z;
hf2[n] = true;
hf2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304){
if(Cool.isFinished(hf3a[n])&&Cool.isFalse(hf3b[n])){
hf3x[n] = Entity.getX(hfreeze[n]);
hf3y[n] = Entity.getY(hfreeze[n])-2;
hf3z[n] = Entity.getZ(hfreeze[n]);
for(var xx=hf3x[n]-1;xx<hf3x[n]+2;xx++)
for(var zz=hf3z[n]-1;zz<hf3z[n]+2;zz++)
if(getTile(xx, hf3y[n], zz)!=7){
setTile(xx, hf3y[n], zz, 79);
}
hf3b[n] = true;
hf3[n] = true;
hf3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
else if(hf3b[n]==true){
hf3b[n] = false;
hf3c[n] = -1;
}
}
if(i==305&&Cool.isFinished(hf4a[n])){
ESP.heal(hfreeze);
ESP.sbm("Blizzard");
hfx[n] = Player.getX();
hfy[n] = Player.getY()-2;
hfz[n] = Player.getZ();
for(var yy=hfy[n]+9;yy<hfy[n]+11;yy++){
setTile(hfx[n]+5, yy, hfz[n]+5, 79);
setTile(hfx[n]+7, yy, hfz[n], 79);
setTile(hfx[n]+5, yy, hfz[n]-5, 79);
setTile(hfx[n], yy, hfz[n]+7, 79);
setTile(hfx[n], yy, hfz[n]-7, 79);
setTile(hfx[n]-5, yy, hfz[n]+5, 79);
setTile(hfx[n]-7, yy, hfz[n], 79);
setTile(hfx[n]-5, yy, hfz[n]-5, 79);
}
hf4[n] = true;
hf4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(builder[0]!=null){
for(var n in builder){
if(builder[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(bu1a[n])){
bu1x = Math.abs(Player.getX()-x);
bu1z = Math.abs(Player.getZ()-z);
if(bu1x>bu1z){
for(var zz=z-2;zz<z+3;zz++)
setTile(x, y+1, zz, 85);
}
else if(bu1x<bu1z){
for(var xx=x-2;xx<x+3;xx++)
setTile(xx, y+1, z, 85);
}
bu1[n] = true;
bu1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303){
if(Cool.isFinished(bu2a[n])&&Cool.isFalse(bu2b[n])){
for(var yy=y+1;yy<y+4;yy++){
setTile(x+1, yy, z+2, 5);
setTile(x, yy, z+2, 5);
setTile(x-1, yy, z+2, 5);
setTile(x+1, yy, z-2, 5);
setTile(x, yy, z-2, 5);
setTile(x-1, yy, z-2, 5);
setTile(x+2, yy, z+1, 5);
setTile(x+2, yy, z, 5);
setTile(x+2, yy, z-1, 5);
setTile(x-2, yy, z+1, 5);
setTile(x-2, yy, z, 5);
setTile(x-2, yy, z-1, 5);
}
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+4, zz, 5);
setTile(x+2, y+2, z, 102);
setTile(x-2, y+2, z, 102);
setTile(x, y+2, z+2, 102);
setTile(x, y+2, z-2, 64, 8);
setTile(x, y+1, z-2, 64, 3);
setTile(x, y+1, z, 50);
bu2x[n] = x;
bu2y[n] = y;
bu2z[n] = z;
bu2b[n] = true;
bu2[n] = true;
bu2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
else if(bu2b[n]==true){
for(var xx=bu2x[n]-1;xx<bu2x[n]+2;xx++)
for(var zz=bu2z[n]-1;zz<bu2z[n]+2;zz++)
setTile(xx, bu2y[n]+1, zz, 51);
bu2b[n] = false;
}
}
if(i==304){
if(Cool.isFinished(bu3a[n])&&Cool.isFalse(bu3b[n])){
for(var yy=y+1;yy<y+4;yy++){
setTile(x+1, yy, z+2, 4);
setTile(x, yy, z+2, 4);
setTile(x-1, yy, z+2, 4);
setTile(x+1, yy, z-2, 4);
setTile(x, yy, z-2, 4);
setTile(x-1, yy, z-2, 4);
setTile(x+2, yy, z+1, 4);
setTile(x+2, yy, z, 4);
setTile(x+2, yy, z-1, 4);
setTile(x-2, yy, z+1, 4);
setTile(x-2, yy, z, 4);
setTile(x-2, yy, z-1, 4);
}
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+4, zz, 4);
setTile(x+2, y+2, z, 102);
setTile(x-2, y+2, z, 102);
setTile(x, y+2, z+2, 102);
setTile(x, y+2, z-2, 64, 8);
setTile(x, y+1, z-2, 64, 3);
setTile(x, y+1, z, 50);
bu3x[n] = x;
bu3y[n] = y;
bu3z[n] = z;
bu3b[n] = true;
bu3[n] = true;
bu3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
else if(bu3b[n]==true){
ESP.antiLack(3);
explode(bu3x[n], bu3y[n]+1, bu3z[n], 3.5);
bu3b[n] = false;
}
}
if(i==305){
if(Cool.isFinished(bu4a[n])&&Cool.isFalse(bu4b[n])){
ESP.heal(builder[n]);
ESP.sbm("Building");
arroundMobHealthDown(builder[n], 20, 7);
for(var xx=x-3;xx<x+4;xx++){
for(var yy=y+1;yy<y+14;yy++){
for(var zz=z-3;zz<z+4;zz++){
setTile(xx, yy, z+4, 5);
setTile(xx, yy, z-4, 5);
setTile(x+4, yy, zz, 5);
setTile(x-4, yy, zz, 5);
setTile(x+4, yy, z+4, 17);
setTile(x+4, yy, z-4, 17);
setTile(x-4, yy, z+4, 17);
setTile(x-4, yy, z-4, 17);
setTile(xx, y+1, zz, 5);
setTile(xx, y+5, zz, 5);
setTile(xx, y+9, zz, 5);
setTile(xx, y+13, zz, 5);
setTile(xx, y+5, z+4, 17, 4);
setTile(xx, y+5, z-4, 17, 4);
setTile(x+4, y+5, zz, 17, 8);
setTile(x-4, y+5, zz, 17, 8);
setTile(xx, y+9, z+4, 17, 4);
setTile(xx, y+9, z-4, 17, 4);
setTile(x+4, y+9, zz, 17, 8);
setTile(x-4, y+9, zz, 17, 8);
setTile(xx, y+13, z+4, 17, 4);
setTile(xx, y+13, z-4, 17, 4);
setTile(x+4, y+13, zz, 17, 8);
setTile(x-4, y+13, zz, 17, 8);
}}}
for(var xx=x-4;xx<x+5;xx++){
for(var zz=z-4;zz<z+5;zz++){
setTile(xx, y+14, z+4, 85);
setTile(xx, y+14, z-4, 85);
setTile(x+4, y+14, zz, 85);
setTile(x-4, y+14, zz, 85);
}}
setTile(x+4, y+13, z+4, 17, 4);
setTile(x+4, y+13, z-4, 17, 4);
setTile(x-4, y+13, z+4, 17, 4);
setTile(x-4, y+13, z-4, 17, 4);
setTile(x+4, y+15, z+4, 50);
setTile(x+4, y+15, z-4, 50);
setTile(x-4, y+15, z+4, 50);
setTile(x-4, y+15, z-4, 50);
setTile(x-4, y+2, z-3, 64, 2);
setTile(x-4, y+3, z-3, 64, 9);
setTile(x-4, y+2, z-2, 64, 2);
setTile(x-4, y+3, z-2, 64, 8);
setTile(x-5, y+1, z-4, 53, 2);
setTile(x-5, y+1, z-3, 53, 0);
setTile(x-5, y+1, z-2, 53, 0);
setTile(x-5, y+1, z-1, 53, 3);
setTile(x-5, y+3, z-4, 50, 2);
setTile(x-5, y+3, z-1, 50, 2);
setTile(x-4, y+3, z+1, 102);
setTile(x-4, y+3, z+2, 102);
setTile(x+4, y+3, z-1, 102);
setTile(x+4, y+3, z-2, 102);
setTile(x+4, y+3, z+1, 102);
setTile(x+4, y+3, z+2, 102);
setTile(x-1, y+3, z-4, 102);
setTile(x-2, y+3, z-4, 102);
setTile(x+1, y+3, z-4, 102);
setTile(x+2, y+3, z-4, 102);
setTile(x-1, y+3, z+4, 102);
setTile(x-2, y+3, z+4, 102);
setTile(x+1, y+3, z+4, 102);
setTile(x+2, y+3, z+4, 102);
setTile(x-4, y+7, z-1, 102);
setTile(x-4, y+7, z-2, 102);
setTile(x-4, y+7, z+1, 102);
setTile(x-4, y+7, z+2, 102);
setTile(x+4, y+7, z-1, 102);
setTile(x+4, y+7, z-2, 102);
setTile(x+4, y+7, z+1, 102);
setTile(x+4, y+7, z+2, 102);
setTile(x-1, y+7, z-4, 102);
setTile(x-2, y+7, z-4, 102);
setTile(x+1, y+7, z-4, 102);
setTile(x+2, y+7, z-4, 102);
setTile(x-1, y+7, z+4, 102);
setTile(x-2, y+7, z+4, 102);
setTile(x+1, y+7, z+4, 102);
setTile(x+2, y+7, z+4, 102);
setTile(x-4, y+11, z-1, 102);
setTile(x-4, y+11, z-2, 102);
setTile(x-4, y+11, z+1, 102);
setTile(x-4, y+11, z+2, 102);
setTile(x+4, y+11, z-1, 102);
setTile(x+4, y+11, z-2, 102);
setTile(x+4, y+11, z+1, 102);
setTile(x+4, y+11, z+2, 102);
setTile(x-1, y+11, z-4, 102);
setTile(x-2, y+11, z-4, 102);
setTile(x+1, y+11, z-4, 102);
setTile(x+2, y+11, z-4, 102);
setTile(x-1, y+11, z+4, 102);
setTile(x-2, y+11, z+4, 102);
setTile(x+1, y+11, z+4, 102);
setTile(x+2, y+11, z+4, 102);
setTile(x+2, y+2, z+2, 50);
setTile(x+2, y+2, z-2, 50);
setTile(x-2, y+2, z+2, 50);
setTile(x-2, y+2, z-2, 50);
setTile(x+2, y+6, z+2, 50);
setTile(x+2, y+6, z-2, 50);
setTile(x-2, y+6, z+2, 50);
setTile(x-2, y+6, z-2, 50);
setTile(x+2, y+10, z+2, 50);
setTile(x+2, y+10, z-2, 50);
setTile(x-2, y+10, z+2, 50);
setTile(x-2, y+10, z-2, 50);
for(var yy=y+2;yy<y+14;yy++)
setTile(x+3, yy, z+3, 65, 4);
bux[n] = x;
buy[n] = y;
buz[n] = z;
bu4b[n] = true;
bu4[n] = true;
bu4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
else if(bu4a[n]<1725&&bu4b[n]==true){
ESP.antiLack(3);
for(var xx=bux[n]-5;xx<bux[n]+5;xx++)
for(var yy=buy[n]+1;yy<buy+15;yy++)
for(var zz=buz[n]-4;zz<buz[n]+5;zz++)
setTile(xx, yy, zz, 0);
bu4b[n] = false;
}
}
}}}
if(soldier[0]!=null){
for(var n in soldier){
if(soldier[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(so1a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(px+3*sin, y+2, pz+3*cos, 173);
so1[n] = true;
so1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303){
if(Cool.isFinished(so2a[n])&&Cool.isFalse(so2b[n])){
setTile(x, y, z, 46);
so2x[n] = x;
so2y[n] = y;
so2z[n] = z;
so2b = true;
}
else if(so2b[n]==true){
ESP.antiLack(3);
explode(so2x[n]+0.5, so2y[n]+0.5, so2z[n]+0.5, 0.5);
so2b[n] = false;
so2[n] = true;
so2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
}
if(i==304&&Cool.isFinished(so3a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=2;gun<12;gun++)
explode(px+2*gun*sin, y+2, pz+2*gun*cos, 1.7);
so3[n] = true;
so3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305){
if(Cool.isFinished(so4a[n])&&Cool.isFinished(so4b[n])){
ESP.heal(soldier[n]);
ESP.sbm("Bunker");
sox[n] = Player.getX();
soy[n] = Player.getY()-2;
soz[n] = Player.getZ();
for(var xx=sox[n]-3;xx<sox[n]+4;xx++){
for(var yy=soy[n];yy<soy[n]+4;yy++){
for(var zz=soz[n]-3;zz<soz[n]+4;zz++){
setTile(xx, yy, soz[n]+3, 49);
setTile(xx, yy, soz[n]-3, 49);
setTile(sox[n]+3, yy, zz, 49);
setTile(sox[n]-3, yy, zz, 49);
setTile(xx, soy[n], zz, 49);
setTile(xx, soy[n]+4, zz, 49);
}}}
setTile(sox[n], soy[n], soz[n], 89);
for(var gg=-1;gg<2;gg++){
setTile(sox[n]+gg, soy[n]+2, soz[n]+3, 20);
setTile(sox[n]+gg, soy[n]+2, soz[n]-3, 20);
setTile(sox[n]+3, soy[n]+2, soz[n]+gg, 20);
setTile(sox[n]-3, soy[n]+2, soz[n]+gg, 20);
}
so4b[n] = 1;
so4[n] = true;
so4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
else if(so4b[n]==1){
ESP.antiLack(3);
explode(sox[n]+7, soy[n]+1, soz[n], 3);
explode(sox[n]-7, soy[n]+1, soz[n], 3);
explode(sox[n], soy[n]+1, soz[n]+7, 3);
explode(sox[n], soy[n]+1, soz[n]-7, 3);
for(var gg=-1;gg<2;gg++){
setTile(sox[n]+gg, soy[n]+2, soz[n]+3, 20);
setTile(sox[n]+gg, soy[n]+2, soz[n]-3, 20);
setTile(sox[n]+3, soy[n]+2, soz[n]+gg, 20);
setTile(sox[n]-3, soy[n]+2, soz[n]+gg, 20);
}
so4b[n] = 2;
so4c[n] = true;
}
else if(so4b[n]==2){
for(var xx=sox[n]-3;xx<sox[n]+4;xx++){
for(var zz=soz[n]-3;zz<soz[n]+4;zz++){
for(var yy=soy[n]+1;yy<soy[n]+5;yy++)
setTile(xx, yy, zz, 0);
setTile(xx, soy[n], zz, 2);
}}
so4b[n] = 0;
}
}
}}}
if(assault[0]!=null){
for(var n in assault){
if(assault[n]==ESP.getUser()){
if(i==303&&Cool.isFinished(asu2a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
snow = Level.spawnMob(px+7*sin, y+9, pz+7*cos, 81, "");
Entity.setFireTicks(snow, 30);
asu2x[n] = px+7*sin;
asu2y[n] = y;
asu2z[n] = pz+7*cos;
asu2[n] = true;
asu2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(asu3a[n])){
setTile(x+1, y+1, z, 30);
setTile(x-1, y+1, z, 30);
setTile(x, y+1, z+1, 30);
setTile(x, y+1, z-1, 30);
asu3[n] = true;
asu3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}}}
if(burst[0]!=null){
for(var n in burst){
if(burst[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(bus1a[n])){
if(Cool.isFalse(bus1b[n])){
setTile(x, y+1, z, 37);
bus1x[n] = x;
bus1y[n] = y;
bus1z[n] = z;
if(b==2)
bus1c[n] = true;
else
bus1c[n] = false;
bus1b[n] = true;
bus1 = true;
bus1a = 150;
skillCool(ESP.getUser(), 1);
}
else if(bus1b[n]==true){
ESP.antiLack(3);
explode(bus1x[n], bus1y[n]+2, bus1z[n], 2.5);
if(bus1c[n]==true){
for(var xx=bus1x[n]-4;xx<bus1x[n]+5;xx++){
for(var zz=bus1z[n]-4;zz<bus1z[n]+5;zz++){
setTile(xx, bus1y[n], zz, 2);
setTile(xx, bus1y[n]-1, zz, 3);
}}
bus1c[n] = false;
}
bus1b[n] = false;
}
}
if(i==304&&Cool.isFinished(bus3a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<25;gun++)
explode(px+gun*sin, y+2, pz+gun*cos, 1.5);
bus3[n] = true;
bus3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(bus4a[n])){
ESP.sbm("C3+");
busx[n] = Player.getX();
busy[n] = Player.getY()-2;
busz[n] = Player.getZ();
ESP.antiLack(3);
Player.setHealth(50);
explode(busx[n], busy[n]+12, busz[n], 7);
explode(busx[n]+8, busy[n]+3, busz[n]+2, 5);
explode(busx[n]+8, busy[n]+3, busz[n]-2, 5);
explode(busx[n]-8, busy[n]+3, busz[n]+2, 5);
explode(busx[n]-8, busy[n]+3, busz[n]-2, 5);
explode(busx[n]+2, busy[n]+3, busz[n]+8, 5);
explode(busx[n]-2, busy[n]+3, busz[n]+8, 5);
explode(busx[n]+2, busy[n]+3, busz[n]-8, 5);
explode(busx[n]-2, busy[n]+3, busz[n]-8, 5);
ESP.heal(burst[n]);
bus4[n] = true;
bus4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(warrior[0]!=null){
for(var n in warrior){
if(warrior[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(wa1a[n])){
waxa[n] = x-Player.getX();
waza[n] = z-Player.getZ();
ESP.antiLack(3);
explode(x, y, z, 2);
wa1x[n] = x;
wa1y[n] = y;
wa1z[n] = z;
wa1[n] = true;
wa1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(wa2a[n])){
px = Math.floor(Player.getX());
py = Math.floor(Player.getY())+1;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(px, py, pz, 17);
setTile(px-sin, py+1, pz-cos, 17);
setTile(px-sin, py+3, pz-cos, 41);
setTile(px-2*sin, py+2, pz-2*cos, 41);
setTile(px-3*sin, py+1, pz-3*cos, 41);
for(var ss=3;ss<8;ss++)
setTile(px-ss*sin, py+ss, pz-ss*cos, 42);
wa2[n] = true;
wa2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(wa3a[n])){
px = Math.floor(Player.getX());
py = Math.floor(Player.getY());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(px+3*sin, py, pz+3*cos, 17);
setTile(px+4*sin, py, pz+4*cos, 17);
setTile(px+5*sin, py-1, pz+5*cos, 41);
setTile(px+5*sin, py, pz+5*cos, 41);
setTile(px+5*sin, py+1, pz+5*cos, 41);
for(var ss=6;ss<11;ss++)
setTile(px+ss*sin, py, pz+ss*cos, 42);
wa3[n] = true;
wa3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(wa4a[n])){
ESP.heal(warrior[n]);
ESP.sbm("Weapon Charge");
wax[n] = Player.getX();
way[n] = Player.getY()-2;
waz[n] = Player.getZ();
for(var yy=way[n]+3;yy<way[n]+8;yy++){
setTile(wax[n]+7, yy, waz[n]+7, 42);
setTile(wax[n]+7, yy, waz[n], 42);
setTile(wax[n]+7, yy, waz[n]-7, 42);
setTile(wax[n], yy, waz[n]+7, 42);
setTile(wax[n], yy, waz[n]-7, 42);
setTile(wax[n]-7, yy, waz[n]+7, 42);
setTile(wax[n]-7, yy, waz[n], 42);
setTile(wax[n]-7, yy, waz[n]-7, 42);
}
for(var yy=way[n]+9;yy<way[n]+11;yy++){
setTile(wax[n]+7, yy, waz[n]+7, 17);
setTile(wax[n]+7, yy, waz[n], 17);
setTile(wax[n]+7, yy, waz[n]-7, 17);
setTile(wax[n], yy, waz[n]+7, 17);
setTile(wax[n], yy, waz[n]-7, 17);
setTile(wax[n]-7, yy, waz[n]+7, 17);
setTile(wax[n]-7, yy, waz[n], 17);
setTile(wax[n]-7, yy, waz[n]-7, 17);
}
for(var ss=-1;ss<2;ss++){
setTile(wax[n]+7+ss, way[n]+8, waz[n]+7, 41);
setTile(wax[n]+7+ss, way[n]+8, waz[n], 41);
setTile(wax[n]+7+ss, way[n]+8, waz[n]-7, 41);
setTile(wax[n]+ss, way[n]+8, waz[n]+7, 41);
setTile(wax[n]+ss, way[n]+8, waz[n]-7, 41);
setTile(wax[n]-7+ss, way[n]+8, waz[n]+7, 41);
setTile(wax[n]-7+ss, way[n]+8, waz[n], 41);
setTile(wax[n]-7+ss, way[n]+8, waz[n]-7, 41);
}
wa4[n] = true;
wa4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(ore[0]!=null){
for(var n in ore){
if(ore[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(o1a[n])){
setTile(x, y+1, z, 173);
setTile(x+1, y+1, z, 173);
setTile(x-1, y+1, z, 173);
setTile(x, y+1, z+1, 173);
setTile(x, y+1, z-1, 173);
setTile(x, y+2, z, 51);
o1[n] = true;
o1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(o2a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(px+3*sin, y+2, pz+3*cos, 15);
o2[n] = true;
o2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(o3a[n])){
o3x[n] = Player.getX();
o3y[n] = Player.getY()-2;
o3z[n] = Player.getZ();
setTile(o3x[n]+5, o3y[n]+1, o3z[n]+5, 73);
setTile(o3x[n]+5, o3y[n]+1, o3z[n], 73);
setTile(o3x[n]+5, o3y[n]+1, o3z[n]-5, 73);
setTile(o3x[n], o3y[n]+1, o3z[n]+5, 73);
setTile(o3x[n], o3y[n]+1, o3z[n]-5, 73);
setTile(o3x[n]-5, o3y[n]+1, o3z[n]+5, 73);
setTile(o3x[n]-5, o3y[n]+1, o3z[n], 73);
setTile(o3x[n]-5, o3y[n]+1, o3z[n]-5, 73);
o3[n] = true;
o3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305){
if(Cool.isFinished(o4a[n])==0&&Cool.isFalse(o4b[n])){
ESP.heal(ore[n]);
ESP.sbm("Abandoned Mine");
ox[n] = Player.getX();
oy[n] = Player.getY()-2;
oz[n] = Player.getZ();
for(var xx=ox[n]-8;xx<ox[n]+9;xx++){
for(var zz=oz[n]-8;zz<oz[n]+9;zz++){
for(var yy=oy[n];yy<oy[n]+5;yy++)
setTile(xx, yy, zz, 1);
for(var yy=oy[n]+1;yy<oy[n]+3;yy++){
for(var xxx=ox[n]-1;xxx<ox[n]+2;xxx++){
for(var zzz=oz[n]-1;zzz<oz[n]+2;zzz++){
setTile(xxx, yy, zz, 0);
setTile(xx, yy, zzz, 0);
setTile(xxx, oy[n]+3, zzz, 0);
setTile(xxx, oy[n]+4, zzz, 0);
}}
}
}}
setTile(ox[n]-8, oy[n]+1, oz[n]-1, 85);
setTile(ox[n]-8, oy[n]+1, oz[n], 66, 1);
setTile(ox[n]-8, oy[n]+1, oz[n]+1, 85);
setTile(ox[n]-8, oy[n]+2, oz[n]-1, 85);
setTile(ox[n]-8, oy[n]+2, oz[n], 30);
setTile(ox[n]-8, oy[n]+2, oz[n]+1, 85);
setTile(ox[n]-7, oy[n]+1, oz[n], 66, 1);
setTile(ox[n]-6, oy[n], oz[n]-1, 5);
setTile(ox[n]-6, oy[n]+1, oz[n], 66, 1);
setTile(ox[n]-6, oy[n]+2, oz[n]+2, 15);
setTile(ox[n]-5, oy[n], oz[n]-1, 5);
setTile(ox[n]-5, oy[n], oz[n], 5);
setTile(ox[n]-5, oy[n]+1, oz[n], 66, 1);
setTile(ox[n]-5, oy[n]+2, oz[n]-1, 50, 3);
setTile(ox[n]-5, oy[n]+2, oz[n]+2, 15);
setTile(ox[n]-4, oy[n]+1, oz[n], 66, 1);
setTile(ox[n]-4, oy[n]+2, oz[n]-2, 14);
setTile(ox[n]-3, oy[n]+2, oz[n]+1, 30);
setTile(ox[n]-2, oy[n]+1, oz[n]-5, 14);
setTile(ox[n]-2, oy[n]+1, oz[n]-1, 85);
setTile(ox[n]-2, oy[n]+1, oz[n], 66, 1);
setTile(ox[n]-2, oy[n]+1, oz[n]+1, 85);
setTile(ox[n]-2, oy[n]+2, oz[n]-5, 14);
setTile(ox[n]-2, oy[n]+2, oz[n]-1, 85);
setTile(ox[n]-2, oy[n]+2, oz[n]+1, 85);
setTile(ox[n]-1, oy[n], oz[n]-5, 5);
setTile(ox[n]-1, oy[n]+1, oz[n]-7, 85);
setTile(ox[n]-1, oy[n]+1, oz[n]-3, 85);
setTile(ox[n]-1, oy[n]+1, oz[n], 66, 1);
setTile(ox[n]-1, oy[n]+1, oz[n]+2, 85);
setTile(ox[n]-1, oy[n]+1, oz[n]+5, 85);
setTile(ox[n]-1, oy[n]+2, oz[n]-7, 85);
setTile(ox[n]-1, oy[n]+2, oz[n]-3, 85);
setTile(ox[n]-1, oy[n]+2, oz[n]+2, 85);
setTile(ox[n]-1, oy[n]+2, oz[n]+4, 30);
setTile(ox[n]-1, oy[n]+2, oz[n]+5, 85);
setTile(ox[n], oy[n], oz[n]-5, 14);
setTile(ox[n], oy[n], oz[n]-4, 5);
setTile(ox[n], oy[n], oz[n]-3, 5);
setTile(ox[n], oy[n]+1, oz[n]+3, 30);
setTile(ox[n], oy[n]+1, oz[n]+5, 66);
setTile(ox[n], oy[n]+2, oz[n]+6, 56);
setTile(ox[n]+1, oy[n], oz[n]-1, 16);
setTile(ox[n]+1, oy[n]+1, oz[n]-7, 85);
setTile(ox[n]+1, oy[n]+1, oz[n]-3, 85);
setTile(ox[n]+1, oy[n]+1, oz[n]+2, 85);
setTile(ox[n]+1, oy[n]+1, oz[n]+4, 30);
setTile(ox[n]+1, oy[n]+1, oz[n]+5, 85);
setTile(ox[n]+1, oy[n]+2, oz[n]-7, 85);
setTile(ox[n]+1, oy[n]+2, oz[n]-6, 30);
setTile(ox[n]+1, oy[n]+2, oz[n]-3, 85);
setTile(ox[n]+1, oy[n]+2, oz[n]-2, 50, 2);
setTile(ox[n]+1, oy[n]+2, oz[n]+2, 85);
setTile(ox[n]+1, oy[n]+2, oz[n]+5, 85);
setTile(ox[n]+2, oy[n]+1, oz[n]-1, 85);
setTile(ox[n]+2, oy[n]+1, oz[n]+1, 85);
setTile(ox[n]+2, oy[n]+2, oz[n]-4, 21);
setTile(ox[n]+2, oy[n]+2, oz[n]-1, 85);
setTile(ox[n]+2, oy[n]+2, oz[n]+1, 85);
setTile(ox[n]+3, oy[n], oz[n]+1, 5);
setTile(ox[n]+4, oy[n], oz[n]+1, 5);
setTile(ox[n]+4, oy[n]+1, oz[n]+1, 30);
setTile(ox[n]+4, oy[n]+2, oz[n]+1, 50, 4);
setTile(ox[n]+5, oy[n]+1, oz[n]-1, 85);
setTile(ox[n]+5, oy[n]+1, oz[n], 66, 1);
setTile(ox[n]+5, oy[n]+1, oz[n]+1, 85);
setTile(ox[n]+5, oy[n]+2, oz[n]-1, 85);
setTile(ox[n]+5, oy[n]+2, oz[n]+1, 85);
setTile(ox[n]+6, oy[n]+1, oz[n], 66, 1);
setTile(ox[n]+6, oy[n]+2, oz[n], 30);
setTile(ox[n]+6, oy[n]+2, oz[n]+2, 16);
setTile(ox[n]+7, oy[n]+1, oz[n]-2, 15);
setTile(ox[n]+7, oy[n]+2, oz[n]+2, 16);
o4b[n] = true;
o4[n] = true;
o4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
else if(o4b==true){
ESP.antiLack(3);
explode(ox[n]+6, oy[n]+2, oz[n]+6, 4);
explode(ox[n]+6, oy[n]+2, oz[n], 4);
explode(ox[n]+6, oy[n]+2, oz[n]-6, 4);
explode(ox[n], oy[n]+2, oz[n]+6, 4);
explode(ox[n], oy[n]+2, oz[n]-6, 4);
explode(ox[n]-6, oy[n]+2, oz[n]+6, 4);
explode(ox[n]-6, oy[n]+2, oz[n], 4);
explode(ox[n]-6, oy[n]+2, oz[n]-6, 4);
o4d[n] = true;
o4c[n] = 45;
o4b[n] = false;
}
}
}}}
if(rich[0]!=null){
for(var n in rich){
if(rich[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(r1a[n])){
setTile(x, y+1, z, 41);
r1x[n] = x;
r1y[n] = y;
r1z[n] = z;
r1[n] = true;
r1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(r2a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<25;gun++)
setTile(px+gun*sin, y+2, pz+gun*cos, 41);
for(var gun=2;gun<13;gun++)
setTile(px+2*gun*sin, y+2, pz+2*gun*cos, 42);
r2[n] = true;
r2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(r3a[n])){
r3x = Math.abs(x-Player.getX());
r3z = Math.abs(z-Player.getZ());
if(r3x>r3z){
for(var yy=y+1;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(x, yy, zz, 22);
}
else if(r3x<r3z){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+5;yy++)
setTile(xx, yy, z, 22);
}
r3[n] = true;
r3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(r4a[n])){
ESP.heal(rich[n]);
ESP.sbm("Diamond House");
arroundMobHealthDown(rich[n], 20, 7);
for(var xx=x-5;xx<x+6;xx++){
for(var yy=y+1;yy<y+7;yy++){
for(var zz=z-5;zz<z+6;zz++){
setTile(xx, yy, z+4, 57);
setTile(xx, yy, z-4, 57);
setTile(x+4, yy, zz, 57);
setTile(x-4, yy, zz, 57);
setTile(xx, y+1, zz, 57);
setTile(xx, y+5, zz, 57);
}}}
setTile(x-4, y+3, z-2, 102);
setTile(x-4, y+3, z+2, 102);
setTile(x+4, y+3, z-1, 102);
setTile(x+4, y+3, z-2, 102);
setTile(x+4, y+3, z+1, 102);
setTile(x+4, y+3, z+2, 102);
setTile(x-1, y+3, z-4, 102);
setTile(x-2, y+3, z-4, 102);
setTile(x+1, y+3, z-4, 102);
setTile(x+2, y+3, z-4, 102);
setTile(x-1, y+3, z+4, 102);
setTile(x-2, y+3, z+4, 102);
setTile(x+1, y+3, z+4, 102);
setTile(x+2, y+3, z+4, 102);
setTile(x-4, y+2, z, 0);
setTile(x-4, y+3, z, 0);
setTile(x+2, y+2, z+2, 50);
setTile(x+2, y+2, z-2, 50);
setTile(x-2, y+2, z+2, 50);
setTile(x-2, y+2, z-2, 50);
rx[n] = x;
ry[n] = y;
rz[n] = z;
r4[n] = true;
r4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(tp[0]!=null){
for(var n in tp){
if(tp[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(tp1a[n])){
teleport(ESP.getUser(), x, y+3, z);
tp1[n] = true;
tp1a[n] = 75;
skillCool(ESP.getUser(), 1);
}
if(i==304&&Cool.isFinished(tp3a[n])){
teleport(ESP.getUser(), x, y+10, z);
tp3[n] = true;
tp3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305){
if(Cool.isFinished(tp4a[n])){
ESP.heal(tp[n]);
ESP.sbm("Hyper Sending");
for(var xx=x-2;xx<x+3;xx++){
for(var zz=z-2;zz<z+3;zz++){
for(var yy=y-1;yy<y+1;yy++)
setTile(xx, yy, zz, 0);
setTile(xx, y-3, zz, 87);
setTile(xx, y-2, zz, 51);
}}
tpx[n] = x;
tpy[n] = y;
tpz[n] = z;
tp4b[n] = true;
tp4[n] = true;
tp4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
else if(tp4a[n]>1350){
teleport(ESP.getUser(), x, y+3, z);
}
}
}}}
if(space[0]!=null){
for(var n in space){
if(space[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(sp1a[n])){
sp1x = x-Player.getX();
sp1z = z-Player.getZ();
teleport(space[n], x+sp1x, y+3, z+sp1z);
sp1[n] = true;
sp1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(sp2a[n])){
spxa[n] = Math.abs(x-Player.getX());
spza[n] = Math.abs(z-Player.getZ());
if(spxa[n]>spza[n]){
for(var zz=z-2;zz<z+3;zz++)
setTile(x, y+2, zz, 95);
}
else if(spxa[n]<spza[n]){
for(var xx=x-2;xx<x+3;xx++)
setTile(xx, y+2, z, 95);
}
sp2x[n] = x;
sp2y[n] = y;
sp2z[n] = z;
sp2[n] = true;
sp2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==305&&Cool.isFinished(sp4a[n])){
if(Cool.isFalse(sp4b[n])){
ESP.heal(space[n]);
setTile(x, y, z, 49);
spx[n] = x;
spy[n] = y;
spz[n] = z;
sp4b[n] = true;
}
else if(sp4b[n]==true){
ESP.sbm("Black Hole");
for(var xx=spx[n]-6;xx<spx[n]+7;xx++)
for(var zz=spz[n]-6;zz<spz[n]+7;zz++)
setTile(xx, spy[n], zz, 0);
setTile(spx[n]+6, spy[n], spz[n]+6, 8);
setTile(spx[n]+6, spy[n], spz[n]-6, 8);
setTile(spx[n]-6, spy[n], spz[n]+6, 8);
setTile(spx[n]-6, spy[n], spz[n]-6, 8);
setTile(spx[n]+6, spy[n], spz[n]+2, 8);
setTile(spx[n]+6, spy[n], spz[n]-2, 8);
setTile(spx[n]-6, spy[n], spz[n]+2, 8);
setTile(spx[n]-6, spy[n], spz[n]-2, 8);
setTile(spx[n]+2, spy[n], spz[n]+6, 8);
setTile(spx[n]-2, spy[n], spz[n]+6, 8);
setTile(spx[n]+2, spy[n], spz[n]-6, 8);
setTile(spx[n]-2, spy[n], spz[n]-6, 8);
sp4b[n] = false;
sp4[n] = true;
sp4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}
}}}
if(sattack[0]!=null){
for(var n in sattack){
if(sattack[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(sa1a[n])){
sa1x[n] = Player.getX();
sa1y[n] = Player.getY()-2;
sa1z[n] = Player.getZ();
for(var xx=sa1x[n]-3;xx<sa1x[n]+4;xx++)
for(var zz=sa1z[n]-3;zz<sa1z[n]+4;zz++)
setTile(xx, sa1y[n]+1, zz, 51);
for(var xx=sa1x[n]-1;xx<sa1x[n]+2;xx++)
for(var zz=sa1z[n]-1;zz<sa1z[n]+2;zz++)
setTile(xx, sa1y[n]+1, zz, 0);
sa1[n] = true;
sa1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(sa2a[n])){
sa2x[n] = Math.floor(Player.getX())+0.5;
sa2y[n] = Player.getY()-2;
sa2z[n] = Math.floor(Player.getZ())+0.5;
for(var xx=sa2x[n]-5;xx<sa2x[n]+6;xx++)
for(var yy=sa2y[n]-2;yy<sa2y[n]+1;yy++)
for(var zz=sa2z[n]-5;zz<sa2z[n]+6;zz++)
setTile(xx, yy, zz, 0);
for(var xx=sa2x[n]-1;xx<sa2x[n]+2;xx++)
for(var zz=sa2z[n]-1;zz<sa2z[n]+2;zz++)
setTile(xx, sa2y[n], zz, 49);
Level.spawnMob(sa2x[n]+3, sa2y[n]+7, sa2z[n]+3, 65);
Level.spawnMob(sa2x[n]+3, sa2y[n]+7, sa2z[n]-3, 65);
Level.spawnMob(sa2x[n]-3, sa2y[n]+7, sa2z[n]+3, 65);
Level.spawnMob(sa2x[n]-3, sa2y[n]+7, sa2z[n]-3, 65);
sa2[n] = true;
sa2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(sa3a[n])){
sa3x[n] = Player.getX();
sa3y[n] = Player.getY()-2;
sa3z[n] = Player.getZ();
ESP.antiLack(3);
explode(sa3x[n]+6, sa3y[n]+1, sa3z[n]+2, 2);
explode(sa3x[n]+6, sa3y[n]+1, sa3z[n]-2, 2);
explode(sa3x[n]-6, sa3y[n]+1, sa3z[n]+2, 2);
explode(sa3x[n]-6, sa3y[n]+1, sa3z[n]-2, 2);
explode(sa3x[n]+2, sa3y[n]+1, sa3z[n]+6, 2);
explode(sa3x[n]-2, sa3y[n]+1, sa3z[n]+6, 2);
explode(sa3x[n]+2, sa3y[n]+1, sa3z[n]-6, 2);
explode(sa3x[n]-2, sa3y[n]+1, sa3z[n]-6, 2);
sa3[n] = true;
sa3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305){
if(Cool.isFinished(sa4a[n])&&Cool.isFalse(sa4b[n])){
ESP.sbm("Melting Field");
sax[n] = Player.getX();
say[n] = Player.getY()-2;
saz[n] = Player.getZ();
for(var xx=sax[n]-10;xx<sax[n]+11;xx++)
for(var zz=saz[n]-10;zz<saz[n]+11;zz++)
setTile(xx, say[n], zz, 11);
for(var xx=sax[n]-1;xx<sax[n]+2;xx++)
for(var zz=saz[n]-1;zz<saz[n]+2;zz++)
setTile(xx, say[n], zz, 2);
sa4b[n] = true;
sa4[n] = true;
sa4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
else if(sa4b[n]==true){
for(var xx=sax[n]-10;xx<sax[n]+11;xx++)
for(var zz=saz[n]-10;zz<saz[n]+11;zz++)
setTile(xx, say[n], zz, 2);
sa4b[n] = false;
}
}
}}}
if(force[0]!=null){
for(var n in force){
if(force[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(fo1a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(px+3*sin, y+2, pz+3*cos, 89);
setTile(px+4*sin, y+2, pz+4*cos, 89);
fo1[n] = true;
fo1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(fo2a[n])){
foxa[n] = x-Player.getX();
foza[n] = z-Player.getZ();
ESP.antiLack(3);
explode(x, y, z, 2.5);
fo2x[n] = x;
fo2y[n] = y;
fo2z[n] = z;
fo2[n] = true;
fo2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(fo3a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var yy=y-2;yy<y+1;yy++)
for(var gun=3;gun<23;gun++){
setTile(px+gun*sin, yy, pz+gun*cos, 0);
setTile(px+gun*sin+1, yy, pz+gun*cos, 0);
setTile(px+gun*sin, yy, pz+gun*cos+1, 0);
}
fo3[n] = true;
fo3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(fo4a[n])){
ESP.heal(force[n]);
ESP.sbm("Force Releasing");
fox[n] = Player.getX();
foy[n] = Player.getY()-2;
foz[n] = Player.getZ();
ESP.antiLack(3);
for(var fo4b=2;fo4b<9;fo4b++){
explode(fox[n]+2*fo4b, foy[n]+1, foz[n]+2*fo4b, 2);
explode(fox[n]+2*fo4b, foy[n]+1, foz[n], 2);
explode(fox[n]+2*fo4b, foy[n]+1, foz[n]-2*fo4b, 2);
explode(fox[n], foy[n]+1, foz[n]+2*fo4b, 2);
explode(fox[n], foy[n]+1, foz[n]-2*fo4b, 2);
explode(fox[n]-2*fo4b, foy[n]+1, foz[n]+2*fo4b, 2);
explode(fox[n]-2*fo4b, foy[n]+1, foz[n], 2);
explode(fox[n]-2*fo4b, foy[n]+1, foz[n]-2*fo4b, 2);
}
fo4[n] = true;
fo4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(rein[0]!=null){
for(var n in rein){
if(rein[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(re1a[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y+3;yy<y+7;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 79);
for(var yy=y+4;yy<y+6;yy++){
setTile(x+2, yy, z, 79);
setTile(x-2, yy, z, 79);
setTile(x, yy, z+2, 79);
setTile(x, yy, z-2, 79);
}
re1x[n] = x;
re1y[n] = y;
re1z[n] = z;
re1[n] = true;
re1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(re2a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
re2x[n] = Math.abs(sin);
re2z[n] = Math.abs(cos);
setTile(px+3*sin, y+1, pz+3*cos, 173);
if(re2x[n]>re2z[n]){
setTile(px+3*sin, y+3, pz+3*cos+1, 173);
setTile(px+3*sin, y+3, pz+3*cos-1, 173);
}
else if(re2x[n]<re2z[n]){
setTile(px+3*sin+1, y+3, pz+3*cos, 173);
setTile(px+3*sin-1, y+3, pz+3*cos, 173);
}
re2[n] = true;
re2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(re3a[n])){
re3x[n] = Player.getX();
re3y[n] = Player.getY()-2;
re3z[n] = Player.getZ();
setTile(re3x[n]+2, re3y[n]+2, re3z[n], 35, 14);
setTile(re3x[n]-2, re3y[n]+2, re3z[n], 35, 14);
setTile(re3x[n], re3y[n]+2, re3z[n]+2, 35, 14);
setTile(re3x[n], re3y[n]+2, re3z[n]-2, 35, 14);
re3[n] = true;
re3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(re4a[n])){
ESP.sbm("Mysteltainn");
ESP.heal(rein);
rex[n] = Player.getX();
rey[n] = Player.getY()-2;
rez[n] = Player.getZ();
for(var yy=rey[n]+6;yy<rey[n]+9;yy++){
setTile(rex[n]+7, yy, rez[n]+7, 173);
setTile(rex[n]+7, yy, rez[n], 173);
setTile(rex[n]+7, yy, rez[n]-7, 173);
setTile(rex[n], yy, rez[n]+7, 173);
setTile(rex[n], yy, rez[n]-7, 173);
setTile(rex[n]-7, yy, rez[n]+7, 173);
setTile(rex[n]-7, yy, rez[n], 173);
setTile(rex[n]-7, yy, rez[n]-7, 173);
}
re4[n] = true;
re4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(magnet[0]!=null){
for(var n in magnet){
if(magnet[n]==ESP.getUser()){
if(i==303&&Cool.isFinished(mag2a[n])){
px = Player.getX();
pz = Player.getZ();
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
mag2x = Math.abs(sin);
mag2z = Math.abs(cos);
setTile(px-3*sin, y+2, pz-2*cos, 15);
if(mag2x>mag2z){
setTile(px-3*sin, y+1, pz-2*cos+1, 15);
setTile(px-3*sin, y+1, pz-2*cos-1, 15);
}
else if(mag2x<mag2z){
setTile(px-3*sin+1, y+1, pz-2*cos, 15);
setTile(px-3*sin-1, y+1, pz-2*cos, 15);
}
mag2[n] = true;
mag2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(mag3a[n])){
mag3x[n] = Player.getX();
mag3y[n] = Player.getY()-2;
mag3z[n] = Player.getZ();
setTile(mag3x[n]+4, mag3y[n], mag3z[n]+4, 15);
setTile(mag3x[n]+4, mag3y[n], mag3z[n], 15);
setTile(mag3x[n]+4, mag3y[n], mag3z[n]-4, 15);
setTile(mag3x[n], mag3y[n], mag3z[n]+4, 15);
setTile(mag3x[n], mag3y[n], mag3z[n]-4, 15);
setTile(mag3x[n]-4, mag3y[n], mag3z[n]+4, 15);
setTile(mag3x[n]-4, mag3y[n], mag3z[n], 15);
setTile(mag3x[n]-4, mag3y[n], mag3z[n]-4, 15);
mag3[n] = true;
mag3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(mag4a[n])){
ESP.heal(magnet[n]);
ESP.sbm("Magnetic Field");
magx[n] = Player.getX();
magy[n] = Player.getY()-2;
magz[n] = Player.getZ();
var tt = Level.spawnMob(magx[n]+2, magy[n]+3, magz[n], 65);
var cc = Level.spawnMob(magx[n]+2, magy[n]+3, magz[n], 84);
Entity.rideAnimal(tt, cc);
Entity.setVelX(cc, 1);
Entity.setVelY(cc, 0.5);
tt = Level.spawnMob(magx[n]-2, magy[n]+3, magz[n], 65);
cc = Level.spawnMob(magx[n]-2, magy[n]+3, magz[n], 84);
Entity.rideAnimal(tt, cc);
Entity.setVelX(cc, -1);
Entity.setVelY(cc, 0.5);
tt = Level.spawnMob(magx[n], magy[n]+3, magz[n]+2, 65);
cc = Level.spawnMob(magx[n], magy[n]+3, magz[n]+2, 84);
Entity.rideAnimal(tt, cc);
Entity.setVelZ(cc, 1);
Entity.setVelY(cc, 0.5);
tt = Level.spawnMob(magx[n], magy[n]+3, magz[n]-2, 65);
cc = Level.spawnMob(magx[n], magy[n]+3, magz[n]-2, 84);
Entity.rideAnimal(tt, cc);
Entity.setVelZ(cc, -1);
Entity.setVelY(cc, 0.5);
tt = Level.spawnMob(magx[n]+2, magy[n]+3, magz[n]+2, 65);
cc = Level.spawnMob(magx[n]+2, magy[n]+3, magz[n]+2, 84);
Entity.rideAnimal(tt, cc);
Entity.setVelX(cc, 1);
Entity.setVelZ(cc, 1);
Entity.setVelY(cc, 0.5);
tt = Level.spawnMob(magx[n]+2, magy[n]+3, magz[n]-2, 65);
cc = Level.spawnMob(magx[n]+2, magy[n]+3, magz[n]-2, 84);
Entity.rideAnimal(tt, cc);
Entity.setVelX(cc, 1);
Entity.setVelZ(cc, -1);
Entity.setVelY(cc, 0.5);
tt = Level.spawnMob(magx[n]-2, magy[n]+3, magz[n]+2, 65);
cc = Level.spawnMob(magx[n]-2, magy[n]+3, magz[n]+2, 84);
Entity.rideAnimal(tt, cc);
Entity.setVelX(cc, -1);
Entity.setVelZ(cc, 1);
Entity.setVelY(cc, 0.5);
tt = Level.spawnMob(magx[n]-2, magy[n]+3, magz[n]-2, 65);
cc = Level.spawnMob(magx[n]-2, magy[n]+3, magz[n]-2, 84);
Entity.rideAnimal(tt, cc);
Entity.setVelX(cc, -1);
Entity.setVelZ(cc, -1);
Entity.setVelY(cc, 0.5);
for(var mag4b=-2;mag4b<3;mag4b++){
setTile(magx[n]+mag4b, magy[n]+1, magz[n]+3, 15);
setTile(magx[n]+mag4b, magy[n]+1, magz[n]-3, 15);
setTile(magx[n]+3, magy[n]+1, magz[n]+mag4b, 15);
setTile(magx[n]-3, magy[n]+1, magz[n]+mag4b, 15);
}
ESP.antiLack(90);
mag4[n] = true;
mag4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(steve[0]!=null){
for(var n in steve){
if(steve[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(st1a[n])){
if(b!=7){
Level.destroyBlock(x, y, z, true);
}
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y-1;yy<y+2;yy++)
for(var zz=z-1;zz<z+2;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
st1[n] = true;
st1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303){
if(Cool.isFinished(st2a[n])&&Cool.isFalse(st2b[n])){
stxa = Math.abs(x-Player.getX());
stza = Math.abs(z-Player.getZ());
if(stxa>stza){
setTile(x, y+3, z-4, 57);
setTile(x, y+2, z-3, 57);
setTile(x, y+2, z-2, 57);
setTile(x, y+1, z-1, 57);
setTile(x, y+1, z+1, 57);
setTile(x, y+2, z+2, 57);
setTile(x, y+2, z+3, 57);
setTile(x, y+3, z+4, 57);
}
else if(stxa<stza){
setTile(x-4, y+3, z, 57);
setTile(x-3, y+2, z, 57);
setTile(x-2, y+2, z, 57);
setTile(x-1, y+1, z, 57);
setTile(x+1, y+1, z, 57);
setTile(x+2, y+2, z, 57);
setTile(x+3, y+2, z, 57);
setTile(x+4, y+3, z, 57);
}
setTile(x, y+1, z, 57);
for(var yy=y+2;yy<y+8;yy++)
setTile(x, yy, z, 17);
st2x[n] = x;
st2y[n] = y;
st2z[n] = z;
st3c[n] = true;
st2b[n]= true;
st2[n] = true;
st2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
else if(st2b==true){
ESP.antiLack(3);
explode(st2x[n]+2, st2y[n]+1, st2z[n]+2, 2.5);
explode(st2x[n]+2, st2y[n]+1, st2z[n]-2, 2.5);
explode(st2x[n]-2, st2y[n]+1, st2z[n]+2, 2.5);
explode(st2x[n]-2, st2y[n]+1, st2z[n]-2, 2.5);
st2c[n] = false;
st2b[n] = false;
}
}
if(i==304&&Cool.isFinished(st4a[n])){
stxa = Math.abs(x-Player.getX());
stza = Math.abs(z-Player.getZ());
if(stxa>stza){
for(var yy=y+1;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(x, yy, zz, 5);
}
else if(stxa<stza){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+5;yy++)
setTile(xx, yy, z, 5);
}
st3[n] = true;
st3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(st4a[n])){
ESP.heal(steve[n]);
ESP.sbm("Good bye World");
setTile(x, y+1, z, 46);
stx[n] = x;
sty[n] = y;
stz[n] = z;
st4[n] = true;
st4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(hero[0]!=null){
for(var n in hero){
if(hero[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(he1a[n])){
if(Cool.isFalse(he1b[n])){
setTile(x, y, z, 248);
he1x[n] = x;
he1y[n] = y;
he1z[n] = z;
he1b[n] = true;
he1c[n] = 11;
he1d[n] = b;
}
else if(he1b[n]==true){
teleport(hero[n], he1x[n], he1y[n]+3, he1z[n]);
he1b[n] = false;
he1[n] = true;
he1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
}
if(i==303){
if(Cool.isFinished(he2a[n])&&Cool.isFalse(he2b[n])){
hexa = Math.abs(x-Player.getX());
heza = Math.abs(z-Player.getZ());
if(hexa>heza){
for(var yy=y+1;yy<y+6;yy++)
setTile(x, yy, z+1, 89);
setTile(x, y+1, z, 89);
setTile(x, y+1, z-1, 89);
setTile(x, y+3, z, 89);
setTile(x, y+3, z-1, 89);
setTile(x, y+5, z, 89);
setTile(x, y+5, z-1, 89);
}
else if(hexa<heza){
for(var yy=y+1;yy<y+6;yy++)
setTile(x+1, yy, z, 89);
setTile(x, y+1, z, 89);
setTile(x-1, y+1, z, 89);
setTile(x, y+3, z, 89);
setTile(x-1, y+3, z, 89);
setTile(x, y+5, z, 89);
setTile(x-1, y+5, z, 89);
}
he2x[n] = x;
he2y[n] = y;
he2z[n] = z;
he2b[n] = true;
he2[n] = true;
he2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
else if(he2b[n]==true){
ESP.antiLack(3);
explode(he2x[n]+0.5, he2y[n]+2, he2z[n]+0.5, 3);
he2b[n] = false;
}
}
if(i==304&&Cool.isFinished(he3a[n])){
setTile(x+1, y+1, z, 46);
setTile(x-1, y+1, z, 46);
setTile(x, y+1, z+1, 46);
setTile(x, y+1, z-1, 46);
ESP.antiLack(90);
explode(x+0.5, y+2, z+0.5, 2);
he3x[n] = x;
he3y[n] = y;
he3z[n] = z;
he3[n] = true;
he3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(he4a[n])){
ESP.heal(hero[n]);
ESP.sbm("Herobrine's Return");
hex[n] = Player.getX();
hey[n] = Player.getY()-2;
hez[n] = Player.getZ();
Level.setTime(14000);
ESP.antiLack(90);
explode(hex[n]+6, hey[n]+1, hez[n]+6, 3);
explode(hex[n]+6, hey[n]+1, hez[n]-6, 3);
explode(hex[n]-6, hey[n]+1, hez[n]+6, 3);
explode(hex[n]-6, hey[n]+1, hez[n]-6, 3);
Level.spawnMob(hex[n]+6, hey[n]+9, hez[n], 65);
Level.spawnMob(hex[n]-6, hey[n]+9, hez[n], 65);
Level.spawnMob(hex[n], hey[n]+9, hez[n]+6, 65);
Level.spawnMob(hex[n], hey[n]+9, hez[n]-6, 65);
Level.spawnMob(hex[n]+9, hey[n]+3, hez[n], 35, "mob/spider.png");
Level.spawnMob(hex[n]-9, hey[n]+3, hez[n], 35, "mob/spider.png");
Level.spawnMob(hex[n], hey[n]+3, hez[n]+9, 35, "mob/spider.png");
Level.spawnMob(hex[n], hey[n]+3, hez[n]-9, 35, "mob/spider.png");
setTile(hex[n]+8, hey[n]+2, hez[n]+8, 10);
setTile(hex[n]+8, hey[n]+2, hez[n]-8, 10);
setTile(hex[n]-8, hey[n]+2, hez[n]+8, 10);
setTile(hex[n]-8, hey[n]+2, hez[n]-8, 10);
setTile(hex[n]+4, hey[n]+9, hez[n]+4, 89);
setTile(hex[n]+4, hey[n]+9, hez[n]-4, 89);
setTile(hex[n]-4, hey[n]+9, hez[n]+4, 89);
setTile(hex[n]-4, hey[n]+9, hez[n]-4, 89);
he4[n] = true;
he4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(hermit[0]!=null){
for(var n in hermit){
if(hermit[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(her1a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<20;gun++)
setTile(px+gun*sin, y+2, pz+gun*cos, 18);
her1[n] = true;
her1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303){
if(Cool.isFinished(her2a[n])&&Cool.isFalse(her2b[n])){
for(var yy=y+1;yy<y+11;yy++)
setTile(x, yy, z, 17);
setTile(x-5, y+9, z, 18);
setTile(x-4, y+8, z, 18);
setTile(x-4, y+9, z-1, 18);
setTile(x-4, y+9, z, 18);
setTile(x-4, y+9, z+1, 18);
setTile(x-4, y+9, z+2, 18);
setTile(x-4, y+10, z, 18);
setTile(x-4, y+10, z+2, 18);
setTile(x-3, y+7, z+1, 18);
setTile(x-3, y+7, z+2, 18);
setTile(x-3, y+8, z-1, 18);
setTile(x-3, y+8, z, 18);
setTile(x-3, y+8, z+1, 18);
setTile(x-3, y+8, z+2, 18);
setTile(x-3, y+8, z+3, 18);
setTile(x-3, y+9, z-2, 18, 4);
setTile(x-3, y+9, z-1, 18);
setTile(x-3, y+9, z, 18);
setTile(x-3, y+9, z+1, 18);
setTile(x-3, y+9, z+2, 18);
setTile(x-3, y+10, z-1, 18);
setTile(x-3, y+10, z, 18);
setTile(x-3, y+10, z+1, 18);
setTile(x-3, y+10, z+2, 18);
setTile(x-3, y+10, z+3, 18);
setTile(x-3, y+11, z, 18);
setTile(x-3, y+11, z+2, 18);
setTile(x-2, y+6, z-2, 18);
setTile(x-2, y+6, z-1, 18);
setTile(x-2, y+6, z, 18);
setTile(x-2, y+6, z+2, 18);
setTile(x-2, y+7, z-2, 18, 4);
setTile(x-2, y+7, z-1, 18);
setTile(x-2, y+7, z, 18);
setTile(x-2, y+7, z+1, 18);
setTile(x-2, y+7, z+2, 18);
setTile(x-2, y+7, z+3, 18);
setTile(x-2, y+8, z, 17, 4);
setTile(x-2, y+8, z+1, 18);
setTile(x-2, y+8, z+2, 18);
setTile(x-2, y+8, z+3, 18);
setTile(x-2, y+8, z+4, 18);
setTile(x-2, y+9, z-2, 18);
setTile(x-2, y+9, z-1, 18);
setTile(x-2, y+9, z, 18);
setTile(x-2, y+9, z+1, 18);
setTile(x-2, y+9, z+2, 18);
setTile(x-2, y+9, z+3, 18);
setTile(x-2, y+10, z-2, 18);
setTile(x-2, y+10, z-1, 18);
setTile(x-2, y+10, z, 18);
setTile(x-2, y+10, z+1, 18);
setTile(x-2, y+10, z+2, 18);
setTile(x-2, y+10, z+3, 18);
setTile(x-2, y+10, z+4, 18);
setTile(x-2, y+11, z-1, 18);
setTile(x-2, y+11, z, 18);
setTile(x-2, y+11, z+1, 18);
setTile(x-2, y+11, z+2, 18);
setTile(x-2, y+11, z+3, 18);
setTile(x-2, y+12, z, 18);
setTile(x-2, y+12, z+2, 18);
setTile(x-1, y+5, z-1, 18);
setTile(x-1, y+5, z+1, 18);
setTile(x-1, y+5, z+2, 18);
setTile(x-1, y+5, z+3, 18);
setTile(x-1, y+6, z-3, 18);
setTile(x-1, y+6, z-2, 18);
setTile(x-1, y+6, z-1, 18);
setTile(x-1, y+6, z, 18);
setTile(x-1, y+6, z+1, 18);
setTile(x-1, y+6, z+2, 18);
setTile(x-1, y+6, z+3, 18);
setTile(x-1, y+7, z-3, 18);
setTile(x-1, y+7, z-2, 18);
setTile(x-1, y+7, z-1, 18);
setTile(x-1, y+7, z, 17, 4);
setTile(x-1, y+7, z+1, 18);
setTile(x-1, y+7, z+2, 18);
setTile(x-1, y+7, z+3, 18);
setTile(x-1, y+7, z+4, 18);
setTile(x-1, y+8, z-1, 18);
setTile(x-1, y+8, z, 18);
setTile(x-1, y+8, z+1, 18);
setTile(x-1, y+8, z+2, 18);
setTile(x-1, y+8, z+3, 18);
setTile(x-1, y+8, z+4, 18);
setTile(x-1, y+9, z-1, 18);
setTile(x-1, y+9, z, 18);
setTile(x-1, y+9, z+1, 18);
setTile(x-1, y+9, z+2, 17, 8);
setTile(x-1, y+9, z+3, 18);
setTile(x-1, y+9, z+4, 5);
setTile(x-1, y+10, z-3, 18);
setTile(x-1, y+10, z-2, 18);
setTile(x-1, y+10, z-1, 18);
setTile(x-1, y+10, z, 5);
setTile(x-1, y+10, z+1, 5);
setTile(x-1, y+10, z+2, 5);
setTile(x-1, y+10, z+3, 5);
setTile(x-1, y+10, z+4, 5);
setTile(x-1, y+11, z-2, 18);
setTile(x-1, y+11, z-1, 18);
setTile(x-1, y+11, z, 5);
setTile(x-1, y+11, z+1, 5);
setTile(x-1, y+11, z+2, 5);
setTile(x-1, y+11, z+3, 5);
setTile(x-1, y+11, z+4, 5);
setTile(x-1, y+12, z-1, 18);
setTile(x-1, y+12, z, 5);
setTile(x-1, y+12, z+1, 5);
setTile(x-1, y+12, z+2, 5);
setTile(x-1, y+12, z+3, 5);
setTile(x-1, y+12, z+4, 5);
setTile(x, y+4, z+2, 18);
setTile(x, y+5, z-2, 18);
setTile(x, y+5, z-1, 18);
setTile(x, y+5, z+1, 18);
setTile(x, y+5, z+2, 18);
setTile(x, y+5, z+3, 18);
setTile(x, y+5, z+4, 18);
setTile(x, y+6, z-3, 18);
setTile(x, y+6, z-2, 18);
setTile(x, y+6, z-1, 18);
setTile(x, y+6, z+1, 17, 8);
setTile(x, y+6, z+2, 17, 8);
setTile(x, y+6, z+3, 18);
setTile(x, y+6, z+4, 18);
setTile(x, y+7, z-3, 18);
setTile(x, y+7, z-2, 18);
setTile(x, y+7, z-1, 18);
setTile(x, y+7, z+1, 17, 8);
setTile(x, y+7, z+2, 18);
setTile(x, y+7, z+3, 18);
setTile(x, y+7, z+4, 18);
setTile(x, y+8, z-2, 18);
setTile(x, y+8, z-1, 18);
setTile(x, y+8, z+1, 17, 8);
setTile(x, y+8, z+2, 18);
setTile(x, y+8, z+3, 18);
setTile(x, y+8, z+4, 18);
setTile(x, y+9, z-2, 18);
setTile(x, y+9, z-1, 18, 4);
for(var zz=z+1;zz<z+5;zz++){
setTile(x, y+9, zz, 5);
setTile(x+3, y+9, zz, 5);
}
setTile(x, y+10, z-3, 18);
setTile(x, y+10, z-2, 18);
setTile(x, y+10, z-1, 18);
setTile(x, y+10, z+2, 54, 5);
setTile(x, y+10, z+3, 58);
setTile(x, y+10, z+4, 5);
setTile(x, y+11, z-3, 18);
setTile(x, y+11, z-2, 18);
setTile(x, y+11, z-1, 18);
setTile(x, y+11, z, 5);
setTile(x, y+11, z+4, 102);
setTile(x, y+12, z-2, 18);
setTile(x, y+12, z-1, 18);
setTile(x, y+12, z, 5);
setTile(x, y+12, z+4, 5);
setTile(x, y+13, z-1, 18);
setTile(x+1, y+4, z-1, 18);
setTile(x+1, y+4, z, 17, 4);
setTile(x+1, y+4, z+1, 17, 4);
setTile(x+1, y+4, z+2, 17, 8);
setTile(x+1, y+4, z+3, 18);
setTile(x+1, y+5, z-3, 18);
setTile(x+1, y+5, z-2, 18);
setTile(x+1, y+5, z-1, 18);
setTile(x+1, y+5, z, 18);
setTile(x+1, y+5, z+1, 18);
setTile(x+1, y+5, z+2, 18);
setTile(x+1, y+5, z+3, 18);
setTile(x+1, y+5, z+4, 18);
setTile(x+1, y+6, z-3, 18);
setTile(x+1, y+6, z-2, 18);
setTile(x+1, y+6, z-1, 18);
setTile(x+1, y+6, z, 17, 4);
setTile(x+1, y+6, z+1, 18);
setTile(x+1, y+6, z+2, 18);
setTile(x+1, y+6, z+3, 18);
setTile(x+1, y+6, z+4, 18);
setTile(x+1, y+7, z-3, 18);
setTile(x+1, y+7, z-2, 18);
setTile(x+1, y+7, z-1, 18);
setTile(x+1, y+7, z, 18);
setTile(x+1, y+7, z+1, 18);
setTile(x+1, y+7, z+2, 18);
setTile(x+1, y+7, z+3, 18);
setTile(x+1, y+8, z-2, 18);
setTile(x+1, y+8, z-1, 18);
setTile(x+1, y+8, z, 17, 4);
setTile(x+1, y+8, z+1, 18);
setTile(x+1, y+8, z+2, 18);
setTile(x+1, y+8, z+3, 18);
setTile(x+1, y+9, z-2, 18);
setTile(x+1, y+9, z-1, 18);
setTile(x+1, y+9, z, 18);
setTile(x+1, y+9, z+1, 5);
setTile(x+1, y+9, z+2, 5);
setTile(x+1, y+9, z+3, 5);
setTile(x+1, y+9, z+4, 5);
setTile(x+1, y+10, z-3, 18);
setTile(x+1, y+10, z-2, 18);
setTile(x+1, y+10, z-1, 18);
setTile(x+1, y+10, z, 5);
setTile(x+1, y+10, z+4, 5);
setTile(x+1, y+11, z-1, 18);
setTile(x+1, y+11, z, 5);
setTile(x+1, y+11, z+4, 5);
setTile(x+1, y+12, z-1, 18);
setTile(x+1, y+12, z, 5);
setTile(x+1, y+12, z+4, 5);
setTile(x+2, y+4, z-2, 18);
setTile(x+2, y+4, z-1, 18);
setTile(x+2, y+4, z, 17, 4);
setTile(x+2, y+4, z+2, 18);
setTile(x+2, y+5, z-3, 18);
setTile(x+2, y+5, z-2, 18);
setTile(x+2, y+5, z-1, 18);
setTile(x+2, y+5, z, 18);
setTile(x+2, y+5, z+1, 18);
setTile(x+2, y+5, z+2, 18);
setTile(x+2, y+5, z+3, 18);
setTile(x+2, y+5, z+4, 18);
setTile(x+2, y+6, z-3, 18);
setTile(x+2, y+6, z-2, 18);
setTile(x+2, y+6, z-1, 18);
setTile(x+2, y+6, z, 17, 4);
setTile(x+2, y+6, z+1, 17, 4);
setTile(x+2, y+6, z+2, 18);
setTile(x+2, y+6, z+3, 18);
setTile(x+2, y+6, z+4, 18);
setTile(x+2, y+7, z-2, 18);
setTile(x+2, y+7, z-1, 18);
setTile(x+2, y+7, z, 18);
setTile(x+2, y+7, z+1, 18);
setTile(x+2, y+7, z+2, 18);
setTile(x+2, y+8, z-2, 18);
setTile(x+2, y+8, z-1, 18);
setTile(x+2, y+8, z, 18);
setTile(x+2, y+8, z+1, 18);
setTile(x+2, y+8, z+2, 18);
setTile(x+2, y+9, z-2, 18);
setTile(x+2, y+9, z-1, 18);
setTile(x+2, y+9, z, 18);
setTile(x+2, y+9, z+1, 5);
setTile(x+2, y+9, z+2, 5);
setTile(x+2, y+9, z+3, 5);
setTile(x+2, y+9, z+4, 5);
setTile(x+2, y+10, z-2, 18);
setTile(x+2, y+10, z-1, 18);
setTile(x+2, y+10, z, 5);
setTile(x+2, y+11, z-1, 18);
setTile(x+2, y+11, z, 5);
setTile(x+2, y+12, z, 5);
setTile(x+2, y+12, z+4, 5);
setTile(x+3, y+4, z-1, 18);
setTile(x+3, y+5, z-2, 18);
setTile(x+3, y+5, z-1, 18);
setTile(x+3, y+5, z, 18);
setTile(x+3, y+5, z+1, 18);
setTile(x+3, y+5, z+2, 18);
setTile(x+3, y+5, z+3, 18);
setTile(x+3, y+6, z-3, 18);
setTile(x+3, y+6, z-2, 18);
setTile(x+3, y+6, z-1, 18);
setTile(x+3, y+6, z, 18);
setTile(x+3, y+6, z+1, 18);
setTile(x+3, y+6, z+2, 18);
setTile(x+3, y+6, z+3, 18);
setTile(x+3, y+7, z-2, 18);
setTile(x+3, y+7, z-1, 18);
setTile(x+3, y+7, z, 18);
setTile(x+3, y+7, z+1, 17, 4);
setTile(x+3, y+7, z+2, 18);
setTile(x+3, y+8, z-2, 18);
setTile(x+3, y+8, z-1, 18);
setTile(x+3, y+8, z, 18);
setTile(x+3, y+8, z+1, 18);
setTile(x+3, y+8, z+2, 18);
setTile(x+3, y+8, z+3, 18);
setTile(x+3, y+9, z-1, 18);
setTile(x+3, y+9, z, 18);
setTile(x+3, y+10, z-1, 18);
setTile(x+3, y+10, z, 5);
setTile(x+3, y+10, z+1, 5);
setTile(x+3, y+10, z+2, 5);
setTile(x+3, y+10, z+3, 5);
setTile(x+3, y+10, z+4, 5);
setTile(x+3, y+11, z, 5);
setTile(x+3, y+11, z+1, 5);
setTile(x+3, y+11, z+2, 102);
setTile(x+3, y+11, z+3, 5);
setTile(x+3, y+11, z+4, 5);
setTile(x+3, y+12, z, 5);
setTile(x+3, y+12, z+1, 5);
setTile(x+3, y+12, z+2, 5);
setTile(x+3, y+12, z+3, 5);
setTile(x+3, y+12, z+4, 5);
setTile(x+4, y+5, z-1, 18);
setTile(x+4, y+5, z, 18);
setTile(x+4, y+6, z-2, 18);
setTile(x+4, y+6, z-1, 18);
setTile(x+4, y+6, z, 18);
setTile(x+4, y+7, z-1, 18);
setTile(x+4, y+7, z, 18);
setTile(x+4, y+7, z+1, 17, 4);
setTile(x+4, y+7, z+2, 18);
setTile(x+4, y+8, z-1, 18);
setTile(x+4, y+8, z, 18);
setTile(x+4, y+8, z+1, 18);
setTile(x+4, y+8, z+2, 18);
setTile(x+4, y+8, z+3, 18);
setTile(x+4, y+9, z-1, 18);
setTile(x+4, y+9, z, 18);
setTile(x+4, y+9, z+1, 18);
setTile(x+4, y+9, z+2, 18);
setTile(x+4, y+9, z+3, 18);
setTile(x+4, y+10, z, 18);
setTile(x+4, y+10, z+1, 18);
setTile(x+4, y+10, z+2, 18);
setTile(x+5, y+7, z+1, 18);
setTile(x+5, y+8, z-1, 18);
setTile(x+5, y+8, z, 18);
setTile(x+5, y+8, z+1, 18);
setTile(x+5, y+8, z+2, 18);
setTile(x+5, y+8, z+3, 18);
setTile(x+5, y+9, z, 18);
setTile(x+5, y+9, z+1, 18);
setTile(x+5, y+9, z+2, 18);
setTile(x+5, y+10, z+1, 18);
setTile(x+6, y+8, z, 18);
setTile(x+6, y+8, z+1, 18);
setTile(x+6, y+8, z+2, 18);
setTile(x+6, y+9, z+1, 18);
for(var xx=x-1;xx<x+4;xx++)
for(var zz=z;zz<z+5;zz++)
setTile(xx, y+13, zz, 5);
setTile(x+3, y+11, z+5, 50, 3);
setTile(x+1, y+11, z+5, 50, 3);
setTile(x, y+12, z+1, 50, 3);
setTile(x, y+12, z+3, 50, 4);
setTile(x+2, y+12, z+1, 50, 3);
setTile(x+2, y+12, z+3, 50, 4);
setTile(x+1, y+10, z+1, 26, 1);
setTile(x, y+10, z+1, 26, 9);
her2x[n] = x;
her2y[n] = y;
her2z[n] = z;
her2b[n] = true;
her2[n] = true;
her2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
else if(her2b[n]==true){
teleport(ESP.getUser(), her2x[n]+1.5, her2y[n]+11.5, her2z[n]+2.5);
her2b[n] = false;
}
}
if(i==304&&Cool.isFinished(her3a[n])){
her3[n] = true;
her3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(her4a[n])){
ESP.heal(hermit[n]);
ESP.sbm("The Forest");
arroundMobHealthDown(hermit[n], 20, 7);
ESP.antiLack(3);
makeForest(x, y, z);
teleport(ESP.getUser(), x+2, y+13, z-5);
herx[n] = x;
hery[n] = y;
herz[n] = z;
her4[n] = true;
her4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(clay[0]!=null){
for(var n in clay){
if(clay[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(cl1a[n])){
clxa = Math.abs(x-Player.getX());
clza = Math.abs(z-Player.getZ());
if(clxa>clza){
for(var yy=y+1;yy<y+4;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(x, yy, zz, 82);
}
else if(clxa<clza){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+4;yy++)
setTile(xx, yy, z, 82);
}
cl1[n] = true;
cl1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(cl2a[n])){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx, yy, zz, 82);
cl2x[n] = x;
cl2y[n] = y;
cl2z[n] = z;
cl2[n] = true;
cl2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==3044&&Cool.isFinished(cl3a[n])){
for(var yy=y+1;yy<y+4;yy++){
setTile(x+1, yy, z+2, 82);
setTile(x, yy, z+2, 82);
setTile(x-1, yy, z+2, 82);
setTile(x+1, yy, z-2, 82);
setTile(x, yy, z-2, 82);
setTile(x-1, yy, z-2, 82);
setTile(x+2, yy, z+1, 82);
setTile(x+2, yy, z, 82);
setTile(x+2, yy, z-1, 82);
setTile(x-2, yy, z+1, 82);
setTile(x-2, yy, z, 82);
setTile(x-2, yy, z-1, 82);
}
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+4, zz, 82);
setTile(x+2, y+2, z, 102);
setTile(x-2, y+2, z, 102);
setTile(x, y+2, z+2, 102);
setTile(x, y+2, z-2, 0);
setTile(x, y+1, z-2, 0);
Level.spawnMob(x+0.5, y+3, z+0.5, 65);
ESP.antiLack(90);
cl3x[n] = x;
cl3y[n] = y;
cl3z[n] = z;
cl3[n] = true;
cl3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(cl4a[n])){
ESP.heal(clay[n]);
ESP.sbm("Clay Pulling");
clx[n] = Player.getX();
cly[n] = Player.getY()-2;
clz[n] = Player.getZ();
setTile(clx+6[n], cly[n]+1, clz[n]+6, 82);
setTile(clx+6[n], cly[n]+1, clz[n], 82);
setTile(clx+6[n], cly[n]+1, clz[n]-6, 82);
setTile(clx[n], cly[n]+1, clz[n]+6, 82);
setTile(clx[n], cly[n]+1, clz[n]-6, 82);
setTile(clx[n]-6, cly[n]+1, clz[n]+6, 82);
setTile(clx[n]-6, cly[n]+1, clz[n], 82);
setTile(clx[n]-6, cly[n]+1, clz[n]-6, 82);
cl4[n] = true;
cl4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(kirito[0]!=null){
for(var n in kirito){
if(kirito[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(k1a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
teleport(ESP.getUser(), px+8*sin, y+3, pz+8*cos);
ESP.antiLack(3);
explode(px+3*sin, y+1, pz+3*cos, 2.5);
k1[n] = true;
k1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(k2a[n])){
setTile(x-(Player.getX()-x), y+2, z-(Player.getZ()-z), 57);
k2x[n] = x-(Player.getX()-x);
k2y[n] = y;
k2z[n] = z-(Player.getZ()-z);
k2[n] = true;
k2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(k3a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<6;gun++){
setTile(px+gun*sin, y+2, pz+gun*cos, 87);
setTile(px+gun*sin, y+3, pz+gun*cos, 51);
}
k3[n] = true;
k3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}}}
if(jungle[0]!=null){
for(var n in jungle){
if(jungle[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(j1a[n])){
for(var yy=y+1;yy<y+7;yy++)
setTile(x, yy, z, 17, 3);
setTile(x, y+7, z, 18, 3);
for(var yy=y+6;yy<y+8;yy++){
setTile(x+1, yy, z, 18, 3);
setTile(x, yy, z-1, 18, 3);
setTile(x, yy, z+1, 18, 3);
setTile(x-1, yy, z, 18, 3);
}
for(var yy=y+4;yy<y+6;yy++){
setTile(x+1, yy, z+1, 18, 3);
setTile(x+1, yy, z-1, 18, 3);
setTile(x+1, yy, z, 18, 3);
setTile(x-1, yy, z+1, 18, 3);
setTile(x-1, yy, z-1, 18, 3);
setTile(x-1, yy, z, 18, 3);
setTile(x, yy, z+1, 18, 3);
setTile(x, yy, z-1, 18, 3);
setTile(x+2, yy, z+1, 18, 3);
setTile(x+2, yy, z-1, 18, 3);
setTile(x+2, yy, z, 18, 3)
setTile(x-2, yy, z+1, 18, 3);
setTile(x-2, yy, z-1, 18, 3);
setTile(x-2, yy, z, 18, 3);
setTile(x+1, yy, z+2, 18, 3);
setTile(x-1, yy, z+2, 18, 3);
setTile(x, yy, z+2, 18, 3);
setTile(x+1, yy, z-2, 18, 3);
setTile(x-1, yy, z-2, 18, 3);
setTile(x, yy, z-2, 18, 3);
}
j1[n] = true;
j1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(j2a[n])){
setTile(x-6, y+11, z+1, 18, 3);
setTile(x-5, y+7, z, 18, 3);
setTile(x-5, y+11, z, 18, 3);
setTile(x-5, y+11, z+1, 18, 3);
setTile(x-5, y+11, z+3, 18, 3);
setTile(x-5, y+11, z+4, 18, 3);
setTile(x-5, y+12, z, 18, 3);
setTile(x-5, y+12, z+1, 18, 3);
setTile(x-4, y+7, z-1, 18, 3);
setTile(x-4, y+7, z, 18, 3);
setTile(x-4, y+7, z+1, 18, 3);
setTile(x-4, y+8, z, 18, 3);
setTile(x-4, y+11, z-4, 18, 3);
setTile(x-4, y+11, z-1, 18, 3);
setTile(x-4, y+11, z, 18, 3);
setTile(x-4, y+11, z+1, 18, 3);
setTile(x-4, y+11, z+2, 18, 3);
setTile(x-4, y+11, z+4, 18, 3);
setTile(x-4, y+11, z+5, 18, 3);
setTile(x-4, y+12, z-2, 18, 3);
setTile(x-4, y+12, z-1, 18, 3);
setTile(x-4, y+12, z, 18, 3);
setTile(x-4, y+12, z+1, 18, 3);
setTile(x-4, y+12, z+2, 18, 3);
setTile(x-4, y+12, z+3, 18, 3);
setTile(x-4, y+13, z, 18, 3);
setTile(x-3, y+7, z-2, 18, 3);
setTile(x-3, y+7, z-1, 18, 3);
setTile(x-3, y+7, z, 17, 3);
setTile(x-3, y+7, z+1, 18, 3);
setTile(x-3, y+7, z+2, 18, 3);
setTile(x-3, y+8, z-1, 18, 3);
setTile(x-3, y+8, z, 18, 3);
setTile(x-3, y+8, z+1, 18, 3);
setTile(x-3, y+11, z-3, 18, 3);
setTile(x-3, y+11, z-2, 18, 3);
setTile(x-3, y+11, z-1, 18, 3);
setTile(x-3, y+11, z, 18, 3);
setTile(x-3, y+11, z+1, 18, 3);
setTile(x-3, y+11, z+2, 18, 3);
setTile(x-3, y+11, z+3, 18, 3);
setTile(x-3, y+11, z+4, 18, 3);
setTile(x-3, y+11, z+5, 18, 3);
setTile(x-3, y+12, z-2, 18, 3);
setTile(x-3, y+12, z-1, 18, 3);
setTile(x-3, y+12, z, 18, 3);
setTile(x-3, y+12, z+1, 18, 3);
setTile(x-3, y+12, z+2, 18, 3);
setTile(x-3, y+12, z+3, 18, 3);
setTile(x-3, y+12, z+4, 18, 3);
setTile(x-3, y+13, z-2, 18, 3);
setTile(x-3, y+13, z-1, 18, 3);
setTile(x-3, y+13, z, 18, 3);
setTile(x-3, y+13, z+1, 18, 3);
setTile(x-3, y+13, z+2, 18, 3);
setTile(x-3, y+13, z+3, 18, 3);
setTile(x-2, y+6, z, 17, 3);
setTile(x-2, y+7, z-1, 18, 3);
setTile(x-2, y+7, z, 18, 3);
setTile(x-2, y+7, z+1, 18, 3);
setTile(x-2, y+8, z, 18, 3);
setTile(x-2, y+11, z-4, 18, 3);
setTile(x-2, y+11, z-3, 18, 3);
setTile(x-2, y+11, z-2, 18, 3);
setTile(x-2, y+11, z-1, 18, 3);
setTile(x-2, y+11, z, 18, 3);
setTile(x-2, y+11, z+1, 18, 3);
setTile(x-2, y+11, z+2, 18, 3);
setTile(x-2, y+11, z+3, 18, 3);
setTile(x-2, y+11, z+4, 18, 3);
setTile(x-2, y+11, z+5, 18, 3);
setTile(x-2, y+11, z+6, 18, 3);
setTile(x-2, y+12, z-3, 18, 3);
setTile(x-2, y+12, z-2, 18, 3);
setTile(x-2, y+12, z-1, 18, 3);
setTile(x-2, y+12, z, 18, 3);
setTile(x-2, y+12, z+1, 18, 3);
setTile(x-2, y+12, z+2, 18, 3);
setTile(x-2, y+12, z+3, 18, 3);
setTile(x-2, y+12, z+4, 18, 3);
setTile(x-2, y+12, z+5, 18, 3);
setTile(x-2, y+13, z-2, 18, 3);
setTile(x-2, y+13, z-1, 18, 3);
setTile(x-2, y+13, z, 18, 3);
setTile(x-2, y+13, z+1, 18, 3);
setTile(x-2, y+13, z+2, 18, 3);
setTile(x-2, y+13, z+3, 18, 3);
setTile(x-2, y+13, z+4, 18, 3);
for(var yy=y+1;yy<y+13;yy++){
setTile(x-1, yy, z, 17, 3);
setTile(x-1, yy, z+1, 17, 3);
setTile(x, yy, z, 17, 3);
setTile(x, yy, z+1, 17, 3);
}
setTile(x-1, y+11, z-5, 18, 3);
setTile(x-1, y+11, z-4, 18, 3);
setTile(x-1, y+11, z-3, 18, 3);
setTile(x-1, y+11, z-2, 18, 3);
setTile(x-1, y+11, z-1, 18, 3);
setTile(x-1, y+11, z+2, 18, 3);
setTile(x-1, y+11, z+3, 18, 3);
setTile(x-1, y+11, z+4, 18, 3);
setTile(x-1, y+11, z+5, 18, 3);
setTile(x-1, y+11, z+6, 18, 3);
setTile(x-1, y+12, z-4, 18, 3);
setTile(x-1, y+12, z-3, 18, 3);
setTile(x-1, y+12, z-2, 18, 3);
setTile(x-1, y+12, z-1, 18, 3);
setTile(x-1, y+12, z+2, 18, 3);
setTile(x-1, y+12, z+3, 18, 3);
setTile(x-1, y+12, z+4, 18, 3);
setTile(x-1, y+12, z+5, 18, 3);
setTile(x-1, y+13, z-3, 18, 3);
setTile(x-1, y+13, z-2, 18, 3);
setTile(x-1, y+13, z-1, 18, 3);
setTile(x-1, y+13, z, 18, 3);
setTile(x-1, y+13, z+1, 18, 3);
setTile(x-1, y+13, z+2, 18, 3);
setTile(x-1, y+13, z+3, 18, 3);
setTile(x-1, y+13, z+4, 18, 3);
setTile(x, y+11, z-5, 18, 3);
setTile(x, y+11, z-4, 18, 3);
setTile(x, y+11, z-3, 18, 3);
setTile(x, y+11, z-2, 18, 3);
setTile(x, y+11, z-1, 18, 3);
setTile(x, y+11, z+2, 18, 3);
setTile(x, y+11, z+3, 18, 3);
setTile(x, y+11, z+4, 18, 3);
setTile(x, y+11, z+5, 18, 3);
setTile(x, y+12, z-4, 18, 3);
setTile(x, y+12, z-3, 18, 3);
setTile(x, y+12, z-2, 18, 3);
setTile(x, y+12, z-1, 18, 3);
setTile(x, y+12, z, 18, 3);
setTile(x, y+12, z+1, 18, 3);
setTile(x, y+12, z+2, 18, 3);
setTile(x, y+12, z+3, 18, 3);
setTile(x, y+12, z+4, 18, 3);
setTile(x, y+13, z-2, 18, 3);
setTile(x, y+13, z-1, 18, 3);
setTile(x, y+13, z, 18, 3);
setTile(x, y+13, z+1, 18, 3);
setTile(x, y+13, z+2, 18, 3);
setTile(x, y+13, z+3, 18, 3);
setTile(x, y+13, z+4, 18, 3);
setTile(x+1, y+11, z-5, 18, 3);
setTile(x+1, y+11, z-4, 18, 3);
setTile(x+1, y+11, z-3, 18, 3);
setTile(x+1, y+11, z-2, 18, 3);
setTile(x+1, y+11, z-1, 18, 3);
setTile(x+1, y+11, z, 18, 3);
setTile(x+1, y+11, z+1, 18, 3);
setTile(x+1, y+11, z+2, 18, 3);
setTile(x+1, y+11, z+3, 18, 3);
setTile(x+1, y+11, z+4, 18, 3);
setTile(x+1, y+11, z+5, 18, 3);
setTile(x+1, y+12, z-4, 18, 3);
setTile(x+1, y+12, z-3, 18, 3);
setTile(x+1, y+12, z-2, 18, 3);
setTile(x+1, y+12, z-1, 18, 3);
setTile(x+1, y+12, z, 18, 3);
setTile(x+1, y+12, z+1, 18, 3);
setTile(x+1, y+12, z+2, 18, 3);
setTile(x+1, y+12, z+3, 18, 3);
setTile(x+1, y+12, z+4, 18, 3);
setTile(x+1, y+13, z-2, 18, 3);
setTile(x+1, y+13, z-1, 18, 3);
setTile(x+1, y+13, z, 18, 3);
setTile(x+1, y+13, z+1, 18, 3);
setTile(x+1, y+13, z+2, 18, 3);
setTile(x+1, y+13, z+3, 18, 3);
setTile(x+2, y+11, z-4, 18, 3);
setTile(x+2, y+11, z-3, 18, 3);
setTile(x+2, y+11, z-2, 18, 3);
setTile(x+2, y+11, z-1, 18, 3);
setTile(x+2, y+11, z+5, 18, 3);
setTile(x+2, y+12, z-3, 18, 3);
setTile(x+2, y+12, z-2, 18, 3);
setTile(x+2, y+12, z-1, 18, 3);
setTile(x+2, y+12, z, 18, 3);
setTile(x+2, y+12, z+1, 18, 3);
setTile(x+2, y+12, z+2, 18, 3);
setTile(x+2, y+12, z+3, 18, 3);
setTile(x+2, y+13, z-1, 18, 3);
setTile(x+2, y+13, z, 18, 3);
setTile(x+2, y+13, z+1, 18, 3);
setTile(x+2, y+13, z+2, 18, 3);
setTile(x+3, y+11, z-4, 18, 3);
setTile(x+3, y+11, z-3, 18, 3);
setTile(x+3, y+11, z-1, 18, 3);
for(var zz=z;zz<z+5;zz++){
setTile(x+3, y+11, zz, 18, 3);
setTile(x+4, y+11, zz, 18, 3);
setTile(x+2, y+11, zz, 18, 3);
}
setTile(x+3, y+11, z+5, 18, 3);
setTile(x+3, y+12, z-1, 18, 3);
setTile(x+3, y+12, z, 18, 3);
setTile(x+3, y+12, z+1, 18, 3);
setTile(x+3, y+12, z+2, 18, 3);
setTile(x+3, y+12, z+3, 18, 3);
setTile(x+4, y+11, z-3, 18, 3);
setTile(x+4, y+11, z-2, 18, 3);
setTile(x+4, y+11, z-1, 18, 3);
setTile(x+5, y+11, z, 18, 3);
j2 = true;
j2a = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(j3a[n])){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx, yy, zz, 48);
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y+1;yy<y+4;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 0);
Level.spawnMob(x, y+2.5, z, 32);
j3x[n] = x;
j3y[n] = y;
j3z[n] = z;
j3[n] = true;
j3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(j4a[n])){
if(Cool.isFalse(j4b[n])){
ESP.heal(jungle[n]);
setTile(x, y, z, 18, 3);
j4b[n] = true;
jx[n] = x;
jy[n] = y;
jz[n] = z;
}
else if(j4b[n]==true){
ESP.sbm("Under Jungle Water");
for(var xx=jx[n]-11;xx<jx[n]+12;xx++)
for(var yy=jy[n]-6;yy<jy[n]+1;yy++)
for(var zz=jz[n]-11;zz<jz[n]+12;zz++)
setTile(xx, yy, zz, 0);
j4b[n] = false;
j4[n] = true;
j4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}
}}}
if(kanade[0]!=null){
for(var n in kanade){
if(kanade[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(ka1a[n])){
teleport(ESP.getUser(), x+(x-Player.getX()), y+3, z+(z-Player.getZ()))
ka1[n] = true;
ka1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==304){
if(Cool.isFinished(ka3a[n])&&Cool.isFalse(ka3b[n])){
ka3x[n] = Player.getX();
ka3y[n] = Player.getY()-2;
ka3z[n] = Player.getZ();
for(var xx=ka3x[n]-1;xx<ka3x[n]+2;xx++){
for(var yy=ka3y[n]+1;yy<ka3y[n]+4;yy++){
for(var zz=ka3z[n]-1;zz<ka3z[n]+2;zz++){
setTile(xx, yy, ka3z[n]+2, 20);
setTile(xx, yy, ka3z[n]-2, 20);
setTile(ka3x[n]+2 ,yy, zz, 20);
setTile(ka3x[n]-2 ,yy, zz, 20);
setTile(xx, ka3y[n]+4, zz, 20);
}}}
ka3b[n] = true;
ka3[n] = true;
ka3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
else if(ka3b[n]==true){
for(var xx=ka3x[n]-1;xx<ka3x[n]+2;xx++){
for(var yy=ka3y[n]+1;yy<ka3y[n]+4;yy++){
for(var zz=ka3z[n]-1;zz<ka3z[n]+2;zz++){
setTile(xx, yy, ka3z[n]+2, 0);
setTile(xx, yy, ka3z[n]-2, 0);
setTile(ka3x[n]+2 ,yy, zz, 0);
setTile(ka3x[n]-2 ,yy, zz, 0);
setTile(xx, ka3y[n]+4, zz, 0);
}}}
ka3b[n] =false;
}
}
if(i==305&&Cool.isFinished(ka4a[n])){
ESP.heal(kanade[n]);
ESP.sbm("Guard Skill : Howling");
kax[n] = Player.getX();
kay[n] = Player.getY()-2;
kaz[n] = Player.getZ();
ESP.antiLack(3);
explode(kax[n]+2, kay[n]+1, kaz[n]+2, 1.5);
explode(kax[n]+3, kay[n]+1, kaz[n], 1.5);
explode(kax[n]+2, kay[n]+1, kaz[n]-2, 1.5);
explode(kax[n], kay[n]+1, kaz[n]+3, 1.5);
explode(kax[n], kay[n]+1, kaz[n]-3, 1.5);
explode(kax[n]-2, kay[n]+1, kaz[n]+2, 1.5);
explode(kax[n]-3, kay[n]+1, kaz[n], 1.5);
explode(kax[n]-2, kay[n]+1, kaz[n]-2, 1.5);
ka4[n] = true;
ka4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(time[0]!=null){
for(var n in time){
if(time[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(ti1a[n])){
teleport(time[n], x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
ti1[n] = true;
ti1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==305&&Cool.isFinished(ti4a[n])){
ESP.sbm("Time Stop");
ESP.heal(time[n]);
ESP.timeStop(true);
ti4[n] = true;
ti4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(snipe[0]!=null){
for(var n in snipe){
if(snipe[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(sn1a[n])){
ESP.antiLack(150);
explode(ESP.getSniperX(n), ESP.getSniperY(n), ESP.getSniperZ(n), 2.5);
snx[n] = ESP.getSniperX(n);
sny[n] = ESP.getSniperY(n);
snz[n] = ESP.getSniperZ(n);
sn4c[n] = getTile(snx[n], sny[n], snz[n]);
sn4d[n] = Level.getData(snx[n], sny[n], snz[n]);
setTile(snx[n], sny[n], snz[n], 35, 14);
sn1[n] = true;
sn1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(sn2a[n])){
for(var xx=snx[n]-1;xx<snx[n]+2;xx++)
for(var zz=snz[n]-1;zz<snz[n]+2;zz++)
setTile(xx, sny[n]+1, zz, 51);
snx[n] = ESP.getSniperX(n);
sny[n] = ESP.getSniperY(n);
snz[n] = ESP.getSniperZ(n);
sn4c[n] = getTile(snx[n], sny[n], snz[n]);
sn4d[n] = Level.getData(snx[n], sny[n], snz[n]);
setTile(snx[n], sny[n], snz[n], 35, 14);
sn2[n] = true;
sn2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(sn3a[n])){
teleport(snipe[n], ESP.getSniperX(n), ESP.getSniperY(n)+3, ESP.getSniperZ(n));
sn3[n] = true;
sn3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305){
if(Cool.isFinished(sn4a[n])&&Cool.isFinished(sn4b[n])){
ESP.heal(snipe[n]);
ESP.sbm("Hyper Snipe");
for(var xx=x-2;xx<x+3;xx++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx, y+15, zz, 20);
teleport(snipe[n], x, y+18, z);
sn4x[n] = x;
sn4y[n] = y;
sn4z[n] = z;
sn4b[n] = true;
sn4[n] = true;
sn4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
else if(sn4b[n]==true){
explode(ESP.getSniperX(n), ESP.getSniperY(n), ESP.getSniperZ(n), 3);
snx[n] = ESP.getSniperX(n);
sny[n] = ESP.getSniperY(n);
snz[n] = ESP.getSniperZ(n);
sn4c[n] = getTile(snx[n], sny[n], snz[n]);
sn4d[n] = Level.getData(snx[n], sny[n], snz[n]);
setTile(snx[n], sny[n], snz[n], 35, 14);
}
}
}}}
if(zombie[0]!=null){
for(var n in zombie){
if(zombie[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(z1a[n])){
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 32);
z1[n] = true;
z1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(z2a[n])){
z2b = Level.spawnMob(x, y+3, z, 32);
Entity.setHealth(z2b, 50);
z2[n] = true;
z2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(z3a[n])){
z3b[n] = Level.spawnMob(x, y+3, z, 32);
Entity.setHealth(z3b, 50);
z3[n] = true;
z3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(z4a[n])){
ESP.heal(zombie[n]);
ESP.sbm("Zombie Army");
for(var nn=0;nn<20;nn++){
var z4b = Level.spawnMob(x+(x-Player.getX()), y+3, z+(z-Player.getZ()), 32);
Entity.setHealth(z4b, 25);
}
z4b = Level.spawnMob(x+(x-Player.getX()), y+3, z+(z-Player.getZ()), 36);
Entity.setHealth(z4b, 50);
z4[n] = true;
z4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(necro[0]!=null){
for(var n in necro){
if(necro[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(ne1a[n])){
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 34);
Level.spawnMob(x, y+3, z, 34);
ne1[n] = true;
ne1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(ne2a[n])){
uuu = Level.spawnMob(x, y+3, z, 35);
ooo = Level.spawnMob(x, y+3, z, 65);
Entity.rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x, y+3, z, 35);
ooo = Level.spawnMob(x, y+3, z, 65);
Entity.rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x, y+3, z, 35);
ooo = Level.spawnMob(x, y+3, z, 65);
Entity.rideAnimal(ooo, uuu);
ne2[n] = true;
ne2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(ne3a[n])){
for(var nn=0;nn<7;nn++)
Level.spawnMob(x, y+3, z, 36);
ne3[n] = true;
ne3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(ne4a[n])){
ESP.heal(necro[n]);
ESP.sbm("Zombie Pigman ESP");
ne4b[n] = Level.spawnMob(x+(x-Player.getX()), y+3, z+(z-Player.getX()), 36);
Entity.setHealth(ne4b[n], 100);
ne4c[n] = Level.spawnMob(x, y+3, z, 35);
Entity.setHealth(ne4c[n], 50);
Entity.rideAnimal(ne4b[n], ne4c[n]);
ne4[n] = true;
ne4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(asuna[0]!=null){
for(var n in asuna){
if(asuna[n]==ESP.getUser()){
if(i==303&&Cool.isFinished(asn2a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
teleport(asuna[n], px+11*sin, y+3, pz+11*cos);
ESP.antiLack(3);
explode(px+4*sin, y+1, pz+4*cos, 3);
asn2[n] = true;
asn2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==305&&Cool.isFinished(asn4a[n])){
ESP.heal(asuna[n]);
ESP.sbm("Flashing Penetrator");
var p2x, p2y, p2z;
var nn = 15+Math.random()*3;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs(y-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(px<=30&&py<=30&&pz<=30&&e!=asuna[n]&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-nn);
}
}
teleport(asuna[n], x+(x-Player.getX()), y+3, z+(z-Player.getZ()))
asn4[n] = true;
asn4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(holy[0]!=null){
for(var n in holy){
if(holy[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(ho1a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=2;gun<7;gun++)
setTile(px+gun*sin, y+1, pz+gun*cos, 155);
teleport(holy[n], px+7*sin, y+3, pz+7*cos)
ho1[n] = true;
ho1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(ho2a[n])){
px = Math.floor(Player.getX());
py = Math.floor(Player.getY());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var yy=py+1;yy<py+6;yy++)
setTile(px, yy, pz, 155);
ho2[n] = true;
ho2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(ho3a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<25;gun++)
setTile(px+gun*sin, y+2, pz+gun*cos, 155);
ho3[n] = true;
ho3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(ho4a[n])){
ESP.heal(holy[n]);
ESP.sbm("Holy Sword");
px = Math.floor(Player.getX());
py = Math.floor(Player.getY())+1;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(px, py, pz, 17, 2);
setTile(px-sin, py+1, pz-cos, 17, 2);
setTile(px-sin, py+3, pz-cos, 41);
setTile(px-2*sin, py+2, pz-2*cos, 41);
setTile(px-3*sin, py+1, pz-3*cos, 41);
for(var ss=3;ss<8;ss++)
setTile(px-ss*sin, py+ss, pz-ss*cos, 155);
hox[n] = [Player.getX(), px+18*sin, px+36*sin];
hoy[n] = Player.getY()-2;
hoz[n] = [Player.getZ(), pz+18*cos, pz+36*cos];
ho4[n] = true;
ho4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(solar[0]!=null){
for(var n in solar){
if(solar[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(sol1a[n])){
for(var xx=x-1;xx<x+2;xx++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx, y+1, z+2, 51);
setTile(xx, y+1, z-2, 51);
setTile(x+2, y+1, zz, 51);
setTile(x-2, y+1, zz, 51);
}}
sol1[n] = true;
sol1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(sol3a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<25;gun++)
setTile(px+gun*sin, y+2, pz+gun*cos, 41);
sol2[n] = true;
sol2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(sol3a[n])){
arroundMobFireTicks(solar, 20, 10);
sol3[n] = true;
sol3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(sol4a[n])){
ESP.sbm("Sword of Sun");
ESP.heal(solar[n]);
Level.setTime(400);
for(var yy=y+3;yy<y+8;yy++)
setTile(x, yy, z, 41);
setTile(x+1, y+8, z, 42);
setTile(x, y+8, z, 42);
setTile(x-1, y+8, z, 42);
setTile(x, y+9, z, 17);
setTile(x, y+10, z, 17);
solx[n] = x;
soly[n] = y;
solz[n] = z;
sol4[n] = true;
sol4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(lunar[0]!=null){
for(var n in lunar){
if(lunar[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(lu1a[n])){
teleport(lunar[n], x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
lu1[n] = true;
lu1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(lu2a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<25;gun++)
setTile(px+gun*sin, y+2, pz+gun*cos, 155);
lu2[n] = true;
lu2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(lu3a[n])){
luxa = Math.abs(x-Player.getX());
luza = Math.abs(z-Player.getZ());
if(luxa>luza){
for(var yy=y+1;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(x, yy, zz, 155);
}
else if(luxa<luza){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+5;yy++)
setTile(xx, yy, z, 155);
}
lu3[n] = true;
lu3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(lu4a[n])){
ESP.sbm("Staff of Moon");
ESP.heal(lunar[n]);
Level.setTime(14000);
for(var yy=y+3;yy<y+9;yy++)
setTile(x, yy, z, 17);
setTile(x, y+9, z, 155, 1);
setTile(x, y+10, z, 155, 1);
setTile(x+1, y+10, z, 155, 1);
setTile(x-1, y+10, z, 155, 1);
setTile(x, y+10, z+1, 155, 1);
setTile(x, y+10, z-1, 155, 1);
setTile(x, y+11, z, 155, 1);
lux[n] = x;
luy[n] = y;
luz[n] = z;
lu4[n] = true;
lu4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(has[0]!=null){
for(var n in has){
if(has[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(ha1a[n])){
arroundMobHealthDown(has, 10, 5);
ha1[n] = true;
ha1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(ha2a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
explode(px+9*sin, y+1, pz+9*cos, 3);
ha2x[n] = px+9*sin;
ha2y[n] = y;
ha2z[n] = pz+9*cos;
for(var xx=ha2x[n]-5;xx<ha2x[n]+6;xx++)
for(var yy=y-5;yy<y+1;yy++)
for(var zz=ha2z[n]-5;zz<ha2z[n]+6;zz++)
if(getTile(xx, yy, zz)==0){
setTile(xx, yy, zz, 51);
}
ha2[n] = true;
ha2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==305&&Cool.isFinished(ha4a[n])){
ESP.heal(has[n]);
ESP.sbm("Arround Assault");
arroundMobHealthDown(has[n], 10, 3);
ha4[n] = true;
ha4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(random[0]!=null){
for(var n in random){
if(random[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(ra1a[n])){
ra1b[n] = ESP.random(2);
if(ra1b[n]==0){
ESP.antiLack(3);
explode(x, y+0.7, z, 2.5);
}
else if(ra1b[n]==1){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+1, zz, 51);
}
ra1[n] = true;
ra1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(ra2a[n])){
ra2b[n] = ESP.random(3);
if(ra2b[n]==0){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+1, zz, 30);
}
else if(ra2b[n]==1){
teleport(random[n], x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
}
else if(ra2b[n]==2){
raxa = Math.abs(x-Player.getX());
raza = Math.abs(z-Player.getZ());
if(raxa>raza){
for(var yy=y+1;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(x, yy, zz, 1);
}
else if(raxa<raza){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+5;yy++)
setTile(xx, yy, z, 1);
}
}
ra2[n] = true;
ra2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==305&&Cool.isFinished(ra4a[n])){
ESP.heal(random[n]);
ESP.sbm("Random Attack");
ra4b[n] = ESP.random(4);
if(ra4b[n]==0){
arroundMobFireTicks(random, 50, 30);
}
else if(ra4b[n]==1){
rax[n] = Player.getX();
ray[n] = Player.getY()-2;
raz[n] = Player.getZ();
for(var xx=rax[n]-12;xx<rax[n]+13;xx++){
for(var zz=raz[n]-12;zz<raz[n]+13;zz++){
setTile(xx, ray[n], zz, 51);
setTile(xx, ray[n]-1, zz, 51);
}}
setTile(rax[n], ray[n], raz[n], 2);
}
else if(ra4b[n]==2){
for(var nn=0;nn<20;nn++)
Level.spawnMob(x+(x-Player.getX()), y+3, z+(z-Player.getZ()), 33);
}
else if(ra4b[n]==3){
rax[n] = x;
ray[n] = y;
raz[n] = z;
ESP.antiLack(90);
explode(x+7, y+1, z+7, 3);
explode(x+7, y+1, z-7, 3);
explode(x-7, y+1, z+7, 3);
explode(x-7, y+1, z-7, 3);
Level.spawnMob(x, y+5, z, 65);
Level.spawnMob(x, y+10, z+3, 65);
Level.spawnMob(x+4, y+7, z, 65);
Level.spawnMob(x, y+15, z-7, 65);
Level.spawnMob(x-9, y+5, z, 65);
Level.spawnMob(x+6, y+17, z+3, 65);
Level.spawnMob(x-10, y+15, z-7, 65);
Level.spawnMob(x-5, y+15, z+5, 65);
Level.spawnMob(x+3, y+10, z-9, 65);
Level.spawnMob(x-5, y+7, z, 65);
Level.spawnMob(x, y+14, z+8, 65);
Level.spawnMob(x-8, y+9, z, 65);
Level.spawnMob(x+1, y+18, z+6, 65);
Level.spawnMob(x-2, y+13, z-6, 65);
}
ra4[n] = true;
ra4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(zwei[0]!=null){
for(var n in zwei){
if(zwei[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(zw1a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<20;gun++)
setTile(px+gun*sin, y+2, pz+gun*cos, 79);
zw1[n] = true;
zw1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(zw2a[n])){
explode(x+0.5, y+3, z+0.5, 2);
for(var xx=x-1;xx<x+2;xx++){
for(var yy=y+1;yy<y+4;yy++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx, yy, z+2, 79);
setTile(xx, yy, z-2, 79);
setTile(x+2, yy, zz, 79);
setTile(x-2, yy, zz, 79);
setTile(xx, y+4, zz, 79);
}}}
zw2x[n] = x;
zw2y[n] = y;
zw2z[n] = z;
zw2[n] = true;
zw2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(zw3a[n])){
zw3[n] = true;
zw3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(zw4a[n])){
ESP.heal(zwei[n]);
ESP.sbm("Frigid Dagger");
ESP.zweiHyperPlus(zwei[n], 35, n);
zw4[n] = true;
zw4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(deco[0]!=null){
for(var n in deco){
if(deco[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(dec1a[n])){
setTile(x, y+1, z, 17);
setTile(x+1, y+1, z+1, 17);
setTile(x+1, y+1, z-1, 17);
setTile(x-1, y+1, z+1, 17);
setTile(x-1, y+1, z-1, 17);
setTile(x, y+2, z, 18);
setTile(x+1, y+2, z+1, 18);
setTile(x+1, y+2, z-1, 18);
setTile(x-1, y+2, z+1, 18);
setTile(x-1, y+2, z-1, 18);
dec1[n] = true;
dec1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(dec2a[n])){
decxa = Math.abs(x-Player.getX());
decza = Math.abs(z-Player.getZ());
if(decxa>decza){
for(var yy=y+1;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(x, yy, zz, 35, ESP.random(16));
}
else if(decxa<decza){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+5;yy++)
setTile(xx, yy, z, 35, ESP.random(16));
}
dec2[n] = true;
dec2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(dec3a[n])){
dec3x[n] = Player.getX();
dec3y[n] = Player.getY()-2;
dec3z[n] = Player.getZ();
setTile(dec3x[n]+1, dec3y[n]+1, dec3z[n]+5, 89);
setTile(dec3x[n], dec3y[n]+1, dec3z[n]+5, 89);
setTile(dec3x[n]-1, dec3y[n]+1, dec3z[n]+5, 89);
setTile(dec3x[n]+1, dec3y[n]+1, dec3z[n]-5, 89);
setTile(dec3x[n], dec3y[n]+1, dec3z[n]-5, 89);
setTile(dec3x[n]-1, dec3y[n]+1, dec3z[n]-5, 89);
setTile(dec3x[n]+5, dec3y[n]+1, dec3z[n]+1, 89);
setTile(dec3x[n]+5, dec3y[n]+1, dec3z[n], 89);
setTile(dec3x[n]+5, dec3y[n]+1, dec3z[n]-1, 89);
setTile(dec3x[n]-5, dec3y[n]+1, dec3z[n]+1, 89);
setTile(dec3x[n]-5, dec3y[n]+1, dec3z[n], 89);
setTile(dec3x[n]-5, dec3y[n]+1, dec3z[n]-1, 89);
setTile(dec3x[n]+5, dec3y[n]+2, dec3z[n], 89);
setTile(dec3x[n]-5, dec3y[n]+2, dec3z[n], 89);
setTile(dec3x[n], dec3y[n]+2, dec3z[n]+5, 89);
setTile(dec3x[n], dec3y[n]+2, dec3z[n]-5, 89);
dec3[n] = true;
dec3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(dec4a[n])){
ESP.heal(deco[n]);
ESP.sbm("Dark Death Decoration");
setTile(x-6, y+1, z, 46);
setTile(x-4, y+1, z-4, 46);
setTile(x-4, y+1, z-2, 46);
setTile(x-4, y+1, z+2, 46);
setTile(x-4, y+1, z+4, 46);
setTile(x-3, y+1, z-3, 46);
setTile(x-3, y+1, z+3, 46);
setTile(x-2, y+1, z-4, 46);
setTile(x-2, y+1, z-2, 46);
setTile(x-2, y+1, z+2, 46);
setTile(x-2, y+1, z+4, 46);
setTile(x-2, y+2, z-2, 46);
setTile(x-2, y+2, z+2, 46);
setTile(x-1, y+1, z-1, 46);
setTile(x-1, y+1, z+1, 46);
setTile(x, y+1, z-6, 46);
setTile(x, y+1, z, 46);
setTile(x, y+1, z+6, 46);
setTile(x, y+2, z, 46);
setTile(x, y+3, z, 46);
setTile(x+1, y+1, z-1, 46);
setTile(x+1, y+1, z+1, 46);
setTile(x+2, y+1, z-4, 46);
setTile(x+2, y+1, z-2, 46);
setTile(x+2, y+1, z+2, 46);
setTile(x+2, y+1, z+4, 46);
setTile(x+2, y+2, z-2, 46);
setTile(x+2, y+2, z+2, 46);
setTile(x+3, y+1, z-3, 46);
setTile(x+3, y+1, z+3, 46);
setTile(x+4, y+1, z-4, 46);
setTile(x+4, y+1, z-2, 46);
setTile(x+4, y+1, z+2, 46);
setTile(x+4, y+1, z+4, 46);
setTile(x+6, y+1, z, 46);
Level.spawnMob(x+0.5, y+12, z+0.5, 65);
for(var xx=x-8;xx<x+9;xx++){
for(var yy=y;yy<y+6;yy++){
for(var zz=z-8;zz<z+9;zz++){
setTile(xx, yy, z+9, 49);
setTile(xx, yy, z-9, 49);
setTile(x+9, yy, zz, 49);
setTile(x-9, yy, zz, 49);
}}}
teleport(deco[n], x-3*(x-Player.getX()), y+3, z-3*(z-Player.getZ()));
decx[n] = x;
decy[n] = y;
decz[n] = z;
dec4[n] = true;
dec4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(hsum[0]!=null){
for(var n in hsum){
if(hsum[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(hs1a[n])){
for(var nn=0;nn<5;nn++)
Level.spawnMob(x, y+3, z, 35);
hs1[n] = true;
hs1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(hs2a[n])){
for(var nn=0;nn<5;nn++){
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 34);
}
hs2[n] = true;
hs2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(hs3a[n])){
for(var nn=0;nn<10;nn++)
Level.spawnMob(x, y+3, z, 36);
hs3[n] = true;
hs3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(hs4a[n])){
ESP.heal(hsum[n]);
ESP.sbm("Bursters");
for(var nn=0;nn<10;nn++)
Level.spawnMob(x, y+3, z, 33);
var uuu = Level.spawnMob(x, y+3, z, 35);
var ooo = Level.spawnMob(x, y+3, z, 65);
Entity.rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x, y+3, z, 35);
ooo = Level.spawnMob(x, y+3, z, 65);
Entity.rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x, y+3, z, 35);
ooo = Level.spawnMob(x, y+3, z, 65);
Entity.rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x, y+3, z, 35);
ooo = Level.spawnMob(x, y+3, z, 65);
Entity.rideAnimal(ooo, uuu);
uuu = Level.spawnMob(x, y+3, z, 35);
ooo = Level.spawnMob(x, y+3, z, 65);
Entity.rideAnimal(ooo, uuu);
hs4[n] = true;
hs4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(climate[0]!=null){
for(var n in climate){
if(climate[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(cli1a[n])){
for(var yy=y+1;yy<y+4;yy++)
setTile(x, yy, z, 17);
setTile(x, y+4, z, 18);
for(var yy=y+2;yy<y+4;yy++){
setTile(x+1, yy, z, 18);
setTile(x-1, yy, z, 18);
setTile(x, yy, z+1, 18);
setTile(x, yy, z-1, 18);
}
setTile(x+3, y+1, z, 31, 1);
setTile(x-1, y+1, z+2, 31, 1);
setTile(x-2, y+1, z, 31, 1);
setTile(x, y+1, z-3, 31, 1);
setTile(x+1, y+1, z+1, 31, 2);
setTile(x+2, y+1, z-2, 31, 2);
setTile(x+2, y+1, z, 38);
cli1[n] = true;
cli1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(cli2a[n])){
for(var xx=x-4;xx<x+5;xx++)
for(var zz=z-4;zz<z+5;zz++)
setTile(xx, y, zz, 12);
for(var yy=y+1;yy<y+3;yy++){
setTile(x, yy, z, 81);
setTile(x+2, yy, z, 81);
setTile(x-2, yy, z, 81);
setTile(x, yy, z+2, 81);
setTile(x, yy, z-2, 81);
}
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs(y-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=4&&p2y<=4&&p2z<=4&&climate[n]!=e&&Entity.getEntityTypeId(e)<64)
Entity.setFireTicks(e, 10);
}
cli2[n] = true;
cli2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(cli3a[n])){
for(var xx=x-4;xx<x+5;xx++)
for(var zz=z-4;zz<z+5;zz++)
setTile(xx, y, zz, 87);
setTile(x-3, y, z+3, 11);
setTile(x-3, y, z+2, 11);
setTile(x-3, y, z+1, 11);
setTile(x+3, y+1, z+4, 87);
setTile(x-1, y+1, z-2, 87);
setTile(x, y+3, z, 89);
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs(y-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=4&&p2y<=4&&p2z<=4&&climate[n]!=e&&Entity.getEntityTypeId(e)<64){
Entity.setFireTicks(e, 5);
Entity.setHealth(e, Entity.getHealth(e)-3);
}
}
cli3[n] = true;
cli3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(cli4a[n])){
ESP.heal(climate[n]);
ESP.sbm("Eternal Coffin");
clix[n] = Player.getX();
cliy[n] = Player.getY()-2;
cliz[n] = Player.getZ();
for(var xx=clix[n]-12;xx<clix[n]+13;xx++){
for(var yy=cliy[n]-2;yy<cliy[n]+4;yy++){
for(var zz=cliz[n]-12;zz<cliz[n]+13;zz++){
if(getTile(xx, yy, zz)==10||getTile(xx, yy+1, zz)==11) setTile(xx, yy, zz, 49);
else if(getTile(xx, yy, zz)==8||getTile(xx, yy+1, zz)==9) setTile(xx, yy, zz, 79);
else if(getTile(xx, yy, zz)!=0&&getTile(xx, yy+1, zz)==0) setTile(xx, yy+1, zz, 78);
}}}
arroundMobHealthDown(climate[n], 15, 15);
cli4[n] = true;
cli4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(raid[0]!=null){
for(var n in raid){
if(raid[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(rr1a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
explode(px+10*sin, y+1, pz+10*cos, 3);
rr1[n] = true;
rr1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(rr2a[n])){
Entity.setHealth(rr0[n], Entity.getHealth(rr0[n])-5);
rr2[n] = true;
rr2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(rr3a[n])){
Entity.setFireTicks(rr0[n], 10);
if(ESP.isPlayer(rr0[n])) setTile(Entity.getX(rr0[n]), Entity.getY(rr0[n])-1, Entity.getZ(rr0[n]), 30);
else setTile(Entity.getX(rr0[n]), Entity.getY(rr0[n]), Entity.getZ(rr0[n]), 30);
rr3[n] = true;
rr3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(rr4a[n])){
ESP.heal(raid[n]);
ESP.sbm("Summon Target");
explode(Entity.getX(rr0[n]), Entity.getY(rr0[n])+0.4, Entity.getZ(rr0[n]), 1);
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
teleport(rr0[n], px+3*sin, y+3, pz+3*cos);
rr4[n] = true;
rr4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(wind[0]!=null){
for(var n in wind){
if(wind[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(wi1a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
explode(px+5*sin, y+1, pz+5*cos, 2);
wi1[n] = true;
wi1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(wi2a[n])){
wixa = Math.abs(x-Player.getX());
wiza = Math.abs(z-Player.getZ());
if(wixa>wiza){
for(var yy=y+1;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(x, yy, zz, 20);
}
else if(wixa<wiza){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+5;yy++)
setTile(xx, yy, z, 20);
}
wi2[n] = true;
wi2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==305&&Cool.isFinished(wi4a[n])){
ESP.heal(wind[n]);
ESP.sbm("Sonic Wave");
wix[n] = Player.getX();
wiy[n] = Player.getY()-2;
wiz[n] = Player.getZ();
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(wix[n]-Entity.getX(e));
p2y = Math.abs((wiy[n]+1)-Entity.getY(e));
p2z = Math.abs(wiz[n]-Entity.getZ(e));
if(p2x<=40&&p2y<=40&&p2z<=40&&wind[n]!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-2);
wi4b[n].push(e);
}
}
ESP.antiLack(3);
explode(wix[n]+5, wiy[n]+1, wiz[n]+5, 2);
explode(wix[n]+5, wiy[n]+1, wiz[n]-5, 2);
explode(wix[n]-5, wiy[n]+1, wiz[n]+5, 2);
explode(wix[n]-5, wiy[n]+1, wiz[n]-5, 2);
wi4[n] = true;
wi4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(energy[0]!=null){
for(var n in energy){
if(energy[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(en1a[n])){
ESP.antiLack(3);
explode(x, y+1, z, 3);
en1x[n] = x;
en1y[n] = y;
en1z[n] = z;
en1[n] = true;
en1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(en2a[n])){
arroundMobFireTicks(energy[n], 15, 10);
en2[n] = true;
en2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(en3a[n])){
en3x[n] = Player.getX();
en3y[n] = Player.getY()-2;
en3z[n] = Player.getZ();
for(var yy=en3y[n]+1;yy<en3y[n]+6;yy++){
setTile(en3x[n]+6, yy, en3z[n]+6, 89);
setTile(en3x[n]+6, yy, en3z[n], 89);
setTile(en3x[n]+6, yy, en3z[n]-6, 89);
setTile(en3x[n], yy, en3z[n]+6, 89);
setTile(en3x[n], yy, en3z[n]-6, 89);
setTile(en3x[n]-6, yy, en3z[n]+6, 89);
setTile(en3x[n]-6, yy, en3z[n], 89);
setTile(en3x[n]-6, yy, en3z[n]-6, 89);
}
en3[n] = true;
en3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(en4a[n])){
ESP.heal(energy[n]);
ESP.sbm("Remote Energy Generation");
en4b[n] = [];
ESP.energyHyperPlus(energy[n], 40, n);
en4[n] = true;
en4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(geno[0]!=null){
for(var n in geno){
if(geno[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(g2a[n])){
for(var xx=x-1;xx<x+2;xx++){
for(var yy=y+1;yy<y+4;yy++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx, yy, z+2, 5, 1);
setTile(xx, yy, z-2, 5, 1);
setTile(x+2, yy, zz, 5, 1);
setTile(x-2, yy, zz, 5, 1);
setTile(xx, y+4, zz, 5, 1);
}}}
ESP.antiLack(3);
Level.spawnMob(x+0.5, y+2.3, z+0.5, 65);
g2x[n] = x;
g2y[n] = y;
g2z[n] = z;
g2[n] = true;
g2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(g3a[n])){
g3x[n] = Player.getX();
g3y[n] = Player.getY()-2;
g3z[n] = Player.getZ();
for each(var e in Entity.getAll()){
p2x = Math.abs(Player.getX()-Entity.getX(e));
p2y = Math.abs(Player.getY()-Entity.getY(e));
p2z = Math.abs(Player.getZ()-Entity.getZ(e));
if(p2x<=35&&p2y<=35&&p2z<=35&&geno[n]!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-5);
Entity.setFireTicks(e, 5);
}
}
g3[n] = true;
g3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(g4a[n])){
ESP.heal(geno[n]);
ESP.sbm("The Genocide");
for each(var e in Entity.getAll()){
gx = Math.abs(Player.getX()-Entity.getX(e));
gy = Math.abs(Player.getY()-Entity.getY(e));
gz = Math.abs(Player.getZ()-Entity.getZ(e));
if(gx<=35&&gy<=35&&gz<=35&&geno[n]!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-5);
setTile(Entity.getX(e), Entity.getY(e)+2, Entity.getZ(e), 46);
explode(Entity.getX(e), Entity.getY(e)+2.8, Entity.getZ(e), 1);
if(ESP.isPlayer(e)) g4b[n].push([Entity.getX(e), Entity.getY(e)-2, Entity.getZ(e)]);
else g4b[n].push([Entity.getX(e), Entity.getY(e)-1, Entity.getZ(e)]);
}
}
g4[n] = true;
g4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(server[0]!=null){
for(var n in server){
if(server[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(se1a[n])){
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)&&server[n]!=e)
se1b.push(e);
}
var se3c = se1b[ESP.random(se1b.length)];
teleport(server[n], Entity.getX(se3c), Entity.getY(se3c)+1, Entity.getZ(se3c));
se1b = [];
se1[n] = true;
se1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(se2a[n])){
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)&&server[n]!=e)
se2b.push(e);
}
teleport(se2b[ESP.random(se2b.length)], Entity.getX(server[n]), Entity.getY(server[n])+1, Entity.getZ(server[n]));
se2b = [];
se2 = true;
se2a = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(se3a[n])){
arroundMobHealthDown(server[n], 15, 10);
se3[n] = true;
se3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}}}
if(out[0]!=null){
for(var n in out){
if(out[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(ou1a[n])){
px = Math.floor(Player.getX());
py = Player.getY();
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
teleport(out[n], px+10*sin, y+3, pz+10*cos);
ESP.antiLack(3);
explode(px+0.5, py, px+0.5, 2);
ou1[n] = true;
ou1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(ou2a[n])){
arroundMobHealthDown(out[n], 15, 7);
ESP.antiLack(3);
explode(x, y+1, z, 2);
ou2[n] = true;
ou2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(ou3a[n])){
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs(y-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=20&&p2y<=20&&p2z<=20&&out!=e&&Entity.getEntityTypeId(e)<64){
teleport(e, Entity.getX(e), Entity.getY(e)+12, Entity.getZ(e));
Entity.setHealth(e, Entity.getHealth(e)-3);
}
}
ou3[n] = true;
ou3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(ou4a[n])){
ESP.heal(out[n]);
ESP.sbm("TNT Sending");
oux[n] = Player.getX();
ouy[n] = Player.getY()-2;
ouz[n] = Player.getZ();
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(oux-Entity.getX(e));
p2y = Math.abs(ouy-Entity.getY(e));
p2z = Math.abs(ouz-Entity.getZ(e));
if(p2x<=40&&p2y<=40&&p2z<=40&&out!=e&&Entity.getEntityTypeId(e)<64){
if(ESP.isPlayer(e)) setTile(Entity.getX(e), Entity.getY(e)-1, Entity.getZ(e), 30);
else setTile(Entity.getX(e), Entity.getY(e), Entity.getZ(e), 30);
Level.spawnMob(Entity.getX(e), Entity.getY(e)+14, Entity.getZ(e), 65);
Entity.setHealth(e, Entity.getHealth(e)-5);
}
}
ESP.antiLack(90);
ou4[n] = true;
ou4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(rgun[0]!=null){
for(var n in rgun){
if(rgun[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(rg1a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(px+3*sin, y+2, pz+3*cos, 89);
setTile(px+4*sin, y+2, pz+4*cos, 89);
rg1[n] = true;
rg1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(rg2a[n])){
px = Math.floor(Player.getX());
py = y+2;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var yy=py+1;yy<py+9;yy++)
setTile(px, yy, pz, 15);
rg2[n] = true;
rg2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(rg3a[n])){
rg3x[n] = Player.getX();
rg3y[n] = Player.getY()-2;
rg3z[n] = Player.getZ();
setTile(rg3x[n]+2, rg3y[n]+1, rg3z[n]+2, 89);
setTile(rg3x[n]+2, rg3y[n]+1, rg3z[n], 89);
setTile(rg3x[n]+2, rg3y[n]+1, rg3z[n]-2, 89);
setTile(rg3x[n], rg3y[n]+1, rg3z[n]+2, 89);
setTile(rg3x[n], rg3y[n]+1, rg3z[n]-2, 89);
setTile(rg3x[n]-2, rg3y[n]+1, rg3z[n]+2, 89);
setTile(rg3x[n]-2, rg3y[n]+1, rg3z[n], 89);
setTile(rg3x[n]-2, rg3y[n]+1, rg3z[n]-2, 89);
rg3[n] = true;
rg3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(rg4a[n])){
ESP.heal(rgun[n]);
ESP.sbm("Only my Railgun");
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<60;gun++)
setTile(px+gun*sin, y+2, pz+gun*cos, 89);
rgx[n] = [px-5*sin, px+10*sin, px+30*sin, px+50*sin];
rgy[n] = y;
rgz[n] = [pz-5*cos, pz+10*cos, pz+30*cos, pz+50*cos];
rg4[n] = true;
rg4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(copy[0]!=null){
for(var n in copy){
if(copy[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(co1a[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+1, zz, 51);
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs(y-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=3&&p2y<=3&&p2z<=3&&copy[n]!=e&&Entity.getEntityTypeId(e)<64)
Entity.setFireTicks(e, 5);
}
co1[n] = true;
co1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(co2a[n])){
co2[n] = true;
co2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==305&&Cool.isFinished(co4a[n])){
ESP.heal(copy[n]);
ESP.sbm("Susanoo");
cox[n] = Player.getX();
coy[n] = Player.getY()-2;
coz[n] = Player.getZ();
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
if(Math.abs(sin)>Math.abs(cos)){
}
for(var xx=cox[n]-1;xx<cox[n]+2;xx++)
for(var yy=coy[n]+1;yy<coy[n]+7;yy++)
for(var zz=coz[n]-1;zz<coz[n]+2;zz++)
setTile(xx, yy, zz, 87);
for(var xx=cox[n]-1;xx<cox[n]+2;xx++)
for(var zz=coz[n]-1;zz<coz[n]+2;zz++)
setTile(xx, coy[n]+7, zz, 51);
setTile(cox[n], coy[n]+1, coz[n], 89);
setTile(cox[n], coy[n]+2, coz[n], 89);
if(Math.abs(sin)>Math.abs(cos)){
setTile(cox[n], coy[n]+7, coz[n]+1, 87);
setTile(cox[n], coy[n]+7, coz[n]-1, 87);
setTile(cox[n], coy[n]+6, coz[n]+2, 87);
setTile(cox[n], coy[n]+6, coz[n]+3, 87);
setTile(cox[n], coy[n]+5, coz[n]+3, 87);
setTile(cox[n], coy[n]+4, coz[n]+3, 87);
setTile(cox[n], coy[n]+3, coz[n]+3, 87);
setTile(cox[n], coy[n]+6, coz[n]-2, 87);
setTile(cox[n], coy[n]+6, coz[n]-3, 87);
setTile(cox[n], coy[n]+6, coz[n]-3, 87);
setTile(cox[n], coy[n]+5, coz[n]-3, 87);
setTile(cox[n], coy[n]+4, coz[n]-3, 87);
setTile(cox[n], coy[n]+3, coz[n]-3, 87);
setTile(cox[n], coy[n]+7, coz[n]+2, 51);
setTile(cox[n], coy[n]+7, coz[n]+3, 51);
setTile(cox[n], coy[n]+7, coz[n]-2, 51);
setTile(cox[n], coy[n]+7, coz[n]-3, 51);
}
if(Math.abs(sin)<Math.abs(cos)){
setTile(cox[n]+1, coy[n]+7, coz[n], 87);
setTile(cox[n]-1, coy[n]+7, coz[n], 87);
setTile(cox[n]+2, coy[n]+6, coz[n], 87);
setTile(cox[n]+3, coy[n]+6, coz[n], 87);
setTile(cox[n]+3, coy[n]+5, coz[n], 87);
setTile(cox[n]+3, coy[n]+4, coz[n], 87);
setTile(cox[n]+3, coy[n]+3, coz[n], 87);
setTile(cox[n]-2, coy[n]+6, coz[n], 87);
setTile(cox[n]-3, coy[n]+6, coz[n], 87);
setTile(cox[n]-3, coy[n]+5, coz[n], 87);
setTile(cox[n]-3, coy[n]+4, coz[n], 87);
setTile(cox[n]-3, coy[n]+3, coz[n], 87);
setTile(cox[n]+2, coy[n]+7, coz[n], 51);
setTile(cox[n]+3, coy[n]+7, coz[n], 51);
setTile(cox[n]-2, coy[n]+7, coz[n], 51);
setTile(cox[n]-3, coy[n]+7, coz[n], 51);
}
setTile(cox[n], coy[n]+7, coz[n], 87);
setTile(cox[n], coy[n]+8, coz[n], 87);
setTile(cox[n], coy[n]+9, coz[n], 51);
co4[n] = true;
co4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(dragon[0]!=null){
for(var n in dragon){
if(dragon[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(dr1a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<20;gun++)
setTile(px+gun*sin, y+1, pz+gun*cos, 51);
dr1[n] = true;
dr1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(dr2a[n])){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<25;gun++)
setTile(px+gun*sin, y+1, pz+gun*cos, 79);
dr2[n] = true;
dr2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(dr3a[n])){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<25;gun++)
explode(px+gun*sin, y+1, pz+gun*cos, 1.7);
for(var gun=1;gun<29;gun++)
for(var yy=y-4;yy<y+1;yy++)
for(var n=-3;n<4;n++)
if(getTile(px+gun*sin+n, yy, pz+gun*cos+n)==0){
setTile(px+gun*sin+n, yy, pz+gun*cos+n, 51);
}
dr3[n] = true;
dr3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(dr4a[n])){
ESP.heal(dragon[n]);
ESP.sbm("Dark Fog");
drx[n] = Player.getX();
dry[n] = Player.getY()-2;
drz[n] = Player.getZ();
for(var xx=drx[n]-2;xx<drx[n]+3;xx++)
for(var zz=drz[n]-2;zz<drz[n]+3;zz++)
setTile(xx, dry[n]+9, zz, 35, 10);
dr4[n] = true;
dr4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(hawk[0]!=null){
for(var n in hawk){
if(hawk[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(hw1a[n])){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y, zz, 9);
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs(y-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=3&&p2y<=3&&p2z<=3&&hawk[n]!=e&&Entity.getEntityTypeId(e)<64)
Entity.setHealth(e, Entity.getHealth(e)-5);
}
hw1x[n] = x;
hw1y[n] = y;
hw1z[n] = z;
hw1[n] = true;
hw1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(hw2a[n])){
hw2[n] = true;
hw2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(hw3a[n])){
if(co3b.indexOf(hawk[n])!=-1&&co3a[co3b.indexOf(hawk[n])]>150){
teleport(hawk[n], co3x[n], co3y[n]+1, co3z[n]);
co3b[n] = null;
}
else{
teleport(hawk[n], x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
}
hw3[n] = true;
hw3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(hw4a[n])){
ESP.heal(hawk[n]);
ESP.sbm("Darot");
hwx[n] = Player.getX();
hwy[n] = Player.getY()-2;
hwz[n] = Player.getZ();
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
if(Math.abs(sin)>Math.abs(cos)){
}
for(var xx=hwx[n]-1;xx<hwx[n]+2;xx++)
for(var yy=hwy[n]+1;yy<hwy[n]+7;yy++)
for(var zz=hwz[n]-1;zz<hwz[n]+2;zz++)
setTile(xx, yy, zz, 22);
setTile(hwx[n], hwy[n]+1, hwz[n], 89);
setTile(hwx[n], hwy[n]+2, hwz[n], 89);
if(Math.abs(sin)>Math.abs(cos)){
setTile(hwx[n], hwy[n]+7, hwz[n]+1, 22);
setTile(hwx[n], hwy[n]+7, hwz[n]-1, 22);
setTile(hwx[n], hwy[n]+6, hwz[n]+2, 22);
setTile(hwx[n], hwy[n]+6, hwz[n]+3, 22);
setTile(hwx[n], hwy[n]+5, hwz[n]+3, 22);
setTile(hwx[n], hwy[n]+4, hwz[n]+3, 22);
setTile(hwx[n], hwy[n]+3, hwz[n]+3, 22);
setTile(hwx[n], hwy[n]+6, hwz[n]-2, 22);
setTile(hwx[n], hwy[n]+6, hwz[n]-3, 22);
setTile(hwx[n], hwy[n]+6, hwz[n]-3, 22);
setTile(hwx[n], hwy[n]+5, hwz[n]-3, 22);
setTile(hwx[n], hwy[n]+4, hwz[n]-3, 22);
setTile(hwx[n], hwy[n]+3, hwz[n]-3, 22);
setTile(hwx[n], hwy[n]+7, hwz[n]+3, 8);
setTile(hwx[n], hwy[n]+7, hwz[n]-3, 8);
}
if(Math.abs(sin)<Math.abs(cos)){
setTile(hwx[n]+1, hwy[n]+7, hwz[n], 22);
setTile(hwx[n]-1, hwy[n]+7, hwz[n], 22);
setTile(hwx[n]+2, hwy[n]+6, hwz[n], 22);
setTile(hwx[n]+3, hwy[n]+6, hwz[n], 22);
setTile(hwx[n]+3, hwy[n]+5, hwz[n], 22);
setTile(hwx[n]+3, hwy[n]+4, hwz[n], 22);
setTile(hwx[n]+3, hwy[n]+3, hwz[n], 22);
setTile(hwx[n]-2, hwy[n]+6, hwz[n], 22);
setTile(hwx[n]-3, hwy[n]+6, hwz[n], 22);
setTile(hwx[n]-3, hwy[n]+5, hwz[n], 22);
setTile(hwx[n]-3, hwy[n]+4, hwz[n], 22);
setTile(hwx[n]-3, hwy[n]+3, hwz[n], 22);
setTile(hwx[n]+3, hwy[n]+7, hwz[n], 8);
setTile(hwx[n]-3, hwy[n]+7, hwz[n], 8);
}
setTile(hwx[n], hwy[n]+7, hwz[n], 22);
setTile(hwx[n], hwy[n]+8, hwz[n], 89);
hw4[n] = true;
hw4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(solid[0]!=null){
for(var n in solid){
if(solid[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(sd1a[n])){
sdxa = Math.abs(x-Player.getX());
sdza = Math.abs(z-Player.getZ());
if(sdxa>sdza){
for(var yy=y+1;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(x, yy, zz, 1);
}
else if(sdxa<sdza){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+5;yy++)
setTile(xx, yy, z, 1);
}
sd1[n] = true;
sd1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&Cool.isFinished(sd2a[n])){
for(var xx=x-4;xx<x+5;xx++){
for(var yy=y-1;yy<y+5;yy++){
for(var zz=z-4;zz<z+5;zz++){
if(getTile(xx, yy, zz)==8||getTile(xx, yy, zz)==9) setTile(xx, yy, zz, 79);
else if(getTile(xx, yy, zz)==10||getTile(xx, yy, zz)==11) setTile(xx, yy, zz, 49);

}}}
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs(y-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=6&&p2y<=6&&p2z<=6&&solid[n]!=e&&Entity.getEntityTypeId(e)<64)
Entity.setHealth(e, Entity.getHealth(e)-5);
}
sd2[n] = true;
sd2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&Cool.isFinished(sd3a[n])){
for(var xx=x-4;xx<x+5;xx++)
for(var yy=y-1;yy<y+5;yy++)
for(var zz=z-4;zz<z+5;zz++)
if(getTile(xx, yy, zz)!=0&&getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 1);
}
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs(y-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=6&&p2y<=6&&p2z<=6&&solid[n]!=e&&Entity.getEntityTypeId(e)<64)
Entity.setHealth(e, Entity.getHealth(e)-5);
}
sd3 = true;
sd3a = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(sd4a[n])){
ESP.heal(solid[n]);
ESP.sbm("Remote Solidify");
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(Player.getX()-Entity.getX(e));
p2y = Math.abs(Player.getY()-Entity.getY(e));
p2z = Math.abs(Player.getZ()-Entity.getZ(e));
if(p2x<=30&&p2y<=30&&p2z<=30&&solid[n]!=e&&Entity.getEntityTypeId(e)<64){
sd4x[n] = Entity.getX(e);
if(ESP.isPlayer(e)){
sd4y[n] = Entity.getY(e)-2;
}
else{
sd4y[n] = Entity.getY(e)-1;
}
sd4z[n] = Entity.getZ(e);
for(var xx=sd4x[n]-1;xx<sd4x[n]+2;xx++)
for(var yy=sd4y[n]+1;yy<sd4y[n]+4;yy++)
for(var zz=sd4z[n]-1;zz<sd4z[n]+2;zz++)
setTile(xx, yy, zz, 1);
sdx.push(sd4x[n]);
sdy.push(sd4y[n]);
sdz.push(sd4z[n]);
}
}
sd4[n] = true;
sd4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(gravity[0]!=null){
for(var n in gravity){
if(gravity[n]==ESP.getUser()){
if(i==302&&Cool.isFinished(gr1a[n])){
if(b==7||b==95){
ESP.antiLack(3);
explode(x, y+1, z, 3);
}
else{
setTile(x, y, z, 0);
setTile(x, y+1, z, b);
}
gr1x[n] = x;
gr1y[n] = y;
gr1z[n] = z;
gr1b[n] = b;
gr1c[n] = bd;
gr1[n] = true;
gr1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(i==304&&Cool.isFinished(gr3a[n])){
gr3x[n] = Player.getX();
gr3y[n] = Player.getY()-2;
gr3z[n] = Player.getZ();
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(gr3x-Entity.getX(e));
p2y = Math.abs((gr3y+1)-Entity.getY(e));
p2z = Math.abs(gr3z-Entity.getZ(e));
if(p2x<=20&&p2y<=20&&p2z<=20&&gravity[n]!=e&&Entity.getEntityTypeId(e)<64){
teleport(e, Entity.getX(e), Entity.getY(e)+13, Entity.getZ(e));
explode(Entity.getX(e), Entity.getY(e)+0.5, Entity.getZ(e), 1);
}
}
gr3[n] = true;
gr3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&Cool.isFinished(gr4a[n])){
ESP.heal(gravity);
ESP.sbm("Gratity Warp");
grx[n] = Player.getX();
gry[n] = Player.getY()-2;
grz[n] = Player.getZ();
setTile(grx[n]+7, gry[n]+1, grz[n]+7, 2);
setTile(grx[n]+7, gry[n]+1, grz[n], 2);
setTile(grx[n]+7, gry[n]+1, grz[n]-7, 2);
setTile(grx[n], gry[n]+1, grz[n]+7, 2);
setTile(grx[n], gry[n]+1, grz[n]-7, 2);
setTile(grx[n]-7, gry[n]+1, grz[n]+7, 2);
setTile(grx[n]-7, gry[n]+1, grz[n], 2);
setTile(grx[n]-7, gry[n]+1, grz[n]-7, 2);
gr4[n] = true;
gr4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}


//Skill 1
if(i==302){
//hass1
if(hass==ESP.getUser()&&hass1a==0){
teleport(ESP.getUser(), x+2*(x-Player.getX()), y+3, z+2*(z-Player.getZ()));
ESP.antiLack(3);
explode(x, y+1.5, z, 2.5);
hass1 = true;
hass1a = 150;
skillCool(ESP.getUser(), 1);
}
//sikill1
if(sikill==ESP.getUser()&&sk1a==0){
teleport(ESP.getUser(), x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
sk1 = true;
sk1a = 150;
skillCool(ESP.getUser(), 1);
}
//black1
if(black==ESP.getUser()&&bl1a==0){
px = Math.floor(Player.getX());
py = y+2;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var yy=py+1;yy<py+7;yy++)
setTile(px, yy, pz, 49);
setTile(px, py+7, pz, 49);
bl1 = true;
bl1a = 150;
skillCool(ESP.getUser(), 1);
}
//slash1
if(slash==ESP.getUser()&&sl1a==0){
ESP.antiLack(3);
explode(x+(x-Player.getX()), y+1, z+(z-Player.getZ()), 3);
sl1 = true;
sl1a = 150;
skillCool(ESP.getUser(), 1);
}
//night1
if(night==ESP.getUser()&&ni1a==0){
teleport(ESP.getUser(), x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs((y+1)-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=5&&p2y<=5&&p2z<=5&&ESP.getUser()!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-6);
}
}
ni1 = true;
ni1a = 150;
skillCool(ESP.getUser(), 1);
}
//gem1
if(gem==ESP.getUser()&&ge1a==0){
Entity.setHealth(ESP.getUser(), Entity.getHealth(ESP.getUser())+6);
ge1 = true;
ge1a = 150;
skillCool(ESP.getUser(), 1);
}
//mush1
if(mush==ESP.getUser()&&mu1a==0){
setTile(x+1, y+1, z, 39);
setTile(x-1, y+1, z, 39);
setTile(x, y+1, z+1, 40);
setTile(x, y+1, z-1, 40);
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs((y+1)-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=3&&p2y<=3&&p2z<=3&&mush!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-3);
}
}
mu1 = true;
mu1a = 150;
skillCool(ESP.getUser(), 1);
}
//ender1
if(ender==ESP.getUser()&&end1a==0){
endxa = Math.abs(x-Player.getX());
endza = Math.abs(z-Player.getZ());
if(endxa>endza){
for(var yy=y+1;yy<y+4;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(x, yy, zz, 121);
}
else if(endxa<endza){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+4;yy++)
setTile(xx, yy, z, 121);
}
end1 = true;
end1a = 150;
skillCool(ESP.getUser(), 1);
}
//taiga1
if(taiga==ESP.getUser()&&ta1a==0){
for(var yy=y+1;yy<y+7;yy++)
setTile(x, yy, z, 17, 1);
setTile(x-2, y+3, z-1, 18, 1);
setTile(x-2, y+3, z, 18, 1);
setTile(x-2, y+3, z+1, 18, 1);
setTile(x-2, y+5, z-1, 18, 1);
setTile(x-2, y+5, z, 18, 1);
setTile(x-2, y+5, z+1, 18, 1);
setTile(x-1, y+3, z-2, 18, 1);
setTile(x-1, y+3, z-1, 18, 1);
setTile(x-1, y+3, z, 18, 1);
setTile(x-1, y+3, z+1, 18, 1);
setTile(x-1, y+3, z+2, 18, 1);
setTile(x-1, y+4, z, 18, 1);
setTile(x-1, y+5, z-2, 18, 1);
setTile(x-1, y+5, z-1, 18, 1);
setTile(x-1, y+5, z, 18, 1);
setTile(x-1, y+5, z+1, 18, 1);
setTile(x-1, y+5, z+2, 18, 1);
setTile(x-1, y+6, z, 18, 1);
setTile(x-1, y+8, z, 18, 1);
setTile(x, y+3, z-2, 18, 1);
setTile(x, y+3, z-1, 18, 1);
setTile(x, y+3, z+1, 18, 1);
setTile(x, y+3, z+2, 18, 1);
setTile(x, y+4, z-1, 18, 1);
setTile(x, y+4, z+1, 18, 1);
setTile(x, y+5, z-2, 18, 1);
setTile(x, y+5, z-1, 18, 1);
setTile(x, y+5, z+1, 18, 1);
setTile(x, y+5, z+2, 18, 1);
setTile(x, y+6, z-1, 18, 1);
setTile(x, y+6, z+1, 18, 1);
setTile(x, y+7, z, 18, 1);
setTile(x, y+8, z-1, 18, 1);
setTile(x, y+8, z, 18, 1);
setTile(x, y+8, z+1, 18, 1);
setTile(x+1, y+3, z-2, 18, 1);
setTile(x+1, y+3, z-1, 18, 1);
setTile(x+1, y+3, z, 18, 1);
setTile(x+1, y+3, z+1, 18, 1);
setTile(x+1, y+3, z+2, 18, 1);
setTile(x+1, y+4, z, 18, 1);
setTile(x+1, y+5, z-2, 18, 1);
setTile(x+1, y+5, z-1, 18, 1);
setTile(x+1, y+5, z, 18, 1);
setTile(x+1, y+5, z+1, 18, 1);
setTile(x+1, y+5, z+2, 18, 1);
setTile(x+1, y+6, z, 18, 1);
setTile(x+1, y+8, z, 18, 1);
setTile(x+2, y+3, z-1, 18, 1);
setTile(x+2, y+3, z, 18, 1);
setTile(x+2, y+3, z+1, 18, 1);
setTile(x+2, y+5, z-1, 18, 1);
setTile(x+2, y+5, z, 18, 1);
setTile(x+2, y+5, z+1, 18, 1);
ta1 = true;
ta1a = 150;
skillCool(ESP.getUser(), 1);
}
//ruin1
if(ruin==ESP.getUser()&&ru1a==0){
ESP.antiLack(3);
explode(x, y+1, z, 3);
ru1 = true;
ru1a = 150;
skillCool(ESP.getUser(), 1);
}
//swamp1
if(swamp==ESP.getUser()&&sw1a==0){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y, zz, 9);
setTile(x, y+1, z, 111);
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs((y+1)-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=3&&p2y<=3&&p2z<=3&&swamp!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-4);
}
}
sw1 = true;
sw1a = 150;
skillCool(ESP.getUser(), 1);
}
//asum1
if(asum==ESP.getUser()&&asum1a==0){
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 34);
Level.spawnMob(x, y+3, z, 34);
Level.spawnMob(x, y+3, z, 34);
asum1 = true;
asum1a = 150;
skillCool(ESP.getUser(), 1);
}
//amage1
if(amage==ESP.getUser()&&am1a==0){
teleport(ESP.getUser(), x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
am1 = true;
am1a = 150;
skillCool(ESP.getUser(), 1);
}
//puella1
if(puella==ESP.getUser()&&pm1a==0){
teleport(ESP.getUser(), x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
pm1 = true;
pm1a = 150;
skillCool(ESP.getUser(), 1);
}
//hbuild1
if(hbuild==ESP.getUser()&&hb1a==0){
setTile(x, y+1, z, 85);
setTile(x, y+2, z, 85);
setTile(x, y+3, z, 85);
setTile(x, y+4, z, 85);
setTile(x, y+5, z, 85);
hbxa = Math.abs(x-Player.getX());
hbza = Math.abs(z-Player.getZ());
if(hbxa>hbza){
setTile(x, y+5, z+1, 85);
setTile(x, y+5, z-1, 85);
setTile(x, y+4, z+1, 89);
setTile(x, y+4, z-1, 89);
}
else if(hbxa<hbza){
setTile(x+1, y+5, z, 85);
setTile(x-1, y+5, z, 85);
setTile(x+1, y+4, z, 89);
setTile(x-1, y+4, z, 89);
}
hb1 = true;
hb1a = 150;
skillCool(ESP.getUser(), 1);
}
//scalar1
if(scalar==ESP.getUser()&&sc1a==0){
ESP.antiLack(3);
explode(x, y+1.5, z, 3);
sc1x = x;
sc1y = y;
sc1z = z;
sc1 = true;
sc1a = 150;
skillCool(ESP.getUser(), 1);
}
//vector1
if(vector==ESP.getUser()&&v1a==0){
ESP.antiLack(3);
explode(x, y+1.2, z, 2.5);
vxa = x-Player.getX();
vza = z-Player.getZ();
v1x = x;
v1y = y;
v1z = z;
v1 = true;
v1a = 150;
skillCool(ESP.getUser(), 1);
}
//tensor1
if(tensor==ESP.getUser()){
if(te1a==0){
teleport(ESP.getUser(), x, y+3, z);
te1 = true;
te1a = 150;
skillCool(ESP.getUser(), 1);
}
else if(te1a>105){
teleport(ESP.getUser(), x, y+3, z);
}
}
//ameca1
if(ameca==ESP.getUser()&&ame1a==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(px+2*sin, y+2, pz+2*cos, 247);
setTile(px+3*sin, y+2, pz+3*cos, 247);
setTile(px+4*sin, y+2, pz+4*cos, 247);
ame1 = true;
ame1a = 150;
skillCool(ESP.getUser(), 1);
}
//seal1
if(seal==ESP.getUser()&&sea1a==0){
setTile(x+2, y+2, z-1, 20);
setTile(x+2, y+2, z, 20);
setTile(x+2, y+2, z+1, 20);
setTile(x-2, y+2, z-1, 20);
setTile(x-2, y+2, z, 20);
setTile(x-2, y+2, z+1, 20);
setTile(x+1, y+2, z+2, 20);
setTile(x, y+2, z+2, 20);
setTile(x-1, y+2, z+2, 20);
setTile(x+1, y+2, z-2, 20);
setTile(x, y+2, z-2, 20);
setTile(x-1, y+2, z-2, 20);
sea1 = true;
sea1a = 150;
skillCool(ESP.getUser(), 1);
}
//angel1
if(angel==ESP.getUser()&&an1a==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<20;gun++)
setTile(px+gun*sin, y+2, pz+gun*cos, 155);
an1 = true;
an1a = 150;
skillCool(ESP.getUser(), 1);
}
//white1
if(white==ESP.getUser()&&wh1a==0){
teleport(ESP.getUser(), x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
wh1 = true;
wh1a = 150;
skillCool(ESP.getUser(), 1);
}
//world1
if(world==ESP.getUser()&&wo1a==0){
teleport(ESP.getUser(), x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
wo1 = true;
wo1a = 150;
skillCool(ESP.getUser(), 1);
}

}

//Skill 2
if(i==303){
//hass2
if(hass==ESP.getUser()&&hass2a==0){
if(hass2b==false){
hass2x = x;
hass2y = y;
hass2z = z;
hass2c = [b, bd, 3];
setTile(x, y, z, 49);
hass2b = true;
}
else if(hass2b==true){
arroundMobHealthDown(hass, 10, 5);
teleport(ESP.getUser(), hass2x, hass2y+3, hass2z);
hass2b = false;
hass2 = true;
hass2a = 300;
}
skillCool(ESP.getUser(), 2);
}
//black2
if(black==ESP.getUser()&&bl2a==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<25;gun++)
setTile(px+gun*sin, y+2, pz+gun*cos, 49);
bl2 = true;
bl2a = 300;
skillCool(ESP.getUser(), 2);
}
//night2
if(night==ESP.getUser()&&ni2a==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
teleport(ESP.getUser(), px+8*sin, y+3, pz+3*cos);
setTile(px, y+1, pz, 49);
ni2 = true;
ni2a = 300;
skillCool(ESP.getUser(), 2);
}
//gem2
if(gem==ESP.getUser()&&ge2a==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw()+90);
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<12;gun++){
setTile(px+gun*sin, y+2, pz+gun*cos, 155);
setTile(px-gun*sin, y+2, pz-gun*cos, 155);
}
ge2 = true;
ge2a = 300;
skillCool(ESP.getUser(), 2);
}
//dra2
if(dra==ESP.getUser()&&dc2a==0){
arroundMobHealthDown(dra, 20, 7);
Entity.setHealth(dra, Entity.getHealth(dra)+7);
dc2 = true;
dc2a = 300;
skillCool(ESP.getUser(), 2);
}
//mush2
if(mush==ESP.getUser()&&mu2a==0){
for(var yy=y+1;yy<y+6;yy++)
setTile(x, yy, z, 99, 10);
for(var xx=x-2;xx<x+3;xx++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx, y+6, zz, 99, 5);
setTile(x-3, y+6, z-2, 99, 1);
setTile(x-3, y+6, z-1, 99, 4);
setTile(x-3, y+6, z, 99, 4);
setTile(x-3, y+6, z+1, 99, 4);
setTile(x-3, y+6, z+2, 99, 7);
setTile(x-2, y+6, z-3, 99, 1);
setTile(x-2, y+6, z+3, 99, 7);
setTile(x-1, y+6, z-3, 99, 2);
setTile(x-1, y+6, z+3, 99, 8);
setTile(x, y+6, z-3, 99, 2);
setTile(x, y+6, z+3, 99, 8);
setTile(x+1, y+6, z-3, 99, 2);
setTile(x+1, y+6, z+3, 99, 8);
setTile(x+2, y+6, z-3, 99, 3);
setTile(x+2, y+6, z+3, 99, 9);
setTile(x+3, y+6, z-2, 99, 3);
setTile(x+3, y+6, z-1, 99, 6);
setTile(x+3, y+6, z, 99, 6);
setTile(x+3, y+6, z+1, 99, 6);
setTile(x+3, y+6, z+2, 99, 9);
mu2 = true;
mu2a = 300;
skillCool(ESP.getUser(), 2);
}
//ender2
if(ender==ESP.getUser()&&end2a==0){
for(var xx=x-1;xx<x+2;xx++){
for(var yy=y+1;yy<y+4;yy++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx, yy, z+2, 98);
setTile(xx, yy, z-2, 98);
setTile(x+2, yy, zz, 98);
setTile(x-2, yy, zz, 98);
setTile(xx, y+4, zz, 98);
}}}
Level.spawnMob(x+0.5, y+12, z+0.5, 65);
end2 = true;
end2a = 300;
skillCool(ESP.getUser(), 2);
}
//taiga2
if(taiga==ESP.getUser()&&ta2a==0){
for(var xx=x-1;xx<x+1;xx++)
for(var yy=y+1;yy<y+17;yy++)
for(var zz=z;zz<z+2;zz++)
setTile(xx, yy, zz, 17, 1);
setTile(x-4, y+5, z, 18, 1);
setTile(x-4, y+5, z+1, 18, 1);
setTile(x-4, y+6, z, 18, 1);
setTile(x-4, y+6, z+1, 18, 1);
setTile(x-4, y+9, z, 18, 1);
setTile(x-4, y+9, z+1, 18, 1);
setTile(x-3, y+5, z-2, 18, 1);
setTile(x-3, y+5, z-1, 18, 1);
setTile(x-3, y+5, z, 18, 1);
setTile(x-3, y+5, z+1, 18, 1);
setTile(x-3, y+5, z+2, 18, 1);
setTile(x-3, y+5, z+3, 18, 1);
setTile(x-3, y+6, z-2, 18, 1);
setTile(x-3, y+6, z-1, 18, 1);
setTile(x-3, y+6, z, 18, 1);
setTile(x-3, y+6, z+1, 18, 1);
setTile(x-3, y+6, z+2, 18, 1);
setTile(x-3, y+6, z+3, 18, 1);
setTile(x-3, y+7, z, 18, 1);
setTile(x-3, y+7, z+1, 18, 1);
setTile(x-3, y+8, z, 18, 1);
setTile(x-3, y+8, z+1, 18, 1);
setTile(x-3, y+9, z-2, 18, 1);
setTile(x-3, y+9, z-1, 18, 1);
setTile(x-3, y+9, z, 18, 1);
setTile(x-3, y+9, z+1, 18, 1);
setTile(x-3, y+9, z+2, 18, 1);
setTile(x-3, y+9, z+3, 18, 1);
setTile(x-3, y+10, z, 18, 1);
setTile(x-3, y+10, z+1, 18, 1);
setTile(x-3, y+13, z, 18, 1);
setTile(x-3, y+13, z+1, 18, 1);
setTile(x-2, y+5, z-2, 18, 1);
setTile(x-2, y+5, z-1, 18, 1);
setTile(x-2, y+5, z, 18, 1);
setTile(x-2, y+5, z+1, 18, 1);
setTile(x-2, y+5, z+2, 18, 1);
setTile(x-2, y+5, z+3, 18, 1);
setTile(x-2, y+6, z-2, 18, 1);
setTile(x-2, y+6, z-1, 18, 1);
setTile(x-2, y+6, z, 18, 1);
setTile(x-2, y+6, z+1, 18, 1);
setTile(x-2, y+6, z+2, 18, 1);
setTile(x-2, y+6, z+3, 18, 1);
setTile(x-2, y+7, z-1, 18, 1);
setTile(x-2, y+7, z, 18, 1);
setTile(x-2, y+7, z+1, 18, 1);
setTile(x-2, y+7, z+2, 18, 1);
setTile(x-2, y+8, z-1, 18, 1);
setTile(x-2, y+8, z, 18, 1);
setTile(x-2, y+8, z+1, 18, 1);
setTile(x-2, y+8, z+2, 18, 1);
setTile(x-2, y+9, z-2, 18, 5);
setTile(x-2, y+9, z-1, 18, 1);
setTile(x-2, y+9, z, 18, 1);
setTile(x-2, y+9, z+1, 18, 1);
setTile(x-2, y+9, z+2, 18, 1);
setTile(x-2, y+9, z+3, 18, 1);
setTile(x-2, y+10, z-1, 18, 1);
setTile(x-2, y+10, z, 18, 1);
setTile(x-2, y+10, z+1, 18, 1);
setTile(x-2, y+10, z+2, 18, 1);
setTile(x-2, y+11, z, 18, 1);
setTile(x-2, y+11, z+1, 18, 1);
setTile(x-2, y+12, z, 18, 1);
setTile(x-2, y+12, z+1, 18, 1);
setTile(x-2, y+13, z-1, 18, 1);
setTile(x-2, y+13, z, 18, 1);
setTile(x-2, y+13, z+1, 18, 1);
setTile(x-2, y+13, z+2, 18, 1);
setTile(x-2, y+14, z, 18, 1);
setTile(x-2, y+14, z+1, 18, 1);
setTile(x-2, y+17, z, 18, 1);
setTile(x-2, y+17, z+1, 18, 1);
setTile(x-1, y+5, z-3, 18, 1);
setTile(x-1, y+5, z-2, 18, 1);
setTile(x-1, y+5, z-1, 18, 1);
setTile(x-1, y+5, z+2, 18, 1);
setTile(x-1, y+5, z+3, 18, 1);
setTile(x-1, y+5, z+4, 18, 1);
setTile(x-1, y+6, z-3, 18, 1);
setTile(x-1, y+6, z-2, 18, 1);
setTile(x-1, y+6, z-1, 18, 1);
setTile(x-1, y+6, z+2, 18, 1);
setTile(x-1, y+6, z+3, 18, 1);
setTile(x-1, y+6, z+4, 18, 1);
setTile(x-1, y+7, z-2, 18, 1);
setTile(x-1, y+7, z-1, 18, 1);
setTile(x-1, y+7, z+2, 18, 1);
setTile(x-1, y+7, z+3, 18, 1);
setTile(x-1, y+8, z-2, 18, 1);
setTile(x-1, y+8, z-1, 18, 1);
setTile(x-1, y+8, z+2, 18, 1);
setTile(x-1, y+8, z+3, 18, 1);
setTile(x-1, y+9, z-3, 18, 1);
setTile(x-1, y+9, z-2, 18, 1);
setTile(x-1, y+9, z-1, 18, 1);
setTile(x-1, y+9, z+2, 18, 1);
setTile(x-1, y+9, z+3, 18, 1);
setTile(x-1, y+9, z+4, 18, 1);
setTile(x-1, y+10, z-2, 18, 5);
setTile(x-1, y+10, z-1, 18, 1);
setTile(x-1, y+10, z+2, 18, 1);
setTile(x-1, y+10, z+3, 18, 1);
setTile(x-1, y+11, z-1, 18, 1);
setTile(x-1, y+11, z+2, 18, 1);
setTile(x-1, y+12, z-1, 18, 1);
setTile(x-1, y+12, z+2, 18, 1);
setTile(x-1, y+13, z-2, 18, 1);
setTile(x-1, y+13, z-1, 18, 1);
setTile(x-1, y+13, z+2, 18, 1);
setTile(x-1, y+13, z+3, 18, 1);
setTile(x-1, y+14, z-1, 18, 1);
setTile(x-1, y+14, z+2, 18, 1);
setTile(x-1, y+17, z-1, 18, 1);
setTile(x-1, y+17, z, 17, 1);
setTile(x-1, y+17, z+1, 18, 1);
setTile(x-1, y+17, z+2, 18, 1);
setTile(x-1, y+18, z, 18, 1);
setTile(x-1, y+18, z+1, 18, 1);
setTile(x, y+5, z-3, 18, 1);
setTile(x, y+5, z-2, 18, 1);
setTile(x, y+5, z-1, 18, 1);
setTile(x, y+5, z+2, 18, 1);
setTile(x, y+5, z+3, 18, 1);
setTile(x, y+5, z+4, 18, 1);
setTile(x, y+6, z-3, 18, 1);
setTile(x, y+6, z-2, 18, 1);
setTile(x, y+6, z-1, 18, 1);
setTile(x, y+6, z+2, 18, 1);
setTile(x, y+6, z+3, 18, 1);
setTile(x, y+6, z+4, 18, 1);
setTile(x, y+7, z-2, 18, 1);
setTile(x, y+7, z-1, 18, 1);
setTile(x, y+7, z+2, 18, 1);
setTile(x, y+7, z+3, 18, 1);
setTile(x, y+8, z-2, 18, 1);
setTile(x, y+8, z-1, 18, 1);
setTile(x, y+8, z+2, 18, 1);
setTile(x, y+8, z+3, 18, 1);
setTile(x, y+9, z-3, 18, 1);
setTile(x, y+9, z-2, 18, 1);
setTile(x, y+9, z-1, 18, 1);
setTile(x, y+9, z+2, 18, 1);
setTile(x, y+9, z+3, 18, 1);
setTile(x, y+9, z+4, 18, 1);
setTile(x, y+10, z-2, 18, 1);
setTile(x, y+10, z-1, 18, 1);
setTile(x, y+10, z+2, 18, 1);
setTile(x, y+10, z+3, 18, 5);
setTile(x, y+11, z-1, 18, 1);
setTile(x, y+11, z+2, 18, 1);
setTile(x, y+12, z-1, 18, 1);
setTile(x, y+12, z+2, 18, 1);
setTile(x, y+13, z-2, 18, 1);
setTile(x, y+13, z-1, 18, 1);
setTile(x, y+13, z+2, 18, 1);
setTile(x, y+13, z+3, 18, 1);
setTile(x, y+14, z-1, 18, 1);
setTile(x, y+14, z+2, 18, 1);
setTile(x, y+17, z-1, 18, 1);
setTile(x, y+17, z, 18, 1);
setTile(x, y+17, z+1, 18, 1);
setTile(x, y+17, z+2, 18, 1);
setTile(x, y+18, z, 18, 1);
setTile(x, y+18, z+1, 18, 1);
setTile(x+1, y+5, z-2, 18, 1);
setTile(x+1, y+5, z-1, 18, 1);
setTile(x+1, y+5, z, 18, 1);
setTile(x+1, y+5, z+1, 18, 1);
setTile(x+1, y+5, z+2, 18, 1);
setTile(x+1, y+5, z+3, 18, 1);
setTile(x+1, y+6, z-2, 18, 1);
setTile(x+1, y+6, z-1, 18, 1);
setTile(x+1, y+6, z, 18, 1);
setTile(x+1, y+6, z+1, 18, 1);
setTile(x+1, y+6, z+2, 18, 1);
setTile(x+1, y+6, z+3, 18, 1);
setTile(x+1, y+7, z-1, 18, 1);
setTile(x+1, y+7, z, 18, 1);
setTile(x+1, y+7, z+1, 18, 1);
setTile(x+1, y+7, z+2, 18, 1);
setTile(x+1, y+8, z-1, 18, 1);
setTile(x+1, y+8, z, 18, 1);
setTile(x+1, y+8, z+1, 18, 1);
setTile(x+1, y+8, z+2, 18, 1);
setTile(x+1, y+9, z-2, 18, 1);
setTile(x+1, y+9, z-1, 18, 1);
setTile(x+1, y+9, z, 18, 1);
setTile(x+1, y+9, z+1, 18, 1);
setTile(x+1, y+9, z+2, 18, 1);
setTile(x+1, y+9, z+3, 18, 1);
setTile(x+1, y+10, z-1, 18, 1);
setTile(x+1, y+10, z, 18, 1);
setTile(x+1, y+10, z+1, 18, 1);
setTile(x+1, y+10, z+2, 18, 1);
setTile(x+1, y+11, z, 18, 1);
setTile(x+1, y+11, z+1, 18, 1);
setTile(x+1, y+12, z, 18, 1);
setTile(x+1, y+12, z+1, 18, 1);
setTile(x+1, y+13, z-1, 18, 1);
setTile(x+1, y+13, z, 18, 1);
setTile(x+1, y+13, z+1, 18, 1);
setTile(x+1, y+13, z+2, 18, 1);
setTile(x+1, y+14, z, 18, 1);
setTile(x+1, y+14, z+1, 18, 1);
setTile(x+1, y+17, z, 18, 1);
setTile(x+1, y+17, z+1, 18, 1);
setTile(x+2, y+5, z-2, 18, 1);
setTile(x+2, y+5, z-1, 18, 1);
setTile(x+2, y+5, z, 18, 1);
setTile(x+2, y+5, z+1, 18, 1);
setTile(x+2, y+5, z+2, 18, 1);
setTile(x+2, y+5, z+3, 18, 1);
setTile(x+2, y+6, z-2, 18, 1);
setTile(x+2, y+6, z-1, 18, 1);
setTile(x+2, y+6, z, 18, 1);
setTile(x+2, y+6, z+1, 18, 1);
setTile(x+2, y+6, z+2, 18, 1);
setTile(x+2, y+6, z+3, 18, 1);
setTile(x+2, y+7, z, 18, 1);
setTile(x+2, y+7, z+1, 18, 1);
setTile(x+2, y+8, z, 18, 1);
setTile(x+2, y+8, z+1, 18, 1);
setTile(x+2, y+9, z-2, 18, 1);
setTile(x+2, y+9, z-1, 18, 1);
setTile(x+2, y+9, z, 18, 1);
setTile(x+2, y+9, z+1, 18, 1);
setTile(x+2, y+9, z+2, 18, 1);
setTile(x+2, y+9, z+3, 18, 1);
setTile(x+2, y+10, z, 18, 1);
setTile(x+2, y+10, z+1, 18, 1);
setTile(x+2, y+13, z, 18, 1);
setTile(x+2, y+13, z+1, 18, 1);
setTile(x+3, y+5, z, 18, 1);
setTile(x+3, y+5, z+1, 18, 1);
setTile(x+3, y+6, z, 18, 1);
setTile(x+3, y+6, z+1, 18, 1);
setTile(x+3, y+9, z, 18, 1);
setTile(x+3, y+9, z+1, 18, 1);
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs((y+1)-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=6&&p2y<=6&&p2z<=6&&taiga!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-4);
}
}
ta2 = true;
ta2a = 300;
skillCool(ESP.getUser(), 2);
}
//ruin2
if(ruin==ESP.getUser()&&ru2a==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
for(var gun=3;gun<25;gun++)
explode(px+gun*sin, y+2, pz+gun*cos, 1.8);
ru2 = true;
ru2a = 300;
skillCool(ESP.getUser(), 2);
}
//swamp2
if(swamp==ESP.getUser()&&sw2a==0){
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y+4;yy<y+8;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 18)
for(var yy=y+1;yy<y+7;yy++)
setTile(x, yy, z, 17);
setTile(x-3, y+4, z-2, 18);
setTile(x-3, y+4, z-1, 18);
setTile(x-3, y+4, z, 18);
setTile(x-3, y+4, z+1, 18);
setTile(x-3, y+4, z+2, 18);
setTile(x-3, y+4, z+3, 18);
setTile(x-3, y+5, z-2, 18);
setTile(x-3, y+5, z-1, 18);
setTile(x-3, y+5, z, 18);
setTile(x-3, y+5, z+1, 18);
setTile(x-3, y+5, z+2, 18);
setTile(x-2, y+4, z-3, 18);
setTile(x-2, y+4, z-2, 18);
setTile(x-2, y+4, z-1, 18);
setTile(x-2, y+4, z, 18);
setTile(x-2, y+4, z+1, 18);
setTile(x-2, y+4, z+2, 18);
setTile(x-2, y+4, z+3, 18);
setTile(x-2, y+5, z-3, 18);
setTile(x-2, y+5, z-2, 18);
setTile(x-2, y+5, z-1, 18);
setTile(x-2, y+5, z, 18);
setTile(x-2, y+5, z+1, 18);
setTile(x-2, y+5, z+2, 18);
setTile(x-2, y+5, z+3, 18);
setTile(x-2, y+6, z-1, 18);
setTile(x-2, y+6, z, 18);
setTile(x-2, y+6, z+1, 18);
setTile(x-2, y+6, z+2, 18);
setTile(x-2, y+7, z-1, 18);
setTile(x-2, y+7, z, 18);
setTile(x-2, y+7, z+1, 18);
setTile(x-1, y+4, z-3, 18);
setTile(x-1, y+4, z-2, 18);
setTile(x-1, y+4, z+2, 18);
setTile(x-1, y+4, z+3, 18);
setTile(x-1, y+5, z-3, 18);
setTile(x-1, y+5, z-2, 18);
setTile(x-1, y+5, z+2, 18);
setTile(x-1, y+5, z+3, 18);
setTile(x-1, y+6, z-2, 18);
setTile(x-1, y+6, z+2, 18);
setTile(x-1, y+7, z-2, 18);
setTile(x-1, y+7, z+2, 18);
setTile(x, y+4, z-3, 18);
setTile(x, y+4, z-2, 18);
setTile(x, y+4, z+2, 18);
setTile(x, y+4, z+3, 18);
setTile(x, y+5, z-3, 18);
setTile(x, y+5, z-2, 18);
setTile(x, y+5, z+2, 18);
setTile(x, y+5, z+3, 18);
setTile(x, y+6, z-2, 18);
setTile(x, y+6, z+2, 18);
setTile(x, y+7, z-2, 18);
setTile(x, y+7, z+2, 18);
setTile(x+1, y+4, z-3, 18);
setTile(x+1, y+4, z-2, 18);
setTile(x+1, y+4, z+2, 18);
setTile(x+1, y+4, z+3, 18);
setTile(x+1, y+5, z-3, 18);
setTile(x+1, y+5, z-2, 18);
setTile(x+1, y+5, z+2, 18);
setTile(x+1, y+5, z+3, 18);
setTile(x+1, y+6, z-2, 18);
setTile(x+1, y+6, z+2, 18);
setTile(x+1, y+7, z-2, 18);
setTile(x+1, y+7, z+2, 18);
setTile(x+2, y+4, z-3, 18);
setTile(x+2, y+4, z-2, 18);
setTile(x+2, y+4, z-1, 18);
setTile(x+2, y+4, z, 18);
setTile(x+2, y+4, z+1, 18);
setTile(x+2, y+4, z+2, 18);
setTile(x+2, y+4, z+3, 18);
setTile(x+2, y+5, z-3, 18);
setTile(x+2, y+5, z-2, 18);
setTile(x+2, y+5, z-1, 18);
setTile(x+2, y+5, z, 18);
setTile(x+2, y+5, z+1, 18);
setTile(x+2, y+5, z+2, 18);
setTile(x+2, y+5, z+3, 18);
setTile(x+2, y+6, z-2, 18);
setTile(x+2, y+6, z-1, 18);
setTile(x+2, y+6, z, 18);
setTile(x+2, y+6, z+1, 18);
setTile(x+2, y+6, z+2, 18);
setTile(x+2, y+7, z-1, 18);
setTile(x+2, y+7, z, 18);
setTile(x+2, y+7, z+1, 18);
setTile(x+3, y+4, z-2, 18);
setTile(x+3, y+4, z-1, 18);
setTile(x+3, y+4, z, 18);
setTile(x+3, y+4, z+1, 18);
setTile(x+3, y+4, z+2, 18);
setTile(x+3, y+4, z+3, 18);
setTile(x+3, y+5, z-3, 18);
setTile(x+3, y+5, z-2, 18);
setTile(x+3, y+5, z-1, 18);
setTile(x+3, y+5, z, 18);
setTile(x+3, y+5, z+1, 18);
setTile(x+3, y+5, z+2, 18);
setTile(x-4, y+1, z-1, 106, 8);
setTile(x-4, y+1, z, 106, 8);
setTile(x-4, y+1, z+1, 106, 8);
setTile(x-4, y+1, z+2, 106, 8);
setTile(x-4, y+1, z+3, 106, 8);
setTile(x-4, y+2, z-1, 106, 8);
setTile(x-4, y+2, z, 106, 8);
setTile(x-4, y+2, z+1, 106, 8);
setTile(x-4, y+2, z+2, 106, 8);
setTile(x-4, y+2, z+3, 106, 8);
setTile(x-4, y+3, z-1, 106, 8);
setTile(x-4, y+3, z, 106, 8);
setTile(x-4, y+3, z+1, 106, 8);
setTile(x-4, y+3, z+2, 106, 8);
setTile(x-4, y+3, z+3, 106, 8);
setTile(x-4, y+4, z-1, 106, 8);
setTile(x-4, y+4, z, 106, 8);
setTile(x-4, y+4, z+1, 106, 8);
setTile(x-4, y+4, z+2, 106, 8);
setTile(x-4, y+4, z+3, 106, 8);
setTile(x-4, y+5, z-1, 106, 8);
setTile(x-4, y+5, z+2, 106, 8);
setTile(x-3, y+1, z+4, 106, 4);
setTile(x-3, y+2, z+4, 106, 4);
setTile(x-3, y+3, z+4, 106, 4);
setTile(x-3, y+4, z+4, 106, 4);
setTile(x-3, y+6, z, 106, 8);
setTile(x-3, y+6, z+1, 106, 8);
setTile(x-3, y+6, z+2, 106, 8);
setTile(x-3, y+7, z+1, 106, 8);
setTile(x-2, y+6, z-2, 106, 8);
setTile(x-2, y+7, z-2, 106, 8);
setTile(x-1, y+6, z-3, 106, 1);
setTile(x, y+6, z-3, 106, 1);
setTile(x, y+6, z+3, 106, 4);
setTile(x, y+7, z+3, 106, 4);
setTile(x+3, y+6, z-1, 106, 2);
setTile(x+3, y+6, z, 106, 2);
setTile(x+3, y+7, z-1, 106, 2);
setTile(x+2, y+7, z+2, 106, 4);
for(var yy=y+1;yy<y+5;yy++){
setTile(x+4, yy, z-1, 106, 2);
setTile(x+3, yy, z+4, 106, 4);
}
sw2 = true;
sw2a = 300;
skillCool(ESP.getUser(), 2);
}
//asum2
if(asum==ESP.getUser()&&asum2a==0){
Level.spawnMob(x, y+3, z, 36);
Level.spawnMob(x, y+3, z, 36);
Level.spawnMob(x, y+3, z, 36);
Level.spawnMob(x, y+3, z, 36);
Level.spawnMob(x, y+3, z, 38);
Level.spawnMob(x, y+3, z, 38);
Level.spawnMob(x, y+3, z, 38);
asum2 = true;
asum2a = 300;
skillCool(ESP.getUser(), 2);
}
//amage2
if(amage==ESP.getUser()&&am2a==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
for(var gun=3;gun<25;gun++){
setTile(px+gun*sin, y+1, pz+gun*cos, 51);
setTile(px+gun*sin, y+2, pz+gun*cos, 79);
}
am2 = true;
am2a = 300;
skillCool(ESP.getUser(), 2);
}
//puella2
if(puella==ESP.getUser()&&pm2a==0){
Entity.setHealth(puella, Entity.getHealth(puella)+7);
pm2 = true;
pm2a = 300;
skillCool(ESP.getUser(), 2);
}
//hbuild2
if(hbuild==ESP.getUser()&&hb2a==0){
for(var xx=x-2;xx<x+4;xx++)
for(var zz=z-3;zz<z+3;zz++)
setTile(xx, y+4, zz, 1);
setTile(x-2, y+1, z-2, 1);
setTile(x-2, y+1, z-1, 1);
setTile(x-2, y+1, z, 1);
setTile(x-2, y+1, z+1, 1);
setTile(x-2, y+2, z-2, 1);
setTile(x-2, y+2, z-1, 102);
setTile(x-2, y+2, z, 102);
setTile(x-2, y+2, z+1, 1);
setTile(x-2, y+3, z-2, 1);
setTile(x-2, y+3, z-1, 1);
setTile(x-2, y+3, z, 1);
setTile(x-2, y+3, z+1, 1);
setTile(x-2, y+5, z-3, 1);
setTile(x-2, y+5, z-2, 1);
setTile(x-2, y+5, z-1, 1);
setTile(x-2, y+5, z, 1);
setTile(x-2, y+5, z+1, 1);
setTile(x-2, y+5, z+2, 1);
setTile(x-1, y+1, z-3, 1);
setTile(x-1, y+1, z+2, 1);
setTile(x-1, y+2, z-3, 1);
setTile(x-1, y+2, z+2, 1);
setTile(x-1, y+3, z-3, 1);
setTile(x-1, y+3, z+2, 1);
setTile(x-1, y+5, z-3, 1);
setTile(x-1, y+5, z+2, 1);
setTile(x, y+1, z-3, 1);
setTile(x, y+2, z-3, 102);
setTile(x, y+3, z-3, 1);
setTile(x, y+3, z+2, 1);
setTile(x, y+4, z+2, 89);
setTile(x, y+5, z-3, 1);
setTile(x, y+5, z+2, 1);
setTile(x+1, y+1, z-3, 1);
setTile(x, y+1, z+2, 64, 1);
setTile(x, y+2, z+2, 64, 9);
setTile(x+1, y+1, z+2, 64, 1);
setTile(x+1, y+2, z+2, 64, 8);
setTile(x+1, y+2, z-3, 102);
setTile(x+1, y+3, z-3, 1);
setTile(x+1, y+3, z+2, 1);
setTile(x+1, y+4, z+2, 89);
setTile(x+1, y+5, z-3, 1);
setTile(x+1, y+5, z+2, 1);
setTile(x+2, y+1, z-3, 1);
setTile(x+2, y+1, z+2, 1);
setTile(x+2, y+2, z-3, 1);
setTile(x+2, y+2, z+2, 1);
setTile(x+2, y+3, z-3, 1);
setTile(x+2, y+3, z+2, 1);
setTile(x+2, y+5, z-3, 1);
setTile(x+2, y+5, z+2, 1);
setTile(x+3, y+1, z-2, 1);
setTile(x+3, y+1, z-1, 1);
setTile(x+3, y+1, z, 1);
setTile(x+3, y+1, z+1, 1);
setTile(x+3, y+2, z-2, 1);
setTile(x+3, y+2, z-1, 102);
setTile(x+3, y+2, z, 102);
setTile(x+3, y+2, z+1, 1);
setTile(x+3, y+3, z-2, 1);
setTile(x+3, y+3, z-1, 1);
setTile(x+3, y+3, z, 1);
setTile(x+3, y+3, z+1, 1);
setTile(x+3, y+5, z-3, 1);
setTile(x+3, y+5, z-2, 1);
setTile(x+3, y+5, z-1, 1);
setTile(x+3, y+5, z, 1);
setTile(x+3, y+5, z+1, 1);
setTile(x+3, y+5, z+2, 1);
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs((y+1)-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=5&&p2y<=5&&p2z<=5&&hbuild!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-4);
}
}
hb2 = true;
hb2a = 300;
skillCool(ESP.getUser(), 2);
}
//scalar2
if(scalar==ESP.getUser()&&sc2a==0){
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(Player.getX()-Entity.getX(e));
p2y = Math.abs(Player.getY()-Entity.getY(e));
p2z = Math.abs(Player.getZ()-Entity.getZ(e));
if(p2x<=9&&p2y<=9&&p2z<=9&&scalar!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-2);
Entity.setFireTicks(e, 10);
if(ESP.isPlayer(e)){
setTile(Entity.getX(e), Entity.getY(e)-2, Entity.getZ(e), 79);
}
else{
setTile(Entity.getX(e), Entity.getY(e)-1, Entity.getZ(e), 79);
}
}
}
sc2 = true;
sc2a = 300;
skillCool(ESP.getUser(), 2);
}
//vector2
if(vector==ESP.getUser()&&v2a==0){
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(Player.getX()-Entity.getX(e));
p2y = Math.abs(Player.getY()-Entity.getY(e));
p2z = Math.abs(Player.getZ()-Entity.getZ(e));
if(p2x<=10&&p2y<=10&&p2z<=10&&vector!=e&&Entity.getEntityTypeId(e)<64){
teleport(e, Entity.getX(e), Entity.getY(e)+13, Entity.getZ(e));
Entity.setHealth(e, Entity.getHealth(e)-4);
}
}
v2 = true;
v2a = 300;
skillCool(ESP.getUser(), 2);
}
//tensor2
if(tensor==ESP.getUser()&&te2a==0){
te2x = Player.getX();
te2y = Player.getY()-2;
te2z = Player.getZ();
arroundMobHealthDown(ESP.getUser(), 10, 5);
ESP.antiLack(3);
explode(te2x+5, te2y+1.2, te2z+5, 2.5);
te2 = true;
te2a = 300;
skillCool(ESP.getUser(), 2);
}
//ameca2
if(ameca==ESP.getUser()&&ame2a==0){
ame2x = Player.getX();
ame2y = Player.getY()-2;
ame2z = Player.getZ();
setTile(ame2x+5, ame2y+3, ame2z+5, 46);
setTile(ame2x+5, ame2y+3, ame2z, 46);
setTile(ame2x+5, ame2y+3, ame2z-5, 46);
setTile(ame2x, ame2y+3, ame2z+5, 46);
setTile(ame2x, ame2y+3, ame2z-5, 46);
setTile(ame2x-5, ame2y+3, ame2z+5, 46);
setTile(ame2x-5, ame2y+3, ame2z, 46);
setTile(ame2x-5, ame2y+3, ame2z-5, 46);
ESP.antiLack(90);
explode(ame2x+5, ame2y+3, ame2z+5, 0.4);
explode(ame2x+5, ame2y+3, ame2z, 0.4);
explode(ame2x+5, ame2y+3, ame2z-5, 0.4);
explode(ame2x, ame2y+3, ame2z+5, 0.4);
explode(ame2x, ame2y+3, ame2z-5, 0.4);
explode(ame2x-5, ame2y+3, ame2z+5, 0.4);
explode(ame2x-5, ame2y+3, ame2z, 0.4);
explode(ame2x-5, ame2y+3, ame2z-5, 0.4);
setTile(ame2x+5, ame2y+4, ame2z+5, 247);
setTile(ame2x+5, ame2y+4, ame2z, 247);
setTile(ame2x+5, ame2y+4, ame2z-5, 247);
setTile(ame2x, ame2y+4, ame2z+5, 247);
setTile(ame2x, ame2y+4, ame2z-5, 247);
setTile(ame2x-5, ame2y+4, ame2z+5, 247);
setTile(ame2x-5, ame2y+4, ame2z, 247);
setTile(ame2x-5, ame2y+4, ame2z-5, 247);
ame2 = true;
ame2a = 300;
skillCool(ESP.getUser(), 2);
}
//seal2
if(seal==ESP.getUser()&&sea2a==0){
for(var xx=x-1;xx<x+2;xx++){
for(var yy=y+1;yy<y+4;yy++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx, yy, z+2, 3);
setTile(xx, yy, z-2, 3);
setTile(x+2, yy, zz, 3);
setTile(x-2, yy, zz, 3);
setTile(xx, y+4, zz, 3);
}}}
setTile(x, y+3, z, 89);
sea2 = true;
sea2a= 300;
skillCool(ESP.getUser(), 2);
}
//angel2
if(angel==ESP.getUser()&&an2a==0){
an2 = true;
an2a = 300;
skillCool(ESP.getUser(), 2);
}
//white2
if(white==ESP.getUser()&&wh2a==0){
wh2 = true;
wh2a = 300;
skillCool(ESP.getUser(), 2);
}
//world2
if(world==ESP.getUser()){
if(wo2a==0){
ESP.setBlock(x, y, z, s);
wo2 = true;
wo2a = 300;
skillCool(ESP.getUser(), 2);
}
if(wo2a>150){
ESP.setBlock(x, y, z, s);
}
}

}

//skill 3
if(i==304){
//hass3
if(hass==ESP.getUser()&&hass3a==0){
explode(Entity.getX(hass3b), Entity.getY(hass3b)+0.5, Entity.getZ(hass3b), 1);
hass3 = true;
hass3a = 300;
skillCool(ESP.getUser(), 3);
}
//sikill3
if(sikill==ESP.getUser()&&sk3a==0){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw()+90);
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
explode(px+5*sin, y+1, pz+5*cos, 3);
explode(px-5*sin, y+1, pz-5*cos, 3);
sk3 = true;
sk3a = 300;
skillCool(ESP.getUser(), 3);
}
//black3
if(black==ESP.getUser()&&bl3a==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw()+90);
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<12;gun++){
setTile(px+gun*sin, y+2, pz+gun*cos, 49);
setTile(px-gun*sin, y+2, pz-gun*cos, 49);
}
bl3 = true;
bl3a = 300;
skillCool(ESP.getUser(), 3);
}
//gem3
if(gem==ESP.getUser()&&ge3a==0){
setTile(x+1, y, z+1, 155);
setTile(x+1, y, z, 155);
setTile(x+1, y, z-1, 155);
setTile(x, y, z+1, 155);
setTile(x, y, z, 155)
setTile(x, y, z-1, 155);
setTile(x-1, y, z+1, 155);
setTile(x-1, y, z, 155);
setTile(x-1, y, z-1, 155);
setTile(x+2, y+2, z+1, 155);
setTile(x+2, y+2, z, 155);
setTile(x+2, y+2, z-1, 155);
setTile(x-2, y+2, z+1, 155);
setTile(x-2, y+2, z, 155);
setTile(x-2, y+2, z-1, 155);
setTile(x+1, y+2, z+2, 155);
setTile(x, y+2, z+2, 155);
setTile(x-1, y+2, z+2, 155);
setTile(x+1, y+2, z-2, 155);
setTile(x, y+2, z-2, 155);
setTile(x-1, y+2, z-2, 155);
setTile(x, y+1, z, 51);
setTile(x, y+2, z, 30);
ge3 = true;
ge3a = 300;
skillCool(ESP.getUser(), 3);
}
//dra3
if(dra==ESP.getUser()&&dc3a==0){
teleport(ESP.getUser(), x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
Entity.setHealth(dra, Entity.getHealth(dra)+1);
dc3 = true;
dc3a = 300;
skillCool(ESP.getUser(), 3);
}
//mush3
if(mush==ESP.getUser()&&mu3a==0){
for(var yy=y+1;yy<y+6;yy++)
setTile(x, yy, z, 100, 10);
setTile(x-2, y+3, z-1, 100, 1);
setTile(x-2, y+3, z, 100, 4);
setTile(x-2, y+3, z+1, 100, 7);
setTile(x-2, y+4, z-1, 100, 1);
setTile(x-2, y+4, z, 100, 4);
setTile(x-2, y+4, z+1, 100, 7);
setTile(x-2, y+5, z-1, 100, 1);
setTile(x-2, y+5, z, 100, 4);
setTile(x-2, y+5, z+1, 100, 7);
setTile(x-1, y+3, z-2, 100, 1);
setTile(x-1, y+3, z+2, 100, 7);
setTile(x-1, y+4, z-2, 100, 1);
setTile(x-1, y+4, z+2, 100, 7);
setTile(x-1, y+5, z-2, 100, 1);
setTile(x-1, y+5, z+2, 100, 7);
setTile(x-1, y+6, z-1, 100, 1);
setTile(x-1, y+6, z, 100, 4);
setTile(x-1, y+6, z+1, 100, 7);
setTile(x, y+3, z-2, 100, 2);
setTile(x, y+3, z+2, 100, 8);
setTile(x, y+4, z-2, 100, 2);
setTile(x, y+4, z+2, 100, 8);
setTile(x, y+5, z-2, 100, 2);
setTile(x, y+5, z+2, 100, 8);
setTile(x, y+6, z-1, 100, 2);
setTile(x, y+6, z, 100, 5);
setTile(x, y+6, z+1, 100, 8);
setTile(x+1, y+3, z-2, 100, 3);
setTile(x+1, y+3, z+2, 100, 9);
setTile(x+1, y+4, z-2, 100, 3);
setTile(x+1, y+4, z+2, 100, 9);
setTile(x+1, y+5, z-2, 100, 3);
setTile(x+1, y+5, z+2, 100, 9);
setTile(x+1, y+6, z-1, 100, 3);
setTile(x+1, y+6, z, 100, 6);
setTile(x+1, y+6, z+1, 100, 9);
setTile(x+2, y+3, z-1, 100, 3);
setTile(x+2, y+3, z, 100, 6);
setTile(x+2, y+3, z+1, 100, 9);
setTile(x+2, y+4, z-1, 100, 3);
setTile(x+2, y+4, z, 100, 6);
setTile(x+2, y+4, z+1, 100, 9);
setTile(x+2, y+5, z-1, 100, 3);
setTile(x+2, y+5, z, 100, 6);
setTile(x+2, y+5, z+1, 100, 9);
mu3 = true;
mu3a = 300;
skillCool(ESP.getUser(), 3);
}
//ender3
if(ender==ESP.getUser()&&end3a==0){
Level.spawnMob(x, y+1, z, 38);
Level.spawnMob(x, y+1, z, 38);
Level.spawnMob(x, y+1, z, 38);
Level.spawnMob(x, y+1, z, 38);
Level.spawnMob(x, y+1, z, 38);
end3 = true;
end3a = 300;
skillCool(ESP.getUser(), 3);
}
//taiga3
if(taiga==ESP.getUser()&&ta3a==0){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y, zz, 243);
setTile(x-2, y, z-1, 243);
setTile(x-2, y, z, 243);
setTile(x-2, y, z+1, 243);
setTile(x-1, y, z-2, 243);
setTile(x-1, y, z+2, 243);
setTile(x, y, z-2, 243);
setTile(x, y, z+2, 243);
setTile(x+1, y, z-2, 243);
setTile(x+1, y, z+2, 243);
setTile(x+2, y, z-1, 243);
setTile(x+2, y, z, 243);
setTile(x+2, y, z+1, 243);
setTile(x-2, y+1, z-1, 39);
setTile(x-1, y+1, z+1, 175, 2);
setTile(x-1, y+2, z+1, 175, 8);
setTile(x, y+1, z-2, 175, 3);
setTile(x, y+1, z+2, 39);
setTile(x, y+2, z-2, 175, 8);
setTile(x+1, y+1, z-1, 39);
setTile(x+1, y+1, z+1, 175, 3);
setTile(x+1, y+2, z+1, 175, 8);
ta3 = true;
ta3a = 300;
skillCool(ESP.getUser(), 3);
}
//ruin3
if(ruin==ESP.getUser()&&ru3a==0){
ru3x = Player.getX();
ru3y = Player.getY()-2;
ru3z = Player.getZ();
ESP.antiLack(3);
explode(ru3x+5, ru3y+1, ru3z+5, 2.5);
explode(ru3x+5, ru3y+1, ru3z, 2.5);
explode(ru3x+5, ru3y+1, ru3z-5, 2.5);
explode(ru3x, ru3y+1, ru3z+5, 2.5);
explode(ru3x, ru3y+1, ru3z-5, 2.5);
explode(ru3x-5, ru3y+1, ru3z+5, 2.5);
explode(ru3x-5, ru3y+1, ru3z, 2.5);
explode(ru3x-5, ru3y+1, ru3z-5, 2.5);
ru3 = true;
ru3a = 300;
skillCool(ESP.getUser(), 3);
}
//swamp3
if(swamp==ESP.getUser()&&sw3a==0){
Level.spawnMob(x, y+2, z, 37);
Level.spawnMob(x, y+2, z, 37);
Level.spawnMob(x, y+2, z, 37);
Level.spawnMob(x, y+2, z, 37);
Level.spawnMob(x, y+2, z, 37);
Level.spawnMob(x, y+2, z, 37);
sw3 = true;
sw3a = 300;
skillCool(ESP.getUser(), 3);
}
//asum3
if(asum==ESP.getUser()&&asum3a==0){
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 39);
Level.spawnMob(x, y+3, z, 39);
Level.spawnMob(x, y+3, z, 39);
Level.spawnMob(x, y+3, z, 39);
Level.spawnMob(x, y+3, z, 39);
asum3 = true;
asum3a = 300;
skillCool(ESP.getUser(), 3);
}
//amage3
if(amage==ESP.getUser()&&am3a==0){
am3x = Player.getX();
am3y = Player.getY()-2;
am3z = Player.getZ();
setTile(am3x+5, am3y+2, am3z+5, 46);
setTile(am3x+5, am3y+2, am3z-5, 46);
setTile(am3x-5, am3y+2, am3z+5, 46);
setTile(am3x-5, am3y+2, am3z-5, 46);
ESP.antiLack(90);
explode(am3x+5, am3y+2.9, am3z+5, 0.5);
explode(am3x+5, am3y+2.9, am3z-5, 0.5);
explode(am3x-5, am3y+2.9, am3z+5, 0.5);
explode(am3x-5, am3y+2.9, am3z-5, 0.5);
am3 = true;
am3a = 300;
skillCool(ESP.getUser(), 3);
}
//puella3
if(puella==ESP.getUser()&&pm3a==0){
pm3 = true;
pm3a = 300;
skillCool(ESP.getUser(), 3);
}
//hbuild3
if(hbuild==ESP.getUser()&&hb3a==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
for(var gun=3;gun<20;gun++)
explode(px+gun*sin, y+3.7, pz+gun*cos, 1.7);
for(var gun=3;gun<25;gun++)
setTile(px+gun*sin, y, pz+gun*cos, 173);
if(Math.abs(sin)>Math.abs(cos)){
for(var gun=3;gun<25;gun++){
setTile(px+gun*sin, y, pz+gun*cos+1, 173);
setTile(px+gun*sin, y, pz+gun*cos-1, 173);
}
}
if(Math.abs(sin)<Math.abs(cos)){
for(var gun=3;gun<25;gun++){
setTile(px+gun*sin+1, y, pz+gun*cos, 173);
setTile(px+gun*sin-1, y, pz+gun*cos, 173);
}
}
setTile(px+4*sin, y+1, pz+4*cos, 171);
setTile(px+5*sin, y+1, pz+5*cos, 171);
setTile(px+7*sin, y+1, pz+7*cos, 171);
setTile(px+8*sin, y+1, pz+8*cos, 171);
setTile(px+10*sin, y+1, pz+10*cos, 171);
setTile(px+11*sin, y+1, pz+11*cos, 171);
setTile(px+13*sin, y+1, pz+13*cos, 171);
setTile(px+14*sin, y+1, pz+14*cos, 171);
setTile(px+16*sin, y+1, pz+16*cos, 171);
setTile(px+17*sin, y+1, pz+17*cos, 171);
setTile(px+19*sin, y+1, pz+19*cos, 171);
setTile(px+20*sin, y+1, pz+20*cos, 171);
setTile(px+22*sin, y+1, pz+22*cos, 171);
setTile(px+23*sin, y+1, pz+23*cos, 171);
hb3 = true;
hb3a = 300;
skillCool(ESP.getUser(), 3);
}
//scalar3
if(scalar==ESP.getUser()&&sc3a==0){
sc3 = true;
sc3a = 300;
skillCool(ESP.getUser(), 3);
}
//vector3
if(vector==ESP.getUser()&&v3a==0){
v3x = Math.floor(Player.getX());
v3y = y;
v3z = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
vsin = -Math.sin(yaw/180*Math.PI);
vcos = Math.cos(yaw/180*Math.PI);
if(getTile(v3x+3*vsin, v3y, v3z+3*vcos)!=7){
setTile(v3x+3*vsin, v3y+1, v3z+3*vcos, getTile(v3x+3*vsin, v3y, v3z+3*vcos), Level.getData(v3x+3*vsin, v3y, v3z+3*vcos));
setTile(v3x+3*vsin, v3y, v3z+3*vcos, 0);
}
v3b = 4;
v3 = true;
v3a = 300;
skillCool(ESP.getUser(), 3);
}
//ameca3
if(ameca==ESP.getUser()&&ame3a==0){
ame3 = true;
ame3a = 300;
skillCool(ESP.getUser(), 3);
}
//seal3
if(seal==ESP.getUser()){
if(sea3a==0&&sea3b==false){
for(var xx=x-1;xx<x+2;xx++){
for(var yy=y+1;yy<y+4;yy++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx, yy, z+2, 1);
setTile(xx, yy, z-2, 1);
setTile(x+2, yy, zz, 1);
setTile(x-2, yy, zz, 1);
setTile(xx, y+4, zz, 1);
}}}
setTile(x, y+3, z, 89);
sea3x = x;
sea3y = y;
sea3z = z;
sea3b = true;
sea3 = true;
sea3a = 300;
skillCool(ESP.getUser(), 3);
}
else if(sea3b==true){
explode(sea3x+0.5, sea3y+2.5, sea3z+0.5, 3);
sea3b = false;
}
}
//angel3
if(angel==ESP.getUser()&&an3a==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw()+90);
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<15;gun++){
setTile(px+gun*sin, y+2, pz+gun*cos, 155);
setTile(px-gun*sin, y+2, pz-gun*cos, 155);
}
an3 = true;
an3a = 300;
skillCool(ESP.getUser(), 3);
}
//world3
if(world==ESP.getUser()){
if(wo3a==0&&wo3b==false){
var wo3c = ESP.random(5);
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+4;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx, yy, zz, wo3c+1);
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y+1;yy<y+4;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 0);
wo3x = x;
wo3y = y;
wo3z = z;
wo3b = true;
wo3 = true;
wo3a = 300;
skillCool(ESP.getUser(), 3);
}
else if(wo3b==true){
setTile(wo3x, wo3y+2, wo3z, 46);
ESP.antiLack(60);
explode(wo3x+0.5, wo3y+2.9, wo3z+0.5, 0.5);
wo3b = false;
}
}

}

//Skill 4
if(i==305){
//hass4
if(hass==ESP.getUser()&&hass4a==0){
ESP.heal(hass);
ESP.sbm("Hyper Assassination");
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(Player.getX()-Entity.getX(e));
p2y = Math.abs(Player.getY()-Entity.getY(e));
p2z = Math.abs(Player.getZ()-Entity.getZ(e));
if(p2x<=35&&p2y<=35&&p2z<=35&&hass!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-10);
hass4b.push(e);
}
}
hass4 = true;
hass4a = 1800;
skillCool(ESP.getUser(), 4);
}
//sikill4
if(sikill==ESP.getUser()&&sk4a==0){
ESP.heal(sikill);
ESP.sbm("Surround Assault");
skx = Player.getX();
sky = Player.getY()-2;
skz = Player.getZ();
arroundMobHealthDown(sikill, 35, 15);
sk4 = true;
sk4a = 1800;
skillCool(ESP.getUser(), 4);
}
//black4
if(black==ESP.getUser()&&bl4a==0){
ESP.heal(black);
ESP.sbm("Darkness Releasing");
blx = Player.getX();
bly = Player.getY()-2;
blz = Player.getZ();
for(var bl4b=3;bl4b<17;bl4b++){
setTile(blx+bl4b, bly+2, blz+bl4b, 49);
setTile(blx+bl4b, bly+2, blz, 49);
setTile(blx+bl4b, bly+2, blz-bl4b, 49);
setTile(blx, bly+2, blz+bl4b, 49);
setTile(blx, bly+2, blz-bl4b, 49);
setTile(blx-bl4b, bly+2, blz+bl4b, 49);
setTile(blx-bl4b, bly+2, blz, 49);
setTile(blx-bl4b, bly+2, blz-bl4b, 49);
}
bl4 = true;
bl4a = 1800;
skillCool(ESP.getUser(), 4);
}
//slash4
if(slash==ESP.getUser()&&sl4a==0){
ESP.heal(slash);
ESP.sbm("Surround Slash");
slx = Player.getX();
sly = Player.getY()-2;
slz = Player.getZ();
ESP.antiLack(3);
explode(slx+8, sly+1, slz, 3);
explode(slx-8, sly+1, slz, 3);
explode(slx, sly+1, slz+8, 3);
explode(slx, sly+1, slz-8, 3);
sl4 = true;
sl4a = 1800;
skillCool(ESP.getUser(), 4);
}
//night4
if(night==ESP.getUser()&&ni4a==0){
ESP.heal(night);
ESP.sbm("The Night");
Level.setTime(14000);
ni4 = true;
ni4a = 1800;
skillCool(ESP.getUser(), 4);
}
//gem4
if(gem==ESP.getUser()&&ge4a==0){
ESP.setHealth(gem, Entity.getHealth(gem)+20);
ESP.sbm("The Day");
Level.setTime(0);
arroundMobHealthDown(gem, 35, 17);
ge4 = true;
ge4a = 1800;
skillCool(ESP.getUser(), 4);
}
//dra4
if(dra==ESP.getUser()&&dc4a==0){
if(dc4b==false){
ESP.sbm("Hyper Nightmare");
Entity.setHealth(dra, Entity.getHealth(dra)+15);
Level.setTime(14000);
dc4b = true;
}
else if(dc4b==true){
arroundMobHealthDown(dra, 30, 17);
Entity.setHealth(dra, Entity.getHealth(dra)+5);
Level.setTime(0);
dc4b = false;
dc4 = true;
dc4a = 1800;
skillCool(ESP.getUser(), 4);
}
}
//mush4
if(mush==ESP.getUser()&&mu4a==0){
ESP.heal(mush);
ESP.sbm("Mushroom Island");
for(var xx=x-9;xx<x+10;xx++)
for(var zz=z-9;zz<z+10;zz++)
setTile(xx, y, zz, 110);
setTile(x-7, y+1, z-6, 39);
setTile(x-7, y+2, z-1, 100, 1);
setTile(x-7, y+2, z, 100, 4);
setTile(x-7, y+2, z+1, 100, 7);
setTile(x-7, y+3, z-1, 100, 1);
setTile(x-7, y+3, z, 100, 4);
setTile(x-7, y+3, z+1, 100, 7);
setTile(x-7, y+4, z-1, 100, 1);
setTile(x-7, y+4, z, 100, 4);
setTile(x-7, y+4, z+1, 100, 7);
setTile(x-6, y, z+4, 9);
setTile(x-6, y+1, z+6, 40);
setTile(x-6, y+2, z-2, 100, 1);
setTile(x-6, y+2, z+2, 100, 7);
setTile(x-6, y+3, z-2, 100, 1);
setTile(x-6, y+3, z+2, 100, 7);
setTile(x-6, y+4, z-2, 100, 1);
setTile(x-6, y+4, z+2, 100, 7);
setTile(x-6, y+5, z-1, 100, 1);
setTile(x-6, y+5, z, 100, 4);
setTile(x-6, y+5, z+1, 100, 7);
setTile(x-5, y, z, 3);
for(var zz=z+3;zz<z+7;zz++)
setTile(x-5, y, zz, 9);
setTile(x-5, y+1, z-7, 40);
setTile(x-5, y+1, z-6, 39);
setTile(x-5, y+1, z-4, 39);
setTile(x-5, y+1, z, 100, 10);
setTile(x-5, y+1, z+1, 40);
setTile(x-5, y+2, z-2, 100, 2);
setTile(x-5, y+2, z, 100, 10);
setTile(x-5, y+2, z+2, 100, 8);
setTile(x-5, y+3, z-2, 100, 2);
setTile(x-5, y+3, z, 100, 10);
setTile(x-5, y+3, z+2, 100, 8);
setTile(x-5, y+4, z-2, 100, 2);
setTile(x-5, y+4, z, 100, 10);
setTile(x-5, y+4, z+2, 100, 8);
setTile(x-5, y+5, z-1, 100, 2);
setTile(x-5, y+5, z, 100, 5);
setTile(x-5, y+5, z+1, 100, 8);
for(var zz=z+2;zz<z+7;zz++)
setTile(x-4, y, zz, 9);
setTile(x-4, y+2, z-2, 100, 3);
setTile(x-4, y+2, z+2, 100, 9);
setTile(x-4, y+3, z-2, 100, 3);
setTile(x-4, y+3, z+2, 100, 9);
setTile(x-4, y+4, z-2, 100, 3);
setTile(x-4, y+4, z+2, 100, 9);
setTile(x-4, y+5, z-1, 100, 3);
setTile(x-4, y+5, z, 100, 6);
setTile(x-4, y+5, z+1, 100, 9);
setTile(x-3, y, z+4, 9);
setTile(x-3, y, z+5, 9);
setTile(x-3, y+1, z-4, 39);
setTile(x-3, y+2, z-1, 100, 3);
setTile(x-3, y+2, z, 100, 6);
setTile(x-3, y+2, z+1, 100, 9);
setTile(x-3, y+3, z-1, 100, 3);
setTile(x-3, y+3, z, 100, 6);
setTile(x-3, y+3, z+1, 100, 9);
setTile(x-3, y+4, z-1, 100, 3);
setTile(x-3, y+4, z, 100, 6);
setTile(x-3, y+4, z+1, 100, 9);
setTile(x-2, y+1, z+5, 40);
setTile(x-2, y+1, z+7, 40);
setTile(x-1, y+1, z+2, 40);
setTile(x-1, y+1, z+4, 40);
setTile(x-1, y+5, z-7, 99, 1);
setTile(x-1, y+5, z-6, 99, 4);
setTile(x-1, y+5, z-5, 99, 4);
setTile(x-1, y+5, z-4, 99, 4);
setTile(x-1, y+5, z-3, 99, 7);
setTile(x-1, y+7, z-1, 99, 1);
setTile(x-1, y+7, z, 99, 4);
setTile(x-1, y+7, z+1, 99, 4);
setTile(x-1, y+7, z+2, 99, 4);
setTile(x-1, y+7, z+3, 99, 7);
setTile(x, y+1, z-6, 39);
setTile(x, y+5, z-8, 99, 1);
for(var zz=z-7;zz<z-2;zz++)
setTile(x, y+5, zz, 99, 5);
setTile(x, y+5, z-2, 99, 7);
setTile(x, y+7, z-2, 99, 1);
setTile(x, y+7, z-1, 99, 5);
setTile(x, y+7, z, 99, 5);
setTile(x, y+7, z+1, 99, 5);
setTile(x, y+7, z+2, 99, 5);
setTile(x, y+7, z+3, 99, 5);
setTile(x, y+7, z+4, 99, 7);
setTile(x+1, y+1, z-4, 40);
setTile(x+1, y+5, z-8, 99, 2);
for(var zz=z-7;zz<z-2;zz++)
setTile(x+1, y+5, zz, 99, 5);
setTile(x+1, y+5, z-2, 99, 8);
setTile(x+1, y+7, z-2, 99, 2);
setTile(x+1, y+7, z-1, 99, 5);
setTile(x+1, y+7, z, 99, 5);
setTile(x+1, y+7, z+1, 99, 5);
setTile(x+1, y+7, z+2, 99, 5);
setTile(x+1, y+7, z+3, 99, 5);
setTile(x+1, y+7, z+4, 99, 8);
setTile(x+2, y, z-5, 3);
setTile(x+2, y, z+1, 3);
setTile(x+2, y+1, z-5, 99, 10);
setTile(x+2, y+1, z-4, 40);
setTile(x+2, y+1, z+1, 99, 10);
setTile(x+2, y+1, z+3, 40);
setTile(x+2, y+2, z-5, 99, 10);
setTile(x+2, y+2, z+1, 99, 10);
setTile(x+2, y+3, z-5, 99, 10);
setTile(x+2, y+3, z+1, 99, 10);
setTile(x+2, y+4, z-5, 99, 10);
setTile(x+2, y+4, z+1, 99, 10);
setTile(x+2, y+5, z-8, 99, 2);
setTile(x+2, y+5, z-7, 99, 5);
setTile(x+2, y+5, z-6, 99, 5);
setTile(x+2, y+5, z-5, 99, 5);
setTile(x+2, y+5, z-4, 99, 5);
setTile(x+2, y+5, z-3, 99, 5);
setTile(x+2, y+5, z-2, 99, 8);
setTile(x+2, y+5, z+1, 99, 10);
setTile(x+2, y+6, z+1, 99, 10);
setTile(x+2, y+7, z-2, 99, 2);
setTile(x+2, y+7, z-1, 99, 5);
setTile(x+2, y+7, z, 99, 5);
setTile(x+2, y+7, z+1, 99, 5);
setTile(x+2, y+7, z+2, 99, 5);
setTile(x+2, y+7, z+3, 99, 5);
setTile(x+2, y+7, z+4, 99, 8);
setTile(x+3, y+1, z-4, 40);
setTile(x+3, y+1, z-3, 40);
setTile(x+3, y+5, z-8, 99, 2);
setTile(x+3, y+5, z-7, 99, 5);
setTile(x+3, y+5, z-6, 99, 5);
setTile(x+3, y+5, z-5, 99, 5);
setTile(x+3, y+5, z-4, 99, 5);
setTile(x+3, y+5, z-3, 99, 5);
setTile(x+3, y+5, z-2, 99, 8);
setTile(x+3, y+7, z-2, 99, 2);
setTile(x+3, y+7, z-1, 99, 5);
setTile(x+3, y+7, z, 99, 5);
setTile(x+3, y+7, z+1, 99, 5);
setTile(x+3, y+7, z+2, 99, 5);
setTile(x+3, y+7, z+3, 99, 5);
setTile(x+3, y+7, z+4, 99, 8);
setTile(x+4, y+1, z+6, 39);
setTile(x+4, y+5, z-8, 99, 3);
setTile(x+4, y+5, z-7, 99, 5);
setTile(x+4, y+5, z-6, 99, 5);
setTile(x+4, y+5, z-5, 99, 5);
setTile(x+4, y+5, z-4, 99, 5);
setTile(x+4, y+5, z-3, 99, 5);
setTile(x+4, y+5, z-2, 99, 9);
setTile(x+4, y+7, z-2, 99, 3);
setTile(x+4, y+7, z-1, 99, 5);
setTile(x+4, y+7, z, 99, 5);
setTile(x+4, y+7, z+1, 99, 5);
setTile(x+4, y+7, z+2, 99, 5);
setTile(x+4, y+7, z+3, 99, 5);
setTile(x+4, y+7, z+4, 99, 9);
setTile(x+5, y+1, z-5, 39);
setTile(x+5, y+1, z+3, 39);
setTile(x+5, y+5, z-7, 99, 3);
setTile(x+5, y+5, z-6, 99, 6);
setTile(x+5, y+5, z-5, 99, 6);
setTile(x+5, y+5, z-4, 99, 6);
setTile(x+5, y+5, z-3, 99, 9);
setTile(x+5, y+7, z-1, 99, 3);
setTile(x+5, y+7, z, 99, 6);
setTile(x+5, y+7, z+1, 99, 6);
setTile(x+5, y+7, z+2, 99, 6);
setTile(x+5, y+7, z+3, 99, 9);
setTile(x+6, y+1, z-2, 39);
setTile(x+7, y+1, z+3, 40);
arroundMobHealthDown(mush, 10, 10);
Level.spawnMob(x+6, y+3, z+6, 16);
Level.spawnMob(x+6, y+3, z-6, 16);
Level.spawnMob(x-6, y+3, z+6, 16);
Level.spawnMob(x-6, y+3, z-6, 16);
Level.spawnMob(x, y+3, z, 16);
mux = x;
muy = y;
muz = z;
mu4 = true;
mu4a = 1800;
skillCool(ESP.getUser(), 4);
}
//ender4
if(ender==ESP.getUser()&&end4a==0){
ESP.heal(ender);
ESP.sbm("Ender Summon");
for(var xx=x-9;xx<x+10;xx++)
for(var zz=z-9;zz<z+10;zz++)
setTile(xx, y, zz, 121);
setTile(x-9, y+1, z+4, 121);
setTile(x-9, y+1, z+5, 121);
setTile(x-9, y+1, z+6, 121);
setTile(x-9, y+1, z+7, 121);
setTile(x-9, y+1, z+8, 121);
setTile(x-9, y+1, z+9, 121);
setTile(x-9, y+2, z+8, 121);
setTile(x-9, y+2, z+9, 121);
setTile(x-8, y+1, z+4, 121);
setTile(x-8, y+1, z+5, 121);
setTile(x-8, y+1, z+6, 121);
setTile(x-8, y+1, z+7, 121);
setTile(x-8, y+1, z+8, 121);
setTile(x-8, y+1, z+9, 121);
setTile(x-8, y+2, z+8, 121);
setTile(x-8, y+2, z+9, 121);
setTile(x-7, y+1, z+5, 121);
setTile(x-7, y+1, z+6, 121);
setTile(x-7, y+1, z+7, 121);
setTile(x-7, y+1, z+8, 121);
setTile(x-7, y+1, z+9, 121);
setTile(x-7, y+2, z+9, 121);
setTile(x-6, y+1, z+5, 121);
setTile(x-6, y+1, z+6, 121);
setTile(x-6, y+1, z+7, 121);
setTile(x-6, y+1, z+8, 121);
setTile(x-6, y+1, z+9, 121);
setTile(x-5, y+1, z+6, 121);
setTile(x-5, y+1, z+7, 121);
setTile(x-5, y+1, z+8, 121);
setTile(x-5, y+1, z+9, 121);
setTile(x-4, y+1, z+7, 121);
setTile(x-4, y+1, z+8, 121);
setTile(x-4, y+1, z+9, 121);
setTile(x-3, y+1, z+8, 121);
setTile(x-3, y+1, z+9, 121);
setTile(x-2, y+1, z+9, 121);
setTile(x-1, y+1, z+9, 121);
for(var xx=x+2;xx<x+5;xx++)
for(var yy=y+1;yy<y+8;yy++)
for(var zz=z-5;zz<z-2;zz++)
setTile(xx, yy, zz, 49);
setTile(x+3, y+7, z-4, 87);
setTile(x+3, y+8, z-4, 51);
setTile(x+3, y+9, z-4, 102);
arroundMobHealthDown(ender, 10, 10);
Level.spawnMob(x+6, y+3, z+6, 38);
Level.spawnMob(x+6, y+3, z-6, 38);
Level.spawnMob(x-6, y+3, z+6, 38);
Level.spawnMob(x-6, y+3, z-6, 38);
Level.spawnMob(x, y+3, z, 38);
endx = x;
endy = y;
endz = z;
end4 = true;
end4a = 1800;
skillCool(ESP.getUser(), 4);
}
//taiga4
if(taiga==ESP.getUser()&&ta4a==0){
ESP.heal(taiga);
ESP.sbm("Mega Taiga");
for(var xx=x-9;xx<x+10;xx++)
for(var zz=z-9;zz<z+10;zz++)
setTile(xx, y, zz, 243);
setTile(x-8, y+1, z-8, 31, 1);
setTile(x-8, y+1, z-6, 39);
setTile(x-8, y+1, z+1, 39);
setTile(x-8, y+10, z-4, 18, 1);
setTile(x-8, y+10, z-3, 18, 1);
setTile(x-7, y+1, z-2, 31, 2);
setTile(x-7, y+2, z+4, 18, 1);
setTile(x-7, y+2, z+5, 18, 1);
setTile(x-7, y+3, z+4, 18, 1);
setTile(x-7, y+3, z+5, 18, 1);
setTile(x-7, y+6, z+4, 18, 1);
setTile(x-7, y+6, z+5, 18, 1);
setTile(x-7, y+9, z-4, 18, 1);
setTile(x-7, y+9, z-3, 18, 1);
setTile(x-7, y+10, z-5, 18, 1);
setTile(x-7, y+10, z-4, 18, 1);
setTile(x-7, y+10, z-3, 18, 1);
setTile(x-7, y+10, z-2, 18, 1);
setTile(x-7, y+11, z-4, 18, 1);
setTile(x-7, y+11, z-3, 18, 1);
setTile(x-7, y+14, z-4, 18, 1);
setTile(x-7, y+14, z-3, 18, 1);
setTile(x-6, y+1, z-6, 31, 1);
setTile(x-6, y+1, z-3, 31, 2);
setTile(x-6, y+1, z-1, 31, 2);
setTile(x-6, y+2, z+2, 18, 1);
setTile(x-6, y+2, z+3, 18, 1);
setTile(x-6, y+2, z+4, 18, 1);
setTile(x-6, y+2, z+5, 18, 1);
setTile(x-6, y+2, z+6, 18, 1);
setTile(x-6, y+2, z+7, 18, 1);
setTile(x-6, y+3, z+2, 18, 1);
setTile(x-6, y+3, z+3, 18, 1);
setTile(x-6, y+3, z+4, 18, 1);
setTile(x-6, y+3, z+5, 18, 1);
setTile(x-6, y+3, z+6, 18, 1);
setTile(x-6, y+3, z+7, 18, 1);
setTile(x-6, y+4, z+4, 18, 1);
setTile(x-6, y+4, z+5, 18, 1);
setTile(x-6, y+5, z+4, 18, 1);
setTile(x-6, y+5, z+5, 18, 1);
setTile(x-6, y+6, z+2, 18, 1);
setTile(x-6, y+6, z+3, 18, 1);
setTile(x-6, y+6, z+4, 18, 1);
setTile(x-6, y+6, z+5, 18, 1);
setTile(x-6, y+6, z+6, 18, 1);
setTile(x-6, y+6, z+7, 18, 1);
setTile(x-6, y+7, z+4, 18, 1);
setTile(x-6, y+7, z+5, 18, 1);
setTile(x-6, y+9, z-6, 18, 1);
setTile(x-6, y+9, z-5, 18, 1);
setTile(x-6, y+9, z-4, 18, 1);
setTile(x-6, y+9, z-3, 18, 1);
setTile(x-6, y+9, z-2, 18, 1);
setTile(x-6, y+9, z-1, 18, 1);
setTile(x-6, y+10, z-6, 18, 1);
setTile(x-6, y+10, z-5, 18, 1);
setTile(x-6, y+10, z-4, 18, 1);
setTile(x-6, y+10, z-3, 18, 1);
setTile(x-6, y+10, z-2, 18, 1);
setTile(x-6, y+10, z-1, 18, 1);
setTile(x-6, y+10, z+4, 18, 1);
setTile(x-6, y+10, z+5, 18, 1);
setTile(x-6, y+11, z-6, 18, 1);
setTile(x-6, y+11, z-5, 18, 1);
setTile(x-6, y+11, z-4, 18, 1);
setTile(x-6, y+11, z-3, 18, 1);
setTile(x-6, y+11, z-2, 18, 1);
setTile(x-6, y+11, z-1, 18, 1);
setTile(x-6, y+12, z-4, 18, 1);
setTile(x-6, y+12, z-3, 18, 1);
setTile(x-6, y+13, z-4, 18, 1);
setTile(x-6, y+13, z-3, 18, 1);
setTile(x-6, y+14, z-6, 18, 1);
setTile(x-6, y+14, z-5, 18, 1);
setTile(x-6, y+14, z-4, 18, 1);
setTile(x-6, y+14, z-3, 18, 1);
setTile(x-6, y+14, z-2, 18, 1);
setTile(x-6, y+14, z-1, 18, 1);
setTile(x-6, y+15, z-4, 18, 1);
setTile(x-6, y+15, z-3, 18, 1);
setTile(x-6, y+18, z-4, 18, 1);
setTile(x-6, y+18, z-3, 18, 1);
setTile(x-6, y+20, z-4, 18, 1);
setTile(x-6, y+20, z-3, 18, 1);
setTile(x-5, y+1, z-8, 31, 2);
setTile(x-5, y+1, z-2, 31, 2);
setTile(x-5, y+2, z+2, 18, 1);
setTile(x-5, y+2, z+3, 18, 1);
setTile(x-5, y+2, z+4, 18, 1);
setTile(x-5, y+2, z+5, 18, 1);
setTile(x-5, y+2, z+6, 18, 1);
setTile(x-5, y+2, z+7, 18, 1);
setTile(x-5, y+3, z+2, 18, 1);
setTile(x-5, y+3, z+3, 18, 1);
setTile(x-5, y+3, z+4, 18, 1);
setTile(x-5, y+3, z+5, 18, 1);
setTile(x-5, y+3, z+6, 18, 1);
setTile(x-5, y+3, z+7, 18, 1);
setTile(x-5, y+4, z+3, 18, 1);
setTile(x-5, y+4, z+4, 18, 1);
setTile(x-5, y+4, z+5, 18, 1);
setTile(x-5, y+4, z+6, 18, 1);
setTile(x-5, y+5, z+3, 18, 1);
setTile(x-5, y+5, z+4, 18, 1);
setTile(x-5, y+5, z+5, 18, 1);
setTile(x-5, y+5, z+6, 18, 1);
setTile(x-5, y+6, z+2, 18, 1);
setTile(x-5, y+6, z+3, 18, 1);
setTile(x-5, y+6, z+4, 18, 1);
setTile(x-5, y+6, z+5, 18, 1);
setTile(x-5, y+6, z+6, 18, 1);
setTile(x-5, y+6, z+7, 18, 1);
setTile(x-5, y+7, z+3, 18, 1);
setTile(x-5, y+7, z+4, 18, 1);
setTile(x-5, y+7, z+5, 18, 1);
setTile(x-5, y+7, z+6, 18, 1);
setTile(x-5, y+8, z+4, 18, 1);
setTile(x-5, y+8, z+5, 18, 1);
setTile(x-5, y+9, z-6, 18, 1);
setTile(x-5, y+9, z-5, 18, 1);
setTile(x-5, y+9, z-4, 18, 1);
setTile(x-5, y+9, z-3, 18, 1);
setTile(x-5, y+9, z-2, 18, 1);
setTile(x-5, y+9, z-1, 18, 1);
setTile(x-5, y+9, z+4, 18, 1);
setTile(x-5, y+9, z+5, 18, 1);
setTile(x-5, y+10, z-7, 18, 1);
setTile(x-5, y+10, z-6, 18, 1);
setTile(x-5, y+10, z-5, 18, 1);
setTile(x-5, y+10, z-4, 18, 1);
setTile(x-5, y+10, z-3, 18, 1);
setTile(x-5, y+10, z-2, 18, 1);
setTile(x-5, y+10, z-1, 18, 5);
setTile(x-5, y+10, z, 18, 1);
setTile(x-5, y+10, z+3, 18, 1);
setTile(x-5, y+10, z+4, 18, 1);
setTile(x-5, y+10, z+5, 18, 1);
setTile(x-5, y+10, z+6, 18, 1);
setTile(x-5, y+11, z-6, 18, 1);
setTile(x-5, y+11, z-5, 18, 1);
setTile(x-5, y+11, z-4, 18, 1);
setTile(x-5, y+11, z-3, 18, 1);
setTile(x-5, y+11, z-2, 18, 1);
setTile(x-5, y+11, z-1, 18, 1);
setTile(x-5, y+11, z+4, 18, 1);
setTile(x-5, y+11, z+5, 18, 1);
setTile(x-5, y+12, z-5, 18, 1);
setTile(x-5, y+12, z-4, 18, 1);
setTile(x-5, y+12, z-3, 18, 1);
setTile(x-5, y+12, z-2, 18, 1);
setTile(x-5, y+13, z-5, 18, 1);
setTile(x-5, y+13, z-4, 18, 1);
setTile(x-5, y+13, z-3, 18, 1);
setTile(x-5, y+13, z-2, 18, 1);
setTile(x-5, y+14, z-6, 18, 1);
setTile(x-5, y+14, z-5, 18, 1);
setTile(x-5, y+14, z-4, 18, 1);
setTile(x-5, y+14, z-3, 18, 1);
setTile(x-5, y+14, z-2, 18, 1);
setTile(x-5, y+14, z-1, 18, 1);
setTile(x-5, y+14, z+4, 18, 1);
setTile(x-5, y+14, z+5, 18, 1);
setTile(x-5, y+15, z-5, 18, 1);
setTile(x-5, y+15, z-4, 18, 1);
setTile(x-5, y+15, z-3, 18, 1);
setTile(x-5, y+15, z-2, 18, 1);
setTile(x-5, y+16, z-4, 18, 1);
setTile(x-5, y+16, z-3, 18, 1);
setTile(x-5, y+17, z-4, 18, 1);
setTile(x-5, y+17, z-3, 18, 1);
setTile(x-5, y+18, z-5, 18, 1);
setTile(x-5, y+18, z-4, 18, 1);
setTile(x-5, y+18, z-3, 18, 1);
setTile(x-5, y+18, z-2, 18, 1);
setTile(x-5, y+19, z-4, 18, 1);
setTile(x-5, y+19, z-3, 18, 1);
setTile(x-5, y+20, z-5, 18, 1);
setTile(x-5, y+20, z-4, 18, 1);
setTile(x-5, y+20, z-3, 18, 1);
setTile(x-5, y+20, z-2, 18, 1);
setTile(x-5, y+22, z-4, 18, 1);
setTile(x-5, y+22, z-3, 18, 1);
setTile(x-5, y+24, z-4, 18, 1);
setTile(x-5, y+24, z-3, 18, 1);
setTile(x-4, y+1, z-4, 17, 1);
setTile(x-4, y+1, z-3, 17, 1);
setTile(x-4, y+1, z-1, 39);
setTile(x-4, y+1, z+4, 17, 1);
setTile(x-4, y+1, z+5, 17, 1);
setTile(x-4, y+2, z-4, 17, 1);
setTile(x-4, y+2, z-3, 17, 1);
setTile(x-4, y+2, z+1, 18, 1);
setTile(x-4, y+2, z+2, 18, 1);
setTile(x-4, y+2, z+3, 18, 1);
setTile(x-4, y+2, z+4, 17, 1);
setTile(x-4, y+2, z+5, 17, 1);
setTile(x-4, y+2, z+6, 18, 1);
setTile(x-4, y+2, z+7, 18, 1);
setTile(x-4, y+2, z+8, 18, 1);
setTile(x-4, y+3, z-4, 17, 1);
setTile(x-4, y+3, z-3, 17, 1);
setTile(x-4, y+3, z+1, 18, 1);
setTile(x-4, y+3, z+2, 18, 1);
setTile(x-4, y+3, z+3, 18, 1);
setTile(x-4, y+3, z+4, 17, 1);
setTile(x-4, y+3, z+5, 17, 1);
setTile(x-4, y+3, z+6, 18, 1);
setTile(x-4, y+3, z+7, 18, 1);
setTile(x-4, y+3, z+8, 18, 1);
setTile(x-4, y+4, z-4, 17, 1);
setTile(x-4, y+4, z-3, 17, 1);
setTile(x-4, y+4, z+2, 18, 1);
setTile(x-4, y+4, z+3, 18, 1);
setTile(x-4, y+4, z+4, 17, 1);
setTile(x-4, y+4, z+5, 17, 1);
setTile(x-4, y+4, z+6, 18, 1);
setTile(x-4, y+4, z+7, 18, 1);
setTile(x-4, y+5, z-4, 17, 1);
setTile(x-4, y+5, z-3, 17, 1);
setTile(x-4, y+5, z+2, 18, 1);
setTile(x-4, y+5, z+3, 18, 1);
setTile(x-4, y+5, z+4, 17, 1);
setTile(x-4, y+5, z+5, 17, 1);
setTile(x-4, y+5, z+6, 18, 1);
setTile(x-4, y+5, z+7, 18, 1);
setTile(x-4, y+6, z-4, 17, 1);
setTile(x-4, y+6, z-3, 17, 1);
setTile(x-4, y+6, z+1, 18, 1);
setTile(x-4, y+6, z+2, 18, 1);
setTile(x-4, y+6, z+3, 18, 1);
setTile(x-4, y+6, z+4, 17, 1);
setTile(x-4, y+6, z+5, 17, 1);
setTile(x-4, y+6, z+6, 18, 1);
setTile(x-4, y+6, z+7, 18, 1);
setTile(x-4, y+6, z+8, 18, 1);
setTile(x-4, y+7, z-4, 17, 1);
setTile(x-4, y+7, z-3, 17, 1);
setTile(x-4, y+7, z+2, 18, 1);
setTile(x-4, y+7, z+3, 18, 1);
setTile(x-4, y+7, z+4, 17, 1);
setTile(x-4, y+7, z+5, 17, 1);
setTile(x-4, y+7, z+6, 18, 1);
setTile(x-4, y+7, z+7, 18, 1);
setTile(x-4, y+8, z-4, 17, 1);
setTile(x-4, y+8, z-3, 17, 1);
setTile(x-4, y+8, z+3, 18, 1);
setTile(x-4, y+8, z+4, 17, 1);
setTile(x-4, y+8, z+5, 17, 1);
setTile(x-4, y+8, z+6, 18, 1);
setTile(x-4, y+9, z-7, 18, 1);
setTile(x-4, y+9, z-6, 18, 1);
setTile(x-4, y+9, z-5, 18, 1);
setTile(x-4, y+9, z-4, 17, 1);
setTile(x-4, y+9, z-3, 17, 1);
setTile(x-4, y+9, z-2, 18, 1);
setTile(x-4, y+9, z-1, 18, 1);
setTile(x-4, y+9, z, 18, 1);
setTile(x-4, y+9, z+3, 18, 1);
setTile(x-4, y+9, z+4, 17, 1);
setTile(x-4, y+9, z+5, 17, 1);
setTile(x-4, y+9, z+6, 18, 1);
setTile(x-4, y+10, z-8, 18, 1);
setTile(x-4, y+10, z-7, 18, 1);
setTile(x-4, y+10, z-6, 18, 1);
setTile(x-4, y+10, z-5, 18, 1);
setTile(x-4, y+10, z-4, 17, 1);
setTile(x-4, y+10, z-3, 17, 1);
setTile(x-4, y+10, z-2, 18, 1);
setTile(x-4, y+10, z-1, 18, 1);
setTile(x-4, y+10, z, 18, 1);
setTile(x-4, y+10, z+1, 18, 1);
setTile(x-4, y+10, z+2, 18, 1);
setTile(x-4, y+10, z+3, 18, 1);
setTile(x-4, y+10, z+4, 17, 1);
setTile(x-4, y+10, z+5, 17, 1);
setTile(x-4, y+10, z+6, 18, 1);
setTile(x-4, y+10, z+7, 18, 1);
setTile(x-4, y+11, z-7, 18, 1);
setTile(x-4, y+11, z-6, 18, 1);
setTile(x-4, y+11, z-5, 18, 1);
setTile(x-4, y+11, z-4, 17, 1);
setTile(x-4, y+11, z-3, 17, 1);
setTile(x-4, y+11, z-2, 18, 1);
setTile(x-4, y+11, z-1, 18, 1);
setTile(x-4, y+11, z, 18, 1);
setTile(x-4, y+11, z+3, 18, 1);
setTile(x-4, y+11, z+4, 17, 1);
setTile(x-4, y+11, z+5, 17, 1);
setTile(x-4, y+11, z+6, 18, 1);
setTile(x-4, y+12, z-6, 18, 1);
setTile(x-4, y+12, z-5, 18, 1);
setTile(x-4, y+12, z-4, 17, 1);
setTile(x-4, y+12, z-3, 17, 1);
setTile(x-4, y+12, z-2, 18, 1);
setTile(x-4, y+12, z-1, 18, 1);
setTile(x-4, y+12, z+4, 17, 1);
setTile(x-4, y+12, z+5, 17, 1);
setTile(x-4, y+13, z-6, 18, 1);
setTile(x-4, y+13, z-5, 18, 1);
setTile(x-4, y+13, z-4, 17, 1);
setTile(x-4, y+13, z-3, 17, 1);
setTile(x-4, y+13, z-2, 18, 1);
setTile(x-4, y+13, z-1, 18, 1);
setTile(x-4, y+13, z+4, 17, 1);
setTile(x-4, y+13, z+5, 17, 1);
setTile(x-4, y+14, z-7, 18, 1);
setTile(x-4, y+14, z-6, 18, 1);
setTile(x-4, y+14, z-5, 18, 1);
setTile(x-4, y+14, z-4, 17, 1);
setTile(x-4, y+14, z-3, 17, 1);
setTile(x-4, y+14, z-2, 18, 1);
setTile(x-4, y+14, z-1, 18, 1);
setTile(x-4, y+14, z, 18, 1);
setTile(x-4, y+14, z+3, 18, 1);
setTile(x-4, y+14, z+4, 17, 1);
setTile(x-4, y+14, z+5, 18, 1);
setTile(x-4, y+14, z+6, 18, 1);
setTile(x-4, y+15, z-6, 18, 1);
setTile(x-4, y+15, z-5, 18, 1);
setTile(x-4, y+15, z-4, 17, 1);
setTile(x-4, y+15, z-3, 17, 1);
setTile(x-4, y+15, z-2, 18, 1);
setTile(x-4, y+15, z-1, 18, 1);
setTile(x-4, y+15, z+4, 18, 1);
setTile(x-4, y+15, z+5, 18, 1);
setTile(x-4, y+16, z-5, 18, 1);
setTile(x-4, y+16, z-4, 17, 1);
setTile(x-4, y+16, z-3, 17, 1);
setTile(x-4, y+16, z-2, 18, 1);
setTile(x-4, y+17, z-5, 18, 1);
setTile(x-4, y+17, z-4, 17, 1);
setTile(x-4, y+17, z-3, 17, 1);
setTile(x-4, y+17, z-2, 18, 1);
setTile(x-4, y+18, z-6, 18, 1);
setTile(x-4, y+18, z-5, 18, 1);
setTile(x-4, y+18, z-4, 17, 1);
setTile(x-4, y+18, z-3, 17, 1);
setTile(x-4, y+18, z-2, 18, 1);
setTile(x-4, y+18, z-1, 18, 1);
setTile(x-4, y+19, z-5, 18, 1);
setTile(x-4, y+19, z-4, 17, 1);
setTile(x-4, y+19, z-3, 17, 1);
setTile(x-4, y+19, z-2, 18, 1);
setTile(x-4, y+20, z-6, 18, 1);
setTile(x-4, y+20, z-5, 18, 1);
setTile(x-4, y+20, z-4, 17, 1);
setTile(x-4, y+20, z-3, 17, 1);
setTile(x-4, y+20, z-2, 18, 1);
setTile(x-4, y+20, z-1, 18, 1);
setTile(x-4, y+21, z-4, 17, 1);
setTile(x-4, y+21, z-3, 17, 1);
setTile(x-4, y+22, z-5, 18, 1);
setTile(x-4, y+22, z-4, 17, 1);
setTile(x-4, y+22, z-3, 17, 1);
setTile(x-4, y+22, z-2, 18, 1);
setTile(x-4, y+23, z-4, 17, 1);
setTile(x-4, y+23, z-3, 17, 1);
setTile(x-4, y+24, z-5, 18, 1);
setTile(x-4, y+24, z-4, 17, 1);
setTile(x-4, y+24, z-3, 18, 1);
setTile(x-4, y+24, z-2, 18, 1);
setTile(x-4, y+25, z-4, 18, 1);
setTile(x-4, y+25, z-3, 18, 1);
setTile(x-3, y, z-4, 3);
setTile(x-3, y, z-3, 3);
setTile(x-3, y, z+4, 3);
setTile(x-3, y, z+5, 3);
setTile(x-3, y+1, z-7, 39);
setTile(x-3, y+1, z-4, 17, 1);
setTile(x-3, y+1, z-3, 17, 1);
setTile(x-3, y+1, z+4, 17, 1);
setTile(x-3, y+1, z+5, 17, 1);
setTile(x-3, y+2, z-4, 17, 1);
setTile(x-3, y+2, z-3, 17, 1);
setTile(x-3, y+2, z+1, 18, 1);
setTile(x-3, y+2, z+2, 18, 1);
setTile(x-3, y+2, z+3, 18, 1);
setTile(x-3, y+2, z+4, 17, 1);
setTile(x-3, y+2, z+5, 17, 1);
setTile(x-3, y+2, z+6, 18, 1);
setTile(x-3, y+2, z+7, 18, 1);
setTile(x-3, y+2, z+8, 18, 1);
setTile(x-3, y+3, z-4, 17, 1);
setTile(x-3, y+3, z-3, 17, 1);
setTile(x-3, y+3, z+1, 18, 1);
setTile(x-3, y+3, z+2, 18, 1);
setTile(x-3, y+3, z+3, 18, 1);
setTile(x-3, y+3, z+4, 17, 1);
setTile(x-3, y+3, z+5, 17, 1);
setTile(x-3, y+3, z+6, 18, 1);
setTile(x-3, y+3, z+7, 18, 1);
setTile(x-3, y+3, z+8, 18, 1);
setTile(x-3, y+4, z-4, 17, 1);
setTile(x-3, y+4, z-3, 17, 1);
setTile(x-3, y+4, z+2, 18, 1);
setTile(x-3, y+4, z+3, 18, 1);
setTile(x-3, y+4, z+4, 17, 1);
setTile(x-3, y+4, z+5, 17, 1);
setTile(x-3, y+4, z+6, 18, 1);
setTile(x-3, y+4, z+7, 18, 1);
setTile(x-3, y+5, z-4, 17, 1);
setTile(x-3, y+5, z-3, 17, 1);
setTile(x-3, y+5, z+2, 18, 1);
setTile(x-3, y+5, z+3, 18, 1);
setTile(x-3, y+5, z+4, 17, 1);
setTile(x-3, y+5, z+5, 17, 1);
setTile(x-3, y+5, z+6, 18, 1);
setTile(x-3, y+5, z+7, 18, 1);
setTile(x-3, y+6, z-4, 17, 1);
setTile(x-3, y+6, z-3, 17, 1);
setTile(x-3, y+6, z+1, 18, 1);
setTile(x-3, y+6, z+2, 18, 1);
setTile(x-3, y+6, z+3, 18, 1);
setTile(x-3, y+6, z+4, 17, 1);
setTile(x-3, y+6, z+5, 17, 1);
setTile(x-3, y+6, z+6, 18, 1);
setTile(x-3, y+6, z+7, 18, 1);
setTile(x-3, y+6, z+8, 18, 1);
setTile(x-3, y+7, z-4, 17, 1);
setTile(x-3, y+7, z-3, 17, 1);
setTile(x-3, y+7, z+2, 18, 1);
setTile(x-3, y+7, z+3, 18, 1);
setTile(x-3, y+7, z+4, 17, 1);
setTile(x-3, y+7, z+5, 17, 1);
setTile(x-3, y+7, z+6, 18, 1);
setTile(x-3, y+7, z+7, 18, 1);
setTile(x-3, y+8, z-4, 17, 1);
setTile(x-3, y+8, z-3, 17, 1);
setTile(x-3, y+8, z+3, 18, 1);
setTile(x-3, y+8, z+4, 17, 1);
setTile(x-3, y+8, z+5, 17, 1);
setTile(x-3, y+8, z+6, 18, 1);
setTile(x-3, y+9, z-7, 18, 1);
setTile(x-3, y+9, z-6, 18, 1);
setTile(x-3, y+9, z-5, 18, 1);
setTile(x-3, y+9, z-4, 17, 1);
setTile(x-3, y+9, z-3, 17, 1);
setTile(x-3, y+9, z-2, 18, 1);
setTile(x-3, y+9, z-1, 18, 1);
setTile(x-3, y+9, z, 18, 1);
setTile(x-3, y+9, z+3, 18, 1);
setTile(x-3, y+9, z+4, 17, 1);
setTile(x-3, y+9, z+5, 17, 1);
setTile(x-3, y+9, z+6, 18, 1);
setTile(x-3, y+10, z-8, 18, 1);
setTile(x-3, y+10, z-7, 18, 1);
setTile(x-3, y+10, z-6, 18, 1);
setTile(x-3, y+10, z-5, 18, 1);
setTile(x-3, y+10, z-4, 17, 1);
setTile(x-3, y+10, z-3, 17, 1);
setTile(x-3, y+10, z-2, 18, 1);
setTile(x-3, y+10, z-1, 18, 1);
setTile(x-3, y+10, z, 18, 1);
setTile(x-3, y+10, z+1, 18, 1);
setTile(x-3, y+10, z+2, 18, 1);
setTile(x-3, y+10, z+3, 18, 1);
setTile(x-3, y+10, z+4, 17, 1);
setTile(x-3, y+10, z+5, 17, 1);
setTile(x-3, y+10, z+6, 18, 1);
setTile(x-3, y+10, z+7, 18, 1);
setTile(x-3, y+11, z-7, 18, 1);
setTile(x-3, y+11, z-6, 18, 1);
setTile(x-3, y+11, z-5, 18, 1);
setTile(x-3, y+11, z-4, 17, 1);
setTile(x-3, y+11, z-3, 17, 1);
setTile(x-3, y+11, z-2, 18, 1);
setTile(x-3, y+11, z-1, 18, 1);
setTile(x-3, y+11, z, 18, 1);
setTile(x-3, y+11, z+3, 18, 1);
setTile(x-3, y+11, z+4, 17, 1);
setTile(x-3, y+11, z+5, 17, 1);
setTile(x-3, y+11, z+6, 18, 1);
setTile(x-3, y+12, z-6, 18, 1);
setTile(x-3, y+12, z-5, 18, 1);
setTile(x-3, y+12, z-4, 17, 1);
setTile(x-3, y+12, z-3, 17, 1);
setTile(x-3, y+12, z-2, 18, 1);
setTile(x-3, y+12, z-1, 18, 1);
setTile(x-3, y+12, z+4, 17, 1);
setTile(x-3, y+12, z+5, 17, 1);
setTile(x-3, y+13, z-6, 18, 1);
setTile(x-3, y+13, z-5, 18, 1);
setTile(x-3, y+13, z-4, 17, 1);
setTile(x-3, y+13, z-3, 17, 1);
setTile(x-3, y+13, z-2, 18, 1);
setTile(x-3, y+13, z-1, 18, 1);
setTile(x-3, y+13, z+4, 17, 1);
setTile(x-3, y+13, z+5, 17, 1);
setTile(x-3, y+14, z-7, 18, 1);
setTile(x-3, y+14, z-6, 18, 1);
setTile(x-3, y+14, z-5, 18, 1);
setTile(x-3, y+14, z-4, 17, 1);
setTile(x-3, y+14, z-3, 17, 1);
setTile(x-3, y+14, z-2, 18, 1);
setTile(x-3, y+14, z-1, 18, 1);
setTile(x-3, y+14, z, 18, 1);
setTile(x-3, y+14, z+3, 18, 1);
setTile(x-3, y+14, z+4, 18, 1);
setTile(x-3, y+14, z+5, 18, 1);
setTile(x-3, y+14, z+6, 18, 1);
setTile(x-3, y+15, z-6, 18, 1);
setTile(x-3, y+15, z-5, 18, 1);
setTile(x-3, y+15, z-4, 17, 1);
setTile(x-3, y+15, z-3, 17, 1);
setTile(x-3, y+15, z-2, 18, 1);
setTile(x-3, y+15, z-1, 18, 1);
setTile(x-3, y+15, z+4, 18, 1);
setTile(x-3, y+15, z+5, 18, 1);
setTile(x-3, y+16, z-5, 18, 1);
setTile(x-3, y+16, z-4, 17, 1);
setTile(x-3, y+16, z-3, 17, 1);
setTile(x-3, y+16, z-2, 18, 1);
setTile(x-3, y+17, z-5, 18, 1);
setTile(x-3, y+17, z-4, 17, 1);
setTile(x-3, y+17, z-3, 17, 1);
setTile(x-3, y+17, z-2, 18, 1);
setTile(x-3, y+18, z-6, 18, 1);
setTile(x-3, y+18, z-5, 18, 1);
setTile(x-3, y+18, z-4, 17, 1);
setTile(x-3, y+18, z-3, 17, 1);
setTile(x-3, y+18, z-2, 18, 1);
setTile(x-3, y+18, z-1, 18, 1);
setTile(x-3, y+19, z-5, 18, 1);
setTile(x-3, y+19, z-4, 17, 1);
setTile(x-3, y+19, z-3, 17, 1);
setTile(x-3, y+19, z-2, 18, 1);
setTile(x-3, y+20, z-6, 18, 1);
setTile(x-3, y+20, z-5, 18, 1);
setTile(x-3, y+20, z-4, 17, 1);
setTile(x-3, y+20, z-3, 17, 1);
setTile(x-3, y+20, z-2, 18, 1);
setTile(x-3, y+20, z-1, 18, 1);
setTile(x-3, y+21, z-4, 17, 1);
setTile(x-3, y+21, z-3, 17, 1);
setTile(x-3, y+22, z-5, 18, 1);
setTile(x-3, y+22, z-4, 17, 1);
setTile(x-3, y+22, z-3, 17, 1);
setTile(x-3, y+22, z-2, 18, 1);
setTile(x-3, y+23, z-4, 17, 1);
setTile(x-3, y+23, z-3, 17, 1);
setTile(x-3, y+24, z-5, 18, 1);
setTile(x-3, y+24, z-4, 18, 1);
setTile(x-3, y+24, z-3, 18, 1);
setTile(x-3, y+24, z-2, 18, 1);
setTile(x-3, y+25, z-4, 18, 1);
setTile(x-3, y+25, z-3, 18, 1);
setTile(x-2, y, z-2, 48);
setTile(x-2, y, z-1, 48);
setTile(x-2, y+2, z+2, 18, 1);
setTile(x-2, y+2, z+3, 18, 1);
setTile(x-2, y+2, z+4, 18, 1);
setTile(x-2, y+2, z+5, 18, 1);
setTile(x-2, y+2, z+6, 18, 1);
setTile(x-2, y+2, z+7, 18, 1);
setTile(x-2, y+3, z+2, 18, 1);
setTile(x-2, y+3, z+3, 18, 1);
setTile(x-2, y+3, z+4, 18, 1);
setTile(x-2, y+3, z+5, 18, 1);
setTile(x-2, y+3, z+6, 18, 1);
setTile(x-2, y+3, z+7, 18, 1);
setTile(x-2, y+4, z+3, 18, 1);
setTile(x-2, y+4, z+4, 18, 1);
setTile(x-2, y+4, z+5, 18, 1);
setTile(x-2, y+4, z+6, 18, 1);
setTile(x-2, y+5, z+3, 18, 1);
setTile(x-2, y+5, z+4, 18, 1);
setTile(x-2, y+5, z+5, 18, 1);
setTile(x-2, y+5, z+6, 18, 1);
setTile(x-2, y+6, z+2, 18, 1);
setTile(x-2, y+6, z+3, 18, 1);
setTile(x-2, y+6, z+4, 18, 1);
setTile(x-2, y+6, z+5, 18, 1);
setTile(x-2, y+6, z+6, 18, 1);
setTile(x-2, y+6, z+7, 18, 1);
setTile(x-2, y+7, z+3, 18, 1);
setTile(x-2, y+7, z+4, 18, 1);
setTile(x-2, y+7, z+5, 18, 1);
setTile(x-2, y+7, z+6, 18, 1);
setTile(x-2, y+8, z+4, 18, 1);
setTile(x-2, y+8, z+5, 18, 1);
setTile(x-2, y+9, z-6, 18, 1);
setTile(x-2, y+9, z-5, 18, 1);
setTile(x-2, y+9, z-4, 18, 1);
setTile(x-2, y+9, z-3, 18, 1);
setTile(x-2, y+9, z-2, 18, 1);
setTile(x-2, y+9, z-1, 18, 1);
setTile(x-2, y+9, z+4, 18, 1);
setTile(x-2, y+9, z+5, 18, 1);
setTile(x-2, y+10, z-7, 18, 1);
setTile(x-2, y+10, z-6, 18, 1);
setTile(x-2, y+10, z-5, 18, 1);
setTile(x-2, y+10, z-4, 18, 1);
setTile(x-2, y+10, z-3, 18, 1);
setTile(x-2, y+10, z-2, 18, 1);
setTile(x-2, y+10, z-1, 18, 1);
setTile(x-2, y+10, z, 18, 1);
setTile(x-2, y+10, z+3, 18, 1);
setTile(x-2, y+10, z+4, 18, 1);
setTile(x-2, y+10, z+5, 18, 1);
setTile(x-2, y+10, z+6, 18, 1);
setTile(x-2, y+11, z-6, 18, 1);
setTile(x-2, y+11, z-5, 18, 1);
setTile(x-2, y+11, z-4, 18, 1);
setTile(x-2, y+11, z-3, 18, 1);
setTile(x-2, y+11, z-2, 18, 1);
setTile(x-2, y+11, z-1, 18, 1);
setTile(x-2, y+11, z+4, 18, 1);
setTile(x-2, y+11, z+5, 18, 1);
setTile(x-2, y+12, z-5, 18, 1);
setTile(x-2, y+12, z-4, 18, 1);
setTile(x-2, y+12, z-3, 18, 1);
setTile(x-2, y+12, z-2, 18, 1);
setTile(x-2, y+13, z-5, 18, 1);
setTile(x-2, y+13, z-4, 18, 1);
setTile(x-2, y+13, z-3, 18, 1);
setTile(x-2, y+13, z-2, 18, 1);
setTile(x-2, y+14, z-6, 18, 1);
setTile(x-2, y+14, z-5, 18, 1);
setTile(x-2, y+14, z-4, 18, 1);
setTile(x-2, y+14, z-3, 18, 1);
setTile(x-2, y+14, z-2, 18, 1);
setTile(x-2, y+14, z-1, 18, 1);
setTile(x-2, y+14, z+4, 18, 1);
setTile(x-2, y+14, z+5, 18, 1);
setTile(x-2, y+15, z-5, 18, 1);
setTile(x-2, y+15, z-4, 18, 1);
setTile(x-2, y+15, z-3, 18, 1);
setTile(x-2, y+15, z-2, 18, 1);
setTile(x-2, y+16, z-4, 18, 1);
setTile(x-2, y+16, z-3, 18, 1);
setTile(x-2, y+17, z-4, 18, 1);
setTile(x-2, y+17, z-3, 18, 1);
setTile(x-2, y+18, z-5, 18, 1);
setTile(x-2, y+18, z-4, 18, 1);
setTile(x-2, y+18, z-3, 18, 1);
setTile(x-2, y+18, z-2, 18, 1);
setTile(x-2, y+19, z-4, 18, 1);
setTile(x-2, y+19, z-3, 18, 1);
setTile(x-2, y+20, z-5, 18, 1);
setTile(x-2, y+20, z-4, 18, 1);
setTile(x-2, y+20, z-3, 18, 1);
setTile(x-2, y+20, z-2, 18, 1);
setTile(x-2, y+22, z-4, 18, 1);
setTile(x-2, y+22, z-3, 18, 1);
setTile(x-2, y+24, z-4, 18, 1);
setTile(x-2, y+24, z-3, 18, 1);
setTile(x-1, y+1, z-6, 31, 1);
setTile(x-1, y+1, z-2, 39);
setTile(x-1, y+2, z+2, 18, 1);
setTile(x-1, y+2, z+3, 18, 1);
setTile(x-1, y+2, z+4, 18, 1);
setTile(x-1, y+2, z+5, 18, 1);
setTile(x-1, y+2, z+6, 18, 1);
setTile(x-1, y+2, z+7, 18, 1);
setTile(x-1, y+3, z+2, 18, 1);
setTile(x-1, y+3, z+3, 18, 1);
setTile(x-1, y+3, z+4, 18, 1);
setTile(x-1, y+3, z+5, 18, 1);
setTile(x-1, y+3, z+6, 18, 1);
setTile(x-1, y+3, z+7, 18, 1);
setTile(x-1, y+4, z+4, 18, 1);
setTile(x-1, y+4, z+5, 18, 1);
setTile(x-1, y+5, z+4, 18, 1);
setTile(x-1, y+5, z+5, 18, 1);
setTile(x-1, y+6, z+2, 18, 1);
setTile(x-1, y+6, z+3, 18, 1);
setTile(x-1, y+6, z+4, 18, 1);
setTile(x-1, y+6, z+5, 18, 1);
setTile(x-1, y+6, z+6, 18, 1);
setTile(x-1, y+6, z+7, 18, 1);
setTile(x-1, y+7, z+4, 18, 1);
setTile(x-1, y+7, z+5, 18, 1);
setTile(x-1, y+9, z-6, 18, 1);
setTile(x-1, y+9, z-5, 18, 1);
setTile(x-1, y+9, z-4, 18, 1);
setTile(x-1, y+9, z-3, 18, 1);
setTile(x-1, y+9, z-2, 18, 1);
setTile(x-1, y+9, z-1, 18, 1);
setTile(x-1, y+10, z-6, 18, 1);
setTile(x-1, y+10, z-5, 18, 1);
setTile(x-1, y+10, z-4, 18, 1);
setTile(x-1, y+10, z-3, 18, 1);
setTile(x-1, y+10, z-2, 18, 1);
setTile(x-1, y+10, z-1, 18, 1);
setTile(x-1, y+10, z+4, 18, 1);
setTile(x-1, y+10, z+5, 18, 1);
setTile(x-1, y+11, z-6, 18, 1);
setTile(x-1, y+11, z-5, 18, 1);
setTile(x-1, y+11, z-4, 18, 1);
setTile(x-1, y+11, z-3, 18, 1);
setTile(x-1, y+11, z-2, 18, 1);
setTile(x-1, y+11, z-1, 18, 1);
setTile(x-1, y+12, z-4, 18, 1);
setTile(x-1, y+12, z-3, 18, 1);
setTile(x-1, y+13, z-4, 18, 1);
setTile(x-1, y+13, z-3, 18, 1);
setTile(x-1, y+14, z-6, 18, 1);
setTile(x-1, y+14, z-5, 18, 1);
setTile(x-1, y+14, z-4, 18, 1);
setTile(x-1, y+14, z-3, 18, 1);
setTile(x-1, y+14, z-2, 18, 1);
setTile(x-1, y+14, z-1, 18, 1);
setTile(x-1, y+15, z-4, 18, 1);
setTile(x-1, y+15, z-3, 18, 1);
setTile(x-1, y+18, z-4, 18, 1);
setTile(x-1, y+18, z-3, 18, 1);
setTile(x-1, y+20, z-4, 18, 1);
setTile(x-1, y+20, z-3, 18, 1);
setTile(x, y+1, z-7, 31, 1);
setTile(x, y+1, z+2, 31, 1);
setTile(x, y+1, z+6, 31, 1);
setTile(x, y+1, z+7, 31, 2);
setTile(x, y+2, z+4, 18, 1);
setTile(x, y+2, z+5, 18, 1);
setTile(x, y+3, z+4, 18, 1);
setTile(x, y+3, z+5, 18, 1);
setTile(x, y+6, z+4, 18, 1);
setTile(x, y+6, z+5, 18, 1);
setTile(x, y+9, z-4, 18, 1);
setTile(x, y+9, z-3, 18, 1);
setTile(x, y+10, z-5, 18, 1);
setTile(x, y+10, z-4, 18, 1);
setTile(x, y+10, z-3, 18, 1);
setTile(x, y+10, z-2, 18, 1);
setTile(x, y+11, z-4, 18, 1);
setTile(x, y+11, z-3, 18, 1);
setTile(x, y+14, z-4, 18, 1);
setTile(x, y+14, z-3, 18, 1);
setTile(x+1, y, z+5, 48);
setTile(x+1, y+1, z-7, 31, 1);
setTile(x+1, y+1, z-4, 31, 2);
setTile(x+1, y+8, z-2, 18, 1);
setTile(x+1, y+8, z-1, 18, 1);
setTile(x+1, y+9, z-2, 18, 1);
setTile(x+1, y+9, z-1, 18, 1);
setTile(x+1, y+10, z-4, 18, 1);
setTile(x+1, y+10, z-3, 18, 1);
setTile(x+1, y+12, z-2, 18, 1);
setTile(x+1, y+12, z-1, 18, 1);
setTile(x+2, y, z-5, 9);
setTile(x+2, y, z-4, 9);
setTile(x+2, y, z+5, 48);
setTile(x+2, y, z+6, 48);
setTile(x+2, y+1, z+4, 39);
setTile(x+2, y+8, z-4, 18, 1);
setTile(x+2, y+8, z-3, 18, 1);
setTile(x+2, y+8, z-2, 18, 1);
setTile(x+2, y+8, z-1, 18, 1);
setTile(x+2, y+8, z, 18, 1);
setTile(x+2, y+8, z+1, 18, 1);
setTile(x+2, y+9, z-4, 18, 1);
setTile(x+2, y+9, z-3, 18, 1);
setTile(x+2, y+9, z-2, 18, 1);
setTile(x+2, y+9, z-1, 18, 1);
setTile(x+2, y+9, z, 18, 1);
setTile(x+2, y+9, z+1, 18, 1);
setTile(x+2, y+10, z-2, 18, 1);
setTile(x+2, y+10, z-1, 18, 1);
setTile(x+2, y+11, z-2, 18, 1);
setTile(x+2, y+11, z-1, 18, 1);
setTile(x+2, y+12, z-4, 18, 1);
setTile(x+2, y+12, z-3, 18, 1);
setTile(x+2, y+12, z-2, 18, 1);
setTile(x+2, y+12, z-1, 18, 1);
setTile(x+2, y+12, z, 18, 1);
setTile(x+2, y+12, z+1, 18, 1);
setTile(x+2, y+13, z-2, 18, 1);
setTile(x+2, y+13, z-1, 18, 1);
setTile(x+2, y+16, z-2, 18, 1);
setTile(x+2, y+16, z-1, 18, 1);
setTile(x+3, y, z-4, 9);
setTile(x+3, y, z-1, 48);
setTile(x+3, y+1, z-6, 31, 1);
setTile(x+3, y+1, z+2, 31, 1);
setTile(x+3, y+1, z+3, 39);
setTile(x+3, y+8, z-4, 18, 1);
setTile(x+3, y+8, z-3, 18, 1);
setTile(x+3, y+8, z-2, 18, 1);
setTile(x+3, y+8, z-1, 18, 1);
setTile(x+3, y+8, z, 18, 1);
setTile(x+3, y+8, z+1, 18, 1);
setTile(x+3, y+9, z-4, 18, 1);
setTile(x+3, y+9, z-3, 18, 1);
setTile(x+3, y+9, z-2, 18, 1);
setTile(x+3, y+9, z-1, 18, 1);
setTile(x+3, y+9, z, 18, 1);
setTile(x+3, y+9, z+1, 18, 1);
setTile(x+3, y+10, z-3, 18, 1);
setTile(x+3, y+10, z-2, 18, 1);
setTile(x+3, y+10, z-1, 18, 1);
setTile(x+3, y+10, z, 18, 1);
setTile(x+3, y+11, z-3, 18, 1);
setTile(x+3, y+11, z-2, 18, 1);
setTile(x+3, y+11, z-1, 18, 1);
setTile(x+3, y+11, z, 18, 1);
setTile(x+3, y+12, z-4, 18, 1);
setTile(x+3, y+12, z-3, 18, 1);
setTile(x+3, y+12, z-2, 18, 1);
setTile(x+3, y+12, z-1, 18, 1);
setTile(x+3, y+12, z, 18, 1);
setTile(x+3, y+12, z+1, 18, 1);
setTile(x+3, y+13, z-3, 18, 1);
setTile(x+3, y+13, z-2, 18, 1);
setTile(x+3, y+13, z-1, 18, 1);
setTile(x+3, y+13, z, 18, 1);
setTile(x+3, y+14, z-2, 18, 1);
setTile(x+3, y+14, z-1, 18, 1);
setTile(x+3, y+15, z-2, 18, 1);
setTile(x+3, y+15, z-1, 18, 1);
setTile(x+3, y+16, z-3, 18, 1);
setTile(x+3, y+16, z-2, 18, 1);
setTile(x+3, y+16, z-1, 18, 1);
setTile(x+3, y+16, z, 18, 1);
setTile(x+3, y+17, z-2, 18, 1);
setTile(x+3, y+17, z-1, 18, 1);
setTile(x+3, y+20, z-2, 18, 1);
setTile(x+3, y+20, z-1, 18, 1);
setTile(x+4, y+1, z+1, 31, 2);
setTile(x+4, y+1, z+2, 31, 2);
setTile(x+4, y+1, z+5, 31, 1);
setTile(x+4, y+1, z+8, 31, 2);
for(var yy=y+1;yy<y+20;yy++){
setTile(x+4, yy, z-2, 17, 1);
setTile(x+4, yy, z-1, 17, 1);
}
setTile(x+4, y+8, z-5, 18, 1);
setTile(x+4, y+8, z-4, 18, 1);
setTile(x+4, y+8, z-3, 18, 1);
setTile(x+4, y+8, z, 18, 1);
setTile(x+4, y+8, z+1, 18, 1);
setTile(x+4, y+8, z+2, 18, 1);
setTile(x+4, y+9, z-5, 18, 1);
setTile(x+4, y+9, z-4, 18, 1);
setTile(x+4, y+9, z-3, 18, 1);
setTile(x+4, y+9, z, 18, 1);
setTile(x+4, y+9, z+1, 18, 1);
setTile(x+4, y+9, z+2, 18, 1);
setTile(x+4, y+10, z-4, 18, 1);
setTile(x+4, y+10, z-3, 18, 1);
setTile(x+4, y+10, z, 18, 1);
setTile(x+4, y+10, z+1, 18, 1);
setTile(x+4, y+11, z-4, 18, 1);
setTile(x+4, y+11, z-3, 18, 1);
setTile(x+4, y+11, z, 18, 1);
setTile(x+4, y+11, z+1, 18, 1);
setTile(x+4, y+12, z-5, 18, 1);
setTile(x+4, y+12, z-4, 18, 1);
setTile(x+4, y+12, z-3, 18, 1);
setTile(x+4, y+12, z, 18, 1);
setTile(x+4, y+12, z+1, 18, 1);
setTile(x+4, y+12, z+2, 18, 1);
setTile(x+4, y+13, z-4, 18, 1);
setTile(x+4, y+13, z-3, 18, 1);
setTile(x+4, y+13, z, 18, 1);
setTile(x+4, y+13, z+1, 18, 1);
setTile(x+4, y+14, z-3, 18, 1);
setTile(x+4, y+14, z, 18, 1);
setTile(x+4, y+15, z-3, 18, 1);
setTile(x+4, y+15, z, 18, 1);
setTile(x+4, y+16, z-4, 18, 1);
setTile(x+4, y+16, z-3, 18, 1);
setTile(x+4, y+16, z, 18, 1);
setTile(x+4, y+16, z+1, 18, 1);
setTile(x+4, y+17, z-3, 18, 1);
setTile(x+4, y+17, z, 18, 1);
setTile(x+4, y+20, z-3, 18, 1);
setTile(x+4, y+20, z-2, 17, 1);
setTile(x+4, y+20, z-1, 18, 1);
setTile(x+4, y+20, z, 18, 1);
setTile(x+4, y+21, z-2, 18, 1);
setTile(x+4, y+21, z-1, 18, 1);
setTile(x+5, y, z-2, 3);
setTile(x+5, y, z-1, 3);
setTile(x+5, y+1, z-6, 31, 2);
setTile(x+5, y+1, z-2, 17, 1);
setTile(x+5, y+1, z-1, 17, 1);
setTile(x+5, y+1, z+3, 39);
setTile(x+5, y+1, z+4, 31, 2);
setTile(x+5, y+1, z+7, 31, 2);
setTile(x+5, y+2, z-2, 17, 1);
setTile(x+5, y+2, z-1, 17, 1);
setTile(x+5, y+3, z-2, 17, 1);
setTile(x+5, y+3, z-1, 17, 1);
setTile(x+5, y+4, z-2, 17, 1);
setTile(x+5, y+4, z-1, 17, 1);
setTile(x+5, y+5, z-2, 17, 1);
setTile(x+5, y+5, z-1, 17, 1);
setTile(x+5, y+6, z-2, 17, 1);
setTile(x+5, y+6, z-1, 17, 1);
setTile(x+5, y+7, z-2, 17, 1);
setTile(x+5, y+7, z-1, 17, 1);
setTile(x+5, y+8, z-5, 18, 1);
setTile(x+5, y+8, z-4, 18, 1);
setTile(x+5, y+8, z-3, 18, 1);
setTile(x+5, y+8, z-2, 17, 1);
setTile(x+5, y+8, z-1, 17, 1);
setTile(x+5, y+8, z, 18, 1);
setTile(x+5, y+8, z+1, 18, 1);
setTile(x+5, y+8, z+2, 18, 1);
setTile(x+5, y+9, z-5, 18, 1);
setTile(x+5, y+9, z-4, 18, 1);
setTile(x+5, y+9, z-3, 18, 1);
setTile(x+5, y+9, z-2, 17, 1);
setTile(x+5, y+9, z-1, 17, 1);
setTile(x+5, y+9, z, 18, 1);
setTile(x+5, y+9, z+1, 18, 1);
setTile(x+5, y+9, z+2, 18, 1);
setTile(x+5, y+10, z-4, 18, 1);
setTile(x+5, y+10, z-3, 18, 1);
setTile(x+5, y+10, z-2, 17, 1);
setTile(x+5, y+10, z-1, 17, 1);
setTile(x+5, y+10, z, 18, 1);
setTile(x+5, y+10, z+1, 18, 1);
setTile(x+5, y+11, z-4, 18, 1);
setTile(x+5, y+11, z-3, 18, 1);
setTile(x+5, y+11, z-2, 17, 1);
setTile(x+5, y+11, z-1, 17, 1);
setTile(x+5, y+11, z, 18, 1);
setTile(x+5, y+11, z+1, 18, 1);
setTile(x+5, y+12, z-5, 18, 1);
setTile(x+5, y+12, z-4, 18, 1);
setTile(x+5, y+12, z-3, 18, 1);
setTile(x+5, y+12, z-2, 17, 1);
setTile(x+5, y+12, z-1, 17, 1);
setTile(x+5, y+12, z, 18, 1);
setTile(x+5, y+12, z+1, 18, 1);
setTile(x+5, y+12, z+2, 18, 1);
setTile(x+5, y+13, z-4, 18, 1);
setTile(x+5, y+13, z-3, 18, 1);
setTile(x+5, y+13, z-2, 17, 1);
setTile(x+5, y+13, z-1, 17, 1);
setTile(x+5, y+13, z, 18, 1);
setTile(x+5, y+13, z+1, 18, 1);
setTile(x+5, y+14, z-3, 18, 1);
setTile(x+5, y+14, z-2, 17, 1);
setTile(x+5, y+14, z-1, 17, 1);
setTile(x+5, y+14, z, 18, 1);
setTile(x+5, y+15, z-3, 18, 1);
setTile(x+5, y+15, z-2, 17, 1);
setTile(x+5, y+15, z-1, 17, 1);
setTile(x+5, y+15, z, 18, 1);
setTile(x+5, y+16, z-4, 18, 1);
setTile(x+5, y+16, z-3, 18, 1);
setTile(x+5, y+16, z-2, 17, 1);
setTile(x+5, y+16, z-1, 17, 1);
setTile(x+5, y+16, z, 18, 1);
setTile(x+5, y+16, z+1, 18, 1);
setTile(x+5, y+17, z-3, 18, 1);
setTile(x+5, y+17, z-2, 17, 1);
setTile(x+5, y+17, z-1, 17, 1);
setTile(x+5, y+17, z, 18, 1);
setTile(x+5, y+18, z-2, 17, 1);
setTile(x+5, y+18, z-1, 17, 1);
setTile(x+5, y+19, z-2, 17, 1);
setTile(x+5, y+19, z-1, 17, 1);
setTile(x+5, y+20, z-3, 18, 1);
setTile(x+5, y+20, z-2, 18, 1);
setTile(x+5, y+20, z-1, 18, 1);
setTile(x+5, y+20, z, 18, 1);
setTile(x+5, y+21, z-2, 18, 1);
setTile(x+5, y+21, z-1, 18, 1);
setTile(x+6, y, z+7, 48);
setTile(x+6, y+1, z-5, 39);
setTile(x+6, y+1, z+2, 31, 1);
setTile(x+6, y+1, z+4, 31, 2);
setTile(x+6, y+1, z+5, 39);
setTile(x+6, y+1, z+6, 31, 2);
setTile(x+6, y+1, z+8, 31, 1);
setTile(x+6, y+8, z-4, 18, 1);
setTile(x+6, y+8, z-3, 18, 1);
setTile(x+6, y+8, z-2, 18, 1);
setTile(x+6, y+8, z-1, 18, 1);
setTile(x+6, y+8, z, 18, 1);
setTile(x+6, y+8, z+1, 18, 1);
setTile(x+6, y+9, z-4, 18, 1);
setTile(x+6, y+9, z-3, 18, 1);
setTile(x+6, y+9, z-2, 18, 1);
setTile(x+6, y+9, z-1, 18, 1);
setTile(x+6, y+9, z, 18, 1);
setTile(x+6, y+9, z+1, 18, 1);
setTile(x+6, y+10, z-3, 18, 1);
setTile(x+6, y+10, z-2, 18, 1);
setTile(x+6, y+10, z-1, 18, 1);
setTile(x+6, y+10, z, 18, 1);
setTile(x+6, y+11, z-3, 18, 1);
setTile(x+6, y+11, z-2, 18, 1);
setTile(x+6, y+11, z-1, 18, 1);
setTile(x+6, y+11, z, 18, 1);
setTile(x+6, y+12, z-4, 18, 1);
setTile(x+6, y+12, z-3, 18, 1);
setTile(x+6, y+12, z-2, 18, 1);
setTile(x+6, y+12, z-1, 18, 1);
setTile(x+6, y+12, z, 18, 1);
setTile(x+6, y+12, z+1, 18, 1);
setTile(x+6, y+13, z-3, 18, 1);
setTile(x+6, y+13, z-2, 18, 1);
setTile(x+6, y+13, z-1, 18, 1);
setTile(x+6, y+13, z, 18, 1);
setTile(x+6, y+14, z-2, 18, 1);
setTile(x+6, y+14, z-1, 18, 1);
setTile(x+6, y+15, z-2, 18, 1);
setTile(x+6, y+15, z-1, 18, 1);
setTile(x+6, y+16, z-3, 18, 1);
setTile(x+6, y+16, z-2, 18, 1);
setTile(x+6, y+16, z-1, 18, 1);
setTile(x+6, y+16, z, 18, 1);
setTile(x+6, y+17, z-2, 18, 1);
setTile(x+6, y+17, z-1, 18, 1);
setTile(x+6, y+20, z-2, 18, 1);
setTile(x+6, y+20, z-1, 18, 1);
setTile(x+7, y, z+8, 48);
setTile(x+7, y+1, z-5, 31, 1);
setTile(x+7, y+1, z-2, 39);
setTile(x+7, y+1, z+4, 31, 1);
setTile(x+7, y+1, z+6, 31, 2);
setTile(x+7, y+1, z+7, 48);
setTile(x+7, y+8, z-4, 18, 1);
setTile(x+7, y+8, z-3, 18, 1);
setTile(x+7, y+8, z-2, 18, 1);
setTile(x+7, y+8, z-1, 18, 1);
setTile(x+7, y+8, z, 18, 1);
setTile(x+7, y+8, z+1, 18, 1);
setTile(x+7, y+9, z-4, 18, 1);
setTile(x+7, y+9, z-3, 18, 1);
setTile(x+7, y+9, z-2, 18, 1);
setTile(x+7, y+9, z-1, 18, 1);
setTile(x+7, y+9, z, 18, 1);
setTile(x+7, y+9, z+1, 18, 1);
setTile(x+7, y+10, z-2, 18, 1);
setTile(x+7, y+10, z-1, 18, 1);
setTile(x+7, y+11, z-2, 18, 1);
setTile(x+7, y+11, z-1, 18, 1);
setTile(x+7, y+12, z-4, 18, 1);
setTile(x+7, y+12, z-3, 18, 1);
setTile(x+7, y+12, z-2, 18, 1);
setTile(x+7, y+12, z-1, 18, 1);
setTile(x+7, y+12, z, 18, 1);
setTile(x+7, y+12, z+1, 18, 1);
setTile(x+7, y+13, z-2, 18, 1);
setTile(x+7, y+13, z-1, 18, 1);
setTile(x+7, y+16, z-2, 18, 1);
setTile(x+7, y+16, z-1, 18, 1);
setTile(x+8, y+1, z+2, 31, 1);
setTile(x+8, y+1, z+5, 31, 1);
setTile(x+8, y+1, z+6, 31, 2);
setTile(x+8, y+1, z+8, 31, 1);
setTile(x+8, y+8, z-2, 18, 1);
setTile(x+8, y+8, z-1, 18, 1);
setTile(x+8, y+9, z-2, 18, 1);
setTile(x+8, y+9, z-1, 18, 1);
setTile(x+8, y+12, z-2, 18, 1);
setTile(x+8, y+12, z-1, 18, 1);
arroundMobHealthDown(taiga, 10, 10);
Level.spawnMob(x+4, y+3, z+6, 14);
Level.dropItem(x, y+1.1, z, 0.5, 352, 10, 0);
tax = x;
tay = y;
taz = z;
ta4 = true;
ta4a = 1800;
skillCool(ESP.getUser(), 4);
}
//ruin4
if(ruin==ESP.getUser()&&ru4a==0){
ESP.heal(30);
ESP.sbm("The Ruining");
rux = Player.getX();
ruy = Player.getY()-2;
ruz = Player.getZ();
for(var yy=ruy+1;yy<ruy+4;yy++){
setTile(rux+8, yy, ruz+8, 46);
setTile(rux+8, yy, ruz, 46);
setTile(rux+8, yy, ruz-8, 46);
setTile(rux, yy, ruz+8, 46);
setTile(rux, yy, ruz-8, 46);
setTile(rux-8, yy, ruz+8, 46);
setTile(rux-8, yy, ruz, 46);
setTile(rux-8, yy, ruz-8, 46);
}
ESP.antiLack(90);
explode(rux+8, ruy+2.7, ruz+8, 0.7);
explode(rux+8, ruy+2.7, ruz, 0.7);
explode(rux+8, ruy+2.7, ruz-8, 0.7);
explode(rux, ruy+2.7, ruz+8, 0.7);
explode(rux, ruy+2.7, ruz-8, 0.7);
explode(rux-8, ruy+2.7, ruz+8, 0.7);
explode(rux-8, ruy+2.7, ruz, 0.7);
explode(rux-8, ruy+2.7, ruz-8, 0.7);
ru4 = true;
ru4a = 1800;
skillCool(ESP.getUser(), 4);
}
//swamp4
if(swamp==ESP.getUser()&&sw4a==0){
if(sw4b==false){
swx = x;
swy = y;
swz = z;
if(b==2)
setTile(x, y, z, 3);
sw4b = true
}
else if(sw4b==true){
ESP.heal(30);
ESP.sbm("Dead Swamp");
teleport(ESP.getUser(), swx, swy+3, swz);
for(var xx=x-9;xx<x+10;xx++)
for(var zz=z-9;zz<z+10;zz++)
setTile(xx, y, zz, 11);
setTile(x-9, y, z-9, 2);
setTile(x-9, y, z-5, 2);
setTile(x-9, y, z-2, 2);
setTile(x-9, y, z+2, 2);
setTile(x-9, y+1, z-6, 111);
setTile(x-9, y+1, z+1, 111);
setTile(x-8, y, z-8, 2);
setTile(x-8, y, z-5, 2);
setTile(x-8, y, z-4, 2);
setTile(x-8, y, z-3, 2);
setTile(x-8, y, z+1, 2);
setTile(x-8, y, z+4, 2);
setTile(x-8, y, z+7, 2);
setTile(x-8, y+1, z-1, 111);
setTile(x-8, y+1, z+3, 111);
setTile(x-8, y+1, z+6, 111);
setTile(x-8, y+1, z+9, 111);
setTile(x-7, y, z-4, 2);
setTile(x-7, y, z-1, 2);
setTile(x-7, y, z, 2);
setTile(x-7, y, z+2, 2);
setTile(x-7, y, z+3, 2);
setTile(x-7, y, z+7, 2);
setTile(x-7, y+1, z-6, 111);
setTile(x-7, y+1, z+5, 111);
setTile(x-6, y, z-8, 2);
setTile(x-6, y, z-6, 2);
setTile(x-6, y, z-5, 2);
setTile(x-6, y, z-3, 2);
setTile(x-6, y, z-1, 2);
setTile(x-6, y, z+4, 2);
setTile(x-6, y, z+6, 2);
setTile(x-6, y, z+8, 2);
setTile(x-6, y+1, z+1, 111);
setTile(x-6, y+1, z+9, 111);
setTile(x-5, y, z-5, 2);
setTile(x-5, y, z-2, 2);
setTile(x-5, y, z-1, 2);
setTile(x-5, y, z+1, 2);
setTile(x-5, y, z+2, 2);
setTile(x-5, y, z+4, 2);
setTile(x-5, y, z+7, 2);
setTile(x-5, y+1, z-4, 111);
setTile(x-4, y, z-7, 2);
setTile(x-4, y, z-3, 2);
setTile(x-4, y, z-1, 2);
setTile(x-4, y, z+6, 2);
setTile(x-4, y, z+8, 2);
setTile(x-4, y+1, z-8, 111);
setTile(x-4, y+1, z-5, 111);
setTile(x-3, y, z-7, 2);
setTile(x-3, y, z+1, 2);
setTile(x-3, y, z+3, 2);
setTile(x-3, y, z+8, 2);
setTile(x-3, y+1, z-5, 111);
setTile(x-3, y+1, z-2, 111);
setTile(x-3, y+1, z-1, 111);
setTile(x-3, y+1, z+7, 111);
setTile(x-2, y, z-9, 2);
setTile(x-2, y, z-6, 2);
setTile(x-2, y, z-4, 2);
setTile(x-2, y, z-2, 2);
setTile(x-2, y, z, 2);
setTile(x-2, y, z+2, 2);
setTile(x-2, y, z+5, 2);
setTile(x-2, y+1, z-3, 111);
setTile(x-1, y, z-6, 2);
setTile(x-1, y, z-5, 2);
setTile(x-1, y, z-2, 2);
setTile(x-1, y, z+3, 2);
setTile(x-1, y, z+4, 2);
setTile(x-1, y, z+7, 2);
setTile(x-1, y+1, z-3, 111);
setTile(x-1, y+1, z+6, 111);
setTile(x-1, y+1, z+8, 111);
setTile(x, y, z-7, 2);
setTile(x, y, z-4, 2);
setTile(x, y, z-2, 2);
setTile(x, y, z, 3);
setTile(x, y, z+2, 2);
setTile(x, y+1, z-5, 111);
setTile(x+1, y, z-5, 2);
setTile(x+1, y, z-1, 2);
setTile(x+1, y, z+1, 2);
setTile(x+1, y, z+4, 2);
setTile(x+1, y, z+6, 2);
setTile(x+1, y, z+8, 2);
setTile(x+1, y+1, z-6, 111);
setTile(x+1, y+1, z-3, 111);
setTile(x+2, y, z-9, 2);
setTile(x+2, y, z-7, 2);
setTile(x+2, y, z-5, 2);
setTile(x+2, y, z-3, 2);
setTile(x+2, y, z+1, 2);
setTile(x+2, y, z+4, 2);
setTile(x+2, y+1, z-8, 111);
setTile(x+2, y+1, z-4, 111);
setTile(x+2, y+1, z, 111);
setTile(x+2, y+1, z+3, 111);
setTile(x+2, y+1, z+7, 111);
setTile(x+3, y, z-7, 2);
setTile(x+3, y, z-6, 2);
setTile(x+3, y, z-5, 2);
setTile(x+3, y, z-3, 2);
setTile(x+3, y, z-2, 2);
setTile(x+3, y, z+3, 2);
setTile(x+3, y, z+5, 2);
setTile(x+4, y, z-7, 2);
setTile(x+4, y, z-6, 2);
setTile(x+4, y, z-1, 2);
setTile(x+4, y, z+1, 2);
setTile(x+4, y, z+7, 2);
setTile(x+4, y+1, z-2, 111);
setTile(x+4, y+1, z, 111);
setTile(x+5, y, z-8, 2);
setTile(x+5, y, z-5, 2);
setTile(x+5, y, z-4, 2);
setTile(x+5, y, z, 2);
setTile(x+5, y, z+1, 2);
setTile(x+5, y, z+3, 2);
setTile(x+5, y, z+4, 2);
setTile(x+5, y, z+6, 2);
setTile(x+5, y+1, z+7, 111);
setTile(x+6, y, z-7, 2);
setTile(x+6, y, z-4, 2);
setTile(x+6, y, z-2, 2);
setTile(x+6, y, z-1, 2);
setTile(x+6, y, z+1, 2);
setTile(x+6, y, z+2, 2);
setTile(x+6, y, z+5, 2);
setTile(x+7, y, z-7, 2);
setTile(x+7, y, z+3, 2);
setTile(x+7, y, z+4, 2);
setTile(x+7, y, z+5, 2);
setTile(x+7, y, z+6, 2);
setTile(x+7, y, z+7, 2);
setTile(x+7, y, z+8, 2);
setTile(x+7, y+1, z-5, 111);
setTile(x+7, y+1, z-4, 111);
setTile(x+7, y+1, z+2, 111);
setTile(x+8, y, z-9, 2);
setTile(x+8, y, z-2, 2);
setTile(x+8, y, z, 2);
setTile(x+8, y, z+5, 2);
setTile(x+8, y+1, z-5, 111);
setTile(x+9, y, z-7, 2);
setTile(x+9, y, z-5, 2);
setTile(x+9, y, z+4, 2);
setTile(x+9, y, z+6, 2);
setTile(x+9, y+1, z, 111);
arroundMobHealthDown(swamp, 10, 5);
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y+4;yy<y+8;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 18)
for(var yy=y+1;yy<y+7;yy++)
setTile(x, yy, z, 17);
setTile(x-3, y+4, z-2, 18);
setTile(x-3, y+4, z-1, 18);
setTile(x-3, y+4, z, 18);
setTile(x-3, y+4, z+1, 18);
setTile(x-3, y+4, z+2, 18);
setTile(x-3, y+4, z+3, 18);
setTile(x-3, y+5, z-2, 18);
setTile(x-3, y+5, z-1, 18);
setTile(x-3, y+5, z, 18);
setTile(x-3, y+5, z+1, 18);
setTile(x-3, y+5, z+2, 18);
setTile(x-2, y+4, z-3, 18);
setTile(x-2, y+4, z-2, 18);
setTile(x-2, y+4, z-1, 18);
setTile(x-2, y+4, z, 18);
setTile(x-2, y+4, z+1, 18);
setTile(x-2, y+4, z+2, 18);
setTile(x-2, y+4, z+3, 18);
setTile(x-2, y+5, z-3, 18);
setTile(x-2, y+5, z-2, 18);
setTile(x-2, y+5, z-1, 18);
setTile(x-2, y+5, z, 18);
setTile(x-2, y+5, z+1, 18);
setTile(x-2, y+5, z+2, 18);
setTile(x-2, y+5, z+3, 18);
setTile(x-2, y+6, z-1, 18);
setTile(x-2, y+6, z, 18);
setTile(x-2, y+6, z+1, 18);
setTile(x-2, y+6, z+2, 18);
setTile(x-2, y+7, z-1, 18);
setTile(x-2, y+7, z, 18);
setTile(x-2, y+7, z+1, 18);
setTile(x-1, y+4, z-3, 18);
setTile(x-1, y+4, z-2, 18);
setTile(x-1, y+4, z+2, 18);
setTile(x-1, y+4, z+3, 18);
setTile(x-1, y+5, z-3, 18);
setTile(x-1, y+5, z-2, 18);
setTile(x-1, y+5, z+2, 18);
setTile(x-1, y+5, z+3, 18);
setTile(x-1, y+6, z-2, 18);
setTile(x-1, y+6, z+2, 18);
setTile(x-1, y+7, z-2, 18);
setTile(x-1, y+7, z+2, 18);
setTile(x, y+4, z-3, 18);
setTile(x, y+4, z-2, 18);
setTile(x, y+4, z+2, 18);
setTile(x, y+4, z+3, 18);
setTile(x, y+5, z-3, 18);
setTile(x, y+5, z-2, 18);
setTile(x, y+5, z+2, 18);
setTile(x, y+5, z+3, 18);
setTile(x, y+6, z-2, 18);
setTile(x, y+6, z+2, 18);
setTile(x, y+7, z-2, 18);
setTile(x, y+7, z+2, 18);
setTile(x+1, y+4, z-3, 18);
setTile(x+1, y+4, z-2, 18);
setTile(x+1, y+4, z+2, 18);
setTile(x+1, y+4, z+3, 18);
setTile(x+1, y+5, z-3, 18);
setTile(x+1, y+5, z-2, 18);
setTile(x+1, y+5, z+2, 18);
setTile(x+1, y+5, z+3, 18);
setTile(x+1, y+6, z-2, 18);
setTile(x+1, y+6, z+2, 18);
setTile(x+1, y+7, z-2, 18);
setTile(x+1, y+7, z+2, 18);
setTile(x+2, y+4, z-3, 18);
setTile(x+2, y+4, z-2, 18);
setTile(x+2, y+4, z-1, 18);
setTile(x+2, y+4, z, 18);
setTile(x+2, y+4, z+1, 18);
setTile(x+2, y+4, z+2, 18);
setTile(x+2, y+4, z+3, 18);
setTile(x+2, y+5, z-3, 18);
setTile(x+2, y+5, z-2, 18);
setTile(x+2, y+5, z-1, 18);
setTile(x+2, y+5, z, 18);
setTile(x+2, y+5, z+1, 18);
setTile(x+2, y+5, z+2, 18);
setTile(x+2, y+5, z+3, 18);
setTile(x+2, y+6, z-2, 18);
setTile(x+2, y+6, z-1, 18);
setTile(x+2, y+6, z, 18);
setTile(x+2, y+6, z+1, 18);
setTile(x+2, y+6, z+2, 18);
setTile(x+2, y+7, z-1, 18);
setTile(x+2, y+7, z, 18);
setTile(x+2, y+7, z+1, 18);
setTile(x+3, y+4, z-2, 18);
setTile(x+3, y+4, z-1, 18);
setTile(x+3, y+4, z, 18);
setTile(x+3, y+4, z+1, 18);
setTile(x+3, y+4, z+2, 18);
setTile(x+3, y+4, z+3, 18);
setTile(x+3, y+5, z-3, 18);
setTile(x+3, y+5, z-2, 18);
setTile(x+3, y+5, z-1, 18);
setTile(x+3, y+5, z, 18);
setTile(x+3, y+5, z+1, 18);
setTile(x+3, y+5, z+2, 18);
setTile(x-4, y+1, z-1, 106, 8);
setTile(x-4, y+1, z, 106, 8);
setTile(x-4, y+1, z+1, 106, 8);
setTile(x-4, y+1, z+2, 106, 8);
setTile(x-4, y+1, z+3, 106, 8);
setTile(x-4, y+2, z-1, 106, 8);
setTile(x-4, y+2, z, 106, 8);
setTile(x-4, y+2, z+1, 106, 8);
setTile(x-4, y+2, z+2, 106, 8);
setTile(x-4, y+2, z+3, 106, 8);
setTile(x-4, y+3, z-1, 106, 8);
setTile(x-4, y+3, z, 106, 8);
setTile(x-4, y+3, z+1, 106, 8);
setTile(x-4, y+3, z+2, 106, 8);
setTile(x-4, y+3, z+3, 106, 8);
setTile(x-4, y+4, z-1, 106, 8);
setTile(x-4, y+4, z, 106, 8);
setTile(x-4, y+4, z+1, 106, 8);
setTile(x-4, y+4, z+2, 106, 8);
setTile(x-4, y+4, z+3, 106, 8);
setTile(x-4, y+5, z-1, 106, 8);
setTile(x-4, y+5, z+2, 106, 8);
setTile(x-3, y+1, z+4, 106, 4);
setTile(x-3, y+2, z+4, 106, 4);
setTile(x-3, y+3, z+4, 106, 4);
setTile(x-3, y+4, z+4, 106, 4);
setTile(x-3, y+6, z, 106, 8);
setTile(x-3, y+6, z+1, 106, 8);
setTile(x-3, y+6, z+2, 106, 8);
setTile(x-3, y+7, z+1, 106, 8);
setTile(x-2, y+6, z-2, 106, 8);
setTile(x-2, y+7, z-2, 106, 8);
setTile(x-1, y+6, z-3, 106, 1);
setTile(x, y+6, z-3, 106, 1);
setTile(x, y+6, z+3, 106, 4);
setTile(x, y+7, z+3, 106, 4);
setTile(x+3, y+6, z-1, 106, 2);
setTile(x+3, y+6, z, 106, 2);
setTile(x+3, y+7, z-1, 106, 2);
setTile(x+2, y+7, z+2, 106, 4);
for(var yy=y+1;yy<y+5;yy++){
setTile(x+4, yy, z-1, 106, 2);
setTile(x+3, yy, z+4, 106, 4);
}
Level.spawnMob(x+6, y+3, z+6, 37);
Level.spawnMob(x+6, y+3, z-6, 37);
Level.spawnMob(x-6, y+3, z+6, 37);
Level.spawnMob(x-6, y+3, z-6, 37);
swx = x;
swy = y;
swz = z;
sw4b = false;
sw4 = true;
sw4a = 1800;
skillCool(ESP.getUser(), 4);
}
}
//asum4
if(asum==ESP.getUser()&&asum4a==0){
ESP.heal(asum);
ESP.sbm("Hyper Summon");
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 32);
Level.spawnMob(x, y+3, z, 34);
Level.spawnMob(x, y+3, z, 34);
Level.spawnMob(x, y+3, z, 34);
Level.spawnMob(x, y+3, z, 33);
Level.spawnMob(x, y+3, z, 33);
Level.spawnMob(x, y+3, z, 33);
Level.spawnMob(x, y+3, z, 35);
Level.spawnMob(x, y+3, z, 35);
Level.spawnMob(x, y+3, z, 35);
Level.spawnMob(x, y+3, z, 36);
Level.spawnMob(x, y+3, z, 36);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 39);
Level.spawnMob(x, y+3, z, 39);
Level.spawnMob(x, y+3, z, 38);
Level.spawnMob(x, y+3, z, 38);
asum4 = true;
asum4a = 1800;
skillCool(ESP.getUser(), 4);
}
//amage4
if(amage==ESP.getUser()&&am4a==0){
if(am4b==false){
if(b==2)
setTile(x, y, z, 3);
am4x = x;
am4y = y;
am4z = z;
am4b = true;
}
else if(am4b==true){
ESP.heal(30);
ESP.sbm("Ground Down");
amx = Player.getX();
amy = Player.getY()-2;
amz = Player.getZ();
for(var xx=amx-12;xx<amx+13;xx++)
for(var zz=amz-12;zz<amz+13;zz++)
setTile(xx, amy, zz, 0);
arroundMobHealthDown(amage, 25, 17);
teleport(ESP.getUser(), am4x, am4y+3, am4z);
am4b = false;
am4 = true;
am4a = 1800;
skillCool(ESP.getUser(), 4);
}
}
//puella4
if(puella==ESP.getUser()&&pm4a==0){
ESP.sbm("Magical Heart");
ESP.heal(puella);
pm4x = Player.getX();
pm4y = Player.getY()-2;
pm4z = Player.getZ();
arroundMobHealthDown(puella, 30, 15);
setTile(pm4x-4, pm4y, pm4z, 35, 6);
setTile(pm4x-3, pm4y, pm4z-1, 35, 6);
setTile(pm4x-3, pm4y, pm4z, 35, 6);
setTile(pm4x-3, pm4y, pm4z+1, 35, 6);
setTile(pm4x-2, pm4y, pm4z-2, 35, 6);
setTile(pm4x-2, pm4y, pm4z-1, 35, 6);
setTile(pm4x-2, pm4y, pm4z, 35, 6);
setTile(pm4x-2, pm4y, pm4z+1, 35, 6);
setTile(pm4x-2, pm4y, pm4z+2, 35, 6);
for(var zz=pm4z-4;zz<pm4z+5;zz++){
setTile(pm4x, pm4y, zz, 35, 6);
setTile(pm4x+1, pm4y, zz, 35, 6);
}
for(var zz=pm4z-3;zz<pm4z+4;zz++)
setTile(pm4x-1, pm4y, zz, 35, 6);
setTile(pm4x+2, pm4y, pm4z-3, 35, 6);
setTile(pm4x+2, pm4y, pm4z-2, 35, 6);
setTile(pm4x+2, pm4y, pm4z-1, 35, 6);
setTile(pm4x+2, pm4y, pm4z+1, 35, 6);
setTile(pm4x+2, pm4y, pm4z+2, 35, 6);
setTile(pm4x+2, pm4y, pm4z+3, 35, 6);
setTile(pm4x+3, pm4y, pm4z-2, 35, 6);
setTile(pm4x+3, pm4y, pm4z+2, 35, 6);
pm4 = true;
pm4a = 1800;
skillCool(ESP.getUser(), 4);
}
//hbuild4
if(hbuild==ESP.getUser()&&hb4a==0){
ESP.sbm("The Structure");
ESP.heal(hbuild);
arroundMobHealthDown(hbuild, 30, 15);
for(var yy=y+1;yy<y+27;yy++){
for(var xx=x-4;xx<x+5;xx++){
setTile(xx, yy, z+4, 155);
setTile(xx, yy, z-4, 155);
}
for(var zz=z-3;zz<z+4;zz++){
setTile(x+4, yy, zz, 155);
setTile(x-4, yy, zz, 155);
}
}
for(var xx=x-3;xx<x+4;xx++){
for(var zz=z-3;zz<z+4;zz++){
setTile(xx, y+1, zz, 155);
setTile(xx, y+9, zz, 155);
setTile(xx, y+13, zz, 155);
setTile(xx, y+17, zz, 155);
setTile(xx, y+21, zz, 155);
setTile(xx, y+25, zz, 155);
}
for(var zz=z;zz<z+4;zz++)
setTile(xx, y+5, zz, 155);
}
for(var yy=y+1;yy<y+26;yy++)
setTile(x+2, yy, z+3, 155);
for(var yy=y+2;yy<y+8;yy++){
setTile(x-2, yy, z-4, 20);
setTile(x-3, yy, z-4, 20);
setTile(x+2, yy, z-4, 20);
setTile(x+3, yy, z-4, 20);
setTile(x-4, yy, z-1, 20);
setTile(x-4, yy, z-2, 20);
setTile(x-4, yy, z-3, 20);
setTile(x+4, yy, z-1, 20);
setTile(x+4, yy, z-2, 20);
setTile(x+4, yy, z-3, 20);
}
for(var yy=y+5;yy<y+8;yy++){
setTile(x+1, yy, z-4, 20);
setTile(x, yy, z-4, 20);
setTile(x-1, yy, z-4, 20);
}
for(var yy=y+22;yy<y+25;yy++){
for(var xx=x-3;xx<x+4;xx++)
setTile(xx, yy, z-4, 20);
for(var zz=z-3;zz<z+4;zz++)
setTile(x-4, yy, zz, 20);
for(var xx=x-3;xx<x+2;xx++)
setTile(xx, yy, z+4, 20);
for(var zz=z-3;zz<z+2;zz++)
setTile(x+4, yy, zz, 20);
}
setTile(x+3, y+5, z+3, 0);
setTile(x+3, y+9, z+3, 0);
setTile(x+3, y+13, z+3, 0);
setTile(x+3, y+17, z+3, 0);
setTile(x+3, y+21, z+3, 0);
setTile(x+3, y+25, z+3, 0);
for(var yy=y+9;yy<y+21;yy++){
for(var xx=x-3;xx<x+4;xx++)
setTile(xx, yy, z, 155);
for(var zz=z-3;zz<z+1;zz++)
setTile(x, yy, zz, 155);
}
setTile(x-4, y+3, z+1, 102);
setTile(x-4, y+3, z+2, 102);
setTile(x-4, y+7, z+1, 102);
setTile(x-4, y+7, z+2, 102);
setTile(x-4, y+11, z-2, 102);
setTile(x-4, y+11, z+2, 102);
setTile(x-4, y+15, z-2, 102);
setTile(x-4, y+15, z+2, 102);
setTile(x-4, y+19, z-2, 102);
setTile(x-4, y+19, z+2, 102);
setTile(x-4, y+27, z-4, 50, 5);
setTile(x-4, y+27, z+4, 50, 5);
setTile(x-3, y+2, z+1, 155);
setTile(x-3, y+2, z+2, 54, 5);
setTile(x-3, y+2, z+3, 54, 5);
setTile(x-3, y+6, z, 102);
setTile(x-3, y+10, z-3, 26, 10);
setTile(x-3, y+10, z-2, 26, 2);
setTile(x-3, y+14, z-3, 26, 10);
setTile(x-3, y+14, z-2, 26, 2);
setTile(x-3, y+18, z-3, 26, 10);
setTile(x-3, y+18, z-2, 26, 2);
setTile(x-3, y+22, z-2, 135, 1);
setTile(x-3, y+22, z, 135, 1);
setTile(x-3, y+22, z+2, 135, 1);
setTile(x-2, y+2, z+1, 155);
setTile(x-2, y+3, z+4, 102);
setTile(x-2, y+6, z, 102);
setTile(x-2, y+7, z+4, 102);
setTile(x-2, y+10, z-3, 54, 3);
setTile(x-2, y+11, z-4, 102);
setTile(x-2, y+11, z+4, 102);
setTile(x-2, y+14, z-3, 61, 3);
setTile(x-2, y+15, z-4, 102);
setTile(x-2, y+15, z+4, 102);
setTile(x-2, y+18, z-3, 54, 3);
setTile(x-2, y+19, z-4, 102);
setTile(x-2, y+19, z+4, 102);
setTile(x-2, y+22, z-2, 85, 2);
setTile(x-2, y+22, z, 85, 2);
setTile(x-2, y+22, z+2, 85, 2);
setTile(x-2, y+23, z-2, 171);
setTile(x-2, y+23, z, 171);
setTile(x-2, y+23, z+2, 171);
setTile(x-2, y+25, z-2, 89);
setTile(x-2, y+25, z+2, 89);
setTile(x-2, y+26, z-2, 89);
setTile(x-2, y+26, z-1, 44, 6);
setTile(x-2, y+26, z, 44, 6);
setTile(x-2, y+26, z+1, 44, 6);
setTile(x-2, y+26, z+2, 89);
setTile(x-1, y+1, z-5, 156);
setTile(x-1, y+2, z+1, 155);
setTile(x-1, y+3, z-5, 50, 4);
setTile(x-1, y+3, z+4, 102);
setTile(x-1, y+6, z, 102);
setTile(x-1, y+7, z+4, 102);
setTile(x-1, y+10, z-3, 61, 3);
setTile(x-1, y+10, z, 64, 1);
setTile(x-1, y+11, z, 64, 8);
setTile(x-1, y+11, z+4, 102);
setTile(x-1, y+14, z-3, 54, 3);
setTile(x-1, y+14, z, 64, 1);
setTile(x-1, y+15, z, 64, 8);
setTile(x-1, y+15, z+4, 102);
setTile(x-1, y+18, z-3, 61, 3);
setTile(x-1, y+18, z, 64, 1);
setTile(x-1, y+19, z, 64, 8);
setTile(x-1, y+19, z+4, 102);
setTile(x-1, y+22, z-2, 135);
setTile(x-1, y+22, z, 135);
setTile(x-1, y+22, z+2, 135);
setTile(x-1, y+26, z-2, 44, 6);
setTile(x-1, y+26, z+2, 44, 6);
setTile(x, y+1, z-5, 156, 2);
setTile(x, y+2, z-4, 64, 3);
setTile(x, y+2, z+1, 155);
setTile(x, y+2, z+2, 155);
setTile(x, y+3, z-4, 64, 8);
setTile(x, y+3, z+3, 96);
setTile(x, y+4, z-5, 68, 2);
setTile(x, y+6, z, 102);
setTile(x, y+10, z-2, 58);
setTile(x, y+12, z-2, 89);
setTile(x, y+12, z, 89);
setTile(x, y+14, z-2, 58);
setTile(x, y+16, z-2, 89);
setTile(x, y+16, z, 89);
setTile(x, y+18, z-2, 58);
setTile(x, y+20, z-2, 89);
setTile(x, y+20, z, 89);
setTile(x, y+25, z, 89);
setTile(x, y+26, z-2, 44, 6);
setTile(x, y+26, z, 89);
setTile(x, y+26, z+2, 44, 6);
setTile(x, y+27, z, 89);
setTile(x, y+28, z, 89);
setTile(x, y+29, z, 8);
setTile(x+1, y+1, z-5, 156, 1);
setTile(x+1, y+3, z-5, 50, 4);
setTile(x+1, y+6, z, 102);
setTile(x+1, y+10, z-3, 61, 3);
setTile(x+1, y+10, z, 64, 1);
setTile(x+1, y+11, z, 64, 8);
setTile(x+1, y+14, z-3, 61, 3);
setTile(x+1, y+14, z, 64, 1);
setTile(x+1, y+15, z, 64, 8);
setTile(x+1, y+18, z-3, 54, 3);
setTile(x+1, y+18, z, 64, 1);
setTile(x+1, y+19, z, 64, 8);
setTile(x+1, y+22, z-2, 135, 1);
setTile(x+1, y+22, z, 135, 1);
setTile(x+1, y+26, z-2, 44, 6);
setTile(x+1, y+26, z+2, 44, 6);
setTile(x+2, y+6, z, 102);
setTile(x+2, y+10, z-3, 54, 3);
setTile(x+2, y+11, z-4, 102);
setTile(x+2, y+14, z-3, 54, 3);
setTile(x+2, y+15, z-4, 102);
setTile(x+2, y+18, z-3, 61, 3);
setTile(x+2, y+19, z-4, 102);
setTile(x+2, y+22, z-2, 85, 2);
setTile(x+2, y+22, z, 85, 2);
setTile(x+2, y+23, z-2, 171);
setTile(x+2, y+23, z, 171);
setTile(x+2, y+25, z-2, 89);
setTile(x+2, y+25, z+2, 89);
setTile(x+2, y+26, z-2, 89);
setTile(x+2, y+26, z-1, 44, 6);
setTile(x+2, y+26, z, 44, 6);
setTile(x+2, y+26, z+1, 44, 6);
setTile(x+2, y+26, z+2, 89);
setTile(x+3, y+2, z+2, 64, 3);
setTile(x+3, y+3, z+2, 64, 9);
setTile(x+3, y+3, z+3, 8);
setTile(x+3, y+4, z+2, 89);
setTile(x+3, y+4, z+3, 68, 3);
setTile(x+3, y+6, z, 102);
setTile(x+3, y+6, z+2, 64, 3);
setTile(x+3, y+7, z+2, 64, 9);
setTile(x+3, y+7, z+3, 8);
setTile(x+3, y+8, z+2, 89);
setTile(x+3, y+8, z+3, 68, 3);
setTile(x+3, y+10, z-3, 26, 10);
setTile(x+3, y+10, z-2, 26, 2);
setTile(x+3, y+10, z+2, 64, 3);
setTile(x+3, y+11, z+2, 64, 9);
setTile(x+3, y+11, z+3, 8);
setTile(x+3, y+12, z+2, 89);
setTile(x+3, y+12, z+3, 68, 3);
setTile(x+3, y+14, z-3, 26, 10);
setTile(x+3, y+14, z-2, 26, 2);
setTile(x+3, y+14, z+2, 64, 3);
setTile(x+3, y+15, z+2, 64, 9);
setTile(x+3, y+15, z+3, 8);
setTile(x+3, y+16, z+2, 89);
setTile(x+3, y+16, z+3, 68, 3);
setTile(x+3, y+18, z-3, 26, 10);
setTile(x+3, y+18, z-2, 26, 2);
setTile(x+3, y+18, z+2, 64, 3);
setTile(x+3, y+19, z+2, 64, 9);
setTile(x+3, y+19, z+3, 8);
setTile(x+3, y+20, z+2, 89);
setTile(x+3, y+20, z+3, 68, 3);
setTile(x+3, y+22, z-2, 135);
setTile(x+3, y+22, z, 135);
setTile(x+3, y+22, z+2, 64, 3);
setTile(x+3, y+23, z+2, 64, 9);
setTile(x+3, y+23, z+3, 8);
setTile(x+3, y+24, z+2, 89);
setTile(x+3, y+24, z+3, 68, 3);
setTile(x+3, y+25, z+3, 8);
setTile(x+4, y+7, z+1, 102);
setTile(x+4, y+11, z-2, 102);
setTile(x+4, y+15, z-2, 102);
setTile(x+4, y+19, z-2, 102);
setTile(x+4, y+27, z-4, 50, 5);
setTile(x+4, y+27, z+4, 50, 5);
hbx = x;
hby = y;
hbz = z;
hb4 = true;
hb4a = 1800;
skillCool(ESP.getUser(), 4);
}
//scalar4
if(scalar==ESP.getUser()&&sc4a==0){
ESP.heal(scalar);
ESP.sbm("Heat Explosion");
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs((y+1)-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=30&&p2y<=30&&p2z<=30&&scalar!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-2);
Entity.setFireTicks(e, 20);
setTile(Entity.getX(e), Entity.getY(e), Entity.getZ(e), 79);
scx.push(Entity.getX(e));
scy.push(Entity.getY(e));
scz.push(Entity.getZ(e));
}
}
sc4 = true;
sc4a = 1800;
skillCool(ESP.getUser(), 4);
}
//vector4
if(vector==ESP.getUser()&&v4a==0){
ESP.heal(vector);
ESP.sbm("Shock");
vx = Player.getX();
vy = Player.getY()-2;
vz = Player.getZ();
for(var n=-1;n<2;n++){
setTile(vx-2, vy+2, vz+n, 20);
setTile(vx+2, vy+2, vz+n, 20);
setTile(vx+n, vy+2, vz+2, 20);
setTile(vx+n, vy+2, vz-2, 20);
}
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(Player.getX()-Entity.getX(e));
p2y = Math.abs(Player.getY()-Entity.getY(e));
p2z = Math.abs(Player.getZ()-Entity.getZ(e));
if(p2x<=35&&p2y<=35&&p2z<=35&&vector!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-10);
v4b.push(e);
}
}
v4 = true;
v4a = 1800;
skillCool(ESP.getUser(), 4);
}
//tensor4
if(tensor==ESP.getUser()&&te4a==0){
ESP.heal(tensor);
ESP.sbm("Tensor Distortion");
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(Player.getX()-Entity.getX(e));
p2y = Math.abs(Player.getY()-Entity.getY(e));
p2z = Math.abs(Player.getZ()-Entity.getZ(e));
if(p2x<=35&&p2y<=35&&p2z<=35&&tensor!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-5);
tex.push(Entity.getX(e));
tey.push(Entity.getY(e)+12);
tez.push(Entity.getZ(e));
teleport(e, Entity.getX(e), Entity.getY(e)+14, Entity.getZ(e));
setTile(Entity.getX(e), Entity.getY(e)+12, Entity.getZ(e), 30);
te4b.push(e);
}
}
te4 = true;
te4a = 1800;
skillCool(ESP.getUser(), 4);
}
//ameca4
if(ameca==ESP.getUser()&&ame4a==0){
ESP.heal(ameca);
ESP.sbm("Remote Burst Attack");
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs((y+1)-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=30&&p2y<=30&&p2z<=30&&ameca!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-4);
setTile(Entity.getX(e), Entity.getY(e)+2, Entity.getZ(e), 247);
amex.push(Entity.getX(e));
amey.push(Entity.getY(e));
amez.push(Entity.getZ(e));
}
}
ame4 = true;
ame4a = 1800;
skillCool(ESP.getUser(), 4);
}
//angel4
if(angel==ESP.getUser()&&an4a==0){
ESP.heal(angel);
ESP.sbm("Genesis");
anx = Player.getX();
any = Player.getY()-2;
anz = Player.getZ();
for(var yy=any+9;yy<any+11;yy++){
setTile(anx+7, yy, anz+7, 155);
setTile(anx+7, yy, anz, 155);
setTile(anx+7, yy, anz-7, 155);
setTile(anx, yy, anz+7, 155);
setTile(anx, yy, anz-7, 155);
setTile(anx-7, yy, anz+7, 155);
setTile(anx-7, yy, anz, 155);
setTile(anx-7, yy, anz-7, 155);
}
for(var xx=anx-2;xx<anx+3;xx++)
for(var zz=anz-2;zz<anz+3;zz++)
setTile(xx, any+1, zz, 30);
for(var xx=anx-1;xx<anx+2;xx++)
for(var zz=anz-1;zz<anz+2;zz++)
setTile(xx, any+1, zz, 0)
arroundMobHealthDown(ESP.getUser(), 30, 7);
an4 = true;
an4a = 1800;
skillCool(ESP.getUser(), 4);
}
//white4
if(white==ESP.getUser()&&wh4a==0){
ESP.sbm("Human Energy");
ESP.heal(white);
whx = Player.getX();
why = Player.getY()-2;
whz = Player.getZ();
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
if(Math.abs(sin)>Math.abs(cos)){
}
for(var xx=whx-1;xx<whx+2;xx++)
for(var yy=why+1;yy<why+7;yy++)
for(var zz=whz-1;zz<whz+2;zz++)
setTile(xx, yy, zz, 155);
setTile(whx, why+1, whz, 89);
setTile(whx, why+2, whz, 89);
if(Math.abs(sin)>Math.abs(cos)){
setTile(whx, why+7, whz+1, 155);
setTile(whx, why+7, whz-1, 155);
setTile(whx, why+6, whz+2, 155);
setTile(whx, why+6, whz+3, 155);
setTile(whx, why+5, whz+3, 155);
setTile(whx, why+4, whz+3, 155);
setTile(whx, why+3, whz+3, 155);
setTile(whx, why+6, whz-2, 155);
setTile(whx, why+6, whz-3, 155);
setTile(whx, why+6, whz-3, 155);
setTile(whx, why+5, whz-3, 155);
setTile(whx, why+4, whz-3, 155);
setTile(whx, why+3, whz-3, 155);
}
if(Math.abs(sin)<Math.abs(cos)){
setTile(whx+1, why+7, whz, 155);
setTile(whx-1, why+7, whz, 155);
setTile(whx+2, why+6, whz, 155);
setTile(whx+3, why+6, whz, 155);
setTile(whx+3, why+5, whz, 155);
setTile(whx+3, why+4, whz, 155);
setTile(whx+3, why+3, whz, 155);
setTile(whx-2, why+6, whz, 155);
setTile(whx-3, why+6, whz, 155);
setTile(whx-3, why+5, whz, 155);
setTile(whx-3, why+4, whz, 155);
setTile(whx-3, why+3, whz, 155);
}
setTile(whx, why+7, whz, 155);
setTile(whx, why+8, whz, 89);
wh4 = true;
wh4a = 1800;
skillCool(ESP.getUser(), 4);
}
//world4
if(world==ESP.getUser()&&wo4a==0){
if(wo4b==0){
wox[1] = x;
woy[1] = y;
woz[1] = z;
setTile(x, y, z, 89);
wo4b = 1;
}
else if(wo4b==1){
wox[2] = x;
woy[2] = y;
woz[2] = z;
if(ESP.getDisBetwPoints(x, y, z)<=50){
setTile(x, y, z, 89);
wo4b = 2;
}
else{
wo4c = [16, b, bd];
setTile(x, y, z, 248);
}
}
else if(wo4b==2){
wox[0] = Player.getX();
woy[0] = Player.getY()-2;
woz[0] = Player.getZ();
setTile(wox[0]+1, woy[0]+1, woz[0]+2, 1);
setTile(wox[0], woy[0]+1, woz[0]+2, 3);
setTile(wox[0]-1, woy[0]+1, woz[0]+2, 12);
setTile(wox[0]+1, woy[0]+1, woz[0]-2, 45);
setTile(wox[0], woy[0]+1, woz[0]-2, 98, 2);
setTile(wox[0]-1, woy[0]+1, woz[0]-2, 5);
setTile(wox[0]+2, woy[0]+1, woz[0]+1, 35);
setTile(wox[0]+2, woy[0]+1, woz[0], 35, 5);
setTile(wox[0]+2, woy[0]+1, woz[0]-1, 17);
setTile(wox[0]-2, woy[0]+1, woz[0]+1, 18);
setTile(wox[0]-2, woy[0]+1, woz[0], 57);
setTile(wox[0]-2, woy[0]+1, woz[0]-1, 16);
wo4b = 3;
}
else if(wo4b==3&&b!=7){
ESP.heal(world);
ESP.sbm("World Edit : /set");
setTile(wox[0]+1, woy[0]+1, woz[0]+2, 0);
setTile(wox[0], woy[0]+1, woz[0]+2, 0);
setTile(wox[0]-1, woy[0]+1, woz[0]+2, 0);
setTile(wox[0]+1, woy[0]+1, woz[0]-2, 0);
setTile(wox[0], woy[0]+1, woz[0]-2, 0);
setTile(wox[0]-1, woy[0]+1, woz[0]-2, 0);
setTile(wox[0]+2, woy[0]+1, woz[0]+1, 0);
setTile(wox[0]+2, woy[0]+1, woz[0], 0);
setTile(wox[0]+2, woy[0]+1, woz[0]-1, 0);
setTile(wox[0]-2, woy[0]+1, woz[0]+1, 0);
setTile(wox[0]-2, woy[0]+1, woz[0], 0);
setTile(wox[0]-2, woy[0]+1, woz[0]-1, 0);
wox[3] = Math.min(wox[1], wox[2]);
woy[3] = Math.min(woy[1], woy[2]);
woz[3] = Math.min(woz[1], woz[2]);
wox[4] = Math.max(wox[1], wox[2]);
woy[4] = Math.max(woy[1], woy[2]);
woz[4] = Math.max(woz[1], woz[2]);
for(var xx=wox[3];xx<wox[4]+1;xx++)
for(var yy=woy[3];yy<woy[4]+1;yy++)
for(var zz=woz[3];zz<woz[4]+1;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, b, bd);
}
wo4b = 0;
wo4 = true;
wo4a = 1800;
skillCool(ESP.getUser(), 4);
}
}

}


//Hidden Ability
if(h.rrr==ESP.getUser()){
if(i==302&&h.r1==0){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var rrr1b=6;rrr1b<14;rrr1b++)
explode(px+rrr1b*sin, y+2, pz+rrr1b*cos, 1);
for(var rrr1b=2;rrr1b<20;rrr1b++){
setTile(px+rrr1b*sin, y, pz+rrr1b*cos, 87);
setTile(px+rrr1b*sin+1, y, pz+rrr1b*cos+1, 87);
setTile(px+rrr1b*sin, y+1, pz+rrr1b*cos, 51);
setTile(px+rrr1b*sin+1, y+1, pz+rrr1b*cos+1, 51);
}
setTile(x+2, y+1, z+2, 51);
setTile(x+2, y+1, z+1, 51);
setTile(x+2, y+1, z, 51);
setTile(x+2, y+1, z-1, 51);
setTile(x+2, y+1, z-2, 51);
setTile(x-2, y+1, z+2, 51);
setTile(x-2, y+1, z+1, 51);
setTile(x-2, y+1, z, 51);
setTile(x-2, y+1, z-1, 51);
setTile(x-2, y+1, z-2, 51);
setTile(x+1, y+1, z+2, 51);
setTile(x, y+1, z+2, 51);
setTile(x-1, y+1, z+2, 51);
setTile(x+1, y+1, z-2, 51);
setTile(x, y+1, z-2, 51);
setTile(x-1, y+1, z-2, 51);
h.r1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&h.r2==0){
for(var xx=x-1;xx<x+2;xx++){
for(var yy=y-5;yy<y+1;yy++)
for(var zz=z-1;zz<z+2;zz++){
setTile(xx, yy, zz, 0);
setTile(xx, y-6, zz, 30);
}}
Level.spawnMob(x+0.5, y+9, z+0.5, 65);
h.r2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&h.r3==0){
for(var xx=x-2;xx<x+3;xx++)
for(var zz=z-2;zz<z+3;zz++)
Level.spawnMob(xx+0.5,y+12,0.5+zz, 80,"");
for(var xx=x-3;xx<x+4;xx++)
for(var zz=z-3;zz<z+4;zz++)
Level.spawnMob(xx+0.5,y+18,0.5+zz, 80,"");
for(var xx=x-4;xx<x+5;xx++)
for(var zz=z-4;zz<z+5;zz++)
Level.spawnMob(xx+0.5,y+27,0.5+zz, 80,"");
h.r3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&h.r4==0){
for(var xx=x-2;xx<x+3;xx++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx, y+1, zz, 46);
px=Math.floor(x);
pz=Math.floor(z);
ESP.antiLack(90);
setTile(px, y+9, pz, 46);
explode(px+0.5, y+9, pz+0.5, 0.5);
h.rx = x;
h.ry = y;
h.rz = z;
h.r4 = 1800;
skillCool(ESP.getUser(), 4);
}

}

}

//2nd
if(!townCheck(x, z)){
//water 2nd
if(i==329&&w5==0&&water[0]==ESP.getUser()){
water2 = true;
w5 = 4500;
w5a = Entity.getHealth(water[0]);
ESP.sbm("Water Controller sr. on");
Player.setHealth(50);
}
if(water[0]==ESP.getUser()&&water2==true){
if(i==302&&w1aa==0){
if(w4aa==false){
setTile(x, y+2, z, 8);
w1x = x;
w1y = y;
w1z = z;
}
else if(w4aa==true){
px = Math.floor(Player.getX());
py = Math.floor(Player.getY());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
pitch = Math.floor(getPitch());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
tan = -Math.sin(pitch/180*Math.PI);
pcos = Math.cos(pitch/180*Math.PI);
for(var gun=4;gun<17;gun++)
setTile(px+gun*sin*pcos, py+gun*tan+0.8, pz+gun*cos*pcos, 79);
}
w1aa = 75;
skillCool(ESP.getUser(), 1);
}
if(i==303&&w2aa==0){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+6;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx, yy, zz, 20);
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y+2;yy<y+5;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 9);
Level.spawnMob(x+0.5, y+4, z+0.6, 65);
w2x[0] = x;
w2y[0] = y;
w2z[0] = z;
w2aa = 150;
skillCool(ESP.getUser(), 2);
}
if(i==304&&w3aa==0){
if(w3ab==false){
setTile(x, y, z, 9);
w3x = x;
w3y = y;
w3z = z;
w3ab = true;
}
else if(w3ab==true){
teleport(water[0], w3x+0.5, w3y+3, w3z+0.5);
if(w4aa==true){
for(var xx=wx[0]-2;xx<wx[0]+3;xx++)
for(var yy=wy[0]-2;yy<wy[0]+3;yy++)
for(var zz=wz[0]-2;zz<wz[0]+3;zz++)
if(getTile(xx, yy, zz)==8||getTile(xx, yy, zz)==9){
setTile(xx, yy, zz, 0);
}
}
w3ab = false;
w3aa = 150;
skillCool(ESP.getUser(), 3);
}
}
if(i==305){
if(w4aa==false){
w4aa = true;
ESP.toast("on(water)");
}
else if(w4aa==true){
w4aa = false;
ESP.toast("off(water)");
for(var xx=wx[0]-2;xx<wx[0]+3;xx++)
for(var yy=wy[0]-2;yy<wy[0]+3;yy++)
for(var zz=wz[0]-2;zz<wz[0]+3;zz++)
if(getTile(xx, yy, zz)==8||getTile(xx, yy, zz)==9){
setTile(xx, yy, zz, 0);
}
}
}

}

//bind 2nd
if(i==329&&b5==0&&bind[0]==ESP.getUser()){
bind2 = true;
b5 = 4500;
b5a = Entity.getHealth(bind[0]);
ESP.sbm("The Binder sr. on");
Player.setHealth(50);
}
if(bind[0]==ESP.getUser()&&bind2==true){
if(i==302&&b1aa==0){
ESP.antiLack(3);
explode(x, y+1.5, z, 2);
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+1, zz, 30);
if(b==2){
for(var xx=x-3;xx<x+4;xx++)
for(var zz=z-3;zz<z+4;zz++)
setTile(xx, y, zz, 2);
}
b1aa = 75;
skillCool(ESP.getUser(), 1);
}
if(i==303&&b2aa==0){
px = Math.floor(Player.getX());
py = Math.floor(Player.getY());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
pitch = Math.floor(getPitch());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
tan=-Math.sin(pitch/180*Math.PI);
pcos=Math.cos(pitch/180*Math.PI);
for(var gun=4;gun<25;gun++)
explode(px+gun*sin*pcos, py+gun*tan+0.8, pz+gun*cos*pcos, 1.5);
for(var gun=3;gun<25;gun++)
setTile(px+gun*sin*pcos, py+gun*tan+0.8, pz+gun*cos*pcos, 30);
b2aa = 150;
skillCool(ESP.getUser(), 2);
}
if(i==304&&b3aa==0){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+5;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx, yy, zz, 30);
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y+1;yy<y+4;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 0);
b3x = x;
b3y = y;
b3z = z;
if(b==2){
b3ab = true;
}
else{
b3ab = false;
}
b3aa = 150;
skillCool(ESP.getUser(), 3);
}
if(i==305){
if(b4aa==false){
b4aa = true;
ESP.toast("on(bind)");
}
else if(b4aa==true){
b4aa = false;
ESP.toast("off(bind)");
for(var xx=bx-4;xx<bx+5;xx++)
for(var yy=by;yy<by+3;yy++)
for(var zz=bz-4;zz<bz+5;zz++)
if(getTile(xx, yy, zz)==30){
setTile(xx, yy, zz, 0);
}
}
}
}

//Dark Heal
if(i==329&&h5==0&&heal==ESP.getUser()){
heal2 = true;
h5 = 4500;
h5a = Entity.getHealth(heal);
ESP.sbm("Dark Healer on");
Player.setHealth(50);
}
if(heal2==true&&heal==ESP.getUser()){
if(i==302&&h1aa==0){
Player.setHealth(Entity.getHealth(ESP.getUser())+Math.floor(Math.random()*4+5));
h1aa = 75;
skillCool(ESP.getUser(), 1);
}
if(i==305){
if(h4aa==false){
h4aa = true;
ESP.toast("on(heal)");
}
else if(h4aa==true){
h4aa = false;
ESP.toast("off(heal)");
}
}
}

//air 2nd
if(i==329&&a5==0&&air[0]==ESP.getUser()){
air2 = true;
a5 = 4500;
a5a = Entity.getHealth(air[0]);
ESP.sbm("Air Bander sr. on");
Player.setHealth(50);
}
if(air2==true&&air[0]==ESP.getUser()){
if(i==302&&a1aa==0){
px = Math.floor(Player.getX());
py = Math.floor(Player.getY());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
pitch = Math.floor(getPitch());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
tan=-Math.sin(pitch/180*Math.PI);
pcos=Math.cos(pitch/180*Math.PI);
explode(px+4*sin*pcos, py+4*tan+0.8, pz+4*cos*pcos, 1.8);
a1aa = 75;
skillCool(ESP.getUser(), 1);
}
if(i==304&&a3aa==0){
a3x = Player.getX();
a3y = Player.getY()-2;
a3z = Player.getZ();
ESP.antiLack(3);
explode(a3x+3, a3y+1, a3z+3, 1.5);
explode(a3x+4, a3y+1, a3z, 1.5);
explode(a3x+3, a3y+1, a3z-3, 1.5);
explode(a3x, a3y+1, a3z+4, 1.5);
explode(a3x, a3y+1, a3z-4, 1.5);
explode(a3x-3, a3y+1, a3z+3, 1.5);
explode(a3x-4, a3y+1, a3z, 1.5);
explode(a3x-3, a3y+1, a3z-3, 1.5);
a3ab = false;
a3aa = 150;
skillCool(ESP.getUser(), 3);
}
if(i==305){
if(a4aa==false){
a4aa = true;
ESP.toast("on(air)");
}
else if(a4aa==true){
a4aa = false;
for(var xx=ax-2;xx<ax+3;xx++)
for(var yy=ay-1;yy<ay+2;yy++)
for(var zz=az-2;zz<az+3;zz++)
if(getTile(xx, yy, zz)==20){
setTile(xx, yy, zz, 0);
}
ESP.toast("off(air)");
}
}
}

}


//Portal
if(b==22){
if(mp==false){
if(Level.getSignText(x, y+1, z, 1)=="Go to"&&Level.getSignText(x, y+1, z, 2)=="Elsa"){
teleport(Player.getEntity(), 248, 51, 16);
preventDefault();
}
if(Level.getSignText(x, y+1, z, 1)=="Return to"&&Level.getSignText(x, y+1, z, 2)=="Village"){
teleport(Player.getEntity(), 152, 51, 26);
preventDefault();
}
}
if(Level.getSignText(x, y+1, z, 1)=="Move to"&&Level.getSignText(x, y+1, z, 2)=="Upside"){
teleport(Player.getEntity(), 175, 86, 73);
preventDefault();
}
if(Level.getSignText(x, y+1, z, 1)=="Return"){
ESP.send(Player.getEntity());
preventDefault();
}
if(Level.getSignText(x, y+1, z, 1)=="Battle"&&Level.getSignText(x, y+1, z, 2)=="Field 5"){
teleport(Player.getEntity(), 253, 22, 144);
preventDefault();
}

}

//hidden portal
if(mp3==true&&mp==false){
if(x==115&&y==50&&z==45){
teleport(Player.getEntity(), 98, 51, 136);
}
if(x==110&&y==51&&z==15){
teleport(Player.getEntity(), 111, 66.5, 13);
}
if(x==165&&y==52&&z==35){
teleport(Player.getEntity(), 173, 75, 35);
}

}

//Hidden Gate
if(b==98&&((x==254&&y==19&&z==157)||(x==248&&y==16&&z==157))){
if(getTile(250, 19, 157)==98){
for(var xx=248;xx<253;xx++)
setTile(xx, 19, 157, 0);
setTile(253, 19, 157, 44, 5);
}
else{
for(var xx=248;xx<254;xx++)
setTile(xx, 19, 157, 98);
}
}



//passive
if(passOnoff){
if(titan.indexOf(ESP.getUser())!=-1&&(b==92||b==126)&&Entity.getHealth(titan[n])<=25){
ESP.setHealth(titan[n], Entity.getHealth(titan[n])+1);
}
if(bind.indexOf(ESP.getUser())!=-1&&b==30){
Level.destroyBlock(x, y, z, true);
}
if(ore.indexOf(ESP.getUser())!=-1&&(b==1||b==4||b==24)){
Level.destroyBlock(x, y, z, true);
}
var n = time.indexOf(ESP.getUser());
if(ESP.getUser()==time[n]&&ti0a[n]==true){
teleport(time[n], x, y+3, z);
}

}


//0.4.3
//select
if(b==246&&Level.getSignText(x, y+1, z, 1)=="Fire"&&Level.getSignText(x, y+1, z, 2)=="Master"){
ofire = 1;
ESP.sbm("fire");
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 268, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 269, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 270, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 271, 1, 0);
preventDefault();
}
if(b==22&&Level.getSignText(x, y+1, z, 1)=="Water"&&Level.getSignText(x, y+1, z, 2)=="Controller"){
owater = 1;
ESP.sbm("water");
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 272, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 273, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 274, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 275, 1, 0);
preventDefault();
}
if(b==17&&bd==1&&Level.getSignText(x, y+1, z, 1)=="Nature"&&Level.getSignText(x, y+1, z, 2)=="Guardian"){
otree = 1;
ESP.sbm("tree");
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 280, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 281, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 288, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 289, 1, 0);
preventDefault();
}
if(b==46&&Level.getSignText(x, y+1, z, 1)=="I am"&&Level.getSignText(x, y+1, z, 2)=="Creeper"){
ocreeper = 1;
ESP.sbm("creeper");
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 298, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 299, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 300, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 301, 1, 0);
preventDefault();
}
if(b==42&&Level.getSignText(x, y+1, z, 1)=="Earth"&&Level.getSignText(x, y+1, z, 2)=="Bander"){
osoil = 1;
ESP.sbm("soil");
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 290, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 291, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 292, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 294, 1, 0);
preventDefault();
}
if(b==14&&Level.getSignText(x, y+1, z, 1)=="The"&&Level.getSignText(x, y+1, z, 2)=="Summoner"){
osummon = 1;
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 314, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 315, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 316, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 317, 1, 0);
preventDefault();
ESP.sbm("summon");
}
if(b==155&&bd==1&&Level.getSignText(x, y+1, z, 1)=="The"&&Level.getSignText(x, y+1, z, 2)=="Luminous"){
olight = 1;
ESP.sbm("light");
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 331, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 332, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 334, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 336, 1, 0);
preventDefault();
}
if(b==173&&Level.getSignText(x, y+1, z, 1)=="The"&&Level.getSignText(x, y+1, z, 2)=="Darkness"){
odark = 1;
ESP.sbm("dark");
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 363, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 364, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 365, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 366, 1, 0);
preventDefault();
}
if(b==56&&Level.getSignText(x, y+1, z, 1)=="The"&&Level.getSignText(x, y+1, z, 2)=="Freezer"){
oice = 1;
ESP.sbm("ice");
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 318, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 296, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 339, 1, 0);
Level.dropItem(x+0.5, y+1.1, z+0.5, 0.5, 348, 1, 0);
preventDefault();
}
if(!townCheck(x, z)){
//fire
if(ofire==1){
if(i==268&&of1==0){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+1, zz, 51);
setTile(x, y+1, z+2, 51);
setTile(x, y+1, z-2, 51);
setTile(x-2, y+1, z, 51);
setTile(x+2, y+1, z, 51);
of1 = 150;
}
if(i==269&&of2==0){
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y-2;yy<y+1;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 51);
of2x = x;
of2y = y;
of2z = z;
of2 = 300;
}
if(i==270&&of3==0){
setTile(x+2, y, z+2, 87);
setTile(x+1, y, z+2, 87);
setTile(x, y, z+2, 87);
setTile(x-1, y, z+2, 87);
setTile(x-2, y, z+2, 87);
setTile(x+2, y, z-2, 87);
setTile(x+1, y, z-2, 87);
setTile(x, y, z-2, 87);
setTile(x-1, y, z-2, 87);
setTile(x-2, y, z-2, 87);
setTile(x-2, y, z+1, 87);
setTile(x-2, y, z, 87);
setTile(x-2, y, z-1, 87);
setTile(x+2, y, z+1, 87);
setTile(x+2, y, z, 87);
setTile(x+2, y, z-1, 87);
setTile(x+2, y+1, z+2, 51);
setTile(x+1, y+1, z+2, 51);
setTile(x, y+1, z+2, 51);
setTile(x-1, y+1, z+2, 51);
setTile(x-2, y+1, z+2, 51);
setTile(x+2, y+1, z-2, 51);
setTile(x+1, y+1, z-2, 51);
setTile(x, y+1, z-2, 51);
setTile(x-1, y+1, z-2, 51);
setTile(x-2, y+1, z-2, 51);
setTile(x-2, y+1, z+1, 51);
setTile(x-2, y+1, z, 51);
setTile(x-2, y+1, z-1, 51);
setTile(x+2, y+1, z+1, 51);
setTile(x+2, y+1, z, 51);
setTile(x+2, y+1, z-1, 51);
of3 = 300;
}
if(i==271&&of4==0){
Player.setHealth(30);
setTile(x+4, y, z+4, 87);
setTile(x+4, y, z+2, 87);
setTile(x+4, y, z, 87);
setTile(x+4, y, z-2, 87);
setTile(x+4, y, z-4, 87);
setTile(x+2, y, z+4, 87);
setTile(x+2, y, z+2, 87);
setTile(x+2, y, z, 87);
setTile(x+2, y, z-2, 87);
setTile(x+2, y, z-4, 87);
setTile(x, y, z+4, 87);
setTile(x, y, z+2, 87);
setTile(x, y, z, 89);
setTile(x, y, z-2, 87);
setTile(x, y, z-4, 87);
setTile(x-4, y, z+4, 87);
setTile(x-4, y, z+2, 87);
setTile(x-4, y, z, 87);
setTile(x-4, y, z-2, 87);
setTile(x-4, y, z-4, 87);
setTile(x-2, y, z+4, 87);
setTile(x-2, y, z+2, 87);
setTile(x-2, y, z, 87);
setTile(x-2, y, z-2, 87);
setTile(x-2, y, z-4, 87);
setTile(x+4, y+1, z+4, 51);
setTile(x+4, y+1, z+2, 51);
setTile(x+4, y+1, z, 51);
setTile(x+4, y+1, z-2, 51);
setTile(x+4, y+1, z-4, 51);
setTile(x+2, y+1, z+4, 51);
setTile(x+2, y+1, z+2, 51);
setTile(x+2, y+1, z, 51);
setTile(x+2, y+1, z-2, 51);
setTile(x+2, y+1, z-4, 51);
setTile(x, y+1, z+4, 51);
setTile(x, y+1, z+2, 51);
setTile(x, y+1, z-2, 51);
setTile(x, y+1, z-4, 51);
setTile(x-4, y+1, z+4, 51);
setTile(x-4, y+1, z+2, 51);
setTile(x-4, y+1, z, 51);
setTile(x-4, y+1, z-2, 51);
setTile(x-4, y+1, z-4, 51);
setTile(x-2, y+1, z+4, 51);
setTile(x-2, y+1, z+2, 51);
setTile(x-2, y+1, z, 51);
setTile(x-2, y+1, z-2, 51);
setTile(x-2, y+1, z-4, 51);
setTile(x+6, y+1, z+4, 51);
setTile(x+6, y+1, z, 51);
setTile(x+6, y+1, z-4, 51);
setTile(x-6, y+1, z+4, 51);
setTile(x-6, y+1, z, 51);
setTile(x-6, y+1, z-4, 51);
setTile(x+4, y+1, z+6, 51);
setTile(x, y+1, z+6, 51);
setTile(x-4, y+1, z+6, 51);
setTile(x+4, y+1, z-6, 51);
setTile(x, y+1, z-6, 51);
setTile(x-4, y+1, z-6, 51);
setTile(x+7, y, z+7, 11);
setTile(x+7, y, z-7, 11);
setTile(x-7, y, z+7, 11);
setTile(x-7, y, z-7, 11);
setTile(x+8, y, z, 11);
setTile(x, y, z+8, 11);
setTile(x-8, y, z, 11);
setTile(x, y, z-8, 11);
ofx = x;
ofy = y;
ofz = z;
of4 = 1800;
}
}
//water
if(owater==1){
if(i==272&&ow1==0){
setTile(x, y+1, z, 8);
ow1x = x;
ow1y = y;
ow1z = z;
ow1 = 150;
}
if(i==273&&ow2==0){
for(var xx=x-2;xx<x+3;xx++)
for(var zz=z-2;zz<z+3;zz++)
setTile(xx, y, zz, 0);
setTile(x+2, y, z+2, 8);
setTile(x+2, y, z-2, 8);
setTile(x-2, y, z+2, 8);
setTile(x-2, y, z-2, 8);
ow2x = x;
ow2y = y;
ow2z = z;
ow2 = 300;
}
if(i==274&&ow3==0){
setTile(x+2, y+1, z+2, 79);
setTile(x+1, y+1, z+2, 79);
setTile(x, y+1, z+2, 79);
setTile(x-1, y+1, z+2, 79);
setTile(x-2, y+1, z+2, 79);
setTile(x+2, y+1, z-2, 79);
setTile(x+1, y+1, z-2, 79);
setTile(x, y+1, z-2, 79);
setTile(x-1, y+1, z-2, 79);
setTile(x-2, y+1, z-2, 79);
setTile(x-2, y+1, z+1, 79);
setTile(x-2, y+1, z, 79);
setTile(x-2, y+1, z-1, 79);
setTile(x+2, y+1, z+1, 79);
setTile(x+2, y+1, z, 79);
setTile(x+2, y+1, z-1, 79);
setTile(x+3, y+1, z, 8);
setTile(x-3, y+1, z, 8);
setTile(x, y+1, z+3, 8);
setTile(x, y+1, z-3, 8);
ow3x = x;
ow3y = y;
ow3z = z;
ow3 = 300;
}
if(i==275&&ow4==0){
Player.setHealth(30);
setTile(x+9, y+10, z+9, 8);
setTile(x+9, y+10, z-9, 8);
setTile(x-9, y+10, z+9, 8);
setTile(x-9, y+10, z-9, 8);
setTile(x+9, y+10, z, 8);
setTile(x-9, y+10, z, 8);
setTile(x, y+10, z+9, 8);
setTile(x, y+10, z-9, 8);
setTile(x+1, y+1, z, 79);
setTile(x-1, y+1, z, 79);
setTile(x, y+1, z+1, 79);
setTile(x, y+1, z-1, 79);
owx = x;
owy = y;
owz = z;
ow4 = 1800;
}
}
//otree
if(otree==1){
if(i==280&&ot1==0){
setTile(x+1, y+1, z+1, 17);
setTile(x+1, y+1, z-1, 17);
setTile(x, y+1, z, 17);
setTile(x-1, y+1, z+1, 17);
setTile(x-1, y+1, z-1, 17);
setTile(x+1, y+2, z+1, 18);
setTile(x+1, y+2, z-1, 18);
setTile(x, y+2, z, 18);
setTile(x-1, y+2, z+1, 18);
setTile(x-1, y+2, z-1, 18);
setTile(x, y+3, z, 51);
ot1 = 150;
}
if(i==281&&ot2==0){
for(var yy=y+1;yy<y+4;yy++){
setTile(x+2, yy, z+2, 17);
setTile(x+1, yy, z+2, 17);
setTile(x, yy, z+2, 17);
setTile(x-1, yy, z+2, 17);
setTile(x-2, yy, z+2, 17);
setTile(x+2, yy, z-2, 17);
setTile(x+1, yy, z-2, 17);
setTile(x, yy, z-2, 17);
setTile(x-1, yy, z-2, 17);
setTile(x-2, yy, z-2, 17);
setTile(x-2, yy, z+1, 17);
setTile(x-2, yy, z, 17);
setTile(x-2, yy, z-1, 17);
setTile(x+2, yy, z+1, 17);
setTile(x+2, yy, z, 17);
setTile(x+2, yy, z-1, 17);
}
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y+4, zz, 17);
setTile(x, y+1, z, 51);
ot2 = 300;
}
if(i==288&&ot3==0){
for(var yy=y+1;yy<y+7;yy++)
setTile(x, yy, z, 17);
setTile(x, y+7, z, 18);
for(var yy=y+6;yy<y+8;yy++){
setTile(x+1, yy, z, 18);
setTile(x, yy, z-1, 18);
setTile(x, yy, z+1, 18);
setTile(x-1, yy, z, 18);
}
for(var yy=y+4;yy<y+6;yy++){
setTile(x+1, yy, z+1, 18);
setTile(x+1, yy, z-1, 18);
setTile(x+1, yy, z, 18);
setTile(x-1, yy, z+1, 18);
setTile(x-1, yy, z-1, 18);
setTile(x-1, yy, z, 18);
setTile(x, yy, z+1, 18);
setTile(x, yy, z-1, 18);
setTile(x+2, yy, z+1, 18);
setTile(x+2, yy, z-1, 18);
setTile(x+2, yy, z, 18)
setTile(x-2, yy, z+1, 18);
setTile(x-2, yy, z-1, 18);
setTile(x-2, yy, z, 18);
setTile(x+1, yy, z+2, 18);
setTile(x-1, yy, z+2, 18);
setTile(x, yy, z+2, 18);
setTile(x+1, yy, z-2, 18);
setTile(x-1, yy, z-2, 18);
setTile(x, yy, z-2, 18);
}
ot3 = 300;
}
if(i==289&&ot4==0){
Player.setHealth(30);
setTile(x+2, y+1, z+2, 17, 2);
setTile(x+1, y+1, z+2, 17, 2);
setTile(x, y+1, z+2, 17, 2);
setTile(x-1, y+1, z+2, 17, 2);
setTile(x-2, y+1, z+2, 17, 2);
setTile(x+2, y+1, z-2, 17, 2);
setTile(x+1, y+1, z-2, 17, 2);
setTile(x, y+1, z-2, 17, 2);
setTile(x-1, y+1, z-2, 17, 2);
setTile(x-2, y+1, z-2, 17, 2);
setTile(x-2, y+1, z+1, 17, 2);
setTile(x-2, y+1, z, 17, 2);
setTile(x-2, y+1, z-1, 17, 2);
setTile(x+2, y+1, z+1, 17, 2);
setTile(x+2, y+1, z, 17, 2);
setTile(x+2, y+1, z-1, 17, 2);
setTile(x+2, y+2, z+2, 17, 2);
setTile(x+1, y+2, z+2, 17, 2);
setTile(x, y+2, z+2, 17, 2);
setTile(x-1, y+2, z+2, 17, 2);
setTile(x-2, y+2, z+2, 17, 2);
setTile(x+2, y+2, z-2, 17, 2);
setTile(x+1, y+2, z-2, 17, 2);
setTile(x, y+2, z-2, 17, 2);
setTile(x-1, y+2, z-2, 17, 2);
setTile(x-2, y+2, z-2, 17, 2);
setTile(x-2, y+2, z+1, 17, 2);
setTile(x-2, y+2, z, 17, 2);
setTile(x-2, y+2, z-1, 17, 2);
setTile(x+2, y+2, z+1, 17, 2);
setTile(x+2, y+2, z, 17, 2);
setTile(x+2, y+2, z-1, 17, 2);
setTile(x+2, y+3, z+2, 17, 2);
setTile(x+1, y+3, z+2, 17, 2);
setTile(x, y+3, z+2, 17, 2);
setTile(x-1, y+3, z+2, 17, 2);
setTile(x-2, y+3, z+2, 17, 2);
setTile(x+2, y+3, z-2, 17, 2);
setTile(x+1, y+3, z-2, 17, 2);
setTile(x, y+3, z-2, 17, 2);
setTile(x-1, y+3, z-2, 17, 2);
setTile(x-2, y+3, z-2, 17, 2);
setTile(x-2, y+3, z+1, 17, 2);
setTile(x-2, y+3, z, 17, 2);
setTile(x-2, y+3, z-1, 17, 2);
setTile(x+2, y+3, z+1, 17, 2);
setTile(x+2, y+3, z, 17, 2);
setTile(x+2, y+3, z-1, 17, 2);
setTile(x+1, y+1, z-1, 17, 2);
setTile(x+1, y+1, z, 17, 2);
setTile(x+1, y+1, z+1, 17, 2);
setTile(x, y+1, z-1, 17, 2);
setTile(x, y+1, z, 17, 2);
setTile(x, y+1, z+1, 17, 2);
setTile(x-1, y+1, z-1, 17, 2);
setTile(x-1, y+1, z, 17, 2);
setTile(x-1, y+1, z+1, 17, 2);
setTile(x+1, y+2, z-1, 17, 2);
setTile(x+1, y+2, z, 17, 2);
setTile(x+1, y+2, z+1, 17, 2);
setTile(x, y+2, z-1, 17, 2);
setTile(x, y+2, z, 17, 2);
setTile(x, y+2, z+1, 17, 2);
setTile(x-1, y+2, z-1, 17, 2);
setTile(x-1, y+2, z, 17, 2);
setTile(x-1, y+2, z+1, 17, 2);
setTile(x+1, y+3, z-1, 17, 2);
setTile(x+1, y+3, z, 17, 2);
setTile(x+1, y+3, z+1, 17, 2);
setTile(x, y+3, z-1, 17, 2);
setTile(x, y+3, z, 17, 2);
setTile(x, y+3, z+1, 17, 2);
setTile(x-1, y+3, z-1, 17, 2);
setTile(x-1, y+3, z, 17, 2);
setTile(x-1, y+3, z+1, 17, 2);
setTile(x+1, y+4, z-1, 17, 2);
setTile(x+1, y+4, z, 17, 2);
setTile(x+1, y+4, z+1, 17, 2);
setTile(x, y+4, z-1, 17, 2);
setTile(x, y+4, z, 17, 2);
setTile(x, y+4, z+1, 17, 2);
setTile(x-1, y+4, z-1, 17, 2);
setTile(x-1, y+4, z, 17, 2);
setTile(x-1, y+4, z+1, 17, 2);
Level.spawnMob(x, y+18, z, 65);
Level.spawnMob(x, y+35, z, 65);
ot4 = 1800;
}
}
//ocreeper
if(ocreeper==1){
if(i==298&&oc1==0){
ESP.antiLack(3);
explode(x,y,z, 4);
oc1 = 225;
 }
if(i==299&&oc2==0){
Level.spawnMob(x, y+12, z, 65);
setTile(x, y+1, z, 46);
setTile(x, y+2, z, 46);
oc2 = 375;
}
if(i==300&&oc3==0){
ESP.antiLack(3);
explode(x+5,y,z+5, 3);
explode(x+5,y,z-5, 3);
explode(x+5,y,z, 3);
explode(x-5, y,z+5, 3);
explode(x-5,y,z-5, 3);
explode(x-5,y,z, 3);
explode(x,y,z+5, 3);
explode(x,y,z-5, 3);
oc3 = 375;
}
if(i==301&&oc4==0){
Player.setHealth(30);
ESP.antiLack(90);
explode(x+9,y,z+9, 5);
explode(x+9,y,z-9, 5);
explode(x-9,y,z+9, 5);
explode(x-9,y,z-9, 5);
Level.spawnMob(x, y+5, z, 65);
Level.spawnMob(x, y+10, z+3, 65);
Level.spawnMob(x+4, y+7, z, 65);
Level.spawnMob(x, y+15, z-7, 65);
Level.spawnMob(x-9, y+5, z, 65);
Level.spawnMob(x+6, y+17, z+3, 65);
Level.spawnMob(x-10, y+15, z-7, 65);
Level.spawnMob(x-5, y+15, z+5, 65);
Level.spawnMob(x, y+10, z-8, 65);
Level.spawnMob(x-5, y+7, z, 65);
Level.spawnMob(x, y+14, z+8, 65);
Level.spawnMob(x-10, y+9, z, 65);
Level.spawnMob(x+1, y+18, z+13, 65);
Level.spawnMob(x-2, y+13, z-6, 65);
ocx = x;
ocy = y;
ocz = z;
oc4 = 1800;
}
}
//osoil
if(osoil==1){
if(i==290&&os1==0){
for(var xx=x-1;xx<x+2;xx++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx, y, zz, 13);
setTile(xx, y-1, zz, 0);
setTile(xx, y-2, zz, 0);
setTile(xx, y+7, zz, 13);
setTile(xx, y+8, zz, 13);
}}
os1 = 150;
}
if(i==291&&os2==0){
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y-3;yy<y+1;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 0);
os2 = 300;
}
if(i==292&&os3==0){
setTile(x-1, y+1, z+2, 24);
setTile(x, y+1, z+2, 24);
setTile(x+1, y+1, z+2, 24);
setTile(x-1, y+2, z+2, 24);
setTile(x, y+2, z+2, 24);
setTile(x+1, y+2, z+2, 24);
setTile(x, y+3, z+2, 24);
setTile(x+1, y+3, z+2, 24);
setTile(x-1, y+3, z+2, 24);
setTile(x+2, y+1, z+1, 24);
setTile(x+2, y+1, z, 24);
setTile(x+2, y+1, z-1, 24);
setTile(x+2, y+2, z+1, 24);
setTile(x+2, y+2, z, 24);
setTile(x+2, y+2, z-1, 24);
setTile(x+2, y+3, z+1, 24);
setTile(x+2, y+3, z, 24);
setTile(x+2, y+3, z-1, 24);
setTile(x-2, y+1, z+1, 24);
setTile(x-2, y+1, z, 24);
setTile(x-2, y+1, z-1, 24);
setTile(x-2, y+2, z+1, 24);
setTile(x-2, y+2, z, 24);
setTile(x-2, y+2, z-1, 24);
setTile(x-2, y+3, z+1, 24);
setTile(x-2, y+3, z, 24);
setTile(x-2, y+3, z-1, 24);
setTile(x-1, y+1, z-2, 24);
setTile(x, y+1, z-2, 24);
setTile(x+1, y+1, z-2, 24);
setTile(x-1, y+2, z-2, 24);
setTile(x, y+2, z-2, 24);
setTile(x+1, y+2, z-2, 24);
setTile(x, y+3, z-2, 24);
setTile(x+1, y+3, z-2, 24);
setTile(x-1, y+3, z-2, 24);
setTile(x, y-3, z, 89);
setTile(x, y+4, z+1, 24);
setTile(x, y+4, z, 24);
setTile(x, y+4, z-1, 24);
setTile(x+1, y+4, z+1, 24);
setTile(x+1, y+4, z, 24);
setTile(x+1, y+4, z-1, 24);
setTile(x-1, y+4, z+1, 24);
setTile(x-1, y+4, z, 24);
setTile(x-1, y+4, z-1, 24);
setTile(x, y, z+1, 0);
setTile(x, y, z, 0);
setTile(x, y, z-1, 0);
setTile(x+1, y, z+1, 0);
setTile(x+1, y, z, 0);
setTile(x+1, y, z-1, 0);
setTile(x-1, y, z+1, 0);
setTile(x-1, y, z, 0);
setTile(x-1, y, z-1, 0);
setTile(x, y-1, z+1, 0);
setTile(x, y-1, z, 0);
setTile(x, y-1, z-1, 0);
setTile(x+1, y-1, z+1, 0);
setTile(x+1, y-1, z, 0);
setTile(x+1, y-1, z-1, 0);
setTile(x-1, y-1, z+1, 0);
setTile(x-1, y-1, z, 0);
setTile(x-1, y-1, z-1, 0);
setTile(x, y-2, z+1, 0);
setTile(x, y-2, z, 0);
setTile(x, y-2, z-1, 0);
setTile(x+1, y-2, z+1, 0);
setTile(x+1, y-2, z, 0);
setTile(x+1, y-2, z-1, 0);
setTile(x-1, y-2, z+1, 0);
setTile(x-1, y-2, z, 0);
setTile(x-1, y-2, z-1, 0);
setTile(x, y-1, z-2, 0);
setTile(x, y-1, z-3, 0);
setTile(x, y-1, z-4, 0);
setTile(x, y-1, z-5, 0);
setTile(x, y-1, z-6, 0);
setTile(x, y-1, z-7, 0);
setTile(x, y-2, z-2, 0);
setTile(x, y-2, z-3, 0);
setTile(x, y-2, z-4, 0);
setTile(x, y-2, z-5, 0);
setTile(x, y-2, z-6, 0);
setTile(x, y-2, z-7, 0);
setTile(x, y-1, z-7, 0);
setTile(x, y, z-7, 0);
setTile(x, y+1, z-7, 0);
setTile(x, y+2, z-7, 0);
setTile(x, y+3, z-7, 0);
setTile(x, y+4, z-7, 0);
setTile(x, y+5, z-7, 0);
setTile(x, y+5, z, 10);
os3x = x;
os3y = y;
os3z = z;
os3 = 300;
}
if(i==294&&os4==0){
Player.setHealth(30);
setTile(x+1, y+1, z, 1);
setTile(x-1, y+1, z, 1);
setTile(x, y+1, z+1, 1);
setTile(x, y+1, z-1, 1);
setTile(x+4, y+1, z+4, 10);
setTile(x+4, y+1, z+2, 10);
setTile(x+4, y+1, z, 10);
setTile(x+4, y+1, z-2, 10);
setTile(x+4, y+1, z-4, 10);
setTile(x+2, y+1, z+4, 10);
setTile(x+2, y+1, z+2, 10);
setTile(x+2, y+1, z, 10);
setTile(x+2, y+1, z-2, 10);
setTile(x+2, y+1, z-4, 10);
setTile(x, y+1, z+4, 10);
setTile(x, y+1, z+2, 10);
setTile(x, y+1, z-2, 10);
setTile(x, y+1, z-4, 10);
setTile(x-4, y+1, z+4, 10);
setTile(x-4, y+1, z+2, 10);
setTile(x-4, y+1, z, 10);
setTile(x-4, y+1, z-2, 10);
setTile(x-4, y+1, z-4, 10);
setTile(x-2, y+1, z+4, 10);
setTile(x-2, y+1, z+2, 10);
setTile(x-2, y+1, z, 10);
setTile(x-2, y+1, z-2, 10);
setTile(x-2, y+1, z-4, 10);
setTile(x+6, y+1, z+4, 10);
setTile(x+6, y+1, z, 10);
setTile(x+6, y+1, z-4, 10);
setTile(x-6, y+1, z+4, 10);
setTile(x-6, y+1, z, 10);
setTile(x-6, y+1, z-4, 10);
setTile(x+4, y+1, z+6, 10);
setTile(x, y+1, z+6, 10);
setTile(x-4, y+1, z+6, 10);
setTile(x+4, y+1, z-6, 10);
setTile(x, y+1, z-6, 10);
setTile(x-4, y+1, z-6, 10);
setTile(x+7, y, z+7, 10);
setTile(x+7, y, z-7, 10);
setTile(x-7, y, z+7, 10);
setTile(x-7, y, z-7, 10);
setTile(x+8, y, z, 10);
setTile(x, y, z+8, 10);
setTile(x-8, y, z, 10);
setTile(x, y, z-8, 10);
osx = x;
osy = y;
osz = z;
os4 = 1800;
}
}
//osummon
if(osummon==1){
if(i==314&&oss1==0){
Level.spawnMob( x+3, y+2 , z, 32, "mob/zombie.png" );
Level.spawnMob( x-3, y+2 , z, 32, "mob/zombie.png" );
Level.spawnMob( x, y+2, z, 36, "mob/pigzombie.png" );
oss1 = 150;
}
if(i==315&&oss2==0){
Level.spawnMob( x, y+2 , z, 33, "mob/ocreeper.png");
Level.spawnMob( x, y+2 , z, 33, "mob/ocreeper.png");
oss2 = 300;
}
if(i==316&&oss3==0){
Level.spawnMob(x, y+2 , z, 34, "mob/skeleton.png");
Level.spawnMob(x+2, y+2 , z, 34, "mob/skeleton.png");
Level.spawnMob(x-2, y+2 , z, 34, "mob/skeleton.png");
Level.spawnMob(x, y+2 , z+2, 34, "mob/skeleton.png");
Level.spawnMob(x, y+2 , z-2, 34, "mob/skeleton.png");
oss3 = 300;
}
if(i==317&&oss4==0){
Player.setHealth(30);
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob(x, y+3, z, 32,"mob/zombie.png");
Level.spawnMob( x, y+5 , z, 33, "mob/ocreeper.png");
Level.spawnMob( x, y+5 , z, 33, "mob/ocreeper.png");
Level.spawnMob( x, y+5 , z, 33, "mob/ocreeper.png");
Level.spawnMob( x, y+5 , z, 33, "mob/ocreeper.png");
Level.spawnMob( x, y+5 , z, 33, "mob/ocreeper.png");
Level.spawnMob( x, y+5 , z, 33, "mob/ocreeper.png");
Level.spawnMob( x, y+5 , z, 33, "mob/ocreeper.png");
oss4 = 1800;
}
}
//olight
if(olight==1){
if(i==331&&ol1==0){
setTile(x+1, y+1, z+1, 155);
setTile(x+1, y+1, z-1, 155);
setTile(x, y+1, z, 155);
setTile(x-1, y+1, z+1, 155);
setTile(x-1, y+1, z-1, 155);
setTile(x+1, y+2, z+1, 89);
setTile(x+1, y+2, z-1, 89);
setTile(x, y+2, z, 89);
setTile(x-1, y+2, z+1, 89);
setTile(x-1, y+2, z-1, 89);
setTile(x+1, y+1, z, 51);
setTile(x-1, y+1, z, 51);
setTile(x, y+1, z+1, 51);
setTile(x, y+1, z-1, 51);
ol1 = 150;
}
if(i==332&&ol2==0){
setTile(x+1, y, z+1, 155);
setTile(x+1, y, z, 155);
setTile(x+1, y, z-1, 155);
setTile(x, y, z+1, 155);
setTile(x, y, z, 11);
setTile(x, y, z-1, 155);
setTile(x-1, y, z+1, 155);
setTile(x-1, y, z, 155);
setTile(x-1, y, z-1, 155);
setTile(x+2, y+2, z+1, 155);
setTile(x+2, y+2, z, 155);
setTile(x+2, y+2, z-1, 155);
setTile(x-2, y+2, z+1, 155);
setTile(x-2, y+2, z, 155);
setTile(x-2, y+2, z-1, 155);
setTile(x+1, y+2, z+2, 155);
setTile(x, y+2, z+2, 155);
setTile(x-1, y+2, z+2, 155);
setTile(x+1, y+2, z-2, 155);
setTile(x, y+2, z-2, 155);
setTile(x-1, y+2, z-2, 155);
ol2 = 300;
}
if(i==334&&ol3==0){
setTile(x+1, y, z+1, 155);
setTile(x+1, y, z, 155);
setTile(x+1, y, z-1, 155);
setTile(x, y, z+1, 155);
setTile(x, y, z, 155);
setTile(x, y, z-1, 155);
setTile(x-1, y, z+1, 155);
setTile(x-1, y, z, 155);
setTile(x-1, y, z-1, 155);
setTile(x+2, y+2, z+1, 155);
setTile(x+2, y+2, z, 155);
setTile(x+2, y+2, z-1, 155);
setTile(x-2, y+2, z+1, 155);
setTile(x-2, y+2, z, 155);
setTile(x-2, y+2, z-1, 155);
setTile(x+1, y+2, z+2, 155);
setTile(x, y+2, z+2, 155);
setTile(x-1, y+2, z+2, 155);
setTile(x+1, y+2, z-2, 155);
setTile(x, y+2, z-2, 155);
setTile(x-1, y+2, z-2, 155);
setTile(x+2, y+3, z, 8);
setTile(x-2, y+3, z, 8);
setTile(x, y+3, z+2, 8);
setTile(x, y+3, z-2, 8);
setTile(x, y+5, z, 89);
ol3x = x;
ol3y = y;
ol3z = z;
ol3 = 300;
}
if(i==336&&ol4==0){
Player.setHealth(30);
if(nightCheck()==true){
Level.setTime(0);
}
setTile(x+4, y+1, z+4, 30);
setTile(x+4, y+1, z+2, 30);
setTile(x+4, y+1, z, 30);
setTile(x+4, y+1, z-2, 30);
setTile(x+4, y+1, z-4, 30);
setTile(x+2, y+1, z+4, 30);
setTile(x+2, y+1, z+2, 30);
setTile(x+2, y+1, z, 30);
setTile(x+2, y+1, z-2, 30);
setTile(x+2, y+1, z-4, 30);
setTile(x, y+1, z+4, 30);
setTile(x, y+1, z+2, 30);
setTile(x, y+1, z-2, 30);
setTile(x, y+1, z-4, 30);
setTile(x-4, y+1, z+4, 30);
setTile(x-4, y+1, z+2, 30);
setTile(x-4, y+1, z, 30);
setTile(x-4, y+1, z-2, 30);
setTile(x-4, y+1, z-4, 30);
setTile(x-2, y+1, z+4, 30);
setTile(x-2, y+1, z+2, 30);
setTile(x-2, y+1, z, 30);
setTile(x-2, y+1, z-2, 30);
setTile(x-2, y+1, z-4, 30);
setTile(x+7, y+1, z+7, 30);
setTile(x+7, y+1, z-7, 30);
setTile(x-7, y+1, z+7, 30);
setTile(x-7, y+1, z-7, 30);
setTile(x+8, y+1, z, 30);
setTile(x, y+1, z+8, 30);
setTile(x-8, y+1, z, 30);
setTile(x, y+1, z-8, 30);
Level.spawnMob(x+3, y+8, z-3, 65);
Level.spawnMob(x+3, y+8, z, 65);
Level.spawnMob(x+3, y+8, z-3, 65);
Level.spawnMob(x, y+5, z+3, 65);
Level.spawnMob(x, y+5, z-3, 65);
Level.spawnMob(x-3, y+5, z+3, 65);
Level.spawnMob(x-3, y+8, z, 65);
Level.spawnMob(x-3, y+8, z-3, 65);
Level.spawnMob(x+6,y+30,z+6,80,"");
Level.spawnMob(x+6,y+30,z-6,80,"");
Level.spawnMob(x-6,y+30,z+6,80,"");
Level.spawnMob(x-6,y+3,z-6,80,"");
olx = x;
oly = y;
olz = z;
ol4 = 1800;
}
}
//odark
if(odark==1){
if(i==263&&od1==0){
setTile(x+1, y+1, z+1, 49);
setTile(x+1, y+1, z-1, 49);
setTile(x, y+1, z, 49);
setTile(x-1, y+1, z+1, 49);
setTile(x-1, y+1, z-1, 49);
setTile(x, y+2, z, 10);
od1x = x;
od1y = y;
od1z = z;
od1 = 150;
}
if(i==264&&od2==0){
for(var yy=y+1;yy<y+7;yy++)
setTile(x, yy, z, 49);
setTile(x, y+7, z, 35, 15);
for(var yy=y+6;yy<y+8;yy++){
setTile(x+1, yy, z, 35, 15);
setTile(x, yy, z-1, 35, 15);
setTile(x, yy, z+1, 35, 15);
setTile(x-1, yy, z, 35, 15);
}
for(var yy=y+4;yy<y+6;yy++){
setTile(x+1, yy, z+1, 35, 15);
setTile(x+1, yy, z-1, 35, 15);
setTile(x+1, yy, z, 35, 15);
setTile(x-1, yy, z+1, 35, 15);
setTile(x-1, yy, z-1, 35, 15);
setTile(x-1, yy, z, 35, 15);
setTile(x, yy, z+1, 35, 15);
setTile(x, yy, z-1, 35, 15);
setTile(x+2, yy, z+1, 35, 15);
setTile(x+2, yy, z-1, 35, 15);
setTile(x+2, yy, z, 35, 15)
setTile(x-2, yy, z+1, 35, 15);
setTile(x-2, yy, z-1, 35, 15);
setTile(x-2, yy, z, 35, 15);
setTile(x+1, yy, z+2, 35, 15);
setTile(x-1, yy, z+2, 35, 15);
setTile(x, yy, z+2, 35, 15);
setTile(x+1, yy, z-2, 35, 15);
setTile(x-1, yy, z-2, 35, 15);
setTile(x, yy, z-2, 35, 15);
}
od2 = 300;
}
if(i==265&&od3==0){
for(var xx=x-1;xx<x+2;xx++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, y, zz, 49);
setTile(x+2, y+2, z+1, 49);
setTile(x+2, y+2, z, 49);
setTile(x+2, y+2, z-1, 49);
setTile(x-2, y+2, z+1, 49);
setTile(x-2, y+2, z, 49);
setTile(x-2, y+2, z-1, 49);
setTile(x+1, y+2, z+2, 49);
setTile(x, y+2, z+2, 49);
setTile(x-1, y+2, z+2, 49);
setTile(x+1, y+2, z-2, 49);
setTile(x, y+2, z-2, 49);
setTile(x-1, y+2, z-2, 49);
setTile(x, y+1, z, 10);
od3x = x;
od3y = y;
od3z = z;
od3 = 300;
}
if(i==266&&od4==0){
Player.setHealth(30);
Level.setTime(14000);
setTile(x+9, y+8, z+9, 10);
setTile(x+9, y+8, z, 10);
setTile(x+9, y+8, z-9, 10);
setTile(x, y+8, z+9, 10);
setTile(x, y+8, z-9, 10);
setTile(x-9, y+8, z+9, 10);
setTile(x-9, y+8, z, 10);
setTile(x-9, y+8, z-9, 10);
Level.spawnMob(x+11, y+2, z+11, 35,"mob/spider.png");
Level.spawnMob(x+11, y+2, z, 35,"mob/spider.png");
Level.spawnMob(x+11, y+2, z-11, 35,"mob/spider.png");
Level.spawnMob(x, y+2, z+11, 35,"mob/spider.png");
Level.spawnMob(x, y+2, z-11, 35,"mob/spider.png");
Level.spawnMob(x-11, y+2, z+11, 35,"mob/spider.png");
Level.spawnMob(x-11, y+2, z, 35,"mob/spider.png");
Level.spawnMob(x-11, y+2, z-11, 35,"mob/spider.png");
odx = x;
ody = y;
odz = z;
od4 = 1800;
}

}

//oice
if(oice==1){
if(i==318&&oi1==0){
for(var xx=x-1;xx<x+2;xx++)
for(var yy=y-2;yy<y+1;yy++)
for(var zz=z-1;zz<z+2;zz++)
setTile(xx, yy, zz, 0);
oi1x = x;
oi1y = y;
oi1z = z;
oi1= 150;
}
if(i==296&&oi2==0){
setTile(x+2, y+1, z, 79);
setTile(x-2, y+1, z, 79);
setTile(x, y+1, z+2, 79);
setTile(x, y+1, z-2, 79);
setTile(x+1, y+1, z+1, 30);
setTile(x+1, y+1, z-1, 30);
setTile(x-1, y+1, z+1, 30);
setTile(x-1, y+1, z-1, 30);
oi2 = 300;
}
if(i==339&&oi3==0){
setTile(x+2, y+1, z+2, 80);
setTile(x+2, y+1, z-2, 80);
setTile(x-2, y+1, z+2, 80);
setTile(x-2, y+1, z-2, 80);
setTile(x+2, y+1, z+1, 85);
setTile(x+2, y+1, z, 85);
setTile(x+2, y+1, z-1, 85);
setTile(x-2, y+1, z+1, 85);
setTile(x-2, y+1, z, 85);
setTile(x-2, y+1, z-1, 85);
setTile(x+1, y+1, z+2, 85);
setTile(x, y+1, z+2, 85);
setTile(x-1, y+1, z+2, 85);
setTile(x+1, y+1, z-2, 85);
setTile(x, y+1, z-2, 85);
setTile(x-1, y+1, z-2, 85);
setTile(x+2, y+2, z+2, 86);
setTile(x+2, y+2, z-2, 86);
setTile(x-2, y+2, z+2, 86);
setTile(x-2, y+2, z-2, 86);
setTile(x, y+1, z, 30);
oi3 = 300;
}
if(i==348&&oi4==0){
Player.setHealth(30);
for(var xx=x-6;xx<x+7;xx++){
for(var zz=z-6;zz<z+7;zz++){
setTile(xx,y,zz,79);}}
for(var xx=x-4;xx<x+5;xx++){
setTile(xx,y+1,z+4,79);
setTile(xx,y+1,z-4,79);
}
for(var zz=z-3;zz<z+4;zz++){
setTile(x+4,y+1,zz,79);
setTile(x-4,y+1,zz,79);
}
setTile(x+4,y+2,z+4,79);
setTile(x+3,y+2,z+4,79);
setTile(x+2,y+2,z+4,102);
setTile(x+1,y+2,z+4,79);
setTile(x,y+2,z+4,0);
setTile(x,y+1,z+4,0);
setTile(x-1,y+2,z+4,79);
setTile(x-2,y+2,z+4,102);
setTile(x-3,y+2,z+4,79);
setTile(x-4,y+2,z+4,79);
setTile(x+4,y+2,z-4,79);
setTile(x+3,y+2,z-4,79);
setTile(x+2,y+2,z-4,102);
setTile(x+1,y+2,z-4,102);
setTile(x,y+2,z-4,79);
setTile(x-1,y+2,z-4,102);
setTile(x-2,y+2,z-4,102);
setTile(x-3,y+2,z-4,79);
setTile(x-4,y+2,z-4,79);
setTile(x+4,y+2,z+3,79);
setTile(x+4,y+2,z+2,102);
setTile(x+4,y+2,z+1,102);
setTile(x+4,y+2,z,79);
setTile(x+4,y+2,z-1,102);
setTile(x+4,y+2,z-2,102);
setTile(x+4,y+2,z-3,79);
setTile(x-4,y+2,z+3,79);
setTile(x-4,y+2,z+2,102);
setTile(x-4,y+2,z+1,102);
setTile(x-4,y+2,z,79);
setTile(x-4,y+2,z-1,102);
setTile(x-4,y+2,z-2,102);
setTile(x-4,y+2,z-3,79);
for(var xx=x-4;xx<x+5;xx++){
setTile(xx,y+3,z+4,79);
setTile(xx,y+3,z-4,79);
}
for(var zz=z-3;zz<z+4;zz++){
setTile(x+4,y+3,zz,79);
setTile(x-4,y+3,zz,79);
}
for(var xx=x-4;xx<x+5;xx++){
for(var zz=z-4;zz<z+5;zz++){
setTile(xx,y+4,zz,79);}}
setTile(x+4,y+5,z+4,79);
setTile(x+3,y+5,z+4,79);
setTile(x+2,y+5,z+4,79);
setTile(x+1,y+5,z+4,79);
setTile(x,y+5,z+4,79);
setTile(x-1,y+5,z+4,79);
setTile(x-2,y+5,z+4,79);
setTile(x-3,y+5,z+4,79);
setTile(x-4,y+5,z+4,79);
setTile(x+4,y+5,z-4,79);
setTile(x+3,y+5,z-4,79);
setTile(x+2,y+5,z-4,79);
setTile(x+1,y+5,z-4,79);
setTile(x,y+5,z-4,79);
setTile(x-1,y+5,z-4,79);
setTile(x-2,y+5,z-4,79);
setTile(x-3,y+5,z-4,79);
setTile(x-4,y+5,z-4,79);
setTile(x+4,y+5,z+3,79);
setTile(x+4,y+5,z+2,79);
setTile(x+4,y+5,z+1,79);
setTile(x+4,y+5,z,79);
setTile(x+4,y+5,z-1,79);
setTile(x+4,y+5,z-2,79);
setTile(x+4,y+5,z-3,79);
setTile(x-4,y+5,z+3,79);
setTile(x-4,y+5,z+2,79);
setTile(x-4,y+5,z+1,79);
setTile(x-4,y+5,z,79);
setTile(x-4,y+5,z-1,79);
setTile(x-4,y+5,z-2,79);
setTile(x-4,y+5,z-3,79);
setTile(x+3,y+1,z-3,58);
setTile(x+2,y+1,z-3,61);
setTile(x+1,y+1,z-3,245);
setTile(x,y+1,z-3,54);
setTile(x-3,y+1,z-3,85);
setTile(x-3,y+2,z-3,158);
setTile(x-2,y+1,z-3,53);
oix = x;
oiy = y;
oiz = z;
oi4 = 1800;
}
}


}


//Town ESP Alert
if(townCheck(x, z)){
if(i==302||i==303||i==304||i==305){
ESP.toast(Player.getName(ESP.getUser())+"(이)가 마을 내에서 능력 사용을 시도하였습니다.");
}
}


//add item
if(adding==true&&((multi==false&&ad==ESP.getUser())||(multi==true))){
addItemInventory(addid, addamount, adddemage);
adding = false;
ESP.toast("아이템이 지급되었습니다.");
preventDefault();
}

//A.I.S.
if(ad==ESP.getUser()&&aiOn==true){
if(aiType=="fire"){
if(aift==-1){
ESP.toast("Fire user was summoned.");
aifire = Level.spawnMob(x,y+3,z,35,"mob/char.png");
Entity.setRenderType(aifire, 3);
Entity.setHealth(aifire, 150);
Entity.setNameTag(aifire, "Fire User");
aifd = false;
aifd2 = true;
aift = 60;
}
else if(aift!=-1){
ESP.toast("There is already Fire User.");
}
preventDefault();
}
if(aiType=="water"){
if(aiwt==-1){
ESP.toast("Water Concroller was summoned.");
aiwater = Level.spawnMob(x,y+3,z,35,"mob/char.png");
Entity.setRenderType(aiwater, 3);
Entity.setHealth(aiwater, 150);
Entity.setNameTag(aiwater, "Water Controller");
aiwd = false;
aiwd2 = true;
aiwt = 60;
}
else if(aiwt!=-1){
ESP.toast("There is already Water Concroller.");
}
preventDefault();
}
if(aiType=="tree"){
if(aitt==-1){
ESP.toast("Nature Guardian was summoned.");
aitree = Level.spawnMob(x,y+3,z,35,"mob/char.png");
Entity.setRenderType(aitree, 3);
Entity.setHealth(aitree, 150);
Entity.setNameTag(aitree, "Nature Guardian");
aitd = false;
aitd2 = true;
aitt = 60;
}
else if(aitt!=-1){
ESP.toast("There is already Nature Guardian.");
}
preventDefault();
}
if(aiType=="creeper"){
if(aict==-1){
ESP.toast("I am Creeper was summoned.");
aicreeper = Level.spawnMob(x,y+3,z,35,"mob/char.png");
Entity.setRenderType(aicreeper, 3);
Entity.setHealth(aicreeper, 150);
Entity.setNameTag(aicreeper, "I am Creeper");
aicd = false;
aicd2 = true;
aict = 60;
}
else if(aict!=-1){
ESP.toast("There is already I am Creeper.");
}
preventDefault();
}
if(aiType=="soil"){
if(aist==-1){
ESP.toast("Soil Master was summoned.");
aisoil = Level.spawnMob(x,y+3,z,35,"mob/char.png");
Entity.setRenderType(aisoil, 3);
Entity.setHealth(aisoil, 150);
Entity.setNameTag(aisoil, "Soil Master");
aisd = false;
aisd2 = true;
aist = 60;
}
else if(aist!=-1){
ESP.toast("There is already Soil Master.");
}
preventDefault();
}
if(aiType=="summon"){
if(aisst==-1){
ESP.toast("The Summoner was summoned.");
aisummon = Level.spawnMob(x,y+3,z,35,"mob/char.png");
Entity.setRenderType(aisummon, 3);
Entity.setHealth(aisummon, 150);
Entity.setNameTag(aisummon, "The Summoner");
aissd = false;
aissd2 = true;
aisst = 60;
}
else if(aisst!=-1){
ESP.toast("There is already The Summoner.");
}
preventDefault();
}
aiOn = false;

}

//A.I.P.
if(b==49&&Level.getSignText(x, y+1, z, 1)=="A.I."){
espch = [x, y, z];
if(ESP.aipType()=="Fire User"){
ai2fire = true;
ai2fire3 = ESP.getUser();
}
if(ESP.aipType()=="Water Controller"){
ai2water = true;
ai2water3 = ESP.getUser();
}
if(ESP.aipType()=="I am Creeper"){
ai2creeper = true;
ai2creeper3 = ESP.getUser();
}
if(ESP.aipType()=="The Mage"){
ai2mage = true;
ai2mage3 = ESP.getUser();
}
if(ESP.aipType()=="Jungle Former"){
ai2jungle = true;
ai2jungle3 = ESP.getUser();
}
if(ESP.aipType()=="Remote Raider"){
ai2raid = true;
ai2raid3 = ESP.getUser();
}
setTile(x, y, z, 246);
ait = 6;
preventDefault();
}
if(i==267&&b!=49&&getTile(x, y+1, z)==63){
if(ai2fire==true&&ai2fire3==ESP.getUser()){
ai2fire2 = Level.spawnMob(x, y+3, z, 36);
Entity.setHealth(ai2fire2, 100);
ESP.sbm("Fire User(aip) was Summoned.");
ai2fire3 = null;
ai2fire = false;
ai2fd = false;
ai2fd2 = true;
ai2ft = 60;
}
if(ai2water==true&&ai2water3==ESP.getUser()){
ai2water2 = Level.spawnMob(x, y+3, z, 36);
Entity.setHealth(ai2water2, 100);
ESP.sbm("water Controller(aip) was Summoned.");
ai2water3 = null;
ai2water = false;
ai2wd = false;
ai2wd2 = true;
ai2wt = 60;
}
if(ai2creeper==true&&ai2creeper3==ESP.getUser()){
ai2creeper2 = Level.spawnMob(x, y+3, z, 36);
Entity.setHealth(ai2creeper2, 100);
ESP.sbm("I am Creeper(aip) was Summoned.");
ai2creeper3 = null;
ai2creeper = false;
ai2cd = false;
ai2cd2 = true;
ai2ct = 60;
}
if(ai2mage==true&&ai2mage3==ESP.getUser()){
ai2mage2 = Level.spawnMob(x, y+3, z, 36);
Entity.setHealth(ai2mage2, 100);
ESP.sbm("The Mage(aip) was Summoned.");
ai2mage3 = null;
ai2mage = false;
ai2md = false;
ai2md2 = true;
ai2mt = 60;
}
if(ai2jungle==true&&ai2jungle3==ESP.getUser()){
ai2jungle2 = Level.spawnMob(x, y+3, z, 36);
Entity.setHealth(ai2mage2, 100);
ESP.sbm("Jungle Former(aip) was Summoned.");
ai2jungle3 = null;
ai2jungle = false;
ai2jd = false;
ai2jd2 = true;
ai2jt = 60;
}
if(ai2raid==true&&ai2raid3==ESP.getUser()){
ai2raid2 = Level.spawnMob(x, y+3, z, 36);
Entity.setHealth(ai2raid2, 100);
ESP.sbm("Remote Raider(aip) was Summoned.");
ai2raid3 = null;
ai2raid = false;
ai2rd = false;
ai2rd2 = true;
ai2rt = 60;
ai2raid4 = ESP.getUser();
}

}

//---Sealed ESP---
if(!townCheck(x, z)&&se.tf){
if(se.demon==ESP.getUser()){
if(i==302&&se.d1==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<20;gun++)
setTile(px+gun*sin, y+2, pz+gun*cos, 49);
se.d1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&se.d2==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw()+90);
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<14;gun++){
setTile(px+gun*sin, y+2, pz+gun*cos, 49);
setTile(px-gun*sin, y+2, pz-gun*cos, 49);
}
se.d2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&se.d3==0){
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(Player.getX()-Entity.getX(e));
p2y = Math.abs(Player.getY()-Entity.getY(e));
p2z = Math.abs(Player.getZ()-Entity.getZ(e));
if(p2x<=18&&p2y<=18&&p2z<=18&&se.demon!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-9);
teleport(e, Entity.getX(e), Entity.getY(e)+9, Entity.getZ(e));
}
}
se.d3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&se.d4==0){
ESP.heal(se.demon);
ESP.sbm("Welcome to the Hell");
se.dx = Player.getX();
se.dy = Player.getY()-2;
se.dz = Player.getZ();
Level.setTime(14000);
for(var xx=se.dx-11;xx<se.dx+12;xx++)
for(var zz=se.dz-11;zz<se.dz+12;zz++)
setTile(xx, se.dy, zz, 11);
for(var xx=se.dx-1;xx<se.dx+2;xx++)
for(var zz=se.dz-1;zz<se.dz+2;zz++)
setTile(xx, se.dy, zz, 49);
arroundMobHealthDown(se.demon, 20, 6);
se.d4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(se.burst==ESP.getUser()){
if(i==302&&se.b1==0){
ESP.antiLack(3);
explode(x+(x-Player.getX()), y+2, z+(z-Player.getZ()), 4);
se.b1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&se.b2==0){
ESP.antiLack(3);
explode(x, y-9, z, 5);
explode(x, y+15, z, 15);
explode(x+5, y+10, z, 8);
explode(x-5, y+10, z, 8);
explode(x, y+10, z-5, 8);
explode(x, y+10, z+5, 8);
se.b2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&se.b3==0){
ESP.antiLack(3);
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<20;gun++)
explode(px+gun*sin, y+2, pz+gun*cos, 1.8);
se.b3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&se.b4==0){
Player.setHealth(50);
ESP.sbm("C3");
ESP.antiLack(3);
explode(x, y-9, z, 5);
explode(x, y+15, z, 15);
explode(x+5, y+10, z, 8);
explode(x-5, y+10, z, 8);
explode(x, y+10, z-5, 8);
explode(x, y+10, z+5, 8);
se.bx = x;
se.by = y;
se.bz = z;
se.b4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(se.geno==ESP.getUser()){
if(i==302&&se.g1==0){
ESP.antiLack(75);
setTile(x+(x-Player.getX()), y+2, z+(z-Player.getZ()), 46);
explode(x+(x-Player.getX()), y+2, z+(z-Player.getZ()), 2);
se.g1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&se.g2==0){
ESP.antiLack(3);
explode(x, y-8, z, 4);
explode(x, y+14, z, 12);
explode(x+5, y+10, z, 6);
explode(x-5, y+10, z, 6);
explode(x, y+10, z-5, 6);
explode(x, y+10, z+5, 6);
se.g2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&se.g3==0){
arroundMobHealthDown(se.geno, 20, 10);
se.g3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&se.g4==0){
ESP.heal(50);
ESP.sbm("Hyper Genocide");
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(Entity.getX(s)-Entity.getX(e));
p2y = Math.abs((Entity.getY(s)+1)-Entity.getY(e));4
p2z = Math.abs(Entity.getZ(s)-Entity.getZ(e));
if(p2x<=50&&p2y<=50&&p2z<50&&se.geno!=e){
Entity.setHealth(e, Entity.getHealth(e)-17);
Entity.setFireTicks(e, 20);
}
}
se.g4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(se.lolita==ESP.getUser()){
if(i==302&&se.l1==0){
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
se.l1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&se.l2==0){
Level.spawnMob(x, y+3, z, 36);
Level.spawnMob(x, y+3, z, 36);
Level.spawnMob(x, y+3, z, 36);
Level.spawnMob(x, y+3, z, 36);
Level.spawnMob(x, y+3, z, 36);
Level.spawnMob(x, y+3, z, 36);
Level.spawnMob(x, y+3, z, 36);
se.l2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&se.l3==0){
teleport(se.lolita, x+(x-Player.getX()), y+2, z+(z-Player.getZ()));
se.l3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&se.l4==0){
ESP.heal(se.lolita);
ESP.sbm("Lolita is Love");
arroundMobHealthDown(se.lolita, 50, 15);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
Level.spawnMob(x, y+3, z, 37);
se.l4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(se.avenge==ESP.getUser()){
if(i==302&&se.a1==0){
setTile(x, y+1, z, 46);
setTile(x, y+2, z, 46);
explode(x+0.5, y+3, z+0.5, 0.6);
se.a1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==304&&se.a3==0){
teleport(se.avenge, x+(x-Player.getX()), y+2, z+(z-Player.getZ()));
se.a3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&se.a4==0){
ESP.heal(se.avenge);
ESP.sbm("The Avenage");
arroundMobHealthDown(se.avenge, 30, 15);
Entity.setHealth(se.a4a, 0);
se.a4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(se.hide==ESP.getUser()){
if(i==302&&se.h1==0){
teleport(se.hide, x+(x-Player.getX()), y+2, z+(z-Player.getZ()));
se.h1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==304&&se.h3==0){
arroundMobHealthDown(se.hide, 20, 10);
se.h3 = 300;
skillCool(ESP.getUser(), 3);
}

}
if(se.gamble==ESP.getUser()){
if(i==302&&se.g1==0){
se.gr = ESP.random(2);
if(se.gr==0) Entity.setHealth(se.gamble, Entity.getHealth(se.gamble)+5);
if(se.gr==1) Entity.setHealth(se.gamble, Entity.getHealth(se.gamble)-5);
se.g1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==304&&se.g3==0){
se.gr = ESP.random(2);
if(se.gr==0) arroundMobHealthDown(se.gamble, 20, 10);
if(se.gr==1) Entity.setHealth(se.gamble, Entity.getHealth(se.gamble)-10);
se.g3 = 300;
skillCool(ESP.getUser(), 3);
}

}
if(se.reaper==ESP.getUser()){
if(i==302&&se.r1==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
teleport(se.reaper, px+9*sin, y+2, pz+9*cos);
setTile(px+4*sin, y+2, pz+4*cos, 173);
se.r1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==304&&se.r3==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<25;gun++)
setTile(px+gun*sin, y+2, pz+gun*cos, 173);
arroundMobHealthDown(se.reaper, 20, 7);
se.r3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&se.r4==0){
ESP.sbm("Darkness Pillar");
ESP.heal(se.reaper);
se.rx = Player.getX();
se.ry = Player.getY()-2;
se.rz = Player.getZ();
for(var yy=se.ry+1;yy<se.ry+11;yy++){
setTile(se.rx+7, yy, se.rz+7, 173);
setTile(se.rx+7, yy, se.rz, 173);
setTile(se.rx+7, yy, se.rz-7, 173);
setTile(se.rx, yy, se.rz+7, 173);
setTile(se.rx, yy, se.rz-7, 173);
setTile(se.rx-7, yy, se.rz+7, 173);
setTile(se.rx-7, yy, se.rz, 173);
setTile(se.rx-7, yy, se.rz-7, 173);
}
arroundMobHealthDown(se.reaper, 50, 15);
se.r4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(se.ima==ESP.getUser()){
if(i==305&&se.i4==0){
ESP.sbm("Imagine Break");
ESP.heal(se.ima);
se.i4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(se.over==ESP.getUser()){
if(i==302&&se.o1==0){
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)&&server!=e){
se.or.push(e);
}
}
se.or2 = se.or[ESP.random(se.or.length)];
teleport(server, Entity.getX(se.or2), Entity.getY(se.or2)+1, Entity.getZ(se.or2));
Entity.setHealth(se.or2, Entity.getHealth(se.or2)-4);
while(se.or[0]!=null){
se.or.shift();
}
se.o1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&se.o2==0){
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)&&server!=e){
se.or.push(e);
}
}
se.or2 = se.or[ESP.random(se.or.length)];
teleport(se.or2, Entity.getX(server), Entity.getY(server)+1, Entity.getZ(server));
Entity.setHealth(se.or2, Entity.getHealth(se.or2)-4);
while(se.or[0]!=null){
se.or.shift();
}
se.o2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&se.o3==0){
arroundMobHealthDown(se.over, 20, 10);
se.o3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&se.o4==0){
ESP.sbm("The Domination");
ESP.heal(se.over);
arroundMobHealthDown(se.over, 50, 18);
se.o4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(se.bls==ESP.getUser()){
if(i==302&&se.bl1==0){
teleport(se.bls, x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
se.bl1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&se.bl2==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<25;gun++)
explode(px+gun*sin, y+2, pz+gun*cos, 1.5);
se.bl2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&se.bl3==0){
if(se.bl3a==false){
arroundMobHealthDown(se.bls, 20, 10);
se.blx = Player.getX();
se.bly = Player.getY()-2;
se.blz = Player.getZ();
for(var xx=se.blx-11;xx<se.blx+12;xx++)
for(var zz=se.blz-11;zz<se.blz+12;zz++)
setTile(xx, se.bly+1, zz, 51);
for(var xx=se.blx-1;xx<se.blx+2;xx++)
for(var zz=se.blz-1;zz<se.blz+2;zz++)
setTile(xx, se.bly+1, zz, 0);
se.bl3a = true;
se.bl3 = 300;
skillCool(ESP.getUser(), 3);
}
else if(se.bl3a==true){
for(var xx=se.bl3x-11;xx<se.bl3x+12;xx++)
for(var zz=se.bl3z-11;zz<se.bl3z+12;zz++)
setTile(xx, se.bl3y+1, zz, 0);
se.bl3a = false;
}
}
if(i==305&&se.bl4==0){
ESP.sbm("The Black");
ESP.heal(se.bls);
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(Player.getX()-Entity.getX(e));
p2y = Math.abs(Player.getY()-Entity.getY(e));
p2z = Math.abs(Player.getZ()-Entity.getZ(e));
if(p2x<=50&&p2y<=50&&p2z<=50&&se.bls!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-15);
Entity.setFireTicks(e, 30);
}
}
se.bl4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(se.c==ESP.getUser()){
if(i==302&&se.c1==0){
ESP.antiLack(3);
explode(x, y+1.5, z, 3);
se.c1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&se.c2==0){
Entity.setHealth(se.c, Entity.getHealth(se.c)+10);
ESP.antiLack(3);
explode(x, y-9, z, 5);
explode(x, y+15, z, 15);
explode(x+5, y+10, z, 8);
explode(x-5, y+10, z, 8);
explode(x, y+10, z-5, 8);
explode(x, y+10, z+5, 8);
se.c2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&se.c3==0){
Entity.setHealth(se.c, Entity.getHealth(se.c)+20);
ESP.antiLack(3);
explode(x, y-9, z, 5);
explode(x, y+15, z, 15);
explode(x+5, y+10, z, 8);
explode(x-5, y+10, z, 8);
explode(x, y+10, z-5, 8);
explode(x, y+10, z+5, 8);
se.c3a = true;
se.c3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&se.c4==0){
ESP.sbm("C4");
Entity.setHealth(se.c, Entity.getHealth(se.c)+40);
ESP.antiLack(3);
explode(x, y-12, z, 8);
explode(x, y+20, z, 20);
explode(x+8, y+13, z, 13);
explode(x-8, y+13, z, 13);
explode(x, y+13, z-8, 13);
explode(x, y+13, z+8, 13);
se.c4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(se.doctor==ESP.getUser()){
if(i==302&&se.do1==0){
Entity.setHealth(se.doctor, Entity.getHealth(se.doctor)+10);
se.do1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&se.do2==0){
Entity.setHealth(se.doctor, Entity.getHealth(se.doctor)+10);
arroundMobHealthDown(se.doctor, 15, -5);
se.do2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&se.do3==0){
Entity.setHealth(se.doctor, Entity.getHealth(se.doctor)+5);
se.do3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&se.do4==0){
ESP.sbm("Hyper Heal");
Entity.setHealth(se.doctor, Entity.getHealth(se.doctor)+30);
se.do4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(se.htp==ESP.getUser()){
if(i==302){
if(se.ht1==0){
teleport(se.htp, x, y+3, z);
se.ht1 = 150;
skillCool(ESP.getUser(), 1);
}
else if(se.ht1>75){
teleport(se.htp, x, y+3, z);
}
}
if(i==303&&se.ht2==0){
teleport(se.htp, x+2*(x-Player.getX()), y+3, z+2*(z-Player.getZ()));
explode(x, y+2.5, z, 3);
se.ht2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&se.ht3==0){
if(se.ht3a==false){
se.hx = x;
se.hy = y;
se.hz = z;
se.ht3a = true;
}
else if(se.ht3a==true){
arroundMobHealthDown(se.htp, 20, 10),
teleport(se.htp, se.hx, se.hy+3, se.hz);
se.ht3a = false;
se.ht3 = 300;
skillCool(ESP.getUser(), 3);
}
}
if(i==305){
if(se.ht4==0){
ESP.sbm("Hyper Teleporting");
ESP.heal(se.htp);
teleport(se.htp, x, y+3, z);
se.ht4 = 1800;
skillCool(ESP.getUser(), 4);
}
else if(se.ht4>1350){
teleport(se.htp, x, y+3, z);
}
}

}
if(se.evil==ESP.getUser()){
if(i==302){
teleport(se.evil, x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
se.e1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&se.e2==0){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<25;gun++)
explode(px+gun*sin, y+2.5, pz+gun*cos, 1.9);
se.e2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&se.e3==0){
se.exa = Math.abs(x-Player.getX());
se.exa = Math.abs(x-Player.getX());
if(se.exa>se.sza){
for(var yy=y+1;yy<y+6;yy++)
for(var zz=z-2;zz<z+3;zz++)
setTile(x, yy, zz, 173);
}
else if(se.exa<se.sza){
for(var xx=x-2;xx<x+3;xx++)
for(var yy=y+1;yy<y+6;yy++)
setTile(xx, yy, z, 173);
}
arroundMobHealthDown(se.evil, 15, 7);
se.e3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&se.e4==0){
ESP.sbm("Van!shment Th!s World");
ESP.heal(se.evil);
if(nightCheck()==false)
Level.setTime(14000);
for(var xx=x-18;xx<x+19;xx++){
for(var yy=y-3;yy<y+9;yy++){
for(var zz=z-18;zz<z+19;zz++){
if(getTile(xx, yy, zz)==3){
setTile(xx, yy, zz, 41);
}
if(getTile(xx, yy, zz)==2){
setTile(xx, yy, zz, 3);
}
if(getTile(xx, yy, zz)==8||getTile(xx, yy, zz)==9){
setTile(xx, yy, zz, 22);
}
for(var yy=y+1;yy<y+7;yy++)
setTile(x, yy, z, 17);
setTile(x, y+7, z, 18);
for(var yy=y+6;yy<y+8;yy++){
setTile(x+1, yy, z, 18);
setTile(x, yy, z-1, 18);
setTile(x, yy, z+1, 18);
setTile(x-1, yy, z, 18);
}
for(var yy=y+4;yy<y+6;yy++){
setTile(x+1, yy, z+1, 18);
setTile(x+1, yy, z-1, 18);
setTile(x+1, yy, z, 18);
setTile(x-1, yy, z+1, 18);
setTile(x-1, yy, z-1, 18);
setTile(x-1, yy, z, 18);
setTile(x, yy, z+1, 18);
setTile(x, yy, z-1, 18);
setTile(x+2, yy, z+1, 18);
setTile(x+2, yy, z-1, 18);
setTile(x+2, yy, z, 18)
setTile(x-2, yy, z+1, 18);
setTile(x-2, yy, z-1, 18);
setTile(x-2, yy, z, 18);
setTile(x+1, yy, z+2, 18);
setTile(x-1, yy, z+2, 18);
setTile(x, yy, z+2, 18);
setTile(x+1, yy, z-2, 18);
setTile(x-1, yy, z-2, 18);
setTile(x, yy, z-2, 18);
}
setTile(x, y+8, z, 51);
}}}
for(var xx=x-18;xx<x+19;xx++){
setTile(xx, y+2, z-19, 95);
setTile(xx, y+2, z+19, 95);
}
for(var zz=z-18;zz<z+19;zz++){
setTile(x+19, y+2, zz, 95);
setTile(x-19, y+2, zz, 95);
}
se.ex = x;
se.ey = y;
se.ez = z;
se.e4 = 1800;
skillCool(ESP.getUser(), 4);
}

}

//---Hidden ESP---
if(he.elect==ESP.getUser()){
if(i==302&&he.e1==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=2;gun<5;gun++)
setTile(px+gun*sin, y+2, pz+gun*cos, 89);
teleport(he.elect, px+8*sin, y+3, pz+8*cos);
he.e1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&he.e2==0){
px = Math.floor(Player.getX());
py = y;
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<25;gun++)
setTile(px+gun*sin, y+2, pz+gun*cos, 89);
he.e2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304){
if(he.e3==0&&he.e3a==false){
for(var n=-1;n<2;n++){
setTile(x+n, y+2, z+2, 89);
setTile(x+n, y+2, z-2, 89);
setTile(x+2, y+2, z+n, 89);
setTile(x-2, y+2, z+n, 89);
}
he.e3x = x;
he.e3y = y;
he.e3z = z;
he.e3a = true;
he.e3 = 300;
skillCool(ESP.getUser(), 3);
}
else if(he.e3a==true){
for(var n=-1;n<2;n++){
setTile(he.e3x+n, he.e3y+2, he.e3z+2, 0);
setTile(he.e3x+n, he.e3y+2, he.e3z-2, 0)
setTile(he.e3x+2, he.e3y+2, he.e3z+n, 0);
setTile(he.e3x-2, he.e3y+2, he.e3z+n, 0);
}
setTile(he.e3x, he.e3y+2, he.e3z, 89);
he.e3a = true;
he.e3b = 6;
}
}
if(i==305&&he.e4==0){
ESP.sbm("Lightning Release");
ESP.heal(he.elect);
he.ex = Player.getX();
he.ey = Player.getY()-2;
he.ez = Player.getZ();
for(var n=3;n<17;n++){
setTile(he.ex+n, he.ey+2, he.ez+n, 89);
setTile(he.ex+n, he.ey+2, he.ez, 89);
setTile(he.ex+n, he.ey+2, he.ez-n, 89);
setTile(he.ex, he.ey+2, he.ez+n, 89);
setTile(he.ex, he.ey+2, he.ez-n, 89);
setTile(he.ex-n, he.ey+2, he.ez+n, 89);
setTile(he.ex-n, he.ey+2, he.ez, 89);
setTile(he.ex-n, he.ey+2, he.ez-n, 89);
}
he.e4 = 1800;
}

}
if(he.shade==ESP.getUser()){
if(i==302&&he.s1==0){
teleport(ESP.getUser(), x+2*(x-Player.getX()), y+3, z+2*(z-Player.getZ()));
ESP.antiLack(3);
explode(x, y+1, z, 3);
he.s1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&he.s2==0){
he.s2a = ESP.getNearEntity(he.shade, 30);
if(he.s2a==-1){
ESP.toast("주변에 엔티티가 없습니다.");
}
else{
px = Entity.getX(he.s2a);
py = Entity.getY(he.s2a);
pz = Entity.getZ(he.s2a);
yaw = Math.floor(Entity.getYaw(he.s2a));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
teleport(he.shade, px-2*sin, py+1, pz-2*cos);
Entity.setHealth(he.s2a, Entity.getHealth(he.s2a)-10);
he.s2 = 300;
skillCool(ESP.getUser(), 2);
}
}
if(i==304&&he.s3==0){
arroundMobHealthDown(he.shade, 20, 10);
he.s3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&he.s4==0){
ESP.sbm("Shadow Assault");
ESP.heal(he.shade);
teleport(ESP.getUser(), x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(x-Entity.getX(e));
p2y = Math.abs((y+1)-Entity.getY(e));
p2z = Math.abs(z-Entity.getZ(e));
if(p2x<=40&&p2y<=40&&p2z<=40&&he.shade!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-10);
he.s4a.push(e);
}
}
he.s4 = 1800;
}

}
if(he.torn==ESP.getUser()){
if(i==302&&he.t1==0){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
for(var gun=3;gun<20;gun++)
explode(px+gun*sin, y+2, pz+gun*cos, 1.7);
he.t1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&he.t2==0){
for(var xx=x-1;xx<x+2;xx++){
for(var yy=y+1;yy<y+4;yy++){
for(var zz=z-1;zz<z+2;zz++){
setTile(xx, yy, zz, 0);
setTile(xx, yy, z+2, 20);
setTile(xx, yy, z-2, 20);
setTile(x+2 ,yy, zz, 20);
setTile(x-2 ,yy, zz, 20);
setTile(xx, y+4, zz, 20);
}}}
he.t2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&he.t3==0){
arroundMobHealthDown(he.torn, 7, 5);
teleport(he.torn, x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
he.t3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&he.t4==0){
ESP.sbm("The Tornado");
ESP.heal(he.torn);
arroundMobHealthDown(he.torn, 20, 5);
he.tx = Player.getX();
he.ty = Player.getY()-2;
he.tz = Player.getZ();
ESP.antiLack(3);
explode(he.tx+7, he.ty+1, he.tz, 3);
explode(he.tx-7, he.ty+1, he.tz, 3);
he.t4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(he.buf==ESP.getUser()){
if(i==302){
if(he.b1==0){
teleport(he.buf, x, y+3, z);
he.b1 = 150;
skillCool(ESP.getUser(), 1);
}
else if(he.b1>115){
teleport(he.buf, x, y+3, z);
}
}
if(i==303&&he.b2==0){
he.b2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==305&&he.b4==0){
ESP.sbm("The Buf");
ESP.heal(he.buf);
he.b4a = Entity.getHealth(he.buf);
arroundMobHealthDown(he.buf, 20, 5);
he.b4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(he.x==ESP.getUser()){
if(i==302&&he.x1==0){
arroundMobHealthDown(he.x, 7, 5);
teleport(he.x, x+(x-Player.getX()), y+3, z+(z-Player.getZ()));
he.x1 = 150;
skillCool(ESP.getUser(), 1);
}
if(i==303&&he.x2==0){
px = Math.floor(Player.getX());
pz = Math.floor(Player.getZ());
yaw = Math.floor(getYaw());
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
for(var gun=3;gun<20;gun++)
explode(px+gun*sin, y+2, pz+gun*cos, 1.7);
he.x2 = 300;
skillCool(ESP.getUser(), 2);
}
if(i==304&&he.x3==0){
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(Player.getX()-Entity.getX(e));
p2y = Math.abs(Player.getY()-Entity.getY(e));
p2z = Math.abs(Player.getZ()-Entity.getZ(e));
if(p2x<=10&&p2y<=10&&p2z<=10&&he.x!=e&&Entity.getEntityTypeId(e)<64){
teleport(e, Entity.getX(e), Entity.getY(e)+13, Entity.getZ(e));
Entity.setFireTicks(e, 10);
}
}
he.x3 = 300;
skillCool(ESP.getUser(), 3);
}
if(i==305&&he.x4==0){
ESP.sbm("Secret Assault");
ESP.heal(he.x);
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(Player.getX()-Entity.getX(e));
p2y = Math.abs(Player.getY()-Entity.getY(e));
p2z = Math.abs(Player.getZ()-Entity.getZ(e));
if(p2x<=35&&p2y<=35&&p2z<=35&&he.x!=e&&Entity.getEntityTypeId(e)<64){
teleport(e, x+0.5, y+3, z+0.5);
Entity.setFireTicks(e, 10);
Entity.setHealth(e, Entity.getHealth(e)-5);
}
}
he.xx = x;
he.xy = y;
he.xz = z;
ESP.antiLack(90);
setTiles(x-2, x+2, y, y+4, z-2, z+2, 7);
setTiles(x-1, x+1, y+1, y+4, z-1, z+1, 0);
Level.spawnMob(x+0.5, y+6, z+0.5, 65);
Level.spawnMob(x+0.5, y+12, z+0.5, 65);
Level.spawnMob(x+0.5, y+21, z+0.5, 65);
setTile(x, y+1, z, 30);
he.x4 = 1800;
skillCool(ESP.getUser(), 4);
}

}



}



if(b==133&&Level.getSignText(x, y+1, z, 1)=="Party"){
Party.makeHouse(x, y, z);
}
else if(Party.isBlock(x, y, z)){
if(Party.getParty(ESP.getUser())==-1){
ESP.sbm(Player.getName(ESP.getUser())+" is a Solo Player.");
}
else{
var iiiii = Level.dropItem(x+0.5, y+3, z+0.5, 0, 351, 1, 0);
Entity.setVelX(iiiii, 0);
Entity.setVelZ(iiiii, 0);
ESP.toast("Item for Party Skill was given.");
}

}
for(var n in p.party){
if(i==351&&it==0&&Cool.isFinished(p.c[n])){
var npn = Party.getParty(ESP.getUser());
if(npn==-1){
ESP.sbm(Player.getName(ESP.getUser())+" is Solo Player.");
}
else{
Party.heal(ESP.getUser(), npn);
ESP.toast(Player.getName(ESP.getUser())+"(이)가 파티 스킬을 사용하였습니다.");
}
}
}


if(mp3==true){
if((x==111&&y==66&&z==10)||(x==1028&&y==18&&z==1038)||(x==2024&&y==52&&z==-1025)){
Entity.setPosition(ESP.getUser(), 1000.5, 51, 1500.5);
ESP.toast("Teleported to Time Zone");
}
if(x==154&&y==44&&z==11){
Entity.setPosition(ESP.getUser(), -1033, 10, 1003);
ESP.toast("Teleported to Nether World.");
}
if(x==177&&y==70&&z==33){
Entity.setPosition(ESP.getUser(), -1024, 23, -1001);
ESP.toast("Teleported to Ender World.");
}
if(x==142&&y==41&&z==34){
Entity.setPosition(ESP.getUser(), -3000, 23, 0);
ESP.toast("Teleported to Nox Oppidum.");
}
if(b==242){
switch(Level.getSignText(x, y+1, z, 1)){
case "Past" : 
Entity.setPosition(ESP.getUser(), 1018, 20, 1039);
ESP.toast("Time Jumped to Past");
break;
case "Present" : 
Entity.setPosition(ESP.getUser(), 116, 52, 25);
ESP.toast("Time Jumped to Present");
break;
case "Future" : 
Entity.setPosition(ESP.getUser(), 2014, 53, -1023);
ESP.toast("Time Jumped to Future");
break;
}
}

}

if(i==511&&dt.tf==true&&ad==ESP.getUser()){
dt.p = Level.spawnMob(x, y+3, z, 10, "mob/darkTornado.png");
Entity.setRenderType(dt.p, darkRender.renderType);
Entity.setNameTag(dt.p, "    §0Dark Tornado§f");
clientMessage("<server> §0Dark Tornado§f joined the Game.");
Entity.setVelY(dt.p, -0.7);
Entity.setCollisionSize(dt.p, 0.7, 1.8);
dt.l = true;
dt.tf = false;
dt.t = 195;
}

if(b==233||b==234)
spellStone(x, y, z, b);



}



function attackHook(a, v){
//admin's+
if(getCarriedItem()==347){
preventDefault();
ESP.sbm("내 체력 "+Entity.getHealth(a)+" / 니 체력 "+Entity.getHealth(v));
}
if(getCarriedItem()==345){
if(admin==5){
Entity.setHealth(v, Entity.getHealth(v)+2);
preventDefault();
}
if(admin==6){
Entity.setHealth(v, 0);
preventDefault();
}
if(admin==8){
ESP.send(v);
preventDefault();
}

}

if(espOnoff){
if(sand[0]!=null){
for(var n in sand){
if(sand[n]==ESP.getUser()){
if(item()==302&&Cool.isFinished(m1a[n])){
Entity.setFireTicks(v, 6);
preventDefault();
m1[n] = true;
m1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
}}}
if(blood[0]!=null){
for(var n in blood){
if(blood[n]==ESP.getUser()){
if(item()==302&&Cool.isFinished(b1a[n])){
Entity.setHealth(v, Entity.getHealth(v)-6);
preventDefault();
b1[n] = true;
b1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(item()==303&&Cool.isFinished(b2a[n])){
Entity.setHealth(v, Entity.getHealth(v)-5);
Entity.setHealth(a, Entity.getHealth(a)+5);
preventDefault();
b2[n] = true;
b2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(item()==305&&Cool.isFinished(b4a[n])&&b4b[n]==1){
b4b[n] = 0;
Level.setTime(0);
if(Entity.getHealth(v)>20){
Entity.setHealth(v, Entity.getHealth(v)-20);
}
else if(Entity.getHealth(v)<=20){
Entity.setHealth(v, 1);
}
vampireHyperPlus(blood[n], v, 15, 5);
Entity.setHealth(a, Entity.getHealth(a)+5);
preventDefault();
b4[n] = true;
b4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}
if(air[0]==ESP.getUser()&&air2==false){
if(item()==304&&Cool.isFinished(a3a[0])){
Entity.setVelX(v, 4*Entity.getX(v)-4*Player.getX());
Entity.setVelZ(v, 4*Entity.getZ(v)-4*Player.getZ());
preventDefault();
a3[0] = true;
a3a[0] = 300;
}
if(item()==305&&Cool.isFinished(a4a[0])){
ESP.sbm("Hyper Throw");
ESP.heal(air[0]);
arroundMobHealthDown(a, 30, 5);
teleport(v, Entity.getX(v),  Entity.getY(v)+32,  Entity.getZ(v));
preventDefault();
a4[0] = true;
a4a[0] = 1800;
skillCool(ESP.getUser(), 4);
}
}
for(var n=1;n<air.length;n++){
if(air[n]==ESP.getUser()){
if(item()==304&&Cool.isFinished(a3a[n])){
Entity.setVelX(v, 4*Entity.getX(v)-4*Player.getX());
Entity.setVelZ(v, 4*Entity.getZ(v)-4*Player.getZ());
preventDefault();
a3[n] = true;
a3a[n]  = 300;
}
if(item()==305&&Cool.isFinished(a4a[n])){
ESP.sbm("Hyper Throw");
ESP.heal(air[n]);
arroundMobHealthDown(a, 30, 5);
teleport(v, Entity.getX(v),  Entity.getY(v)+32,  Entity.getZ(v));
preventDefault();
a4[n] = true;
a4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(titan[0]!=null){
for(var n in titan){
if(titan[n]==ESP.getUser()){
if(item()==305&&Cool.isFinished(tt4a[n])){
tt4b[n] = v;
tt4c[n] = true;
}
}}
if(bind[0]==ESP.getUser()){
if(item()==305&&Cool.isFinished(bb4a[0])){
ESP.sbm("Shadow Web");
ESP.heal(bind[0]);
bb4b[0] = v;
arroundMobBindPlus(bind[0], 40);
preventDefault();
bb4c[0] = true;
bb4[0] = true;
bb4a[0] = 1800;
skillCool(ESP.getUser(), 4);
}
}
for(var n=1;n<bind.length;n++){
if(bind[n]==ESP.getUser()){
if(item()==305&&Cool.isFinished(bb4a[n])){
ESP.sbm("Shadow Web");
ESP.heal(bind[n]);
bb4b[n] = v;
arroundMobBindPlus(bind[n], 40);
preventDefault();
bb4c[n] = true;
bb4[n] = true;
bb4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}
if(heal[0]==ESP.getUser()&&heal2==false){
if(item()==303&&Cool.isFinished(h2a[0])){
Entity.setHealth(a, Entity.getHealth(a)+6);
Entity.setHealth(v, Entity.getHealth(v)+5);
preventDefault();
h2[n] = true;
h2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
}
for(var n=1;n<heal.length;n++){
if(heal[n]==ESP.getUser()){
if(item()==303&&Cool.isFinished(h2a[n])){
Entity.setHealth(a, Entity.getHealth(a)+6);
Entity.setHealth(v, Entity.getHealth(v)+5);
preventDefault();
h2[n] = true;
h2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
}}}
if(assassin[0]!=null){
for(var n in assassin){
if(assassin[n]==ESP.getUser()){
if(item()==305&&Cool.isFinished(as4a[n])){
ESP.heal(assassin[n]);
Entity.setHealth(v, Math.floor(Math.random()*4));
ESP.sbm("Assassination");
preventDefault();
as4[n] = true;
as4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(poison[0]!=null){
for(var n in poison){
if(poison[n]==ESP.getUser()){
if(item()==302&&Cool.isFinished(p1a[n])){
Entity.setHealth(v, Entity.getHealth(v)-2);
preventDefault();
p1b[n] = v;
p1[n] = true;
p1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(item()==304&&Cool.isFinished(p3a[n])){
Entity.setHealth(v, Entity.getHealth(v)-3);
preventDefault();
p3b[n] = v;
p3[n] = true;
p3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}}}
if(burst[0]!=null){
for(var n in burst){
if(burst[n]==ESP.getUser()){
if(item()==303&&Cool.isFinished(bus2a[n])){
ESP.antiLack(3);
explode(Entity.getX(v), Entity.getY(v), Entity.getZ(v), 1);
preventDefault();
bus2[n] = true;
bus2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
}}}
if(assault[0]!=null){
for(var n in assault){
if(assault[n]==ESP.getUser()){
if(item()==302&&Cool.isFinished(asu1a[n])){
Entity.setHealth(v, Entity.getHealth(v)-5);
Entity.setFireTicks(v, 1);
asu1[n] = true;
asu1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(item()==305&&Cool.isFinished(asu4a[n])){
ESP.heal(assault[n]);
ESP.sbm("Final Attack");
Entity.setHealth(v, Entity.getHealth(v)-(7+Math.floor(Math.random()*3)));
assaulterHyperPlus(assault[n], 20, 10);
preventDefault();
asu4[n] = true;
asu4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(tp[0]!=null){
for(var n in tp){
if(tp[n]==ESP.getUser()){
if(item()==303&&Cool.isFinished(tp2a[n])){
px = Math.floor(Entity.getX(v));
py = Math.floor(Entity.getY(v));
pz = Math.floor(Entity.getZ(v));
yaw = Math.floor(Entity.getYaw(v));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
teleport(tp[n], px-3*sin, py+2, pz-3*cos);
Entity.setHealth(v, Entity.getHealth(v)-2);
preventDefault();
tp2[n] = true;
tp2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(item()==304&&Cool.isFinished(tp3a[n])){
teleport(v, Entity.getX(v), Entity.getY(v)+10, Entity.getZ(v));
Entity.setHealth(v, Entity.getHealth(v)-3);
preventDefault();
tp3[n] = true;
tp3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
if(item()==305&&tp4b[n]==true){
Entity.setHealth(v, Entity.getHealth(v)-2);
teleport(v, tpx[n], tpy[n], tpz[n]);
preventDefault();
}
}}}
if(space[0]!=null){
for(var n in space){
if(space[n]==ESP.getUser()){
if(item()==304&&Cool.isFinished(sp3a[n])){
sp3x[n] = Entity.getX(v);
sp3y[n] = Entity.getY(v)-5;
sp3z[n] = Entity.getZ(v);
for(var xx=sp3x[n]-1;xx<sp3x[n]+2;xx++)
for(var yy=sp3y[n]-1;yy<sp3y[n]+2;yy++)
for(var zz=sp3z[n]-1;zz<sp3z[n]+2;zz++)
setTile(xx, yy, zz, 0);
teleport(v, sp3x[n], sp3y[n], sp3z[n]);
sp3[n] = true;
sp3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}}}
if(magnet[0]!=null){
for(var n in magnet){
if(magnet[n]==ESP.getUser()){
if(item()==302&&Cool.isFinished(mag1a[n])){
mag1b = Level.spawnMob(Entity.getX(v), Entity.getY(v)+2, Entity.getZ(v), 84);
Entity.rideAnimal(v, mag1b);
Entity.setVelY(mag1b, 1);
preventDefault();
mag1[n] = true;
mag1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
}}}
if(hermit[0]!=null){
for(var n in hermit){
if(hermit[n]==ESP.getUser()){
if(i==303&&her2b[n]==true){
teleport(v, her2x[n]+1.5, her2y[n]+11.5, her2z[n]+2.5);
preventDefault();
her2b[n] = false;
}
}}}
if(kirito[0]!=null){
for(var n in kirito){
if(kirito[n]==ESP.getUser()){
if(item()==305&&Cool.isFinished(k4a[n])){
ESP.heal(kirito[n]);
ESP.sbm("Starburst Stream");
explode(Entity.getX(v), Entity.getY(v), Entity.getZ(v), 0.5);
ESP.kiritoHyperPlus(kirito[n], v, 30, 10);
preventDefault();
k4b[n] = v;
k4[n] = true;
k4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(kanade[0]!=null){
for(var n in kanade){
if(kanade[n]==ESP.getUser()){
if(item()==303&&Cool.isFinished(ka2a[n])){
Entity.setHealth(v, Entity.getHealth(v)-7);
preventDefault();
ka2[n] = true;
ka2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
}}}
if(time[0]!=null){
for(var n in time){
if(time[n]==ESP.getUser()){
if(item()==302&&Cool.isFinished(ti2a[n])){
Entity.setHealth(v, Entity.getHealth(v)-10);
preventDefault();
ti2[n] = true;
ti2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
if(item()==304&&Cool.isFinished(ti3a[n])){
ti3b[n] = v;
preventDefault();
ti3x[n] = Entity.getX(v);
if(!mcpev3){
if(ESP.isPlayer(v))
ti3y[n].push(Math.floor(Entity.getY(v)-2)+1.5);
else
ti3y[n].push(Math.floor(Entity.getY(v))-0.25);
}
else{
ti3y[n].push(Entity.getY(v));
}
ti3z[n] = Entity.getZ(v);
if(getTile(ti3x[n], ti3y[n]-0.75, ti3z[n])==0&&!ESP.isPlayer(v)){
setTile(ti3x[n], ti3y[n]-0.75, ti3z[n], 95);
}
if(getTile(ti3x[n], Entity.getY(v)-2, ti3z[n])==0&&ESP.isPlayer(v)){
setTile(ti3x[n], Entity.getY(v)-2, ti3z[n], 95);
}
ti3[n] = true;
ti3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}}}
if(asuna[0]!=null){
for(var n in asuna){
if(asuna[n]==ESP.getUser()){
if(item()==302&&Cool.isFinished(asn1a[n])){
Entity.setHealth(v, Entity.getHealth(v)-6);
preventDefault();
asn1[n] = true;
asn1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
if(item()==304&&Cool.isFinished(asn3a[n])){
explode(Entity.getX(v), Entity.getY(v)+0.2, Entity.getZ(v), 0.5);
preventDefault();
asn3b[n] = v;
asn3[n] = true;
asn3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}}}
if(has[0]!=null){
for(var n in has){
if(has[n]==ESP.getUser()){
if(item()==304&&Cool.isFinished(ha3a[n])){
Entity.setHealth(v, Entity.getHealth(v)-6);
px = Math.floor(Entity.getX(v));
pz = Math.floor(Entity.getZ(v));
yaw = Math.floor(Entity.getYaw(v));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
teleport(a, px-3*sin, Entity.getY(v)+1, pz-3*cos);
preventDefault();
ha3[n] = true;
ha3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}}}
if(random[0]!=null){
for(var n in random){
if(random[n]==ESP.getUser()){
if(item()==304&&Cool.isFinished(ra3a[n])){
ra3b[n] = ESP.random(3);
if(ra3b[n]==0){
Entity.setFireTicks(v, 10);
}
else if(ra3b[n]==1){
Entity.setHealth(v, Entity.getHealth(v)-8);
}
else if(ra3b[n]==2){
teleport(v, Entity.getX(v), Entity.getY(v)+10, Entity.getZ(v));
}
preventDefault();
ra3[n] = true;
ra3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}}}
if(geno[0]!=null){
for(var n in geno){
if(geno[n]==ESP.getUser()){
if(item()==302&&Cool.isFinished(g1a[n])){
var g1b = Level.spawnMob(Entity.getX(v), Entity.getY(v)+2, Entity.getZ(v), 65);
Entity.rideAnimal(v, g1b);
preventDefault();
g1[n] = true;
g1a[n] = 150;
skillCool(ESP.getUser(), 1);
}
}}}
if(server[0]!=null){
for(var n in server){
if(server[n]==ESP.getUser()){
if(item()==305&&Cool.isFinished(se4a[n])){
ESP.heal(server[n]);
ESP.sbm("Ban");
se4c[n] = Entity.getHealth(v);
sex[n] = Entity.getX(v);
sey[n] = Entity.getY(v);
sez[n] = Entity.getZ(v);
se4b[n] = v;
preventDefault();
se4[n] = true;
se4a[n] = 1800;
skillCool(ESP.getUser(), 4);
}
}}}
if(wind[0]!=null){
for(var n in wind){
if(wind[n]==ESP.getUser()){
if(item()==304&&Cool.isFinished(wi3a[n])){
teleport(v, Entity.getX(v), Entity.getY(v)+18, Entity.getZ(v));
Entity.setHealth(v, Entity.getHealth(v)-3);
preventDefault();
wi3[n] = true;
wi3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}}}
if(copy[0]!=null){
for(var n in copy){
if(copy[n]==ESP.getUser()){
if(item()==304&&Cool.isFinished(co3a[n])){
for(var xx=198;xx<203;xx++)
for(var yy=9;yy<16;yy++)
for(var zz=148;zz<153;zz++)
setTile(xx, yy, zz, 49);
for(var xx=199;xx<202;xx++)
for(var yy=10;yy<15;yy++)
for(var zz=149;zz<152;zz++)
setTile(xx, yy, zz, 0);
setTile(200, 11, 150, 50);
Level.spawnMob(200, 13, 150, 32);
Level.spawnMob(200, 13, 150, 32);
Entity.setHealth(v, Entity.getHealth(v)-4);
co3b[n] = v;
co3x[n] = Entity.getX(v);
co3y[n] = Entity.getY(v);
co3z[n] = Entity.getZ(v);
teleport(v, 200, 13, 150);
preventDefault();
co3[n] = true;
co3a[n] = 300;
skillCool(ESP.getUser(), 3);
}
}}}
if(gravity[0]!=null){
for(var n in gravity){
if(sand[n]==ESP.getUser()){
if(gravity()==303&&Cool.isFinished(gr2a[n])){
teleport(v, Entity.getX(v), Entity.getY(v)+15, Entity.getZ(v));
Entity.setHealth(Entity.getHealth(v)-3);
preventDefault();
gr2[n] = true;
gr2a[n] = 300;
skillCool(ESP.getUser(), 2);
}
}}}

//Skill 1+
if(getCarriedItem()==302){
//dra1
if(dra==ESP.getUser()&&dc1a==0){
Entity.setHealth(v, Entity.getHealth(v)-7);
Entity.setHealth(a, Entity.getHealth(a)+7);
preventDefault();
dc1 = true;
dc1a = 150;
skillCool(ESP.getUser(), 1);
}
//mental1
if(mental==ESP.getUser()&&mt1a==0){
mt1b = v;
mt1x = Entity.getX(v);
if(ESP.isPlayer(v)){
mt1y = Math.floor(Entity.getY(v)-2)+1.5;
}
else{
mt1y = Math.floor(Entity.getY(v))-0.25;
}
mt1z = Entity.getZ(v);
preventDefault();
mt1 = true;
mt1a = 150;
skillCool(ESP.getUser(), 1);
}

}

//Skill 2+
if(getCarriedItem()==303){
//sikill2
if(sikill==ESP.getUser()&&sk2a==0){
Entity.setHealth(v, Entity.getHealth(v)-6);
sk2b = v;
preventDefault();
sk2 = true;
sk2a = 300;
skillCool(ESP.getUser(), 2);
}
//slash2
if(slash==ESP.getUser()&&sl2a==0){
Entity.setHealth(v, Entity.getHealth(v)-4);
sl2b = v;
preventDefault();
sl2 = true;
sl2a = 300;
skillCool(ESP.getUser(), 2);
}
//mental2
if(mental==ESP.getUser()&&mt2a==0){
teleport(v, Entity.getX(v), Entity.getY(v)+23, Entity.getZ(v));
preventDefault();
mt2 = true;
mt2a = 300;
skillCool(ESP.getUser(), 2);
}

}

//Skill 3+
if(getCarriedItem()==304){
//hass3+
if(hass==ESP.getUser()&&hass3a==0){
hass3b = v;
preventDefault();
}
//slash3
if(slash==ESP.getUser()&&sl3a==0){
explode(Entity.getX(v), Entity.getY(v)+0.3, Entity.getZ(v), 1);
preventDefault();
sl3 = true;
sl3a = 300;
skillCool(ESP.getUser(), 3);
}
//night3
if(night==ESP.getUser()&&ni3a==0){
Entity.setHealth(v, Entity.getHealth(v)-5);
Entity.setHealth(a, Entity.getHealth(a)+2);
preventDefault();
ni3 = true;
ni3a = 300;
skillCool(ESP.getUser(), 3);
}
//tensor3
if(tensor==ESP.getUser()&&te3a==0){
Entity.setHealth(v, Entity.getHealth(v)-5);
arroundMobHealthDown(a, 20, 7);
preventDefault();
te3 = true;
te3a = 300;
skillCool(ESP.getUser(), 3);
}
//white3
if(white==ESP.getUser()&&wh3a==0){
Entity.setHealth(v, Entity.getHealth(v)-5);
preventDefault();
wh3b = v;
wh3 = true;
wh3a = 300;
skillCool(ESP.getUser(), 3);
}
//mental3
if(mental==ESP.getUser()&&mt3a==0){
Entity.setHealth(v, Entity.getHealth(v)-10);
preventDefault();
mt3 = true;
mt3a = 300;
skillCool(ESP.getUser(), 3);
}

//dtj3
if(dtj==ESP.getUser()&&dt3a==0){
if(dtl==false){
Entity.setHealth(v, Entity.getHealth(v)-5);
Entity.setHealth(a, Entity.getHealth(a)+5);
Entity.setFireTicks(v, 5);
}
else if(dtl==true){
Entity.setHealth(v, Entity.getHealth(v)-10);
Entity.setHealth(a, Entity.getHealth(a)+10);
Entity.setFireTicks(v, 10);
setTile(Entity.getX(v), Entity.getY(v), Entity.getZ(v), 30);
}
preventDefault();
dt3 = true;
dt3a  = 300;
}
//fe3
if(fe==ESP.getUser()&&fe3a==0){
Entity.setFireTicks(v, 10);
preventDefault();
fe3 = true;
fe3a = 300;
skillCool(ESP.getUser(), 3);
}

}

//Skill 4+
if(getCarriedItem()==305){
//night4+
if(ni4a>1350){
Entity.setHealth(v, Entity.getHealth(v)-2);
}
//dra4+
if(dra==ESP.getUser()&&dc4a==0&&dc4b==true){
arroundMobHealthDown(dra, 20, 10);
Entity.setHealth(a, Entity.getHealth(a)+5);
Level.setTime(0);
dc4c = v;
preventDefault();
dc4b = false;
dc4 = true;
dc4a = 1800;
skillCool(ESP.getUser(), 4);
}
//seal4
if(seal==ESP.getUser()&&sea4a==0){
arroundMobHealthDown(ESP.getUser(), 20, 10);
sea4b = v;
seax = Entity.getX(v);
if(ESP.isPlayer(v)){
seay = Math.floor(Entity.getY(v)-2)+1.5;
}
else{
seay = Math.floor(Entity.getY(v))-0.25;
}
seaz = Entity.getZ(v);
sea4 = true;
sea4a = 1800;
skillCool(ESP.getUser(), 4);
}
//mental4
if(mental==ESP.getUser()&&mt4a==0){
ESP.heal(mental);
ESP.sbm("Mental Out");
arroundMobHealthDown(a, 30, 10);
mt4b = v;
mtx = Entity.getX(v);
mty = Entity.getY(v);
mtz = Entity.getZ(v);
preventDefault();
mt4 = true;
mt4a = 1800;
skillCool(ESP.getUser(), 4);
}

}


if(getCarriedItem()==267){
//attack+
if(water.indexOf(a)!=-1||summon.indexOf(a)!=-1||light.indexOf(a)!=-1||ice.indexOf(a)!=-1||sand.indexOf(a)!=-1||a==air||a==bind||a==heal||a==arrow||a==defense||a==gem||a==ender){
Entity.setHealth(v, Entity.getHealth(v)-1);
}

}

//summon+
if(getCarriedItem()==302&&(summon.indexOf(a)!=-1||a==hsum||a==asum)){
Entity.rideAnimal(a, v);
preventDefault();
}

//raid+
if(a==raid){
rr0 = v;
}


//Dark Heal+
if(heal2==true){
if(getCarriedItem()==303&&h2aa==0&&heal==ESP.getUser()){
Entity.setHealth(v, Entity.getHealth(v)-Math.floor(Math.random()*3+5));
Entity.setHealth(a, Entity.getHealth(a)+Math.floor(Math.random()*3-1));
preventDefault();
h2aa = 150;
skillCool(ESP.getUser(), 2);
}
if(getCarriedItem()==304&&h3aa==0&&heal==ESP.getUser()){
h3ab = v;
preventDefault();
h3aa = 150;
skillCool(ESP.getUser(), 3);
}
if(v==heal&&h4aa==true){
var rrr = Math.floor(Math.random()*2);
if(rrr!=0){
preventDefault();
}
}

}

//Air 2nd+
if(item()==303&&a2aa==0&&air2==true&&a==air[0]){
teleport(v, Entity.getX(v), Entity.getY(v)+17, Entity.getZ(v));
preventDefault();
skillCool(ESP.getUser(), 2);
}


}


//---H.E.---
if(a==he.buf){
if(item()==304&&he.b3==0){
Entity.setHealth(v, Entity.getHealth(v)-2);
he.b3a = v;
preventDefault();
he.b3 = 300;
skillCool(ESP.getUser(), 3);
}
if(he.b2>150){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
if(he.b4>1350){
Entity.setHealth(v, Entity.getHealth(v)-1);
}

}

//passive
if(passOnoff){
for(var n in water){
if(a==water[n]&&(getTile(Entity.getX(v), Entity.getY(v)-1, Entity.getZ(v))==8||getTile(Entity.getX(v), Entity.getY(v)-1, Entity.getZ(v))==9||getTile(Entity.getX(v), Entity.getY(v), Entity.getZ(v))==8||getTile(Entity.getX(v), Entity.getY(v), Entity.getZ(v))==9)){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
}
for(var n in creeper){
if(a==creeper[n]||a==burst[n]){
c0 = Math.floor(Math.random()*5);
if(c0==0){
explode(Entity.getX(v), Entity.getY(v), Entity.getZ(v), 0.4);
}
}
}
for(var n in summon){
if(a==summon[n]){
if(getCarriedItem()==303){
Entity.rideAnimal(v, a);
}
}
}
for(var n in light){
if(a==light[n]&&nightCheck()==false){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
}
for(var n in dark){
if(a==dark[n]&&nightCheck()==true){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
}
if(a==hsum||a==asum){
if(getCarriedItem()==303){
Entity.rideAnimal(v, a);
}
}
if((blood.indexOf(a)!=-1||a==dra)&&item()!=305){
Entity.setHealth(v, Entity.getHealth(v)-1);
Entity.setHealth(a, Entity.getHealth(a)+1);
b0 = Math.floor(Math.random()*2);
if(nightCheck()==true&&b0==0){
Entity.setHealth(v, Entity.getHealth(v)-1);
Entity.setHealth(a, Entity.getHealth(a)+1);
}
}
if(air.indexOf(a)!=-1){
a0 = Math.floor(Math.random()*5);
if(a0==0){
explode(Entity.getX(v), Entity.getY(v), Entity.getZ(v), 0.4);
Entity.setVelX(v,Entity.getX(v)-Player.getX());
Entity.setVelZ(v,Entity.getZ(v)-Player.getZ());
}
}
if(thunder.indexOf(a)!=-1){
th0 = Math.floor(Math.random()*5);
if(th0==0){
setTile(Entity.getX(v), Entity.getY(v), Entity.getZ(v), 89);
Level.destroyBlock(Entity.getX(v), Entity.getY(v), Entity.getZ(v), false);
explode(Entity.getX(v), Entity.getY(v), Entity.getZ(v), 0.4);
}
}
if(tnt.indexOf(a)!=-1){
tn0 = Math.floor(Math.random()*10);
if(tn0==0){
var tn0a = Level.spawnMob(Entity.getX(v), Entity.getY(v), Entity.getZ(v), 65);
Entity.rideAnimal(v, tn0a);
}
}
if(trap.indexOf(a)!=-1){
tr0 = Math.floor(Math.random()*5);
if(tr0==0){
if(ESP.isPlayer(v)){
setTile(Entity.getX(v), Entity.getY(v)-2, Entity.getZ(v), 0);
}
else{
setTile(Entity.getX(v), Entity.getY(v)-1, Entity.getZ(v), 0);
}
}
}
if(assassin.indexOf(a)!=-1&&getCarriedItem()!=305){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
if(arrow.indexOf(a)!=-1){
ar0 = Math.floor(Math.random()*5);
if(ar0==0){
Level.spawnMob(Entity.getX(v), Entity.getY(v)+7, Entity.getZ(v), 80);
}
}
if(mage.indexOf(v)!=-1||v==amage){
ma0 = Math.floor(Math.random()*2);
if(ma0==0){
preventDefault();
}
}
if(poison.indexOf(v)!=-1){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
if(assault.indexOf(v)!=-1&&getCarriedItem()!=305){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
if(warrior.indexOf(v)!=-1){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
if(force.indexOf(v)!=-1||v==vector||v==tensor){
var rrrr = Math.floor(Math.random()*2);
if(rrrr==0){
Entity.setHealth(a, Entity.getHealth(a)-2);
preventDefault();
}
}
if(rein.indexOf(a)!=-1||kirito.indexOf(a)!=-1){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
if(kanade.indexOf(a)!=-1&&getCarriedItem()!=303){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
if(time.indexOf(a)!=-1&&ti0a[time.indexOf(a)]==true){
Entity.setHealth(v, Entity.getHealth(v)-3);
}
if(zombie.indexOf(a)!=-1&&item()==302&&Entity.getEntityTypeId(v)==32){
Entity.rideAnimal(a, v);
preventDefault();
}
if(necro.indexOf(a)!=-1&&item()==302&&(Entity.getEntityTypeId(v)==32||Entity.getEntityTypeId(v)==34||Entity.getEntityTypeId(v)==36)){
Entity.rideAnimal(a, v);
preventDefault();
}
if(holy.indexOf(a)!=-1){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
if(solar.indexOf(a)!=-1&&!nightCheck()){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
if(lunar.indexOf(a)!=-1&&nightCheck()){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
if(has.indexOf(a)!=-1||out.indexOf(a)!=-1||a==hass||a==white){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
if(nightCheck()){
if(a==black||a==night){
Entity.setHealth(v, Entity.getHealth(v)-1);
}
}

if(builder.indexOf(a)!=-1||soldier.indexOf(a)!=-1||rich.indexOf(a)!=-1||tp.indexOf(a)!=-1||space.indexOf(a)!=-1||sattack.indexOf(a)!=-1||magnet.indexOf(a)!=-1||steve.indexOf(a)!=-1||hero.indexOf(a)!=-1||clay.indexOf(a)!=-1||snipe.indexOf(a)!=-1||a==dtj||asuna.indexOf(a)!=-1||random.indexOf(a)!=-1||zwei.indexOf(a)!=-1||deco.indexOf(a)!=-1||climate.indexOf(a)!=-1||raid.indexOf(a)!=-1||wind.indexOf(a)!=-1||energy.indexOf(a)!=-1||geno.indexOf(a)!=-1||server.indexOf(a)!=-1||rgun.indexOf(a)!=-1||dragon.indexOf(a)!=-1||solid.indexOf(a)!=-1||gravity.indexOf(a)!=-1||a==sikill||a==slash||a==mush||a==ruin||a==swamp||a==amage||a==puella||a==hbuild||a==scalar||a==ameca||a==seal||a==angel||a==mental||a==world){
if(ESP.random(2)==0)
Entity.setHealth(v, Entity.getHealth(v)-1);
}

if(a==fe){
Entity.setFireTicks(v, 3);
}

}

//---S.E.+---
if(se.tf){
if(a==se.avenage){
if(getCarriedItem()==303&&se.a2==0){
Entity.setHealth(v, Entity.getHealth(v)-10);
preventDefault();
se.a2 = 300;
skillCool(ESP.getUser(), 2);
}

}
if(a==se.hide){
if(getCarriedItem()==303&&se.h2==0){
Entity.setHealth(v, Entity.getHealth(v)-15);
preventDefault();
se.h2 = 300;
skillCool(ESP.getUser(), 2);
}
if(getCarriedItem()==305&&se.h4==0){
ESP.heal(se.hide);
ESP.sbm("The Assassination");
Entity.setHealth(v, 0);
preventDefault();
se.h4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(a==se.gamble){
if(getCarriedItem()==303&&se.g2==0){
se.gr = ESP.random(2);
if(se.gr==0) Entity.setHealth(v, Entity.getHealth(v)-10);
if(se.gr==1) Entity.setHealth(v, Entity.getHealth(v)+5);
preventDefault();
se.g2 = 300;
skillCool(ESP.getUser(), 2);
}
if(getCarriedItem()==305&&se.g4==0){
se.gr = ESP.random(2);
ESP.sbm("Gamble of Death");
se.gr = ESP.random(3);
if(se.gr==0)
Entity.setHealth(a, 0);
if(se.gr==1){
Entity.setHealth(v, 0);
ESP.heal(se.gamble);
}
if(se.gr==2){
Entity.setHealth(a, 0);
Entity.setHealth(v, 0);
}
preventDefault();
se.g4 = 1800;
skillCool(ESP.getUser(), 4);
}

}
if(a==se.reaper){
if(getCarriedItem()==303&&se.r2==0){
for(var xx=Entity.getX(v)-1;xx<Entity.getX(v)+2;xx++)
for(var zz=Entity.getZ(v)-1;zz<Entity.getZ(v)+2;zz++)
setTile(xx, Entity.getY(v), zz, 173);
Level.spawnMob(Entity.getX(v), Entity.getY(v)+12, Entity.getZ(v), 65);
Entity.setHealth(v, Entity.getHealth(v)-5);
preventDefault();
se.r2 = 300;
skillCool(ESP.getUser(), 2);
}

}
if(a==se.ima){
if(getCarriedItem()==302&&se.i1==0){
Entity.setHealth(v, Entity.getHealth(v)-8);
preventDefault();
se.i1 = 150;
skillCool(ESP.getUser(), 1);
}
if(getCarriedItem()==303&&se.i2==0){
Entity.setHealth(v, Entity.getHealth(v)-6);
preventDefault();
se.i2a = v;
se.i2 = 300;
skillCool(ESP.getUser(), 2);
}
if(getCarriedItem()==304&&se.i3==0){
Entity.setHealth(v, Entity.getHealth(v)-15);
preventDefault();
se.i3 = 300;
skillCool(ESP.getUser(), 3);
}

}


if(v==se.avenage){
se.a4a = a;
}

}


if(Party.isSame(a, v)){
preventDefault();
}

if(v==dt.p&&dt.f==false){
fightDialog();
preventDefault();
}
if(ESP.random(2)==0&&dt.f==true){
Entity.setHealth(a, Entity.getHealth(a)-3);
preventDefault();
}


}



//cool time
function modTick(){
if(fire[0]!=null){
for(var n in fire){
if(f1[n]==true){
f1a[n]--;   
}
if(f2[n]==true){
f2a[n]--;
}
if(f3[n]==true){
f3a[n]--;
}
if(f4[n]==true){
f4a[n]--;
}
if(f1a[n]==0){
f1[n] = false;
}
if(f2a[n]==0){
f2[n] = false;
}
if(f3a[n]==0){
f3[n] = false;
}
if(f4a[n]==0){
f4[n] = false;
}
}}
if(water[0]!=null){
for(var n in water){
if(w1[n]==true){
w1a[n]--;
}
if(w2[n]==true){
w2a[n]--;
}
if(w3[n]==true){
w3a[n]--;
}
if(w4[n]==true){
w4a[n]--;
}
if(w1a[n]==0){
w1[n] = false;
}
if(w2a[n]==0){
w2[n] = false;
}
if(w3a[n]==0){
w3[n] = false;
}
if(w4a[n]==0){
w4[n] = false;
}
}}
if(tree[0]!=null){
for(var n in tree){
if(t1[n]==true){
t1a[n]--;
}
if(t2[n]==true){
t2a[n]--;
}
if(t3[n]==true){
t3a[n]--;
}
if(t4[n]==true){
t4a[n]--;
}
if(t1a[n]==0){
t1[n] = false;
}
if(t2a[n]==0){
t2[n] = false;
}
if(t3a[n]==0){
t3[n] = false;
}
if(t4a[n]==0){
t4[n] = false;
}
}}
if(creeper[0]!=null){
for(var n in creeper){
if(c1[n]==true){
c1a[n]--;
}
if(c2[n]==true){
c2a[n]--;
}
if(c3[n]==true){
c3a[n]--;
}
if(c4[n]==true){
c4a[n]--;
}
if(c1a[n]==0){
c1[n] = false;
}
if(c2a[n]==0){
c2[n] = false;
}
if(c3a[n]==0){
c3[n] = false;
}
if(c4a[n]==0){
c4[n] = false;
}
}}
if(soil[0]!=null){
for(var n in soil){
if(s1[n]==true){
s1a[n]--;
}
if(s2[n]==true){
s2a[n]--;
}
if(s3[n]==true){
s3a[n]--;
}
if(s4[n]==true){
s4a[n]--;
}
if(s1a[n]==0){
s1[n] = false;
}
if(s2a[n]==0){
s2[n] = false;
}
if(s3a[n]==0){
s3[n] = false;
}
if(s4a[n]==0){
s4[n] = false;
}
}}
if(summon[0]!=null){
for(var n in summon){
if(ss1[n]==true){
ss1a[n]--;
}
if(ss2[n]==true){
ss2a[n]--;
}
if(ss3[n]==true){
ss3a[n]--;
}
if(ss4[n]==true){
ss4a[n]--;
}
if(ss1a[n]==0){
ss1[n] = false;
}
if(ss2a[n]==0){
ss2[n] = false;
}
if(ss3a[n]==0){
ss3[n] = false;
}
if(ss4a[n]==0){
ss4 = false;
}
}}
if(light[0]!=null){
for(var n in light){
if(l1[n]==true){
l1a[n]--;
}
if(l2[n]==true){
l2a[n]--;
}
if(l3[n]==true){
l3a[n]--;
}
if(l4[n]==true){
l4a[n]--;
}
if(l1a[n]==0){
l1[n] = false;
}
if(l2a[n]==0){
l2 = false;
}
if(l3a[n]==0){
l3[n] = false;
}
if(l4a[n]==0){
l4[n] = false;
}
}}
if(dark[0]!=null){
for(var n in dark){
if(d1[n]==true){
d1a[n]--;
}
if(d2[n]==true){
d2a[n]--;
}
if(d3[n]==true){
d3a[n]--;
}
if(d4[n]==true){
d4a[n]--;
}
if(d1a[n]==0){
d1[n] = false;
}
if(d2a[n]==0){
d2[n] = false;
}
if(d3a[n]==0){
d3[n] = false;
}
if(d4a[n]==0){
d4[n] = false;
}
}}
if(ice[0]!=null){
for(var n in ice){
if(i1[n]==true){
i1a[n]--;
}
if(i2[n]==true){
i2a[n]--;
}
if(i3[n]==true){
i3a[n]--;
}
if(i4[n]==true){
i4a[n]--;
}
if(i1a[n]==0){
i1[n] = false;
}
if(i2a[n]==0){
i2[n] = false;
}
if(i3a[n]==0){
i3[n] = false;
}
if(i4a[n]==0){
i4[n] = false;
}
}}
if(sand[0]!=null){
for(var n in sand){
if(m1[n]==true){
m1a[n]--;
}
if(m2[n]==true){
m2a[n]--;
}
if(m3[n]==true){
m3a[n]--;
}
if(m4[n]==true){
m4a[n]--;
}
if(m1a[n]==0){
m1[n] = false;
}
if(m2a[n]==0){
m2[n] = false;
}
if(m3a[n]==0){
m3[n] = false;
}
if(m4a[n]==0){
m4[n] = false;
}
}}
if(blood[0]!=null){
for(var n in blood){
if(b1[n]==true){
b1a[n]--;
}
if(b2[n]==true){
b2a[n]--;
}
if(b3[n]==true){
b3a[n]--;
}
if(b4[n]==true){
b4a[n]--;
}
if(b1a[n]==0){
b1[n] = false;
}
if(b2a[n]==0){
b2[n] = false;
}
if(b3a[n]==0){
b3[n] = false;
}
if(b4a[n]==0){
b4[n] = false;
}
}}
if(air[0]!=null){
for(var n in air){
if(a1[n]==true){
a1a[n]--;
}
if(a2[n]==true){
a2a[n]--;
}
if(a3[n]==true){
a3a[n]--;
}
if(a4[n]==true){
a4a[n]--;
}
if(a1a[n]==0){
a1[n] = false;
}
if(a2a[n]==0){
a2[n] = false;
}
if(a3a[n]==0){
a3[n] = false;
}
if(a4a[n]==0){
a4[n] = false;
}
}}
if(thunder[0]!=null){
for(var n in thunder){
if(th1[n]==true){
th1a[n]--;   
}
if(th2[n]==true){
th2a[n]--;
}
if(th3[n]==true){
th3a[n]--;
}
if(th4[n]==true){
th4a[n]--;
}
if(th1a[n]==0){
th1[n] = false;
}
if(th2a[n]==0){
th2[n] = false;
}
if(th3a[n]==0){
th3[n] = false;
}
if(th4a[n]==0){
th4[n] = false;
}
}}
if(elsa[0]!=null){
for(var n in elsa){
if(e1[n]==true){
e1a[n]--;
}
if(e2[n]==true){
e2a[n]--;
}
if(e3[n]==true){
e3a[n]--;
}
if(e4[n]==true){
e4a[n]--;
}
if(e1a[n]==0){
e1[n] = false;
}
if(e2a[n]==0){
e2[n] = false;
}
if(e3a[n]==0){
e3[n] = false;
}
if(e4a[n]==0){
e4[n] = false;
}
}}
if(titan[0]!=null){
for(var n in titan){
if(tt1[n]==true){
tt1a[n]--;
}
if(tt2[n]==true){
tt2a[n]--;
}
if(tt3[n]==true){
tt3a[n]--;
}
if(tt4[n]==true){
tt4a[n]--;
}
if(tt1a[n]==0){
tt1[n] = false;
}
if(tt2a[n]==0){
tt2[n] = false;
}
if(tt3a[n]==0){
tt3[n] = false;
}
if(tt4a[n]==0){
tt4[n] = false;
}
}}
if(bind[0]!=null){
for(var n in bind){
if(bb1[n]==true){
bb1a[n]--;   
}
if(bb2[n]==true){
bb2a[n]--;
}
if(bb3[n]==true){
bb3a[n]--;
}
if(bb4[n]==true){
bb4a[n]--;
}
if(bb1a[n]==0){
bb1[n] = false;
}
if(bb2a[n]==0){
bb2[n] = false;
}
if(bb3a[n]==0){
bb3[n] = false;
}
if(bb4a[n]==0){
bb4[n] = false;
}
}}
if(meca[0]!=null){
for(var n in meca){
if(mm1[n]==true){
mm1a[n]--;
}
if(mm2[n]==true){
mm2a[n]--;
}
if(mm3[n]==true){
mm3a[n]--;
}
if(mm4[n]==true){
mm4a[n]--;
}
if(mm1a[n]==0){
mm1[n] = false;
}
if(mm2a[n]==0){
mm2[n] = false;
}
if(mm3a[n]==0){
mm3[n] = false;
}
if(mm4a[n]==0){
mm4[n] = false;
}
}}
if(tnt[0]!=null){
for(var n in tnt){
if(tn1[n]==true){
tn1a[n]--;
}
if(tn2[n]==true){
tn2a[n]--;
}
if(tn3[n]==true){
tn3a[n]--;
}
if(tn4[n]==true){
tn4a[n]--;
}
if(tn1a[n]==0){
tn1[n] = false;
}
if(tn2a[n]==0){
tn2[n] = false;
}
if(tn3a[n]==0){
tn3[n] = false;
}
if(tn4a[n]==0){
tn4[n] = false;
}
}}
if(trap[0]!=null){
for(var n in trap){
if(tr1[n]==true){
tr1a[n]--;
}
if(tr2[n]==true){
tr2a[n]--;
}
if(tr3[n]==true){
tr3a[n]--;
}
if(tr4[n]==true){
tr4a[n]--;
}
if(tr1a[n]==0){
tr1[n] = false;
}
if(tr2a[n]==0){
tr2[n] = false;
}
if(tr3a[n]==0){
tr3[n] = false;
}
if(tr4a[n]==0){
tr4[n] = false;
}
}}
if(heal[0]!=null){
for(var n in heal){
if(h1[n]==true){
h1a[n]--;
}
if(h2[n]==true){
h2a[n]--;
}
if(h3[n]==true){
h3a[n]--;
}
if(h4[n]==true){
h4a[n]--;
}
if(h1a[n]==0){
h1[n] = false;
}
if(h2a[n]==0){
h2[n] = false;
}
if(h3a[n]==0){
h3[n] = false;
}
if(h4a[n]==0){
h4[n] = false;
}
}}
if(nether[0]!=null){
for(var n in nether){
if(n1[n]==true){
n1a[n]--;
}
if(n2[n]==true){
n2a[n]--;
}
if(n3[n]==true){
n3a[n]--;
}
if(n4[n]==true){
n4a[n]--;
}
if(n1a[n]==0){
n1[n] = false;
}
if(n2a[n]==0){
n2[n] = false;
}
if(n3a[n]==0){
n3[n] = false;
}
if(n4a[n]==0){
n4[n] = false;
}
}}
if(cloud[0]!=null){
for(var n in cloud){
if(cc1[n]==true){
cc1a[n]--;
}
if(cc2[n]==true){
cc2a[n]--;
}
if(cc3[n]==true){
cc3a[n]--;
}
if(cc4[n]==true){
cc4a[n]--;
}
if(cc1a[n]==0){
cc1[n] = false;
}
if(cc2a[n]==0){
cc2[n] = false;
}
if(cc3a[n]==0){
cc3[n] = false;
}
if(cc4a[n]==0){
cc4[n] = false;
}
}}
if(assassin[0]!=null){
for(var n in assassin){
if(as1[n]==true){
as1a[n]--;
}
if(as2[n]==true){
as2a[n]--;
}
if(as3[n]==true){
as3a[n]--;
}
if(as4[n]==true){
as4a[n]--;
}
if(as1a[n]==0){
as1[n] = false;
}
if(as2a[n]==0){
as2[n] = false;
}
if(as3a[n]==0){
as3[n] = false;
}
if(as4a[n]==0){
as4[n] = false;
}
}}
if(arrow[0]!=null){
for(var n in arrow){
if(ar1[n]==true){
ar1a[n]--;
}
if(ar2[n]==true){
ar2a[n]--;
}
if(ar3[n]==true){
ar3a[n]--;
}
if(ar4[n]==true){
ar4a[n]--;
}
if(ar1a[n]==0){
ar1[n] = false;
}
if(ar2a[n]==0){
ar2[n] = false;
}
if(ar3a[n]==0){
ar3[n] = false;
}
if(ar4a[n]==0){
ar4[n] = false;
}
}}
if(mage[0]!=null){
for(var n in mage){
if(ma1[n]==true){
ma1a[n]--;
}
if(ma2[n]==true){
ma2a[n]--;
}
if(ma3[n]==true){
ma3a[n]--;
}
if(ma4[n]==true){
ma4a[n]--;
}
if(ma1a[n]==0){
ma1[n] = false;
}
if(ma2a[n]==0){
ma2[n] = false;
}
if(ma3a[n]==0){
ma3[n] = false;
}
if(ma4a[n]==0){
ma4[n] = false;
}
}}
if(defense[0]!=null){
for(var n in defense){
if(de1[n]==true){
de1a[n]--;
}
if(de2[n]==true){
de2a[n]--;
}
if(de3[n]==true){
de3a[n]--;
}
if(de4[n]==true){
de4a[n]--;
}
if(de1a[n]==0){
de1[n] = false;
}
if(de2a[n]==0){
de2[n] = false;
}
if(de3a[n]==0){
de3[n] = false;
}
if(de4a[n]==0){
de4[n] = false;
}
}}
if(poison[0]!=null){
for(var n in poison){
if(p1[n]==true){
p1a[n]--;
}
if(p2[n]==true){
p2a[n]--;
}
if(p3[n]==true){
p3a[n]--;
}
if(p4[n]==true){
p4a[n]--;
}
if(p1a[n]==0){
p1[n] = false;
}
if(p2a[n]==0){
p2[n] = false;
}
if(p3a[n]==0){
p3[n] = false;
}
if(p4a[n]==0){
p4[n] = false;
}
}}
if(melt[0]!=null){
for(var n in melt){
if(me1[n]==true){
me1a[n]--;
}
if(me2[n]==true){
me2a[n]--;
}
if(me3[n]==true){
me3a[n]--;
}
if(me4[n]==true){
me4a[n]--;
}
if(me1a[n]==0){
me1[n] = false;
}
if(me2a[n]==0){
me2[n] = false;
}
if(me3a[n]==0){
me3[n] = false;
}
if(me4a[n]==0){
me4[n] = false;
}
}}
if(hfreeze[0]!=null){
for(var n in hfreeze){
if(hf1[n]==true){
hf1a[n]--;
}
if(hf2[n]==true){
hf2a[n]--;
}
if(hf3[n]==true){
hf3a[n]--;
}
if(hf4[n]==true){
hf4a[n]--;
}
if(hf1a[n]==0){
hf1[n] = false;
}
if(hf2a[n]==0){
hf2[n] = false;
}
if(hf3a[n]==0){
hf3[n] = false;
}
if(hf4a==0){
hf4[n] = false;
}
}}
if(builder[0]!=null){
for(var n in builder){
if(bu1[n]==true){
bu1a[n]--;
}
if(bu2[n]==true){
bu2a[n]--;
}
if(bu3[n]==true){
bu3a[n]--;
}
if(bu4[n]==true){
bu4a[n]--;
}
if(bu1a[n]==0){
bu1[n] = false;
}
if(bu2a[n]==0){
bu2[n] = false;
}
if(bu3a[n]==0){
bu3[n] = false;
}
if(bu4a[n]==0){
bu4[n] = false;
}
}}
if(soldier[0]!=null){
for(var n in soldier){
if(so1[n]==true){
so1a[n]--;
}
if(so2[n]==true){
so2a[n]--;
}
if(so3[n]==true){
so3a[n]--;
}
if(so4[n]==true){
so4a[n]--;
}
if(so1a[n]==0){
so1[n] = false;
}
if(so2a[n]==0){
so2[n] = false;
}
if(so3a[n]==0){
so3[n] = false;
}
if(so4a[n]==0){
so4[n] = false;
}
}}
if(assault[0]!=null){
for(var n in assault){
if(asu1[n]==true){
asu1a[n]--;
}
if(asu2[n]==true){
asu2a[n]--;
}
if(asu3[n]==true){
asu3a[n]--;
}
if(asu4[n]==true){
asu4a[n]--;
}
if(asu1a[n]==0){
asu1[n] = false;
}
if(asu2a[n]==0){
asu2[n] = false;
}
if(asu3a[n]==0){
asu3[n] = false;
}
if(asu4a[n]==0){
asu4[n] = false;
}
}}
if(burst[0]!=null){
for(var n in burst){
if(bus1[n]==true){
bus1a[n]--;
}
if(bus2[n]==true){
bus2a[n]--;
}
if(bus3[n]==true){
bus3a[n]--;
}
if(bus4[n]==true){
bus4a[n]--;
}
if(bus1a[n]==0){
bus1[n] = false;
}
if(bus2a[n]==0){
bus2[n] = false;
}
if(bus3a[n]==0){
bus3[n] = false;
}
if(bus4a[n]==0){
bus4[n] = false;
}
}}
if(warrior[0]!=null){
for(var n in warrior){
if(wa1[n]==true){
wa1a[n]--;
}
if(wa2[n]==true){
wa2a[n]--;
}
if(wa3[n]==true){
wa3a[n]--;
}
if(wa4[n]==true){
wa4a[n]--;
}
if(wa1a[n]==0){
wa1[n] = false;
}
if(wa2a[n]==0){
wa2[n] = false;
}
if(wa3a[n]==0){
wa3[n] = false;
}
if(wa4a[n]==0){
wa4[n] = false;
}
}}
if(ore[0]!=null){
for(var n in ore){
if(o1[n]==true){
o1a[n]--;
}
if(o2[n]==true){
o2a[n]--;
}
if(o3[n]==true){
o3a[n]--;
}
if(o4[n]==true){
o4a[n]--;
}
if(o1a[n]==0){
o1[n] = false;
}
if(o2a[n]==0){
o2[n] = false;
}
if(o3a[n]==0){
o3[n] = false;
}
if(o4a[n]==0){
o4[n] = false;
}
}}
if(rich[0]!=null){
for(var n in rich){
if(r1[n]==true){
r1a[n]--;
}
if(r2[n]==true){
r2a[n]--;
}
if(r3[n]==true){
r3a[n]--;
}
if(r4[n]==true){
r4a[n]--;
}
if(r1a[n]==0){
r1[n] = false;
}
if(r2a[n]==0){
r2[n] = false;
}
if(r3a[n]==0){
r3[n] = false;
}
if(r4a[n]==0){
r4[n] = false;
}
}}
if(tp[0]!=null){
for(var n in tp){
if(tp1[n]==true){
tp1a[n]--;
}
if(tp2[n]==true){
tp2a[n]--;
}
if(tp3[n]==true){
tp3a[n]--;
}
if(tp4[n]==true){
tp4a[n]--;
}
if(tp1a[n]==0){
tp1[n] = false;
}
if(tp2a[n]==0){
tp2[n] = false;
}
if(tp3a[n]==0){
tp3[n] = false;
}
if(tp4a[n]==0){
tp4[n] = false;
}
}}
if(space[0]!=null){
for(var n in space){
if(sp1[n]==true){
sp1a[n]--;
}
if(sp2[n]==true){
sp2a[n]--;
}
if(sp3[n]==true){
sp3a[n]--;
}
if(sp4[n]==true){
sp4a[n]--;
}
if(sp1a[n]==0){
sp1[n] = false;
}
if(sp2a[n]==0){
sp2[n] = false;
}
if(sp3a[n]==0){
sp3[n] = false;
}
if(sp4a[n]==0){
sp4[n] = false;
}
}}
if(sattack[0]!=null){
for(var n in sattack){
if(sa1[n]==true){
sa1a[n]--;
}
if(sa2[n]==true){
sa2a[n]--;
}
if(sa3[n]==true){
sa3a[n]--;
}
if(sa4[n]==true){
sa4a[n]--;
}
if(sa1a[n]==0){
sa1[n] = false;
}
if(sa2a[n]==0){
sa2[n] = false;
}
if(sa3a[n]==0){
sa3[n] = false;
}
if(sa4a[n]==0){
sa4[n] = false;
}
}}
if(force[0]!=null){
for(var n in force){
if(fo1[n]==true){
fo1a[n]--;
}
if(fo2[n]==true){
fo2a[n]--;
}
if(fo3[n]==true){
fo3a[n]--;
}
if(fo4[n]==true){
fo4a[n]--;
}
if(fo1a[n]==0){
fo1[n] = false;
}
if(fo2a[n]==0){
fo2[n] = false;
}
if(fo3a[n]==0){
fo3[n] = false;
}
if(fo4a[n]==0){
fo4[n] = false;
}
}}
if(rein[0]!=null){
for(var n in rein){
if(re1[n]==true){
re1a[n]--;
}
if(re2[n]==true){
re2a[n]--;
}
if(re3[n]==true){
re3a[n]--;
}
if(re4[n]==true){
re4a[n]--;
}
if(re1a[n]==0){
re1[n] = false;
}
if(re2a[n]==0){
re2[n] = false;
}
if(re3a[n]==0){
re3[n] = false;
}
if(re4a[n]==0){
re4[n] = false;
}
}}
if(magnet[0]!=null){
for(var n in magnet){
if(mag1[n]==true){
mag1a[n]--;
}
if(mag2[n]==true){
mag2a[n]--;
}
if(mag3[n]==true){
mag3a[n]--;
}
if(mag4[n]==true){
mag4a[n]--;
}
if(mag1a[n]==0){
mag1[n] = false;
}
if(mag2a[n]==0){
mag2[n] = false;
}
if(mag3a[n]==0){
mag3[n] = false;
}
if(mag4a[n]==0){
mag4[n] = false;
}
}}
if(steve[0]!=null){
for(var n in steve){
if(st1[n]==true){
st1a[n]--;
}
if(st2[n]==true){
st2a[n]--;
}
if(st3[n]==true){
st3a[n]--;
}
if(st4[n]==true){
st4a[n]--;
}
if(st1a[n]==0){
st1[n] = false;
}
if(st2a[n]==0){
st2[n] = false;
}
if(st3a[n]==0){
st3[n] = false;
}
if(st4a[n]==0){
st4[n] = false;
}
}}
if(hero[0]!=null){
for(var n in hero){
if(he1[n]==true){
he1a[n]--;
}
if(he2[n]==true){
he2a[n]--;
}
if(he3[n]==true){
he3a[n]--;
}
if(he4[n]==true){
he4a[n]--;
}
if(he1a[n]==0){
he1[n] = false;
}
if(he2a[n]==0){
he2[n] = false;
}
if(he3a[n]==0){
he3[n] = false;
}
if(he4a[n]==0){
he4[n] = false;
}
}}
if(hermit[0]!=null){
for(var n in hermit){
if(her1[n]==true){
her1a[n]--;
}
if(her2[n]==true){
her2a[n]--;
}
if(her3[n]==true){
her3a[n]--;
}
if(her4[n]==true){
her4a[n]--;
}
if(her1a[n]==0){
her1[n] = false;
}
if(her2a[n]==0){
her2[n] = false;
}
if(her3a[n]==0){
her3[n] = false;
}
if(her4a[n]==0){
her4[n] = false;
}
}}
if(clay[0]!=null){
for(var n in clay){
if(cl1[n]==true){
cl1a[n]--;
}
if(cl2[n]==true){
cl2a[n]--;
}
if(cl3[n]==true){
cl3a[n]--;
}
if(cl4[n]==true){
cl4a[n]--;
}
if(cl1a[n]==0){
cl1[n] = false;
}
if(cl2a[n]==0){
cl2[n] = false;
}
if(cl3a[n]==0){
cl3[n] = false;
}
if(cl4a[n]==0){
cl4[n] = false;
}
}}
if(kirito[0]!=null){
for(var n in kirito){
if(k1[n]==true){
k1a[n]--;
}
if(k2[n]==true){
k2a[n]--;
}
if(k3[n]==true){
k3a[n]--;
}
if(k4[n]==true){
k4a[n]--;
}
if(k1a[n]==0){
k1[n] = false;
}
if(k2a[n]==0){
k2[n] = false;
}
if(k3a[n]==0){
k3[n] = false;
}
if(k4a[n]==0){
k4[n] = false;
}
}}
if(jungle[0]!=null){
for(var n in jungle){
if(j1[n]==true){
j1a[n]--;
}
if(j2[n]==true){
j2a[n]--;
}
if(j3[n]==true){
j3a[n]--;
}
if(j4[n]==true){
j4a[n]--;
}
if(j1a[n]==0){
j1[n] = false;
}
if(j2a[n]==0){
j2[n] = false;
}
if(j3a[n]==0){
j3[n] = false;
}
if(j4a[n]==0){
j4[n] = false;
}
}}
if(kanade[0]!=null){
for(var n in kanade){
if(ka1[n]==true){
ka1a[n]--;
}
if(ka2[n]==true){
ka2a[n]--;
}
if(ka3[n]==true){
ka3a[n]--;
}
if(ka4[n]==true){
ka4a[n]--;
}
if(ka1a[n]==0){
ka1[n] = false;
}
if(ka2a[n]==0){
ka2[n] = false;
}
if(ka3a[n]==0){
ka3[n] = false;
}
if(ka4a[n]==0){
ka4[n] = false;
}
}}
if(time[0]!=null){
for(var n in time){
if(ti1[n]==true){
ti1a[n]--;
}
if(ti2[n]==true){
ti2a[n]--;
}
if(ti3[n]==true){
ti3a[n]--;
}
if(ti4[n]==true){
ti4a[n]--;
}
if(ti1a[n]==0){
ti1[n] = false;
}
if(ti2a[n]==0){
ti2[n] = false;
}
if(ti3a[n]==0){
ti3[n] = false;
}
if(ti4a[n]==0){
ti4[n] = false;
}
}}
if(snipe[0]!=null){
for(var n in snipe){
if(sn1[n]==true){
sn1a[n]--;
}
if(sn2[n]==true){
sn2a[n]--;
}
if(sn3[n]==true){
sn3a[n]--;
}
if(sn4[n]==true){
sn4a[n]--;
}
if(sn1a[n]==0){
sn1[n] = false;
}
if(sn2a[n]==0){
sn2[n] = false;
}
if(sn3a[n]==0){
sn3[n] = false;
}
if(sn4a[n]==0){
sn4[n] = false;
}
}}
if(zombie[0]!=null){
for(var n in zombie){
if(z1[n]==true){
z1a[n]--;
}
if(z2[n]==true){
z2a[n]--;
}
if(z3[n]==true){
z3a[n]--;
}
if(z4[n]==true){
z4a[n]--;
}
if(z1a[n]==0){
z1[n] = false;
}
if(z2a[n]==0){
z2[n] = false;
}
if(z3a[n]==0){
z3[n] = false;
}
if(z4a[n]==0){
z4[n] = false;
}
}}
if(necro[0]!=null){
for(var n in necro){
if(ne1[n]==true){
ne1a[n]--;
}
if(ne2[n]==true){
ne2a[n]--;
}
if(ne3[n]==true){
ne3a[n]--;
}
if(ne4[n]==true){
ne4a[n]--;
}
if(ne1a[n]==0){
ne1[n] = false;
}
if(ne2a[n]==0){
ne2[n] = false;
}
if(ne3a[n]==0){
ne3[n] = false;
}
if(ne4a[n]==0){
ne4[n] = false;
}
}}
if(asuna[0]!=null){
for(var n in asuna){
if(asn1[n]==true){
asn1a[n]--;
}
if(asn2[n]==true){
asn2a[n]--;
}
if(asn3[n]==true){
asn3a[n]--;
}
if(asn4[n]==true){
asn4a[n]--;
}
if(asn1a[n]==0){
asn1[n] = false;
}
if(asn2a[n]==0){
asn2[n] = false;
}
if(asn3a[n]==0){
asn3[n] = false;
}
if(asn4a[n]==0){
asn4[n] = false;
}
}}
if(holy[0]!=null){
for(var n in holy){
if(ho1[n]==true){
ho1a[n]--;
}
if(ho2[n]==true){
ho2a[n]--;
}
if(ho3[n]==true){
ho3a[n]--;
}
if(ho4[n]==true){
ho4a[n]--;
}
if(ho1a[n]==0){
ho1[n] = false;
}
if(ho2a[n]==0){
ho2[n] = false;
}
if(ho3a[n]==0){
ho3[n] = false;
}
if(ho4a[n]==0){
ho4[n] = false;
}
}}
if(solar[0]!=null){
for(var n in solar){
if(sol1[n]==true){
sol1a[n]--;
}
if(sol2[n]==true){
sol2a[n]--;
}
if(sol3[n]==true){
sol3a[n]--;
}
if(sol4[n]==true){
sol4a[n]--;
}
if(sol1a[n]==0){
sol1[n] = false;
}
if(sol2a[n]==0){
sol2[n] = false;
}
if(sol3a[n]==0){
sol3[n] = false;
}
if(sol4a[n]==0){
sol4[n] = false;
}
}}
if(lunar[0]!=null){
for(var n in lunar){
if(lu1[n]==true){
lu1a[n]--;
}
if(lu2[n]==true){
lu2a[n]--;
}
if(lu3[n]==true){
lu3a[n]--;
}
if(lu4[n]==true){
lu4a[n]--;
}
if(lu1a[n]==0){
lu1[n] = false;
}
if(lu2a[n]==0){
lu2[n] = false;
}
if(lu3a[n]==0){
lu3[n] = false;
}
if(lu4a[n]==0){
lu4[n] = false;
}
}}
if(has[0]!=null){
for(var n in has){
if(ha1[n]==true){
ha1a[n]--;
}
if(ha2[n]==true){
ha2a[n]--;
}
if(ha3[n]==true){
ha3a[n]--;
}
if(ha4[n]==true){
ha4a[n]--;
}
if(ha1a[n]==0){
ha1[n] = false;
}
if(ha2a[n]==0){
ha2[n] = false;
}
if(ha3a[n]==0){
ha3[n] = false;
}
if(ha4a[n]==0){
ha4[n] = false;
}
}}
if(random[0]!=null){
for(var n in random){
if(ra1[n]==true){
ra1a[n]--;
}
if(ra2[n]==true){
ra2a[n]--;
}
if(ra3[n]==true){
ra3a[n]--;
}
if(ra4[n]==true){
ra4a[n]--;
}
if(ra1a[n]==0){
ra1[n] = false;
}
if(ra2a[n]==0){
ra2[n] = false;
}
if(ra3a[n]==0){
ra3[n] = false;
}
if(ra4a[n]==0){
ra4[n] = false;
}
}}
if(zwei[0]!=null){
for(var n in zwei){
if(zw1[n]==true){
zw1a[n]--;
}
if(zw2[n]==true){
zw2a[n]--;
}
if(zw3[n]==true){
zw3a[n]--;
}
if(zw4[n]==true){
zw4a[n]--;
}
if(zw1a[n]==0){
zw1[n] = false;
}
if(zw2a[n]==0){
zw2[n] = false;
}
if(zw3a[n]==0){
zw3[n] = false;
}
if(zw4a[n]==0){
zw4[n] = false;
}
}}
if(deco[0]!=null){
for(var n in deco){
if(dec1[n]==true){
dec1a[n]--;
}
if(dec2[n]==true){
dec2a[n]--;
}
if(dec3[n]==true){
dec3a[n]--;
}
if(dec4[n]==true){
dec4a[n]--;
}
if(dec1a[n]==0){
dec1[n] = false;
}
if(dec2a[n]==0){
dec2[n] = false;
}
if(dec3a[n]==0){
dec3[n] = false;
}
if(dec4a[n]==0){
dec4[n] = false;
}
}}
if(hsum[0]!=null){
for(var n in hsum){
if(hs1[n]==true){
hs1a[n]--;
}
if(hs2[n]==true){
hs2a[n]--;
}
if(hs3[n]==true){
hs3a[n]--;
}
if(hs4[n]==true){
hs4a[n]--;
}
if(hs1a[n]==0){
hs1[n] = false;
}
if(hs2a[n]==0){
hs2[n] = false;
}
if(hs3a[n]==0){
hs3[n] = false;
}
if(hs4a[n]==0){
hs4[n] = false;
}
}}
if(climate[0]!=null){
for(var n in climate){
if(cli1[n]==true){
cli1a[n]--;
}
if(cli2[n]==true){
cli2a[n]--;
}
if(cli3[n]==true){
cli3a[n]--;
}
if(cli4[n]==true){
cli4a[n]--;
}
if(cli1a[n]==0){
cli1[n] = false;
}
if(cli2a[n]==0){
cli2[n] = false;
}
if(cli3a[n]==0){
cli3[n] = false;
}
if(cli4a[n]==0){
cli4[n] = false;
}
}}
if(raid[0]!=null){
for(var n in raid){
if(rr1[n]==true){
rr1a[n]--;
}
if(rr2[n]==true){
rr2a[n]--;
}
if(rr3[n]==true){
rr3a[n]--;
}
if(rr4[n]==true){
rr4a[n]--;
}
if(rr1a[n]==0){
rr1[n] = false;
}
if(rr2a[n]==0){
rr2[n] = false;
}
if(rr3a[n]==0){
rr3[n] = false;
}
if(rr4a[n]==0){
rr4[n] = false;
}
}}
if(wind[0]!=null){
for(var n in wind){
if(wi1[n]==true){
wi1a[n]--;
}
if(wi2[n]==true){
wi2a[n]--;
}
if(wi3[n]==true){
wi3a[n]--;
}
if(wi4[n]==true){
wi4a[n]--;
}
if(wi1a[n]==0){
wi1[n] = false;
}
if(wi2a[n]==0){
wi2[n] = false;
}
if(wi3a[n]==0){
wi3[n] = false;
}
if(wi4a[n]==0){
wi4[n] = false;
}
}}
if(energy[0]!=null){
for(var n in energy){
if(en1[n]==true){
en1a[n]--;
}
if(en2[n]==true){
en2a[n]--;
}
if(en3[n]==true){
en3a[n]--;
}
if(en4[n]==true){
en4a[n]--;
}
if(en1a[n]==0){
en1[n] = false;
}
if(en2a[n]==0){
en2[n] = false;
}
if(en3a[n]==0){
en3[n] = false;
}
if(en4a[n]==0){
en4[n] = false;
}
}}
if(geno[0]!=null){
for(var n in geno){
if(g1[n]==true){
g1a[n]--;
}
if(g2[n]==true){
g2a[n]--;
}
if(g3[n]==true){
g3a[n]--;
}
if(g4[n]==true){
g4a[n]--;
}
if(g1a[n]==0){
g1[n] = false;
}
if(g2a[n]==0){
g2[n] = false;
}
if(g3a[n]==0){
g3[n] = false;
}
if(g4a[n]==0){
g4[n] = false;
}
}}
if(server[0]!=null){
for(var n in server){
if(se1[n]==true){
se1a[n]--;
}
if(se2[n]==true){
se2a[n]--;
}
if(se3[n]==true){
se3a[n]--;
}
if(se4[n]==true){
se4a[n]--;
}
if(se1a[n]==0){
se1[n] = false;
}
if(se2a[n]==0){
se2[n] = false;
}
if(se3a[n]==0){
se3[n] = false;
}
if(se4a[n]==0){
se4[n] = false;
}
}}
if(out[0]!=null){
for(var n in out){
if(ou1[n]==true){
ou1a[n]--;
}
if(ou2[n]==true){
ou2a[n]--;
}
if(ou3[n]==true){
ou3a[n]--;
}
if(ou4[n]==true){
ou4a[n]--;
}
if(ou1a[n]==0){
ou1[n] = false;
}
if(ou2a[n]==0){
ou2[n] = false;
}
if(ou3a[n]==0){
ou3[n] = false;
}
if(ou4a[n]==0){
ou4[n] = false;
}
}}
if(rgun[0]!=null){
for(var n in rgun){
if(rg1[n]==true){
rg1a[n]--;
}
if(rg2[n]==true){
rg2a[n]--;
}
if(rg3[n]==true){
rg3a[n]--;
}
if(rg4[n]==true){
rg4a[n]--;
}
if(rg1a[n]==0){
rg1[n] = false;
}
if(rg2a[n]==0){
rg2[n] = false;
}
if(rg3a[n]==0){
rg3[n] = false;
}
if(rg4a[n]==0){
rg4[n] = false;
}
}}
if(copy[0]!=null){
for(var n in copy){
if(co1[n]==true){
co1a[n]--;
}
if(co2[n]==true){
co2a[n]--;
}
if(co3[n]==true){
co3a[n]--;
}
if(co4[n]==true){
co4a[n]--;
}
if(co1a[n]==0){
co1[n] = false;
}
if(co2a[n]==0){
co2[n] = false;
}
if(co3a[n]==0){
co3[n] = false;
}
if(co4a[n]==0){
co4[n] = false;
}
}}
if(dragon[0]!=null){
for(var n in dragon){
if(dr1[n]==true){
dr1a[n]--;
}
if(dr2[n]==true){
dr2a[n]--;
}
if(dr3[n]==true){
dr3a[n]--;
}
if(dr4[n]==true){
dr4a[n]--;
}
if(dr1a[n]==0){
dr1[n] = false;
}
if(dr2a[n]==0){
dr2[n] = false;
}
if(dr3a[n]==0){
dr3[n] = false;
}
if(dr4a[n]==0){
dr4[n] = false;
}
}}
if(hawk[0]!=null){
for(var n in hawk){
if(hw1[n]==true){
hw1a[n]--;
}
if(hw2[n]==true){
hw2a[n]--;
}
if(hw3[n]==true){
hw3a[n]--;
}
if(hw4[n]==true){
hw4a[n]--;
}
if(hw1a[n]==0){
hw1[n] = false;
}
if(hw2a[n]==0){
hw2[n] = false;
}
if(hw3a[n]==0){
hw3[n] = false;
}
if(hw4a[n]==0){
hw4[n] = false;
}
}}
if(solid[0]!=null){
for(var n in solid){
if(sd1[n]==true){
sd1a[n]--;
}
if(sd2[n]==true){
sd2a[n]--;
}
if(sd3[n]==true){
sd3a[n]--;
}
if(sd4[n]==true){
sd4a[n]--;
}
if(sd1a[n]==0){
sd1[n] = false;
}
if(sd2a[n]==0){
sd2[n] = false;
}
if(sd3a[n]==0){
sd3[n] = false;
}
if(sd4a[n]==0){
sd4[n] = false;
}
}}
if(gravity[0]!=null){
for(var n in gravity){
if(gr1[n]==true){
gr1a[n]--;
}
if(gr2[n]==true){
gr2a[n]--;
}
if(gr3[n]==true){
gr3a[n]--;
}
if(gr4[n]==true){
gr4a[n]--;
}
if(gr1a[n]==0){
gr1[n] = false;
}
if(gr2a[n]==0){
gr2[n] = false;
}
if(gr3a[n]==0){
gr3[n] = false;
}
if(gr4a[n]==0){
gr4[n] = false;
}
}}
if(hass1==true){
hass1a--;
}
if(hass2==true){
hass2a--;
}
if(hass3==true){
hass3a--;
}
if(hass4==true){
hass4a--;
}
if(sk1==true){
sk1a--;
}
if(sk2==true){
sk2a--;
}
if(sk3==true){
sk3a--;
}
if(sk4==true){
sk4a--;
}
if(bl1==true){
bl1a--;
}
if(bl2==true){
bl2a--;
}
if(bl3==true){
bl3a--;
}
if(bl4==true){
bl4a--;
}
if(sl1==true){
sl1a--;
}
if(sl2==true){
sl2a--;
}
if(sl3==true){
sl3a--;
}
if(sl4==true){
sl4a--;
}
if(ni1==true){
ni1a--;
}
if(ni2==true){
ni2a--;
}
if(ni3==true){
ni3a--;
}
if(ni4==true){
ni4a--;
}
if(ge1==true){
ge1a--;
}
if(ge2==true){
ge2a--;
}
if(ge3==true){
ge3a--;
}
if(ge4==true){
ge4a--;
}
if(dc1==true){
dc1a--;
}
if(dc2==true){
dc2a--;
}
if(dc3==true){
dc3a--;
}
if(dc4==true){
dc4a--;
}
if(mu1==true){
mu1a--;
}
if(mu2==true){
mu2a--;
}
if(mu3==true){
mu3a--;
}
if(mu4==true){
mu4a--;
}
if(end1==true){
end1a--;
}
if(end2==true){
end2a--;
}
if(end3==true){
end3a--;
}
if(end4==true){
end4a--;
}
if(ta1==true){
ta1a--;
}
if(ta2==true){
ta2a--;
}
if(ta3==true){
ta3a--;
}
if(ta4==true){
ta4a--;
}
if(ru1==true){
ru1a--;
}
if(ru2==true){
ru2a--;
}
if(ru3==true){
ru3a--;
}
if(ru4==true){
ru4a--;
}
if(sw1==true){
sw1a--;
}
if(sw2==true){
sw2a--;
}
if(sw3==true){
sw3a--;
}
if(sw4==true){
sw4a--;
}
if(asum1==true){
asum1a--;
}
if(asum2==true){
asum2a--;
}
if(asum3==true){
asum3a--;
}
if(asum4==true){
asum4a--;
}
if(am1==true){
am1a--;
}
if(am2==true){
am2a--;
}
if(am3==true){
am3a--;
}
if(am4==true){
am4a--;
}
if(pm1==true){
pm1a--;
}
if(pm2==true){
pm2a--;
}
if(pm3==true){
pm3a--;
}
if(pm4==true){
pm4a--;
}
if(hb1==true){
hb1a--;
}
if(hb2==true){
hb2a--;
}
if(hb3==true){
hb3a--;
}
if(hb4==true){
hb4a--;
}
if(sc1==true){
sc1a--;
}
if(sc2==true){
sc2a--;
}
if(sc3==true){
sc3a--;
}
if(sc4==true){
sc4a--;
}
if(v1==true){
v1a--;
}
if(v2==true){
v2a--;
}
if(v3==true){
v3a--;
}
if(v4==true){
v4a--;
}
if(te1==true){
te1a--;
}
if(te2==true){
te2a--;
}
if(te3==true){
te3a--;
}
if(te4==true){
te4a--;
}
if(ame1==true){
ame1a--;
}
if(ame2==true){
ame2a--;
}
if(ame3==true){
ame3a--;
}
if(ame4==true){
ame4a--;
}
if(sea1==true){
sea1a--;
}
if(sea2==true){
sea2a--;
}
if(sea3==true){
sea3a--;
}
if(sea4==true){
sea4a--;
}
if(an1==true){
an1a--;
}
if(an2==true){
an2a--;
}
if(an3==true){
an3a--;
}
if(an4==true){
an4a--;
}
if(mt1==true){
mt1a--;
}
if(mt2==true){
mt2a--;
}
if(mt3==true){
mt3a--;
}
if(mt4==true){
mt4a--;
}
if(wh1==true){
wh1a--;
}
if(wh2==true){
wh2a--;
}
if(wh3==true){
wh3a--;
}
if(wh4==true){
wh4a--;
}
if(wo1==true){
wo1a--;
}
if(wo2==true){
wo2a--;
}
if(wo3==true){
wo3a--;
}
if(wo4==true){
wo4a--;
}

if(hass1a==0){
hass1 = false;
}
if(hass2a==0){
hass2 = false;
}
if(hass3a==0){
hass3 = false;
}
if(hass4a==0){
hass4 = false;
}
if(sk1a==0){
sk1 = false;
}
if(sk2a==0){
sk2 = false;
}
if(sk3a==0){
sk3 = false;
}
if(sk4a==0){
sk4 = false;
}
if(bl1a==0){
bl1 = false;
}
if(bl2a==0){
bl2 = false;
}
if(bl3a==0){
bl3 = false;
}
if(bl4a==0){
bl4 = false;
}
if(sl1a==0){
sl1 = false;
}
if(sl2a==0){
sl2 = false;
}
if(sl3a==0){
sl3 = false;
}
if(sl4a==0){
sl4 = false;
}
if(ni1a==0){
ni1 = false;
}
if(ni2a==0){
ni2 = false;
}
if(ni3a==0){
ni3 = false;
}
if(ni4a==0){
ni4 = false;
}
if(ge1a==0){
ge1 = false;
}
if(ge2a==0){
ge2 = false;
}
if(ge3a==0){
ge3 = false;
}
if(ge4a==0){
ge4 = false;
}
if(dc1a==0){
dc1 = false;
}
if(dc2a==0){
dc2 = false;
}
if(dc3a==0){
dc3 = false;
}
if(dc4a==0){
dc4 = false;
}
if(mu1a==0){
mu1 = false;
}
if(mu2a==0){
mu2 = false;
}
if(mu3a==0){
mu3 = false;
}
if(mu4a==0){
mu4 = false;
}
if(end1a==0){
end1 = false;
}
if(end2a==0){
end2 = false;
}
if(end3a==0){
end3 = false;
}
if(end4a==0){
end4 = false;
}
if(ta1a==0){
ta1 = false;
}
if(ta2a==0){
ta2 = false;
}
if(ta3a==0){
ta3 = false;
}
if(ta4a==0){
ta4 = false;
}
if(ru1a==0){
ru1 = false;
}
if(ru2a==0){
ru2 = false;
}
if(ru3a==0){
ru3 = false;
}
if(ru4a==0){
ru4 = false;
}
if(sw1a==0){
sw1 = false;
}
if(sw2a==0){
sw2 = false;
}
if(sw3a==0){
sw3 = false;
}
if(sw4a==0){
sw4 = false;
}
if(asum1a==0){
asum1 = false;
}
if(asum2a==0){
asum2 = false;
}
if(asum3a==0){
asum3 = false;
}
if(asum4a==0){
asum4 = false;
}
if(am1a==0){
am1 = false;
}
if(am2a==0){
am2 = false;
}
if(am3a==0){
am3 = false;
}
if(am4a==0){
am4 = false;
}
if(pm1a==0){
pm1 = false;
}
if(pm2a==0){
pm2 = false;
}
if(pm3a==0){
pm3 = false;
}
if(pm4a==0){
pm4 = false;
}
if(hb1a==0){
hb1 = false;
}
if(hb2a==0){
hb2 = false;
}
if(hb3a==0){
hb3 = false;
}
if(hb4a==0){
hb4 = false;
}
if(sc1a==0){
sc1 = false;
}
if(sc2a==0){
sc2 = false;
}
if(sc3a==0){
sc3 = false;
}
if(sc4a==0){
sc4 = false;
}
if(v1a==0){
v1 = false;
}
if(v2a==0){
v2 = false;
}
if(v3a==0){
v3 = false;
}
if(v4a==0){
v4 = false;
}
if(te1a==0){
te1 = false;
}
if(te2a==0){
te2 = false;
}
if(te3a==0){
te3 = false;
}
if(te4a==0){
te4 = false;
}
if(ame1a==0){
ame1 = false;
}
if(ame2a==0){
ame2 = false;
}
if(ame3a==0){
ame3 = false;
}
if(ame4a==0){
ame4 = false;
}
if(sea1a==0){
sea1 = false;
}
if(sea2a==0){
sea2 = false;
}
if(sea3a==0){
sea3 = false;
}
if(sea4a==0){
sea4 = false;
}
if(an1a==0){
an1 = false;
}
if(an2a==0){
an2 = false;
}
if(an3a==0){
an3 = false;
}
if(an4a==0){
an4 = false;
}
if(wh1a==0){
wh1 = false;
}
if(wh2a==0){
wh2 = false;
}
if(wh3a==0){
wh3 = false;
}
if(wh4a==0){
wh4 = false;
}
if(mt1a==0){
mt1 = false;
}
if(mt2a==0){
mt2 = false;
}
if(mt3a==0){
mt3 = false;
}
if(mt4a==0){
mt4 = false;
}
if(wo1a==0){
wo1 = false;
}
if(wo2a==0){
wo2 = false;
}
if(wo3a==0){
wo3 = false;
}
if(wo4a==0){
wo4 = false;
}





//----------------------
if(ice[0]!=null){
for(var n in ice){
if(i1c[n]==true){
i1b[n]--;
}
if(i1b[n]==0&&i1c[n]==true){
for(var xx=ix[n]-1;xx<ix[n]+2;xx++)
for(var zz=iz[n]-1;zz<iz[n]+2;zz++)
setTile(xx, iy[n], zz, 79);
i1c[n] = false;
}
if(i3b[n]==true){
i3c[n]--;
}
if(i3c[n]==0&&i3b[n]==true){
explode(ixa[n], iya[n]+3, iza[n], 4.5);
i3b[n] = false;
}
if(i4a[n]==900){
if(auto==true)
autoRecover(ixc[n], iyc[n], izc[n], 6, 2);
for(var xx=ixc[n]-6;xx<ixc[n]+7;xx++)
for(var yy=iyc[n]+1;yy<iyc[n]+6;yy++)
for(var zz=izc[n]-6;zz<izc[n]+7;zz++)
setTile(xx,yy,zz,0);
}
}}
if(water[0]!=null){
if(water2==false){
if(w2a[0]==75){
for(var xx=w2x[0]-2;xx<w2x[0]+3;xx++)
for(var zz=w2z[0]-2;zz<w2z[0]+3;zz++)
setTile(xx, w2y[0], zz, 2);
}
if(w3a[0]==15){
for(var xx=wxb[0]-3;xx<wxb[0]+4;xx++)
for(var zz=wzb[0]-3;zz<wzb[0]+4;zz++)
setTile(xx, wyb[0]+1, zz, 0);
}
if(w1c[0]==true){
w1b[0]--;
}
if(w1b[0]==0&&w1c[0]==true){
setTile(wx[0], wy[0]+1, wz[0], 0);
w1c[0] = false;
}
if(w4c[0]==true){
w4b[0]--;
}
if(w4b[0]==300&&w4c[0]==true){
setTile(wxa[0]+9, wya[0]+10, wza[0]+9, 0);
setTile(wxa[0]+9, wya[0]+10, wza[0]-9, 0);
setTile(wxa[0]-9, wya[0]+10, wza[0]+9, 0);
setTile(wxa[0]-9, wya[0]+10, wza[0]-9, 0);
setTile(wxa[0]+9, wya[0]+10, wza[0], 0);
setTile(wxa[0]-9, wya[0]+10, wza[0], 0);
setTile(wxa[0], wya[0]+10, wza[0]+9, 0);
setTile(wxa[0], wya[0]+10, wza[0]-9, 0);
for(var xx=wxa[0]-11;xx<wxa[0]+12;xx++){
for(var zz=wza[0]-11;zz<wza[0]+12;zz++){
setTile(xx,wya[0],zz,9);}}
}
if(w3c==true){
w3b--;
}
if(w3b==0&&w3c==true&&water2==false){
setTile(wxb+3, wyb+1, wzb, 0);
setTile(wxb-3, wyb+1, wzb, 0);
setTile(wxb, wyb+1, wzb+3, 0);
setTile(wxb, wyb+1, wzb-3, 0);
w3c = false;
}
}}
if(water[1]!=null){
for(var n=1;n<water.length;n++){
if(w2a[n]==75&&auto==true){
for(var xx=w2x[n]-2;xx<w2x[n]+3;xx++)
for(var zz=w2z[n]-2;zz<w2z[n]+3;zz++)
setTile(xx, w2y[n], zz, 2);
}
if(w3a==15){
for(var xx=wxb[n]-3;xx<wxb[n]+4;xx++)
for(var zz=wzb[n]-3;zz<wzb[n]+4;zz++)
setTile(xx, wyb[n]+1, zz, 0);
}
if(w1c[n]==true){
w1b[n]--;
}
if(w1b[n]==0&&w1c[n]==true){
setTile(wx[n], wy[n]+1, wz[n], 0);
w1c[n] = false;
}
if(w4c[n]==true){
w4b[n]--;
}
if(w4b[n]==300&&w4c[n]==true){
setTile(wxa[n]+9, wya[n]+10, wza[n]+9, 0);
setTile(wxa[n]+9, wya[n]+10, wza[n]-9, 0);
setTile(wxa[n]-9, wya[n]+10, wza[n]+9, 0);
setTile(wxa[n]-9, wya[n]+10, wza[n]-9, 0);
setTile(wxa[n]+9, wya[n]+10, wza[n], 0);
setTile(wxa[n]-9, wya[n]+10, wza[n], 0);
setTile(wxa[n], wya[n]+10, wza[n]+9, 0);
setTile(wxa[n], wya[n]+10, wza[n]-9, 0);
for(var xx=wxa[n]-11;xx<wxa[n]+12;xx++){
for(var zz=wza[n]-11;zz<wza[n]+12;zz++){
setTile(xx,wya[n],zz,9);}}
}
}}
if(tree[0]!=null){
for(var n in tree){
if(t3a[n]>150){
t3x[n] = Entity.getX(tree[n]);
t3y[n] = Entity.getY(tree[n])-2;
t3z[n] = Entity.getZ(tree[n]);
for(var xx=t3x[n]-1;xx<t3x[n]+2;xx++)
for(var zz=t3z[n]-1;zz<t3z[n]+2;zz++)
if(getTile(xx, t3y[n], zz)==0||getTile(xx, t3y[n], zz)==8||getTile(xx, t3y[n], zz)==9||getTile(xx, t3y[n], zz)==51){
setTile(xx, t3y[n], zz, 17);
}
}
if(t3a[n]==150){
t3b[n] = -1;
}
if(t3b[n]==-1){
t3x[n] = Entity.getX(tree[n]);
t3y[n] = Entity.getY(tree[n])-4;
t3z[n] = Entity.getZ(tree[n]);
if(getTile(t3x[n], t3y[n]-1, t3z[n])!=0){
for(var xx=t3x[n]-1;xx<t3x[n]+2;xx++)
for(var zz=t3z[n]-1;zz<t3z[n]+2;zz++)
if(getTile(xx, t3y[n]+2, zz)==0){
setTile(xx, t3y[n]+2, zz, 30);
t3b[n] = 16;
}
}
}
if(t3b[n]>0){
t3b[n]--;
}
if(t3b[n]==1){
for(var xx=t3x[n]-1;xx<t3x[n]+2;xx++)
for(var zz=t3z[n]-1;zz<t3z[n]+2;zz++)
if(getTile(xx, t3y[n]+2, zz)==30){
setTile(xx, t3y[n]+2, zz, 0);
}
}
}}
if(light[0]!=null){
for(var n in light){
if(l4a[n]==1740){
for(var yy=lya[n]+8;yy<lya[n]+10;yy++){
setTile(lxa[n]+9, yy, lza[n]+9, 155);
setTile(lxa[n]+9, yy, lza[n], 155);
setTile(lxa[n]+9, yy, lza[n]-9, 155);
setTile(lxa[n], yy, lza[n]+9, 155);
setTile(lxa[n], yy, lza[n]-9, 155);
setTile(lxa[n]-9, yy, lza[n]+9, 155);
setTile(lxa[n]-9, yy, lza[n], 155);
setTile(lxa[n]-9, yy, lza[n]-9, 155);
}
setTile(lxa[n]+9, lya[n]+7, lza[n]+9, 89);
setTile(lxa[n]+9, lya[n]+7, lza[n], 89);
setTile(lxa[n]+9, lya[n]+7, lza[n]-9, 89);
setTile(lxa[n], lya[n]+7, lza[n]+9, 89);
setTile(lxa[n], lya[n]+7, lza[n]-9, 89);
setTile(lxa[n]-9, lya[n]+7, lza[n]+9, 89);
setTile(lxa[n]-9, lya[n]+7, lza[n], 89);
setTile(lxa[n]-9, lya[n]+7, lza[n]-9, 89);
}
if(l4a[n]==1735){
for(var yy=lya[n]+6;yy<lya[n]+8;yy++){
setTile(lxa[n]+9, yy, lza[n]+9, 155);
setTile(lxa[n]+9, yy, lza[n], 155);
setTile(lxa[n]+9, yy, lza[n]-9, 155);
setTile(lxa[n], yy, lza[n]+9, 155);
setTile(lxa[n], yy, lza[n]-9, 155);
setTile(lxa[n]-9, yy, lza[n]+9, 155);
setTile(lxa[n]-9, yy, lza[n], 155);
setTile(lxa[n]-9, yy, lza[n]-9, 155);
}
setTile(lxa[n]+9, lya[n]+5, lza[n]+9, 89);
setTile(lxa[n]+9, lya[n]+5, lza[n], 89);
setTile(lxa[n]+9, lya[n]+5, lza[n]-9, 89);
setTile(lxa[n], lya[n]+5, lza[n]+9, 89);
setTile(lxa[n], lya[n]+5, lza[n]-9, 89);
setTile(lxa[n]-9, lya[n]+5, lza[n]+9, 89);
setTile(lxa[n]-9, lya[n]+5, lza[n], 89);
setTile(lxa[n]-9, lya[n]+5, lza[n]-9, 89);
}
if(l4a[n]==1730){
for(var yy=lya[n]+4;yy<lya[n]+6;yy++){
setTile(lxa[n]+9, yy, lza[n]+9, 155);
setTile(lxa[n]+9, yy, lza[n], 155);
setTile(lxa[n]+9, yy, lza[n]-9, 155);
setTile(lxa[n], yy, lza[n]+9, 155);
setTile(lxa[n], yy, lza[n]-9, 155);
setTile(lxa[n]-9, yy, lza[n]+9, 155);
setTile(lxa[n]-9, yy, lza[n], 155);
setTile(lxa[n]-9, yy, lza[n]-9, 155);
}
setTile(lxa[n]+9, lya[n]+3, lza[n]+9, 89);
setTile(lxa[n]+9, lya[n]+3, lza[n], 89);
setTile(lxa[n]+9, lya[n]+3, lza[n]-9, 89);
setTile(lxa[n], lya[n]+3, lza[n]+9, 89);
setTile(lxa[n], lya[n]+3, lza[n]-9, 89);
setTile(lxa[n]-9, lya[n]+3, lza[n]+9, 89);
setTile(lxa[n]-9, lya[n]+3, lza[n], 89);
setTile(lxa[n]-9, lya[n]+3, lza[n]-9, 89);
}
if(l4a[n]==1725){
for(var yy=lya[n]+2;yy<lya[n]+4;yy++){
setTile(lxa[n]+9, yy, lza[n]+9, 155);
setTile(lxa[n]+9, yy, lza[n], 155);
setTile(lxa[n]+9, yy, lza[n]-9, 155);
setTile(lxa[n], yy, lza[n]+9, 155);
setTile(lxa[n], yy, lza[n]-9, 155);
setTile(lxa[n]-9, yy, lza[n]+9, 155);
setTile(lxa[n]-9, yy, lza[n], 155);
setTile(lxa[n]-9, yy, lza[n]-9, 155);
}
setTile(lxa[n]+9, lya[n]+1, lza[n]+9, 89);
setTile(lxa[n]+9, lya[n]+1, lza[n], 89);
setTile(lxa[n]+9, lya[n]+1, lza[n]-9, 89);
setTile(lxa[n], lya[n]+1, lza[n]+9, 89);
setTile(lxa[n], lya[n]+1, lza[n]-9, 89);
setTile(lxa[n]-9, lya[n]+1, lza[n]+9, 89);
setTile(lxa[n]-9, lya[n]+1, lza[n], 89);
setTile(lxa[n]-9, lya[n]+1, lza[n]-9, 89);
}
if(l4a[n]==1720){
ESP.antiLack(3);
for(var yy=lya[n]+1;yy<lya[n]+13;yy++){
setTile(lxa[n]+9, yy, lza[n]+9, 0);
setTile(lxa[n]+9, yy, lza[n], 0);
setTile(lxa[n]+9, yy, lza[n]-9, 0);
setTile(lxa[n], yy, lza[n]+9, 0);
setTile(lxa[n], yy, lza[n]-9, 0);
setTile(lxa[n]-9, yy, lza[n]+9, 0);
setTile(lxa[n]-9, yy, lza[n], 0);
setTile(lxa[n]-9, yy, lza[n]-9, 0);
}
explode(lxa[n]+9, lya[n], lza[n]+9, 4);
explode(lxa[n]+9, lya[n], lza[n], 4);
explode(lxa[n]+9, lya[n], lza[n]-9, 4);
explode(lxa[n], lya[n], lza[n]+9, 4);
explode(lxa[n], lya[n], lza[n]-9, 4);
explode(lxa[n]-9, lya[n], lza[n]+9, 4);
explode(lxa[n]-9, lya[n], lza[n], 4);
explode(lxa[n]-9, lya[n], lza[n]-9, 4);
explode(lxa[n]+9, lya[n]+3, lza[n]+9, 3);
explode(lxa[n]+9, lya[n]+3, lza[n], 3);
explode(lxa[n]+9, lya[n]+3, lza[n]-9, 3);
explode(lxa[n], lya[n]+3, lza[n]+9, 3);
explode(lxa[n], lya[n]+3, lza[n]-9, 3);
explode(lxa[n]-9, lya[n]+2, lza[n]+9, 3);
explode(lxa[n]-9, lya[n]+3, lza[n], 3);
explode(lxa[n]-9, lya[n]+3, lza[n]-9, 3);
}
if(l4a[n]==1705){
for(var xx=lxa[n]-10;xx<lxa[n]+11;xx++){
for(var zz=lza[n]-10;zz<lza[n]+11;zz++){
setTile(xx,lya[n]+1,zz,0);}}
}
}
if(l3c[n]==true){
l3b[n]--;
}
if(l3b[n]==45&&l3c[n]==true){
setTile(lx[n]+2, ly[n]+3, lz[n], 0);
setTile(lx[n]-2, ly[n]+3, lz[n], 0);
setTile(lx[n], ly[n]+3, lz[n]+2, 0);
setTile(lx[n], ly[n]+3, lz[n]-2, 0);
}
if(l3b[n]==0&&l3c[n]==true){
setTile(lx[n]+2, ly[n]+2, lz[n], 0);
setTile(lx[n]-2, ly[n]+2, lz[n], 0);
setTile(lx[n], ly[n]+2, lz[n]+2, 0);
setTile(lx[n], ly[n]+2, lz[n]-2, 0);
setTile(lx[n], ly[n]+5, lz[n], 0);
l3c[n] = false;
}
if(l4a[n]==870){
setTile(lxa[n], lya[n]+5, lza[n], 0);
removeArrow();
}}
if(fire[0]!=null){
for(var n in fire){
if(f4c[n]==true){
f4b[n]--;
}
if(f4b[n]==0&&f4c[n]==true){
if(auto==true){
autoRecover(fx[n], fy[n], fz[n], 12, 2);
}
autoRecover(fx[n], fy[n]+1, fz[n], 12, 0);
for(var xx=fx[n]-11;xx<fx[n]+12;xx++){
setTile(xx, fy[n]+2, fz[n]+11, 0);
setTile(xx, fy[n]+2, fz[n]-11, 0);
}
for(var zz=fz[n]-10;zz<fz[n]+11;zz++){
setTile(fx[n]+11, fy[n]+2, zz, 0);
setTile(fx[n]-11, fy[n]+2, zz, 0);
}
f4d[n] = false;
f4c[n] = false;
}
}
}
if(dark[0]!=null){
for(var n in dark){
if(d1c[n]==true){
d1b[n]--;
}
if(d1b[n]==0&&d1c[n]==true){
setTile(dxb[n], dyb[n]+2, dzb[n], 51);
d1c[n] = false;
}
if(d4a[n]==1795){
for(var xx=dx[n]-1;xx<dx[n]+2;xx++)
for(var yy=dy[n]-1;yy<dy[n]+2;yy++)
for(var zz=dz[n]-1;zz<dz[n]+2;zz++)
if(getTile(xx, yy, zz)==0){
setTile(xx,yy,zz,49);
}
}
if(d4a[n]==1790){
for(var xx=dx[n]-2;xx<dx[n]+3;xx++)
for(var yy=dy[n]-2;yy<dy[n]+3;yy++)
for(var zz=dz[n]-2;zz<dz[n]+3;zz++)
if(getTile(xx, yy, zz)==0){
setTile(xx,yy,zz,49);
}
}
if(d4a[n]==1785){
for(var xx=dx[n]-3;xx<dx[n]+4;xx++)
for(var yy=dy[n]-3;yy<dy[n]+4;yy++)
for(var zz=dz[n]-3;zz<dz[n]+4;zz++)
if(getTile(xx, yy, zz)==0){
setTile(xx,yy,zz,49);
}
}
if(d4a[n]==1780){
for(var xx=dx[n]-4;xx<dx[n]+5;xx++)
for(var yy=dy[n]-4;yy<dy[n]+5;yy++)
for(var zz=dz[n]-4;zz<dz[n]+5;zz++)
if(getTile(xx, yy, zz)==0){
setTile(xx,yy,zz,49);
}
}
if(d4a[n]==1775){
for(var xx=dx[n]-5;xx<dx[n]+6;xx++)
for(var yy=dy[n]-5;yy<dy[n]+6;yy++)
for(var zz=dz[n]-5;zz<dz[n]+6;zz++)
if(getTile(xx, yy, zz)==0){
setTile(xx,yy,zz,49);
}
}
if(d4a[n]==1770){
for(var xx=dx[n]-6;xx<dx[n]+7;xx++){
for(var zz=dz[n]-6;zz<dz[n]+7;zz++){
if(getTile(xx, dy[n]-6, zz)==0){
setTile(xx, dy[n]-6, zz, 49);
}
if(getTile(xx, dy[n]+6, zz)==0){
setTile(xx, dy[n]+6, zz, 49);
}
}}
for(var xx=dx[n]-6;xx<dx[n]+7;xx++){
for(var yy=dy[n]-6;yy<dy[n]+7;yy++){
if(getTile(xx, yy, dz[n]-6)==0){
setTile(xx, yy, dz[n]-6, 49);
}
if(getTile(xx, yy, dz[n]+6)==0){
setTile(xx, yy, dz[n]+6, 49);
}
}}
for(var yy=dy[n]-6;yy<dy[n]+7;yy++){
for(var zz=dz[n]-6;zz<dz[n]+7;zz++){
if(getTile(dx[n]-6, yy, zz)==0){
setTile(dx[n]-6, yy, zz, 49);
}
if(getTile(dx[n]+6, yy, zz)==0){
setTile(dx[n]+6, yy, zz, 49);
}
}}
}
if(d4a[n]==1765){
for(var xx=dx[n]-7;xx<dx[n]+8;xx++){
for(var zz=dz[n]-7;zz<dz[n]+8;zz++){
if(getTile(xx, dy[n]-7, zz)==0){
setTile(xx, dy[n]-7, zz, 49);
}
if(getTile(xx, dy[n]+7, zz)==0){
setTile(xx, dy[n]+7, zz, 49);
}
}}
for(var xx=dx[n]-7;xx<dx[n]+8;xx++){
for(var yy=dy[n]-7;yy<dy[n]+8;yy++){
if(getTile(xx, yy, dz[n]-7)==0){
setTile(xx, yy, dz[n]-7, 49);
}
if(getTile(xx, yy, dz[n]+7)==0){
setTile(xx, yy, dz[n]+7, 49);
}
}}
for(var yy=dy[n]-7;yy<dy[n]+8;yy++){
for(var zz=dz[n]-7;zz<dz[n]+8;zz++){
if(getTile(dx[n]-7, yy, zz)==0){
setTile(dx[n]-7, yy, zz, 49);
}
if(getTile(dx[n]+7, yy, zz)==0){
setTile(dx[n]+7, yy, zz, 49);
}
}}
}
if(d4a[n]==1760){
for(var xx=dx[n]-8;xx<dx[n]+9;xx++){
for(var zz=dz[n]-8;zz<dz[n]+9;zz++){
if(getTile(xx, dy[n]-8, zz)==0){
setTile(xx, dy[n]-8, zz, 49);
}
if(getTile(xx, dy[n]+8, zz)==0){
setTile(xx, dy[n]+8, zz, 49);
}
}}
for(var xx=dx[n]-8;xx<dx[n]+9;xx++){
for(var yy=dy[n]-8;yy<dy[n]+9;yy++){
if(getTile(xx, yy, dz[n]-8)==0){
setTile(xx, yy, dz[n]-8, 49);
}
if(getTile(xx, yy, dz[n]+8)==0){
setTile(xx, yy, dz[n]+8, 49);
}
}}
for(var yy=dy[n]-8;yy<dy[n]+9;yy++){
for(var zz=dz[n]-8;zz<dz[n]+9;zz++){
if(getTile(dx[n]-8, yy, zz)==0){
setTile(dx[n]-8, yy, zz, 49);
}
if(getTile(dx[n]+8, yy, zz)==0){
setTile(dx[n]+8, yy, zz, 49);
}
}}
}
if(d4a[n]==1750){
for(var xx=dx[n]-10;xx<dx[n]+11;xx++){
for(var zz=dz[n]-10;zz<dz[n]+11;zz++){
if(getTile(xx, dy[n]-10, zz)==0){
setTile(xx, dy[n]-10, zz, 49);
}
if(getTile(xx, dy[n]+10, zz)==0){
setTile(xx, dy[n]+10, zz, 49);
}
}}
for(var xx=dx[n]-10;xx<dx[n]+11;xx++){
for(var yy=dy[n]-10;yy<dy[n]+11;yy++){
if(getTile(xx, yy, dz[n]-10)==0){
setTile(xx, yy, dz[n]-10, 49);
}
if(getTile(xx, yy, dz[n]+10)==0){
setTile(xx, yy, dz[n]+10, 49);
}
}}
for(var yy=dy[n]-10;yy<dy[n]+11;yy++){
for(var zz=dz[n]-10;zz<dz[n]+11;zz++){
if(getTile(dx[n]-10, yy, zz)==0){
setTile(dx[n]-10, yy, zz, 49);
}
if(getTile(dx[n]+10, yy, zz)==0){
setTile(dx[n]+10, yy, zz, 49);
}
}}
}
if(d4a[n]==1740){
for(var xx=dx[n]-12;xx<dx[n]+13;xx++){
for(var zz=dz[n]-12;zz<dz[n]+13;zz++){
if(getTile(xx, dy[n]-12, zz)==0){
setTile(xx, dy[n]-12, zz, 49);
}
if(getTile(xx, dy[n]+12, zz)==0){
setTile(xx, dy[n]+12, zz, 49);
}
}}
for(var xx=dx[n]-12;xx<dx[n]+13;xx++){
for(var yy=dy[n]-12;yy<dy[n]+13;yy++){
if(getTile(xx, yy, dz[n]-12)==0){
setTile(xx, yy, dz[n]-12, 49);
}
if(getTile(xx, yy, dz[n]+12)==0){
setTile(xx, yy, dz[n]+12, 49);
}
}}
for(var yy=dy[n]-12;yy<dy[n]+13;yy++){
for(var zz=dz[n]-12;zz<dz[n]+13;zz++){
if(getTile(dx[n]-12, yy, zz)==0){
setTile(dx[n]-12, yy, zz, 49);
}
if(getTile(dx[n]+12, yy, zz)==0){
setTile(dx[n]+12, yy, zz, 49);
}
}}
}
if(d4a[n]==1710){
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(dx[n]-Entity.getX(e));
p2y = Math.abs((dy[n]+1)-Entity.getY(e));
p2z = Math.abs(dz[n]-Entity.getZ(e));
if(p2x<=30&&p2y<=30&&p2z<=30&&swamp!=e&&Entity.getEntityTypeId(e)<64){
Entity.setHealth(e, Entity.getHealth(e)-10);
}
}
}
if(d4a[n]==1590){
for(var xx=dx[n]-12;xx<dx[n]+13;xx++)
for(var yy=dy[n]+4;yy<dy[n]+13;yy++)
for(var zz=dz[n]-12;zz<dz[n]+13;zz++)
if(getTile(xx, yy, zz)==49){
setTile(xx,yy,zz,0);
}
}
if(d4a[n]==1585){
for(var xx=dx[n]-12;xx<dx[n]+13;xx++)
for(var yy=dy[n]-3;yy<dy[n]+4;yy++)
for(var zz=dz[n]-12;zz<dz[n]+13;zz++)
if(getTile(xx, yy, zz)==49){
setTile(xx,yy,zz,0);
}
}
if(d4a[n]==1580){
for(var xx=dx[n]-12;xx<dx[n]+13;xx++)
for(var yy=dy[n]-12;yy<dy[n]-3;yy++)
for(var zz=dz[n]-12;zz<dz[n]+13;zz++)
if(getTile(xx, yy, zz)==49){
setTile(xx,yy,zz,0);
}
}
if(d3c[n]==true){
d3b[n]--;
}
if(d3b[n]==75&&d3c[n]==true){
setTile(dxa[n]+2, dya[n]+2, dza[n], 0);
setTile(dxa[n]-2, dya[n]+2, dza[n], 0);
setTile(dxa[n], dya[n]+2, dza[n]+2, 0);
setTile(dxa[n], dya[n]+2, dza[n]-2, 0);
}
if(d3b[n]==0&&d3c[n]==true){
setTile(dxa[n], dya[n]+1, dza[n], 51);
d3c[n] = false;
}
}}
if(sand[0]!=null){
for(var n in sand){
if(m3a[n]==255){
ESP.antiLack(3);
explode(m3x[n]+0.5, m3y[n]+1, m3z[n]+0.5, 1.5);
explode(m3x[n]+0.5, m3y[n]+2, m3z[n]+0.5, 1.5);
}
if(m3a[n]==91){
for(var xx=m3x[n]-2;xx<m3x[n]+3;xx++)
for(var yy=m3y[n]+1;yy<m3y[n]+5;yy++)
for(var zz=m3z[n]-2;zz<m3z[n]+3;zz++)
if(getTile(xx, yy, zz)==12){
setTile(xx, yy, zz, 0);
}
}
if(m4a[n]==930){
ESP.antiLack(3);
for(var xx=m4x[n]-12;xx<m4x[n]+13;xx++)
for(var yy=m4y[n]+1;yy<m4y[n]+4;yy++)
for(var zz=m4z[n]-12;zz<m4z[n]+13;zz++)
if(getTile(xx, yy, zz)==81){
setTile(xx, yy, zz, 0);
}
autoRecover(m4x[n], m4y[n]+2, m4x[n], 13, 0);
}
if(m4a[n]==915){
for(var xx=m4x[n]-12;xx<m4x[n]+13;xx++)
for(var yy=m4y[n]-3;yy<m4y[n];yy++)
for(var zz=m4z[n]-12;zz<m4z[n]+13;zz++)
setTile(xx,yy,zz,3);
}
if(m4a[n]==900){
autoRecover(m4x[n], m4y[n], m4x[n], 12, 2);
}
}}
if(elsa[0]!=null){
for(var n in elsa){
if(e3b[n]==true){
e3c[n]--;
}
if(e3c[n]==0&&e3b[n]==true){
ESP.antiLack(3);
explode(ex[n],ey[n]+4,ez[n],3);
e3b[n] = false;
}
if(e4a[n]==900){
if(auto==true)
autoRecover(ex4[n], ey4[n], ez4[n], 8, 2);
for(var xx=ex4[n]-5;xx<ex4[n]+6;xx++)
for(var yy=ey4[n]+1;yy<ey4[n]+19;yy++)
for(var zz=ez4[n]-5;zz<ez4[n]+6;zz++)
setTile(xx, yy, zz, 0);
for(var xx=ex4[n]-3;xx<ex4[n]+4;xx++)
for(var yy=ey4[n]+19;yy<ey4[n]+25;yy++)
for(var zz=ez4[n]-3;zz<ez4[n]+4;zz++)
setTile(xx, yy, zz, 0);
for(var xx=ex4[n]-1;xx<ex4[n]+2;xx++)
for(var yy=ey4[n]+25;yy<ey4[n]+28;yy++)
for(var zz=ez4[n]-1;zz<ez4[n]+2;zz++)
setTile(xx, yy, zz, 0);
for(var yy=ey4[n]+28;yy<ey4[n]+33;yy++)
setTile(ex4[n], yy, ez4[n], 0);
}
}}
if(titan[0]!=null){
for(var n in titan){
if(tt4a[n]==2240){
for(var xx=ttx[n]-3;xx<ttx[n]+4;xx++)
for(var yy=tty[n]+1;yy<tty[n]+10;yy++)
setTile(xx,yy,ttz[n],0);
for(var yy=tty[n]+2;yy<tty[n]+5;yy++){
setTile(ttx[n]+1, yy, ttz[n], 5, 2);
setTile(ttx[n]-1, yy, ttz[n], 5, 2);
}
setTiles(ttx[n]-1, ttx[n]+1, tty[n]+5, tty[n]+9, ttz[n], ttz[n], 5, 2);
setTile(ttx[n], tty[n]+10, ttz[n], 5, 2);
setTile(ttx[n]+2, tty[n]+8, ttz[n], 5, 2);
setTile(ttx[n]-2, tty[n]+8, ttz[n], 5, 2);
for(var yy=tty[n]+5;yy<tty[n]+9;yy++){
setTile(ttx[n]+3, yy, ttz[n], 5, 2);
setTile(ttx[n]-3, yy, ttz[n], 5, 2);
}
}
if(tt4a[n]==2230){
for(var xx=ttx[n]-3;xx<ttx[n]+4;xx++){
for(var yy=tty[n]+1;yy<tty[n]+14;yy++){
setTile(xx,yy,ttz[n],0);}}
setTile(ttx[n]+1, tty[n]+5, ttz[n], 5, 2);
setTile(ttx[n]+1, tty[n]+3, ttz[n], 5, 2);
setTile(ttx[n]+1, tty[n]+4, ttz[n], 5, 2);
setTile(ttx[n]-1, tty[n]+5, ttz[n], 5, 2);
setTile(ttx[n]-1, tty[n]+3, ttz[n], 5, 2);
setTile(ttx[n]-1, tty[n]+4, ttz[n], 5, 2);
setTiles(ttx[n]-1, ttx[n]+1, tty[n]+6, tty[n]+10, ttz[n], ttz[n], 5, 2);
setTile(ttx[n], tty[n]+11, ttz[n], 5, 2);
setTile(ttx[n]+2, tty[n]+9, ttz[n], 5, 2);
setTile(ttx[n]+3, tty[n]+9, ttz[n], 5, 2);
setTile(ttx[n]+3, tty[n]+8, ttz[n], 5, 2);
setTile(ttx[n]+3, tty[n]+7, ttz[n], 5, 2);
setTile(ttx[n]+3, tty[n]+6, ttz[n], 5, 2);
setTile(ttx[n]-2, tty[n]+9, ttz[n], 5, 2);
setTile(ttx[n]-3, tty[n]+9, ttz[n], 5, 2);
setTile(ttx[n]-3, tty[n]+8, ttz[n], 5, 2);
setTile(ttx[n]-3, tty[n]+7, ttz[n], 5, 2);
setTile(ttx[n]-3, tty[n]+6, ttz[n], 5, 2);
}
if(tt4a[n]==2220){
for(var xx=ttx[n]-3;xx<ttx[n]+4;xx++){
for(var yy=tty[n]+1;yy<tty[n]+14;yy++){
setTile(xx,yy,ttz[n],0);}}
setTile(ttx[n]+1, tty[n]+2, ttz[n], 5, 2);
setTile(ttx[n]+1, tty[n]+3, ttz[n], 5, 2);
setTile(ttx[n]+1, tty[n]+4, ttz[n], 5, 2);
setTile(ttx[n]-1, tty[n]+2, ttz[n], 5, 2);
setTile(ttx[n]-1, tty[n]+3, ttz[n], 5, 2);
setTile(ttx[n]-1, tty[n]+4, ttz[n], 5, 2);
setTiles(ttx[n]-1, ttx[n]+1, tty[n]+5, tty[n]+9, ttz[n], ttz[n], 5, 2);
setTile(ttx[n], tty[n]+10, ttz[n], 5, 2);
setTile(ttx[n]+2, tty[n]+8, ttz[n], 5, 2);
setTile(ttx[n]+3, tty[n]+8, ttz[n], 5, 2);
setTile(ttx[n]+3, tty[n]+7, ttz[n], 5, 2);
setTile(ttx[n]+3, tty[n]+6, ttz[n], 5, 2);
setTile(ttx[n]+3, tty[n]+5, ttz[n], 5, 2);
setTile(ttx[n]-2, tty[n]+8, ttz[n], 5, 2);
setTile(ttx[n]-3, tty[n]+8, ttz[n], 5, 2);
setTile(ttx[n]-3, tty[n]+7, ttz[n], 5, 2);
setTile(ttx[n]-3, tty[n]+6, ttz[n], 5, 2);
setTile(ttx[n]-3, tty[n]+5, ttz[n], 5, 2);
}
if(tt4a[n]==2210){
for(var xx=ttx[n]-3;xx<ttx[n]+4;xx++){
for(var yy=tty[n]+1;yy<tty[n]+14;yy++){
setTile(xx,yy,ttz[n],0);}}
setTile(ttx[n]+1, tty[n]+1, ttz[n], 5, 2);
setTile(ttx[n]+1, tty[n]+2, ttz[n], 5, 2);
setTile(ttx[n]+1, tty[n]+3, ttz[n], 5, 2);
setTile(ttx[n]-1, tty[n]+1, ttz[n], 5, 2);
setTile(ttx[n]-1, tty[n]+2, ttz[n], 5, 2);
setTile(ttx[n]-1, tty[n]+3, ttz[n], 5, 2);
setTiles(ttx[n]-1, ttx[n]+1, tty[n]+4, tty[n]+8, ttz[n], ttz[n], 5, 2);
setTile(ttx[n], tty[n]+9, ttz[n], 5, 2);
setTile(ttx[n]+2, tty[n]+7, ttz[n], 5, 2);
setTile(ttx[n]+3, tty[n]+7, ttz[n], 5, 2);
setTile(ttx[n]+3, tty[n]+6, ttz[n], 5, 2);
setTile(ttx[n]+3, tty[n]+5, ttz[n], 5, 2);
setTile(ttx[n]+3, tty[n]+4, ttz[n], 5, 2);
setTile(ttx[n]-2, tty[n]+7, ttz[n], 5, 2);
setTile(ttx[n]-3, tty[n]+7, ttz[n], 5, 2);
setTile(ttx[n]-3, tty[n]+6, ttz[n], 5, 2);
setTile(ttx[n]-3, tty[n]+5, ttz[n], 5, 2);
setTile(ttx[n]-3, tty[n]+4, ttz[n], 5, 2);
ESP.antiLack(30);
explode(ttx[n]+8, tty[n]+2, ttz[n]+8, 4);
explode(ttx[n]+8, tty[n]+2, ttz[n], 4);
explode(ttx[n]+8, tty[n]+2, ttz[n]-8, 4);
explode(ttx[n], tty[n]+2, ttz[n]+8, 4);
explode(ttx[n], tty[n]+2, ttz[n]-8, 4);
explode(ttx[n]-8, tty[n]+2, ttz[n]+8, 4);
explode(ttx[n]-8, tty[n]+2, ttz[n], 4);
explode(ttx[n]-8, tty[n]+2, ttz[n]-8, 4);
}
if(tt4a[n]==2200){
for(var xx=ttx[n]-3;xx<ttx[n]+4;xx++)
for(var yy=tty[n]+1;yy<tty[n]+14;yy++)
setTile(xx,yy,ttz[n],0);
if(tt4c[n]==true){
Entity.setHealth(tt4b[n], Entity.getHealth(tt4b[n])-15);
tt4c[n] = false;
}
else{
Entity.setHealth(tt4d[n], Entity.getHealth(tt4d[n])-15);
}
}
if(tt3a[n]==150){
setTile(ttxb[n], ttyb[n]+6, ttzb[n], 0);
}
}}
if(thunder[0]!=null){
for(var n in thunder){
if(th1a[n]==148){
for(th1b=3;th1b<25;th1b++)
explode(px+th1b*sin, th1c[n]+2, pz+th1b*cos, 1.6);
}
if(th2a[n]==298){
setTile(thxa[n]+5, thya[n]+3, thza[n]+5, 89);
setTile(thxa[n]+5, thya[n]+3, thza[n], 89);
setTile(thxa[n]+5, thya[n]+3, thza[n]-5, 89);
setTile(thxa[n], thya[n]+3, thza[n]+5, 89);
setTile(thxa[n], thya[n]+3, thza[n]-5, 89);
setTile(thxa[n]-5, thya[n]+3, thza[n]+5, 89);
setTile(thxa[n]-5, thya[n]+3, thza[n], 89);
setTile(thxa[n]-5, thya[n]+3, thza[n]-5, 89);
}
if(th2a[n]==296){
setTile(thxa[n]+5, thya[n]+2, thza[n]+5, 89);
setTile(thxa[n]+5, thya[n]+2, thza[n], 89);
setTile(thxa[n]+5, thya[n]+2, thza[n]-5, 89);
setTile(thxa[n], thya[n]+2, thza[n]+5, 89);
setTile(thxa[n], thya[n]+2, thza[n]-5, 89);
setTile(thxa[n]-5, thya[n]+2, thza[n]+5, 89);
setTile(thxa[n]-5, thya[n]+2, thza[n], 89);
setTile(thxa[n]-5, thya[n]+2, thza[n]-5, 89);
}
if(th2a[n]==294){
setTile(thxa[n]+5, thya[n]+1, thza[n]+5, 89);
setTile(thxa[n]+5, thya[n]+1, thza[n], 89);
setTile(thxa[n]+5, thya[n]+1, thza[n]-5, 89);
setTile(thxa[n], thya[n]+1, thza[n]+5, 89);
setTile(thxa[n], thya[n]+1, thza[n]-5, 89);
setTile(thxa[n]-5, thya[n]+1, thza[n]+5, 89);
setTile(thxa[n]-5, thya[n]+1, thza[n], 89);
setTile(thxa[n]-5, thya[n]+1, thza[n]-5, 89);
}
if(th2a[n]==292){
ESP.antiLack(3);
explode(thxa[n]+5, thya[n]+3, thza[n]+5, 2);
explode(thxa[n]+5, thya[n]+3, thza[n], 2);
explode(thxa[n]+5, thya[n]+3, thza[n]-5, 2);
explode(thxa[n], thya[n]+3, thza[n]+5, 2);
explode(thxa[n], thya[n]+3, thza[n]-5, 2);
explode(thxa[n]-5, thya[n]+3, thza[n]+5, 2);
explode(thxa[n]-5, thya[n]+3, thza[n], 2);
explode(thxa[n]-5, thya[n]+3, thza[n]-5, 2);
}
if(th4a[n]==1790){
setTile(thx[n]+1, thy[n]+10, thz[n]+1, 89);
setTile(thx[n]+1, thy[n]+10, thz[n]-1, 89);
setTile(thx[n]-1, thy[n]+10, thz[n]+1, 89);
setTile(thx[n]-1, thy[n]+10, thz[n]-1, 89);
setTile(thx[n]+2, thy[n]+10, thz[n]+2, 89);
setTile(thx[n]+2, thy[n]+10, thz[n]-2, 89);
setTile(thx[n]-2, thy[n]+10, thz[n]+2, 89);
setTile(thx[n]-2, thy[n]+10, thz[n]-2, 89);
}
if(th4a[n]==1785){
setTile(thx[n]+3, thy[n]+10, thz[n]+3, 89);
setTile(thx[n]+3, thy[n]+10, thz[n]-3, 89);
setTile(thx[n]-3, thy[n]+10, thz[n]+3, 89);
setTile(thx[n]-3, thy[n]+10, thz[n]-3, 89);
setTile(thx[n]+4, thy[n]+9, thz[n]+4, 89);
setTile(thx[n]+4, thy[n]+9, thz[n]-4, 89);
setTile(thx[n]-4, thy[n]+9, thz[n]+4, 89);
setTile(thx[n]-4, thy[n]+9, thz[n]-4, 89);
setTile(thx[n]+9, thy[n]+9, thz[n]+8, 89);
setTile(thx[n]+9, thy[n]+9, thz[n]-8, 89);
setTile(thx[n]-9, thy[n]+9, thz[n]+8, 89);
setTile(thx[n]-9, thy[n]+9, thz[n]-8, 89);
setTile(thx[n]+8, thy[n]+9, thz[n]+9, 89);
setTile(thx[n]+8, thy[n]+9, thz[n]-9, 89);
setTile(thx[n]-8, thy[n]+9, thz[n]+9, 89);
setTile(thx[n]-8, thy[n]+9, thz[n]-9, 89);
}
if(th4a[n]==1780){
setTile(thx[n]+5, thy[n]+9, thz[n]+5, 89);
setTile(thx[n]+5, thy[n]+9, thz[n]-5, 89);
setTile(thx[n]-5, thy[n]+9, thz[n]+5, 89);
setTile(thx[n]-5, thy[n]+9, thz[n]-5, 89);
setTile(thx[n]+6, thy[n]+9, thz[n]+6, 89);
setTile(thx[n]+6, thy[n]+9, thz[n]-6, 89);
setTile(thx[n]-6, thy[n]+9, thz[n]+6, 89);
setTile(thx[n]-6, thy[n]+9, thz[n]-6, 89);
for(var zz=thz[n]+5;zz<thz[n]+8;zz++){
setTile(thx[n]+9, thy[n]+9, zz, 89);
setTile(thx[n]-9, thy[n]+9, zz, 89);
}
for(var zz=thz[n]-7;zz<thz[n]-4;zz++){
setTile(thx[n]+9, thy[n]+9, zz, 89);
setTile(thx[n]-9, thy[n]+9, zz, 89);
}
for(var xx=thx[n]+5;xx<thx[n]+8;xx++){
setTile(xx, thy[n]+9, thz[n]+9, 89);
setTile(xx, thy[n]+9, thz[n]-9, 89);
}
for(var xx=thx[n]-7;xx<thx[n]-4;xx++){
setTile(xx, thy[n]+9, thz[n]+9, 89);
setTile(xx, thy[n]+9, thz[n]-9, 89);
}
}
if(th4a[n]==1775){
setTile(thx[n]+7, thy[n]+9, thz[n]+7, 89);
setTile(thx[n]+7, thy[n]+9, thz[n]-7, 89);
setTile(thx[n]-7, thy[n]+9, thz[n]+7, 89);
setTile(thx[n]-7, thy[n]+9, thz[n]-7, 89);
setTile(thx[n]+8, thy[n]+9, thz[n]+8, 89);
setTile(thx[n]+8, thy[n]+9, thz[n]-8, 89);
setTile(thx[n]-8, thy[n]+9, thz[n]+8, 89);
setTile(thx[n]-8, thy[n]+9, thz[n]-8, 89);
for(var zz=thz[n]+2;zz<thz[n]+5;zz++){
setTile(thx[n]+9, thy[n]+9, zz, 89);
setTile(thx[n]-9, thy[n]+9, zz, 89);
}
for(var zz=thz[n]-4;zz<thz[n]-1;zz++){
setTile(thx[n]-9, thy[n]+9, zz, 89);
setTile(thx[n]+9, thy[n]+9, zz, 89);
}
for(var xx=thx[n]+2;xx<thx[n]+5;xx++){
setTile(xx, thy[n]+9, thz[n]+9, 89);
setTile(xx, thy[n]+9, thz[n]-9, 89);
}
for(var xx=thx[n]-4;xx<thx[n]-1;xx++){
setTile(xx, thy[n]+9, thz[n]+9, 89);
setTile(xx, thy[n]+9, thz[n]-9, 89);
}
}
if(th4a[n]==1770){
for(var zz=thz[n]-1;zz<thz[n]+2;zz++){
setTile(thx[n]+10, thy[n]+9, zz, 89);
setTile(thx[n]-10, thy[n]+9, zz, 89);
}
for(var xx=thx[n]-1;xx<thx[n]+2;xx++){
setTile(xx, thy[n]+9, thz[n]+10, 89);
setTile(xx, thy[n]+9, thz[n]-10, 89);
}
setTile(thx[n]+10, thy[n]+9, thz[n], 41);
setTile(thx[n]-10, thy[n]+9, thz[n], 41);
setTile(thx[n], thy[n]+9, thz[n]+10, 41);
setTile(thx[n], thy[n]+9, thz[n]-10, 41);
}
if(th4a[n]==1740){
for(var yy=thy[n]+7;yy<thy[n]+9;yy++){
setTile(thx[n]+9, yy, thz[n]+9, 89);
setTile(thx[n]+10, yy, thz[n], 89);
setTile(thx[n]+9, yy, thz[n]-9, 89);
setTile(thx[n], yy, thz[n]+10, 89);
setTile(thx[n], yy, thz[n]-10, 89);
setTile(thx[n]-9, yy, thz[n]+9, 89);
setTile(thx[n]-10, yy, thz[n], 89);
setTile(thx[n]-9, yy, thz[n]-9, 89);
}
}
if(th4a[n]==1735){
for(var yy=thy[n]+4;yy<thy[n]+7;yy++){
setTile(thx[n]+9, yy, thz[n]+9, 89);
setTile(thx[n]+10, yy, thz[n], 89);
setTile(thx[n]+9, yy, thz[n]-9, 89);
setTile(thx[n], yy, thz[n]+10, 89);
setTile(thx[n], yy, thz[n]-10, 89);
setTile(thx[n]-9, yy, thz[n]+9, 89);
setTile(thx[n]-10, yy, thz[n], 89);
setTile(thx[n]-9, yy, thz[n]-9, 89);
}
}
if(th4a[n]==1730){
for(var yy=thy[n]+1;yy<thy[n]+4;yy++){
setTile(thx[n]+9, yy, thz[n]+9, 89);
setTile(thx[n]+10, yy, thz[n], 89);
setTile(thx[n]+9, yy, thz[n]-9, 89);
setTile(thx[n], yy, thz[n]+10, 89);
setTile(thx[n], yy, thz[n]-10, 89);
setTile(thx[n]-9, yy, thz[n]+9, 89);
setTile(thx[n]-10, yy, thz[n], 89);
setTile(thx[n]-9, yy, thz[n]-9, 89);
}
}
if(th4a[n]==1725){
ESP.antiLack(3);
explode(thx[n]+9, thy[n]+1, thz[n]+9, 4);
explode(thx[n]+10, thy[n]+1, thz[n], 4);
explode(thx[n]+9, thy[n]+1, thz[n]-9, 4);
explode(thx[n], thy[n]+1, thz[n]+10, 4);
explode(thx[n], thy[n]+1, thz[n]-10, 4);
explode(thx[n]-9, thy[n]+1, thz[n]+9, 4);
explode(thx[n]-10, thy[n]+1, thz[n], 4);
explode(thx[n]-9, thy[n]+1, thz[n]-9, 4);
explode(thx[n]+9, thy[n]+3, thz[n]+9, 3);
explode(thx[n]+10, thy[n]+3, thz[n], 3);
explode(thx[n]+9, thy[n]+3, thz[n]-9, 3);
explode(thx[n], thy[n]+3, thz[n]+10, 3);
explode(thx[n], thy[n]+3, thz[n]-10, 3);
explode(thx[n]-9, thy[n]+3, thz[n]+9, 3);
explode(thx[n]-10, thy[n]+3, thz[n], 3);
explode(thx[n]-9, thy[n]+3, thz[n]-9, 3);
for(var xx=thx[n]-14;xx<thx[n]+15;xx++)
for(var zz=thz[n]-14;zz<thz[n]+15;zz++)
if(getTile(xx, thy[n]+2, zz)==89){
setTile(xx, thy[n]+2, zz, 0);
}
for(var xx=thx[n]-10;xx<thx[n]+11;xx++){
for(var yy=thy[n]+5;yy<thy[n]+9;yy++){
for(var zz=thz[n]-10;zz<thz[n]+11;zz++){
if(getTile(xx, yy, zz)==89){
setTile(xx,yy,zz,0);
}
}}}
}
if(th4a[n]==1720){
for(var xx=thx[n]-10;xx<thx[n]+11;xx++){
for(var yy=thy[n]+1;yy<thy[n]+5;yy++){
for(var zz=thz[n]-10;zz<thz[n]+11;zz++){
if(getTile(xx, yy, zz)==89){
setTile(xx,yy,zz,0);
}
}}}
}
if(th4a[n]==1690){
for(var xx=thx[n]-10;xx<thx[n]+11;xx++){
for(var yy=thy[n]+9;yy<thy[n]+12;yy++){
for(var zz=thz[n]-10;zz<thz[n]+11;zz++){
if(getTile(xx, yy, zz)==89){
setTile(xx,yy,zz,0);
}
}}}
}
if(th4a[n]==1675){
setTile(thx[n], thy[n]+10, thz[n], 0);
setTile(thx[n]+9, thy[n]+9, thz[n]+9, 0);
setTile(thx[n]+9, thy[n]+9, thz[n]-9, 0);
setTile(thx[n]-9, thy[n]+9, thz[n]+9, 0);
setTile(thx[n]-9, thy[n]+9, thz[n]-9, 0);
setTile(thx[n]+10, thy[n]+9, thz[n], 0);
setTile(thx[n]-10, thy[n]+9, thz[n], 0);
setTile(thx[n], thy[n]+9, thz[n]+10, 0);
setTile(thx[n], thy[n]+9, thz[n]-10, 0);
}
if(th3a[n]==298){
ESP.antiLack(3);
for(var yy=thyb[n]+2;yy<thyb[n]+7;yy++)
explode(thxb[n], yy, thzb[n], 1.5);
explode(thxb[n], thyb, thzb[n], 3);
}
}}
if(tnt[0]!=null){
for(var n in tnt){
if(tn2a[n]==295){
explode(tnx[n], tny[n]+2.5, tnz[n], 1);
}
if(tn4a[n]==1785){
ESP.antiLack(90);
setTile(tnx2[n], tny2[n], tnz2[n], 2);
explode(tnx2[n]+5, tny2[n]-1, tnz2[n], 1.5);
explode(tnx2[n]-5, tny2[n]-1, tnz2[n], 1.5);
explode(tnx2[n], tny2[n]-1, tnz2[n]+5, 1.5);
explode(tnx2[n], tny2[n]-1, tnz2[n]-5, 1.5);
}
}}
if(trap[0]!=null){
for(var n in trap){
if(tr3a[n]==150){
setTile(trx3[n], try3[n]+1, trz3[n], 0);
}
if(tr4a[n]==1350){
for(var xx=trx4[n]-4;xx<trx4[n]+5;xx++){
for(var zz=trz4[n]-4;zz<trz4[n]+5;zz++){
for(var yy=try4[n]+1;yy<try4[n]+5;yy++)
setTile(xx,yy,zz,0);
setTile(xx,try4[n],zz,2);}}
}
if(tr4a[n]==1770){
explode(trx4[n], try4[n]+2, trz4[n], 2.5);
}
if(tr4a[n]==1710){
explode(trx4[n], try4+1[n], trz4[n], 2.5);
}
if(tr4a==1650){
Level.spawnMob(trx4[n]+2.5, try4[n]+2, trz4[n]+2.5, 65);
Level.spawnMob(trx4[n]+2.5, try4[n]+2, trz4[n]-2.5, 65);
Level.spawnMob(trx4[n]-2.5, try4[n]+2, trz4[n]+2.5, 65);
Level.spawnMob(trx4[n]-2.5, try4[n]+2, trz4[n]-2.5, 65);
}
}}
if(bind[0]!=null){
for(var n in bind){
if(bb4a[n]==1500){
bb4c[n] = false;
}
if(bb4c[n]==true){
bbxa[n] = Entity.getX(bb4b[n]);
if(ESP.isPlayer(bb4b))
bbya[n] = Entity.getY(bb4b[n])-1;
else
bbya[n] = Entity.getY(bb4b[n]);
bbza[n] = Entity.getZ(bb4b[n]);
setTile(bbxa[n], bbya[n], bbza[n], 30);
}
}}
if(meca[0]!=null){
for(var n in meca){
if(mm1a[n]==140){
for(var mm=5.5;mm<20;mm++)
explode(px+mm*sin, mmy1[n]+2, pz+mm*cos, 1.7);
}
if(mm1a[n]==100){
for(var xx=mmx1[n]-7;xx<mmx1[n]+8;xx++)
for(var yy=mmy1[n];yy<mmy1[n]+4;yy++)
for(var zz=mmz1[n]-7;zz<mmz1[n]+8;zz++)
if(getTile(xx, yy, zz)==247){
setTile(xx, yy, zz, 0);
}
setTile(xx, mmy1[n], zz, 2);
}
if(mm3a[n]==285){
setTile(mmx2[n], mmy2[n]+2, mmz2[n], 89);
}
if(mm3a[n]==280){
setTile(mmx2[n], mmy2[n]+2, mmz2[n], 0);
setTile(mmx[n], mmy[n]+9, mmz[n], 89);
}
if(mm3a[n]==275){
Level.spawnMob(mmx[n]+0.5, mmy[n]+9.4, mmz[n]+0.5, 65);
setTile(mmx[n], mmy[n]+9, mmz[n], 0);
}
if(mm3a[n]==200){
setTile(mmx2[n], mmy2[n]+1, mmz2[n], 0);
setTile(mmx2[n]+1, mmy2[n]+1, mmz2[n], 0);
setTile(mmx2[n]-1, mmy2[n]+1, mmz2[n], 0);
setTile(mmx2[n], mmy2[n]+1, mmz2[n]+1, 0);
setTile(mmx2[n], mmy2[n]+1, mmz2[n]-1, 0);
setTile(mmx[n]+1, mmy[n]+9, mmz[n], 0);
setTile(mmx[n]-1, mmy[n]+9, mmz[n], 0);
setTile(mmx[n], mmy[n]+9, mmz[n]+1, 0);
setTile(mmx[n], mmy[n]+9, mmz[n]-1, 0);
}
if(mm2a[n]==285){
ESP.antiLack(3);
setTile(mmx2a[n]+7, mmy2a[n], mmz2a[n], 0);
setTile(mmx2a[n], mmy2a[n], mmz2a[n]-7, 0);
setTile(mmx2a[n], mmy2a[n], mmz2a[n]+7, 0);
setTile(mmx2a[n]-7, mmy2a[n], mmz2a[n], 0);
explode(mmx2a[n]+7, mmy2a[n]+2, mmz2a[n], 3);
explode(mmx2a[n], mmy2a[n]+2, mmz2a[n]-7, 3);
explode(mmx2a[n], mmy2a[n]+2, mmz2a[n]+7, 3);
explode(mmx2a[n]-7, mmy2a[n]+2, mmz2a[n], 3);
for(var xx=mmx2a[n]-6;xx<mmx2a[n]+7;xx++)
setTile(xx, mmy2a[n], mmz2a[n], 247);
for(var zz=mmz2a[n]-6;zz<mmz2a[n]+7;zz++)
setTile(mmx2a[n], mmy2a[n], zz, 247);
}
if(mm4a[n]==1795){
for(var xx=mmx4[n]-3;xx<mmx4[n]+4;xx++)
setTile(xx, mmy4[n], mmz4[n], 247);
for(var zz=mmz4[n]-3;zz<mmz4[n]+4;zz++)
setTile(mmx4[n], mmy4[n], zz, 247);
}
if(mm4a[n]==1790){
for(var yy=mmy4[n];yy<mmy4[n]+3;yy++){
setTile(mmx4[n]+3, yy, mmz4[n], 247);
setTile(mmx4[n]-3, yy, mmz4[n], 247);
setTile(mmx4[n], yy, mmz4[n]+3, 247);
setTile(mmx4[n], yy, mmz4[n]-3, 247);
}
}
if(mm4a[n]==1785){
for(var yy=mmy4[n]+3;yy<mmy4[n]+5;yy++){
setTile(mmx4[n]+3, yy, mmz4[n], 247);
setTile(mmx4[n]-3, yy, mmz4[n], 247);
setTile(mmx4[n], yy, mmz4[n]+3, 247);
setTile(mmx4[n], yy, mmz4[n]-3, 247);
}
}
if(mm4a[n]==1780){
setTile(mmx4[n]+4, mmy4[n]+4, mmz4[n], 247);
setTile(mmx4[n]+5, mmy4[n]+4, mmz4[n], 247);
setTile(mmx4[n]-4, mmy4[n]+4, mmz4[n], 247);
setTile(mmx4[n]-5, mmy4[n]+4, mmz4[n], 247);
setTile(mmx4[n], mmy4[n]+4, mmz4[n]+4, 247);
setTile(mmx4[n], mmy4[n]+4, mmz4[n]+5, 247);
setTile(mmx4[n], mmy4[n]+4, mmz4[n]-4, 247);
setTile(mmx4[n], mmy4[n]+4, mmz4[n]-5, 247);
}
if(mm4a[n]==1775){
for(var xx=mmx4[n]-6;xx<mmx4[n]+7;xx++)
for(var zz=mmz4[n]-6;zz<mmz4[n]+7;zz++)
setTile(xx, mmy4[n]+5, zz, 247);
for(var xx=mmx4[n]-5;xx<mmx4[n]+6;xx++)
for(var zz=mmz4[n]-5;zz<mmz4[n]+6;zz++)
setTile(xx, mmy4[n]+5, zz, 0);
}
if(mm4a[n]==1770){
setTile(mmx4[n]+7, mmy4[n]+5, mmz4[n], 247);
setTile(mmx4[n]-7, mmy4[n]+5, mmz4[n], 247);
setTile(mmx4[n], mmy4[n]+5, mmz4[n]+7, 247);
setTile(mmx4[n], mmy4[n]+5, mmz4[n]-7, 247);
setTile(mmx4[n]+7, mmy4[n]+5, mmz4[n]+7, 247);
setTile(mmx4[n]-7, mmy4[n]+5, mmz4[n]-7, 247);
setTile(mmx4[n]-7, mmy4[n]+5, mmz4[n]+7, 247);
setTile(mmx4[n]+7, mmy4[n]+5, mmz4[n]-7, 247);
}
if(mm4a[n]==1765){
ESP.antiLack(3);
for(var yy=mmy4[n];yy<mmy4[n]+4;yy++){
explode(mmx4[n]+7, yy, mmz4[n], 2);
explode(mmx4[n]-7, yy, mmz4[n], 2);
explode(mmx4[n], yy, mmz4[n]+7, 2);
explode(mmx4[n], yy, mmz4[n]-7, 2);
explode(mmx4[n]+7, yy, mmz4[n]+7, 2);
explode(mmx4[n]-7, yy, mmz4[n]-7, 2);
explode(mmx4[n]-7, yy, mmz4[n]+7, 2);
explode(mmx4[n]+7, yy, mmz4[n]-7, 2);
setTile(mmx4[n]+7, mmy4[n]+5, mmz4[n], 247);
setTile(mmx4[n]-7, mmy4[n]+5, mmz4[n], 247);
setTile(mmx4[n], mmy4[n]+5, mmz4[n]+7, 247);
setTile(mmx4[n], mmy4[n]+5, mmz4[n]-7, 247);
setTile(mmx4[n]+7, mmy4[n]+5, mmz4[n]+7, 247);
setTile(mmx4[n]-7, mmy4[n]+5, mmz4[n]-7, 247);
setTile(mmx4[n]-7, mmy4[n]+5, mmz4[n]+7, 247);
setTile(mmx4[n]+7, mmy4[n]+5, mmz4[n]-7, 247);
for(var xx=mmx4[n]-6;xx<mmx4[n]+7;xx++)
for(var zz=mmz4[n]-6;zz<mmz4[n]+7;zz++)
setTile(xx, mmy4[n]+5, zz, 247);
for(var xx=mmx4[n]-5;xx<mmx4[n]+6;xx++)
for(var zz=mmz4[n]-5;zz<mmz4[n]+6;zz++)
setTile(xx, mmy4[n]+5, zz, 0);
}
}
if(mm4a[n]==1700){
for(var xx=mmx4[n]-7;xx<mmx4[n]+8;xx++)
for(var yy=mmy4[n];yy<mmy4[n]+7;yy++)
for(var zz=mmz4[n]-7;zz<mmz4[n]+8;zz++)
if(getTile(xx, yy, zz)==247){
setTile(xx, yy, zz, 0);
}
if(auto==true){
for(var xx=mmx4[n]-3;xx<mmx4[n]+4;xx++)
for(var zz=mmz4[n]-3;zz<mmz4[n]+4;zz++)
setTile(xx, mmy4[n], zz, 2);
}
else if(auto==false){
setTile(mmx4[n], mmy4[n], mmz4[n], 2);
}
}
}}
if(heal[0]!=null){
for(var n in heal){
if(h4a[n]==1350){
for(var xx=hx[n]-1;xx<hx[n]+2;xx++)
for(var yy=hy[n]-1;yy<hy[n]+2;yy++)
for(var zz=hz[n]-1;zz<hz[n]+2;zz++)
if(getTile(xx, yy, zz)==89){
setTile(xx, yy, zz, 0);
}
}
if(h4a[n]>1350){
Entity.setHealth(heal[n], h4b[n]);
}
}}
if(nether[0]!=null){
for(var n in nether){
if(n2a[n]==125){
setTile(n2x[n], n2y[n]+1, n2z[n], 0);
}
if(n4a[n]==900){
if(auto==true){
for(var xx=nx[n]-12;xx<nx[n]+13;xx++){
for(var zz=nz[n]-12;zz<nz[n]+13;zz++){
setTile(xx, ny[n], zz, 2);
}
for(var yy=ny[n]+1;yy<ny[n]+8;yy++){
setTile(xx, yy, zz, 0);}}}
}
}}
if(cloud[0]!=null){
for(var n in cloud){
if(cc1a[n]==75){
for(var xx=ccx1[n]-1;xx<ccx1[n]+2;xx++)
for(var yy=ccy1[n]+1;yy<ccy1[n]+4;yy++)
for(var zz=ccz1[n]-1;zz<ccz1[n]+2;zz++)
if(getTile(xx, yy, zz)==35){
setTile(xx,yy,zz,0);
}
}
if(cc2a[n]==295){
ESP.antiLack(3);
explode(ccx2[n], ccy2[n]+1, ccz2[n], 3);
explode(ccx2[n], ccy2[n]+2, ccz2[n], 3);
}
if(cc2a[n]==280){
for(var xx=ccx[n]-1;xx<ccx[n]+2;xx++)
for(var yy=ccy[n]+5;yy<ccy[n]+7;yy++)
for(var zz=ccz[n]-1;zz<ccz[n]+2;zz++)
setTile(xx,yy,zz,0);
for(var yy=ccy[n]+1;yy<ccy[n]+5;yy++)
setTile(ccx[n], yy, ccz[n], 0);
}
if(cc4a[n]==1650){
ESP.antiLack(3);
explode(ccx[n]+8, ccy[n]+2, ccz[n]+8, 1);
explode(ccx[n]+8, ccy[n]+2, ccz[n], 1);
explode(ccx[n]+8, ccy[n]+2, ccz[n]-8, 1);
explode(ccx[n], ccy[n]+2, ccz[n]+8, 1);
explode(ccx[n], ccy[n]+2, ccz[n]-8, 1);
explode(ccx[n]-8, ccy[n]+2, ccz[n]+8, 1);
explode(ccx[n]-8, ccy[n]+2, ccz[n], 1);
explode(ccx[n]-8, ccy[n]+2, ccz[n]-8, 1);
explode(ccx[n]+8, ccy[n]+2, ccz[n]+8, 4);
explode(ccx[n]+8, ccy[n]+2, ccz[n], 4);
explode(ccx[n]+8, ccy[n]+2, ccz[n]-8, 4);
explode(ccx[n], ccy[n]+2, ccz[n]+8, 4);
explode(ccx[n], ccy[n]+2, ccz[n]-8, 4);
explode(ccx[n]-8, ccy[n]+2, ccz[n]+8, 4);
explode(ccx[n]-8, ccy[n]+2, ccz[n], 4);
explode(ccx[n]-8, ccy[n]+2, ccz[n]-8, 4);
}
if(cc4a[n]==1635){
ESP.antiLack(3);
explode(ccx[n], ccy[n]+2, ccz[n], 5);
}
if(cc4a[n]==1620){
for(var xx=ccx[n]-12;xx<ccx[n]+13;xx++){
for(var yy=ccy[n]+1;yy<ccy[n]+4;yy++)
for(var zz=ccz[n]-12;zz<ccz[n]+13;zz++){
setTile(xx, yy, zz, 0);
if(auto==true){
setTile(xx, ccy[n], zz, 2);
}
}}
if(auto==true){
for(var xx=ccx[n]-1;xx<ccx[n]+2;xx++)
for(var zz=ccz[n]-1;zz<ccz[n]+2;zz++)
setTile(xx, ccy[n]-1, zz, 3);
}
}
}}
if(arrow[0]!=null){
for(var n in arrow){
if(ar1a[n]==135){
setTile(ar1x[n], ar1y[n]+1, ar1z[n], 51);
setTile(ar1x[n]+1, ar1y[n]+1, ar1z[n], 51);
setTile(ar1x[n]-1, ar1y[n]+1, ar1z[n], 51);
setTile(ar1x[n], ar1y[n]+1, ar1z[n]+1, 51);
setTile(ar1x[n], ar1y[n]+1, ar1z[n]-1, 51);
}
if(ar2a[n]==285){
ESP.antiLack(3);
explode(arx2[n], ary2[n]+1, arz2[n], 3);
}
if(ar4a[n]==1760){
ESP.antiLack(3);
setTile(arx[n]+6, ary[n]+1, arz[n]+6, 0);
setTile(arx[n]+6, ary[n]+1, arz[n], 0);
setTile(arx[n]+6, ary[n]+1, arz[n]-6, 0);
setTile(arx[n], ary[n]+1, arz[n]+6, 0);
setTile(arx[n], ary[n]+1, arz[n]-6, 0);
setTile(arx[n]-6, ary[n]+1, arz[n]+6, 0);
setTile(arx[n]-6, ary[n]+1, arz[n], 0);
setTile(arx[n]-6, ary[n]+1, arz[n]-6, 0);
explode(arx[n]+6, ary[n]+2, arz[n]+6, 3.5);
explode(arx[n]+6, ary[n]+2, arz[n], 3.5);
explode(arx[n]+6, ary[n]+2, arz[n]-6, 3.5);
explode(arx[n], ary[n]+2, arz[n]+6, 3.5);
explode(arx[n], ary[n]+2, arz[n]-6, 3.5);
explode(arx[n]-6, ary[n]+2, arz[n]+6, 3.5);
explode(arx[n]-6, ary[n]+2, arz[n], 3.5);
explode(arx[n]-6, ary[n]+2, arz[n]-6, 3.5);
}
if(ar4a[n]==1715){
removeArrow();
}
if(ar4a[n]==1755){
autoRecovery(arx[n], ary[n]+1, arz[n], 10, 0);
}
if(ar4a==1650){
autoRecovery(arx[n], ary[n]+4, arz[n], 1, 0);
}
}}
if(mage[0]!=null){
for(var n in mage){
if(ma2a[n]==150){
setTile(max2[n]+2, may2[n]+1, maz2[n]+2, 0);
setTile(max2[n]+2, may2[n]+1, maz2[n]-2, 0);
setTile(max2[n]-2, may2[n]+1, maz2[n]+2, 0);
setTile(max2[n]-2, may2[n]+1, maz2[n]-2, 0);
}
if(ma4a[n]==1795){
explode(max[n]+6, may[n], maz[n], 3);
}
if(ma4a[n]==1790){
explode(max[n]+5, may[n], maz[n]-5, 3);
}
if(ma4a[n]==1785){
explode(max[n], may[n], maz[n]-6, 3);
}
if(ma4a[n]==1780){
explode(max[n]-5, may[n], maz[n]-5, 3);
}
if(ma4a[n]==1775){
explode(max[n]-6, may[n], maz[n], 3);
}
if(ma4a[n]==1770){
explode(max[n]-5, may[n], maz[n]+5, 3);
}
if(ma4a[n]==1765){
explode(max[n], may[n], maz[n]+6, 3);
}
if(ma4a[n]==1750){
ESP.antiLack(3);
explode(max[n]+6, may[n]+1, maz[n]+6, 3.5);
explode(max[n]+7, may[n]+1, maz[n], 3.5);
explode(max[n]+6, may[n]+1, maz[n]-6, 3.5);
explode(max[n], may[n]+1, maz[n]+7, 3.5);
explode(max[n], may[n]+1, maz[n]-7, 3.5);
explode(max[n]-6, may[n]+1, maz[n]+6, 3.5);
explode(max[n]-7, may[n]+1, maz[n], 3.5);
explode(max[n]-6, may[n]+1, maz[n]-6, 3.5);
}
}}
if(defense[0]!=null){
for(var n in defense){
if(de3a[n]==1){
de3b[n] = false;
}
if(de4a[n]==1785){
ESP.antiLack(3);
explode(dex[n]+5, dey[n]+1, dez[n]+5, 3);
explode(dex[n]+5, dey[n]+1, dez[n], 3);
explode(dex[n]+5, dey[n]+1, dez[n]-5, 3);
explode(dex[n], dey[n]+1, dez[n]+5, 3);
explode(dex[n], dey[n]+1, dez[n]-5, 3);
explode(dex[n]-5, dey[n]+1, dez[n]+5, 3);
explode(dex[n]-5, dey[n]+1, dez[n], 3);
explode(dex[n]-5, dey[n]+1, dez[n]-5, 3);
}
if(de4a[n]==1350&&de4b[n]==true){
for(var xx=dex[n]-2;xx<dex[n]+3;xx++){
for(var zz=dez[n]-2;zz<dez[n]+3;zz++){
for(var yy=dey[n]+1;yy<dey[n]+4;yy++)
setTile(xx, yy, zz, 0);
setTile(xx, dey[n], zz, 2);}}
de4b[n] = false;
}
}}
if(poison[0]!=null){
for(var n in poison){
if(p1a[n]==255){
Entity.setHealth(p1b[n], Entity.getHealth(v)-2);
}
if(p2a[n]==270){
ESP.antiLack(3);
explode(p2xa[n], p2ya[n]+2, p2za[n], 3);
}
if(p3a[n]==285){
Entity.setHealth(p3b[n], Entity.getHealth(p3b[n])-2);
}
if(p3a[n]==270){
Entity.setHealth(p3b[n], Entity.getHealth(p3b[n])-2);
}
if(p3a[n]==255){
Entity.setHealth(p3b[n], Entity.getHealth(p3b[n])-2);
}
if(p3a[n]==240){
Entity.setHealth(p3b[n], Entity.getHealth(p3b[n])-2);
}
if(p4a[n]==1770){
ESP.antiLack(3);
explode(p4x[n]+5, p4y[n]+2, p4z[n]+5, 3);
explode(p4x[n]+5, p4y[n]+2, p4z[n], 3);
explode(p4x[n]+5, p4y[n]+2, p4z[n]-5, 3);
explode(p4x[n], p4y[n]+2, p4z[n]+5, 3);
explode(p4x[n], p4y[n]+2, p4z[n]-5, 3);
explode(p4x[n]-5, p4y[n]+2, p4z[n]+5, 3);
explode(p4x[n]-5, p4y[n]+2, p4z[n], 3);
explode(p4x[n]-5, p4y[n]+2, p4z[n]-5, 3);
if(auto==true){
for(var xx=p4x[n]-9;xx<p4x[n]+10;xx++){
for(var zz=p4z[n]-9;zz<p4z[n]+10;zz++){
setTile(xx, p4y[n]-1, zz, 3);
setTile(xx, p4y[n], zz, 2);}}
}
}
if(p4a[n]==1760){
ESP.antiLack(3);
explode(p4x[n]+5, p4y[n]+3, p4z[n]+5, 3);
explode(p4x[n]+5, p4y[n]+3, p4z[n], 3);
explode(p4x[n]+5, p4y[n]+3, p4z[n]-5, 3);
explode(p4x[n], p4y[n]+3, p4z[n]+5, 3);
explode(p4x[n], p4y[n]+3, p4z[n]-5, 3);
explode(p4x[n]-5, p4y[n]+3, p4z[n]+5, 3);
explode(p4x[n]-5, p4y[n]+3, p4z[n], 3);
explode(p4x[n]-5, p4y[n]+3, p4z[n]-5, 3);
if(auto==true){
for(var xx=p4x[n]-9;xx<p4x[n]+10;xx++){
for(var zz=p4z[n]-9;zz<p4z[n]+10;zz++){
setTile(xx, p4y[n]-1, zz, 3);
setTile(xx, p4y[n], zz, 2);}}
}
}
if(p4a[n]==1730){
for(var xx=p4x[n]-9;xx<p4x[n]+10;xx++)
for(var yy=p4y[n]+1;yy<p4y[n]+4;yy++)
for(var zz=p4z[n]-9;zz<p4z[n]+10;zz++)
setTile(xx, yy, zz, 0);
}
}}
if(melt[0]!=null){
for(var n in melt){
if(me1a[n]==75){
for(var xx=me1x[n]-1;xx<me1x[n]+2;xx++)
for(var zz=me1z[n]-1;zz<me1z[n]+2;zz++)
if(getTile(xx, me1y[n]+1, zz)==11){
setTile(xx, me1y[n]+1, zz, 0);
}
}
if(me2a[n]==150){
if(mexa[n]>meza[n]){
setTile(me2x[n], me2y[n]+1, me2z[n]+1, 0);
setTile(me2x[n], me2y[n]+1, me2z[n]-1, 0);
setTile(me2x[n], me2y[n]+3, me2z[n]+1, 0);
setTile(me2x[n], me2y[n]+3, me2z[n]-1, 0);
}
else if(mexa[n]<meza[n]){
setTile(me2x[n]+1, me2y[n]+1, me2z[n], 0);
setTile(me2x[n]-1, me2y[n]+1, me2z[n], 0);
setTile(me2x[n]+1, me2y[n]+3, me2z[n], 0);
setTile(me2x[n]-1, me2y[n]+3, me2z[n], 0);
}
setTile(me2x[n], me2y[n]+2, me2z[n], 0);
}
if(me4a[n]==1350){
for(var xx=mex[n]-5;xx<mex[n]+6;xx++){
for(var zz=mez[n]-5;zz<mez[n]+6;zz++){
for(var yy=mey[n]+1;yy<mey[n]+5;yy++)
if(getTile(xx, yy, zz)!=0){
setTile(xx, yy, zz, 0);
}
setTile(xx, mey[n], zz, 2);
}}
}
}}
if(hfreeze[0]!=null){
for(var n in hfreeze){
if(hf1a[n]==145){
ESP.antiLack(3);
setTile(hf1x[n], hf1y[n]+1, hf1z[n], 0);
setTile(hf1x[n], hf1y[n]+2, hf1z[n], 0);
explode(hf1x[n], hf1y[n]+1, hf1z[n], 2.5);
}
if(hf2a[n]==1){
for(var xx=hf2x[n]-1;xx<hf2x[n]+2;xx++){
for(var zz=hf2z[n]-1;zz<hf2z[n]+2;zz++){
setTile(xx, hf2y[n]+2, hf2z[n]+2, 0);
setTile(xx, hf2y[n]+2, hf2z[n]-2, 0);
setTile(hf2x[n]+2, hf2y[n]+2, zz, 0);
setTile(hf2x[n]-2, hf2y[n]+2, zz, 0);
setTile(xx, hf2y[n], zz, 2);
}}
}
if(hf3a[n]==150){
hf3b[n] = false;
hf3c[n] = -1;
}
if(hf3c[n]>0){
hf3c[n]--;
}
if(hf3b[n]==true){
hf3x[n] = Entity.getX(hfreeze[n]);
hf3y[n] = Entity.getY(hfreeze[n])-2;
hf3z[n] = Entity.getZ(hfreeze[n]);
for(var xx=hf3x[n]-1;xx<hf3x[n]+2;xx++)
for(var zz=hf3z[n]-1;zz<hf3z[n]+2;zz++)
if(getTile(xx, hf3y[n], zz)!=7){
setTile(xx, hf3y[n], zz, 79);
}
}
if(hf3c[n]==-1){
hf3x[n] = Entity.getX(hfreeze[n]);
hf3y[n] = Entity.getY(hfreeze[n])-5;
hf3z[n] = Entity.getZ(hfreeze[n]);
if(getTile(hf3x[n], hf3y[n], hf3z[n])!=0){
for(var xx=hf3x[n]-1;xx<hf3x[n]+2;xx++)
for(var zz=hf3z[n]-1;zz<hf3z[n]+2;zz++)
if(getTile(xx, hf3y[n]+2, zz)==0){
setTile(xx, hf3y[n]+2, zz, 30);
}
hf3c[n] = 16;
}
}
if(hf3c[n]==1){
for(var xx=hf3x[n]-1;xx<hf3x[n]+2;xx++)
for(var zz=hf3z[n]-1;zz<hf3z[n]+2;zz++)
if(getTile(xx, hf3y[n]+2, zz)==30){
setTile(xx, hf3y[n]+2, zz, 0);
}
}
if(hf4a[n]==1795){
for(var yy=hfy[n]+9;yy<hfy[n]+11;yy++){
setTile(hfx[n]+5, yy, hfz[n]+5, 0);
setTile(hfx[n]+7, yy, hfz[n], 0);
setTile(hfx[n]+5, yy, hfz[n]-5, 0);
setTile(hfx[n], yy, hfz[n]+7, 0);
setTile(hfx[n], yy, hfz[n]-7, 0);
setTile(hfx[n]-5, yy, hfz[n]+5, 0);
setTile(hfx[n]-7, yy, hfz[n], 0);
setTile(hfx[n]-5, yy, hfz[n]-5, 0);
}
for(var yy=hfy[n]+7;yy<hfy[n]+9;yy++){
setTile(hfx[n]+5, yy, hfz[n]+5, 79);
setTile(hfx[n]+7, yy, hfz[n], 79);
setTile(hfx[n]+5, yy, hfz[n]-5, 79);
setTile(hfx[n], yy, hfz[n]+7, 79);
setTile(hfx[n], yy, hfz[n]-7, 79);
setTile(hfx[n]-5, yy, hfz[n]+5, 79);
setTile(hfx[n]-7, yy, hfz[n], 79);
setTile(hfx[n]-5, yy, hfz[n]-5, 79);
}
}
if(hf4a[n]==1790){
for(var yy=hfy[n]+9;yy<hfy[n]+11;yy++){
setTile(hfx[n]+5, yy, hfz[n]+5, 0);
setTile(hfx[n]+7, yy, hfz[n], 0);
setTile(hfx[n]+5, yy, hfz[n]-5, 0);
setTile(hfx[n], yy, hfz[n]+7, 0);
setTile(hfx[n], yy, hfz[n]-7, 0);
setTile(hfx[n]-5, yy, hfz[n]+5, 0);
setTile(hfx[n]-7, yy, hfz[n], 0);
setTile(hfx[n]-5, yy, hfz[n]-5, 0);
}
for(var yy=hfy[n]+7;yy<hfy[n]+9;yy++){
setTile(hfx[n]+5, yy, hfz[n]+5, 79);
setTile(hfx[n]+7, yy, hfz[n], 79);
setTile(hfx[n]+5, yy, hfz[n]-5, 79);
setTile(hfx[n], yy, hfz[n]+7, 79);
setTile(hfx[n], yy, hfz[n]-7, 79);
setTile(hfx[n]-5, yy, hfz[n]+5, 79);
setTile(hfx[n]-7, yy, hfz[n], 79);
setTile(hfx[n]-5, yy, hfz[n]-5, 79);
}
}
if(hf4a[n]==1785){
for(var yy=hfy[n]+7;yy<hfy[n]+9;yy++){
setTile(hfx[n]+5, yy, hfz[n]+5, 0);
setTile(hfx[n]+7, yy, hfz[n], 0);
setTile(hfx[n]+5, yy, hfz[n]-5, 0);
setTile(hfx[n], yy, hfz[n]+7, 0);
setTile(hfx[n], yy, hfz[n]-7, 0);
setTile(hfx[n]-5, yy, hfz[n]+5, 0);
setTile(hfx[n]-7, yy, hfz[n], 0);
setTile(hfx[n]-5, yy, hfz[n]-5, 0);
}
for(var yy=hfy[n]+5;yy<hfy[n]+7;yy++){
setTile(hfx[n]+5, yy, hfz[n]+5, 79);
setTile(hfx[n]+7, yy, hfz[n], 79);
setTile(hfx[n]+5, yy, hfz[n]-5, 79);
setTile(hfx[n], yy, hfz[n]+7, 79);
setTile(hfx[n], yy, hfz[n]-7, 79);
setTile(hfx[n]-5, yy, hfz[n]+5, 79);
setTile(hfx[n]-7, yy, hfz[n], 79);
setTile(hfx[n]-5, yy, hfz[n]-5, 79);
}
}
if(hf4a[n]==1780){
for(var yy=hfy[n]+5;yy<hfy[n]+7;yy++){
setTile(hfx[n]+5, yy, hfz[n]+5, 0);
setTile(hfx[n]+7, yy, hfz[n], 0);
setTile(hfx[n]+5, yy, hfz[n]-5, 0);
setTile(hfx[n], yy, hfz[n]+7, 0);
setTile(hfx[n], yy, hfz[n]-7, 0);
setTile(hfx[n]-5, yy, hfz[n]+5, 0);
setTile(hfx[n]-7, yy, hfz[n], 0);
setTile(hfx[n]-5, yy, hfz[n]-5, 0);
}
for(var yy=hfy[n]+3;yy<hfy[n]+5;yy++){
setTile(hfx[n]+5, yy, hfz[n]+5, 79);
setTile(hfx[n]+7, yy, hfz[n], 79);
setTile(hfx[n]+5, yy, hfz[n]-5, 79);
setTile(hfx[n], yy, hfz[n]+7, 79);
setTile(hfx[n], yy, hfz[n]-7, 79);
setTile(hfx[n]-5, yy, hfz[n]+5, 79);
setTile(hfx[n]-7, yy, hfz[n], 79);
setTile(hfx[n]-5, yy, hfz[n]-5, 79);
}
}
if(hf4a[n]==1775){
for(var yy=hfy[n]+3;yy<hfy[n]+5;yy++){
setTile(hfx[n]+5, yy, hfz[n]+5, 0);
setTile(hfx[n]+7, yy, hfz[n], 0);
setTile(hfx[n]+5, yy, hfz[n]-5, 0);
setTile(hfx[n], yy, hfz[n]+7, 0);
setTile(hfx[n], yy, hfz[n]-7, 0);
setTile(hfx[n]-5, yy, hfz[n]+5, 0);
setTile(hfx[n]-7, yy, hfz[n], 0);
setTile(hfx[n]-5, yy, hfz[n]-5, 0);
}
for(var yy=hfy[n]+1;yy<hfy[n]+3;yy++){
setTile(hfx[n]+5, yy, hfz[n]+5, 79);
setTile(hfx[n]+7, yy, hfz[n], 79);
setTile(hfx[n]+5, yy, hfz[n]-5, 79);
setTile(hfx[n], yy, hfz[n]+7, 79);
setTile(hfx[n], yy, hfz[n]-7, 79);
setTile(hfx[n]-5, yy, hfz[n]+5, 79);
setTile(hfx[n]-7, yy, hfz[n], 79);
setTile(hfx[n]-5, yy, hfz[n]-5, 79);
}
}
if(hf4a[n]==1770){
for(var yy=hfy[n]+1;yy<hfy[n]+3;yy++){
setTile(hfx[n]+5, yy, hfz[n]+5, 0);
setTile(hfx[n]+7, yy, hfz[n], 0);
setTile(hfx[n]+5, yy, hfz[n]-5, 0);
setTile(hfx[n], yy, hfz[n]+7, 0);
setTile(hfx[n], yy, hfz[n]-7, 0);
setTile(hfx[n]-5, yy, hfz[n]+5, 0);
setTile(hfx[n]-7, yy, hfz[n], 0);
setTile(hfx[n]-5, yy, hfz[n]-5, 0);
}
ESP.antiLack(3);
explode(hfx[n]+5, hfy[n]+1, hfz[n]+5, 3);
explode(hfx[n]+7, hfy[n]+1, hfz[n], 3);
explode(hfx[n]+5, hfy[n]+1, hfz[n]-5, 3);
explode(hfx[n], hfy[n]+1, hfz[n]+7, 3);
explode(hfx[n], hfy[n]+1, hfz[n]-7, 3);
explode(hfx[n]-5, hfy[n]+1, hfz[n]+5, 3);
explode(hfx[n]-7, hfy[n]+1, hfz[n], 3);
explode(hfx[n]-5, hfy[n]+1, hfz[n]-5, 3);
explode(hfx[n]+5, hfy[n]+2, hfz[n]+5, 2);
explode(hfx[n]+7, hfy[n]+2, hfz[n], 2);
explode(hfx[n]+5, hfy[n]+2, hfz[n]-5, 2);
explode(hfx[n], hfy[n]+2, hfz[n]+7, 2);
explode(hfx[n], hfy[n]+2, hfz[n]-7, 2);
explode(hfx[n]-5, hfy[n]+2, hfz[n]+5, 2);
explode(hfx[n]-7, hfy[n]+2, hfz[n], 2);
explode(hfx[n]-5, hfy[n]+2, hfz[n]-5, 2);
}
}}
if(builder[0]!=null){
for(var n in builder){
if(bu2a[n]==1){
bu2b[n] = false;
}
if(bu3a[n]==1){
bu3b[n] = false;
}
if(bu4a[n]==900&&bu4b[n]==true){
ESP.antiLack(3);
for(var xx=bux[n]-5;xx<bux[n]+5;xx++)
for(var yy=buy[n]+1;yy<buy[n]+15;yy++)
for(var zz=buz[n]-4;zz<buz[n]+5;zz++)
setTile(xx, yy, zz, 0);
bu4b[n] = false;
}
}}
if(soldier[0]!=null){
for(var n in soldier){
if(so1a[n]==148){
setTile(px+3*sin, py+2, pz+3*cos, 0);
setTile(px+5*sin, py+2, pz+5*cos, 173);
}
if(so1a[n]==146){
setTile(px+5*sin, py+2, pz+5*cos, 0);
ESP.antiLack(3);
explode(px+6*sin, py+2, pz+6*cos, 1);
setTile(px+7*sin, py+2, pz+7*cos, 173);
}
if(so1a[n]==144){
setTile(px+7*sin, py+2, pz+7*cos, 0);
setTile(px+9*sin, py+2, pz+9*cos, 173);
}
if(so1a[n]==142){
setTile(px+9*sin, py+2, pz+9*cos, 0);
explode(px+8*sin, py+2, pz+8*cos, 1);
setTile(px+11*sin, py+2, pz+11*cos, 173);
}
if(so1a[n]==140){
setTile(px+11*sin, py+2, pz+11*cos, 0);
setTile(px+13*sin, py+2, pz+13*cos, 173);
}
if(so1a[n]==138){
setTile(px+13*sin, py+2, pz+13*cos, 0);
explode(px+14*sin, py+2, pz+14*cos, 1);
setTile(px+15*sin, py+2, pz+15*cos, 173);
}
if(so1a[n]==136){
setTile(px+15*sin, py+2, pz+15*cos, 0);
setTile(px+17*sin, py+2, pz+17*cos, 173);
}
if(so1a[n]==134){
setTile(px+17*sin, py+2, pz+17*cos, 0);
explode(px+18*sin, py+2, pz+18*cos, 1);
setTile(px+19*sin, py+2, pz+19*cos, 173);
}
if(so1a[n]==132){
setTile(px+19*sin, py+2, pz+19*cos, 0);
setTile(px+21*sin, py+2, pz+21*cos, 173);
}
if(so1a[n]==130){
setTile(px+21*sin, py+2, pz+21*cos, 0);
ESP.antiLack(3);
explode(px+21*sin, py+2, pz+21*cos, 2.5);
}
if(so2a[n]==1){
so2b = false;
}
if(so4a[n]==900&&so4b[n]!=0){
for(var xx=sox[n]-3;xx<sox[n]+4;xx++){
for(var zz=soz[n]-3;zz<soz[n]+4;zz++){
for(var yy=soy[n]+1;yy<soy[n]+5;yy++)
setTile(xx, yy, zz, 0);
setTile(xx, soy[n], zz, 2);
}}
so4b[n] = 0;
}
if(so4c[n]==true){
if(so4a[n]==930){
if(auto==true)
autoRecover(sox[n], soy[n], soz[n], 12, 2);
if(so4b[n]!=0){
autoRecover(sox[n], soy[n], soz[n], 3, 49);
setTile(xx, soy[n], zz, 49);
so4c[n] = false;
}
}
if(auto==true){
if(so4a[n]==960)
autoRecover(sox[n], soy[n]-1, soz[n], 12, 3);
if(so4a[n]==960)
autoRecover(sox[n], soy[n]-2, soz[n], 12, 3);
if(so4a[n]==960)
autoRecover(sox[n], soy[n]-3, soz[n], 12, 3);
if(so4a[n]==960)
autoRecover(sox[n], soy[n]-4, soz[n], 12, 3);
}
}
}}
if(assault[0]!=null){
for(var n in assault){
if(asu2a[n]==275){
ESP.antiLack(3);
explode(asu2x[n], asu2y[n]+1.5, asu2z[n], 2.5);
for(var xx=asu2x[n]-4;xx<asu2x[n]+5;xx++)
for(var yy=asu2y[n]-4;yy<asu2y[n]+1;yy++)
for(var zz=asu2z[n]-4;zz<asu2z[n]+5;zz++)
if(getTile(xx, yy, zz)==0){
setTile(xx, yy, zz, 51);
}
}
}}
if(burst[0]!=null){
for(var n in burst){
if(bus1a[n]==1){
bus1b[n] = false;
}
}}
if(warrior[0]!=null){
for(var n in warrior){
if(wa1a[n]==145){
ESP.antiLack(3);
explode(wa1x[n]+waxa[n], wa1y[n], wa1z[n]+waza[n], 2);
}
if(wa1a==140){
explode(wa1x[n]+2*waxa[n], wa1y[n], wa1z[n]+2*waza[n], 2);
}
if(wa2a[n]==295){
setTile(px-sin, py+1, pz-cos, 0);
setTile(px-sin, py+3, pz-cos, 0);
setTile(px-2*sin, py+2, pz-2*cos, 0);
setTile(px-3*sin, py+1, pz-3*cos, 0);
for(var ss=3;ss<8;ss++)
setTile(px-ss*sin, py+ss, pz-ss*cos, 0);
setTile(px, py+1, pz, 17);
setTile(px+sin, py+2, pz+cos, 41);
setTile(px, py+2, pz, 41);
setTile(px-sin, py+2, pz-cos, 41);
for(var ss=3;ss<8;ss++)
setTile(px, py+ss, pz, 42);
}
if(wa2a[n]==290){
setTile(px, py+1, pz, 0);
setTile(px+sin, py+2, pz+cos, 0);
setTile(px, py+2, pz, 0);
setTile(px-sin, py+2, pz-cos, 0);
for(var ss=3;ss<8;ss++)
setTile(px, py+ss, pz, 0);
setTile(px+sin, py+1, pz+cos, 17);
setTile(px+sin, py+3, pz+cos, 41);
setTile(px+2*sin, py+2, pz+2*cos, 41);
setTile(px+3*sin, py+1, pz+3*cos, 41);
for(var ss=3;ss<8;ss++)
setTile(px+ss*sin, py+ss, pz+ss*cos, 42);
}
if(wa2a[n]==285){
setTile(px, py, pz, 0);
setTile(px+sin, py+1, pz+cos, 0);
setTile(px+sin, py+3, pz+cos, 0);
setTile(px+2*sin, py+2, pz+2*cos, 0);
setTile(px+3*sin, py+1, pz+3*cos, 0);
for(var ss=3;ss<8;ss++)
setTile(px+ss*sin, py+ss, pz+ss*cos, 0);
setTile(px+sin, py-1, pz+cos, 17);
setTile(px+2*sin, py-1, pz+2*cos, 17);
setTile(px+3*sin, py-1, pz+3*cos, 41);
setTile(px+3*sin, py, pz+3*cos, 41);
setTile(px+3*sin, py-2, pz+3*cos, 41);
for(var ss=4;ss<9;ss++)
setTile(px+ss*sin, py-1, pz+ss*cos, 42);
}
if(wa2a[n]==280){
setTile(px+sin, py-1, pz+cos, 0);
setTile(px+2*sin, py-1, pz+2*cos, 0);
setTile(px+3*sin, py-1, pz+3*cos, 0);
setTile(px+3*sin, py, pz+3*cos, 0);
setTile(px+3*sin, py-2, pz+3*cos, 0);
for(var ss=4;ss<9;ss++)
setTile(px+ss*sin, py-1, pz+ss*cos, 0);
ESP.antiLack(3);
explode(px+8*sin, py-1, pz+8*cos, 2);
explode(px+4*sin, py-1, pz+4*cos, 2);
}
if(wa3a[n]==295){
setTile(px+3*sin, py, pz+3*cos, 0);
setTile(px+4*sin, py, pz+4*cos, 0);
setTile(px+5*sin, py-1, pz+5*cos, 0);
setTile(px+5*sin, py, pz+5*cos, 0);
setTile(px+5*sin, py+1, pz+5*cos, 0);
setTile(px+5*sin, py, pz+5*cos, 17);
setTile(px+6*sin, py, pz+6*cos, 17);
setTile(px+7*sin, py-1, pz+7*cos, 41);
setTile(px+7*sin, py, pz+7*cos, 41);
setTile(px+7*sin, py+1, pz+7*cos, 41);
for(var ss=10;ss<13;ss++)
setTile(px+ss*sin, py, pz+ss*cos, 42);
}
if(wa3a[n]==290){
setTile(px+7*sin, py-1, pz+7*cos, 0);
setTile(px+7*sin, py+1, pz+7*cos, 0);
for(var ss=5;ss<13;ss++)
setTile(px+ss*sin, py, pz+ss*cos, 0);
ESP.antiLack(3);
explode(px+12*sin, py, pz+12*cos, 2.5);
explode(px+9*sin, py, pz+9*cos, 2);
}
if(wa4a[n]==1790){
for(var yy=way[n]+9;yy<way[n]+11;yy++){
setTile(wax[n]+7, yy, waz[n]+7, 0);
setTile(wax[n]+7, yy, waz[n], 0);
setTile(wax[n]+7, yy, waz[n]-7, 0);
setTile(wax[n], yy, waz[n]+7, 0);
setTile(wax[n], yy, waz[n]-7, 0);
setTile(wax[n]-7, yy, waz[n]+7, 0);
setTile(wax[n]-7, yy, waz[n], 0);
setTile(wax[n]-7, yy, waz[n]-7, 0);
}
for(var ss=-1;ss<2;ss++){
setTile(wax[n]+7+ss, way[n]+8, waz[n]+7, 0);
setTile(wax[n]+7+ss, way[n]+8, waz[n], 0);
setTile(wax[n]+7+ss, way[n]+8, waz[n]-7, 0);
setTile(wax[n]+ss, way[n]+8, waz[n]+7, 0);
setTile(wax[n]+ss, way[n]+8, waz[n]-7, 0);
setTile(wax[n]-7+ss, way[n]+8, waz[n]+7, 0);
setTile(wax[n]-7+ss, way[n]+8, waz[n], 0);
setTile(wax[n]-7+ss, way[n]+8, waz[n]-7, 0);
}
for(var yy=way[n];yy<way[n]+4;yy++){
setTile(wax[n]+7, yy, waz[n]+7, 42);
setTile(wax[n]+7, yy, waz[n], 42);
setTile(wax[n]+7, yy, waz[n]-7, 42);
setTile(wax[n], yy, waz[n]+7, 42);
setTile(wax[n], yy, waz[n]-7, 42);
setTile(wax[n]-7, yy, waz[n]+7, 42);
setTile(wax[n]-7, yy, waz[n], 42);
setTile(wax[n]-7, yy, waz[n]-7, 42);
}
for(var yy=way[n]+6;yy<way[n]+8;yy++){
setTile(wax[n]+7, yy, waz[n]+7, 17);
setTile(wax[n]+7, yy, waz[n], 17);
setTile(wax[n]+7, yy, waz[n]-7, 17);
setTile(wax[n], yy, waz[n]+7, 17);
setTile(wax[n], yy, waz[n]-7, 17);
setTile(wax[n]-7, yy, waz[n]+7, 17);
setTile(wax[n]-7, yy, waz[n], 17);
setTile(wax[n]-7, yy, waz[n]-7, 17);
}
for(var ss=-1;ss<2;ss++){
setTile(wax[n]+7+ss, way[n]+5, waz[n]+7, 41);
setTile(wax[n]+7+ss, way[n]+5, waz[n], 41);
setTile(wax[n]+7+ss, way[n]+5, waz[n]-7, 41);
setTile(wax[n]+ss, way[n]+5, waz[n]+7, 41);
setTile(wax[n]+ss, way[n]+5, waz[n]-7, 41);
setTile(wax[n]-7+ss, way[n]+5, waz[n]+7, 41);
setTile(wax[n]-7+ss, way[n]+5, waz[n], 41);
setTile(wax[n]-7+ss, way[n]+5, waz[n]-7, 41);
}
}
if(wa4a[n]==1785){
for(var yy=way[n];yy<way[n]+7;yy++){
setTile(wax[n]+7, yy, waz[n]+7, 0);
setTile(wax[n]+7, yy, waz[n], 0);
setTile(wax[n]+7, yy, waz[n]-7, 0);
setTile(wax[n], yy, waz[n]+7, 0);
setTile(wax[n], yy, waz[n]-7, 0);
setTile(wax[n]-7, yy, waz[n]+7, 0);
setTile(wax[n]-7, yy, waz[n], 0);
setTile(wax[n]-7, yy, waz[n]-7, 0);
}
for(var yy=way[n]+7;yy<way[n]+9;yy++){
setTile(wax[n]+7, yy, waz[n]+7, 0);
setTile(wax[n]+7, yy, waz[n], 0);
setTile(wax[n]+7, yy, waz[n]-7, 0);
setTile(wax[n], yy, waz[n]+7, 0);
setTile(wax[n], yy, waz[n]-7, 0);
setTile(wax[n]-7, yy, waz[n]+7, 0);
setTile(wax[n]-7, yy, waz[n], 0);
setTile(wax[n]-7, yy, waz[n]-7, 0);
}
for(var ss=-1;ss<2;ss++){
setTile(wax[n]+7+ss, way[n]+5, waz[n]+7, 0);
setTile(wax[n]+7+ss, way[n]+5, waz[n], 0);
setTile(wax[n]+7+ss, way[n]+5, waz[n]-7, 0);
setTile(wax[n]+ss, way[n]+5, waz[n]+7, 0);
setTile(wax[n]+ss, way[n]+5, waz[n]-7, 0);
setTile(wax[n]-7+ss, way[n]+5, waz[n]+7, 0);
setTile(wax[n]-7+ss, way[n]+5, waz[n], 0);
setTile(wax[n]-7+ss, way[n]+5, waz[n]-7, 0);
}
ESP.antiLack(3);
explode(wax[n]+7, way[n]+1, waz[n]+7, 3);
explode(wax[n]+7, way[n]+1, waz[n], 3);
explode(wax[n]+7, way[n]+1, waz[n]-7, 3);
explode(wax[n], way[n]+1, waz[n]+7, 3);
explode(wax[n], way[n]+1, waz[n]-7, 3);
explode(wax[n]-7, way[n]+1, waz[n]+7, 3);
explode(wax[n]-7, way[n]+1, waz[n], 3);
explode(wax[n]-7, way[n]+1, waz[n]-7, 3);
explode(wax[n]+7, way[n]+3, waz[n]+7, 2);
explode(wax[n]+7, way[n]+3, waz[n], 2);
explode(wax[n]+7, way[n]+3, waz[n]-7, 2);
explode(wax[n], way[n]+3, waz[n]+7, 2);
explode(wax[n], way[n]+3, waz[n]-7, 2);
explode(wax[n]-7, way[n]+3, waz[n]+7, 2);
explode(wax[n]-7, way[n]+3, waz[n], 2);
explode(wax[n]-7, way[n]+3, waz[n]-7, 2);
}
}}
if(ore[0]!=null){
for(var n in ore){
if(o2a[n]==295){
setTile(px+3*sin, py+2, pz+3*cos, 0);
setTile(px+5*sin, py+2, pz+5*cos, 15);
}
if(o2a[n]==290){
setTile(px+5*sin, py+2, pz+5*cos, 0);
setTile(px+7*sin, py+2, pz+7*cos, 15);
}
if(o2a[n]==285){
setTile(px+7*sin, py+2, pz+7*cos, 0);
ESP.antiLack(3);
explode(px+8*sin, py+2, pz+8*cos, 3);
}
if(o3a[n]==295){
setTile(o3x[n]+5, o3y[n]+1, o3z[n]+5, 73);
setTile(o3x[n]+5, o3y[n]+1, o3z[n], 0);
setTile(o3x[n]+5, o3y[n]+1, o3z[n]-5, 0);
setTile(o3x[n], o3y[n]+1, o3z[n]+5, 0);
setTile(o3x[n], o3y[n]+1, o3z[n]-5, 0);
setTile(o3x[n]-5, o3y[n]+1, o3z[n]+5, 0);
setTile(o3x[n]-5, o3y[n]+1, o3z[n], 0);
setTile(o3x[n]-5, o3y[n]+1, o3z[n]-5, 0);
setTile(o3x[n]+5, o3y[n]+2, o3z[n]+5, 74);
setTile(o3x[n]+5, o3y[n]+2, o3z[n], 74);
setTile(o3x[n]+5, o3y[n]+2, o3z[n]-5, 74);
setTile(o3x[n], o3y[n]+2, o3z[n]+5, 74);
setTile(o3x[n], o3y[n]+2, o3z[n]-5, 74);
setTile(o3x[n]-5, o3y[n]+2, o3z[n]+5, 74);
setTile(o3x[n]-5, o3y[n]+2, o3z[n], 74);
setTile(o3x[n]-5, o3y[n]+2, o3z[n]-5, 74);
}
if(o3a[n]==290){
setTile(o3x[n]+5, o3y[n]+2, o3z[n]+5, 0);
setTile(o3x[n]+5, o3y[n]+2, o3z[n], 0);
setTile(o3x[n]+5, o3y[n]+2, o3z[n]-5, 0);
setTile(o3x[n], o3y[n]+2, o3z[n]+5, 0);
setTile(o3x[n], o3y[n]+2, o3z[n]-5, 0);
setTile(o3x[n]-5, o3y[n]+2, o3z[n]+5, 0);
setTile(o3x[n]-5, o3y[n]+2, o3z[n], 0);
setTile(o3x[n]-5, o3y[n]+2, o3z[n]-5, 0);
ESP.antiLack(3);
explode(o3x[n]+5, o3y[n]+2, o3z[n]+5, 2);
explode(o3x[n]+5, o3y[n]+2, o3z[n], 2);
explode(o3x[n]+5, o3y[n]+2, o3z[n]-5, 2);
explode(o3x[n], o3y[n]+2, o3z[n]+5, 2);
explode(o3x[n], o3y[n]+2, o3z[n]-5, 2);
explode(o3x[n]-5, o3y[n]+2, o3z[n]+5, 2);
explode(o3x[n]-5, o3y[n]+2, o3z[n], 2);
explode(o3x[n]-5, o3y[n]+2, o3z[n]-5, 2);
}
if(o4c[n]>0){
o4c[n]--;
}
if(o4c[n]==1){
for(var xx=ox[n]-8;xx<ox[n]+9;xx++)
for(var yy=oy[n]+1;yy<oy[n]+5;yy++)
for(var zz=oz[n]-8;zz<oz[n]+9;zz++)
setTile(xx, yy, zz, 0);
}
if(o4a[n]==900&&Cool.isFalse(o4d[n])){
for(var xx=ox[n]-8;xx<ox[n]+9;xx++)
for(var yy=oy[n]+1;yy<oy[n]+5;yy++)
for(var zz=oz[n]-8;zz<oz[n]+9;zz++)
setTile(xx, yy, zz, 0);
o4b[n] = false
}
}}
if(rich[0]!=null){
for(var n in rich){
if(r1a[n]==145){
ESP.antiLack(3);
explode(r1x[n], r1y[n]+1, r1z[n], 2.5);
}
if(r2a[n]==295){
ESP.antiLack(3);
for(var gun=3;gun<25;gun++)
explode(px+gun*sin, py+2, pz+gun*cos, 1.6);
}
if(r4a[n]==900){
for(var xx=rx[n]-4;xx<rx[n]+5;xx++){
for(var yy=ry[n]+1;yy<ry[n]+7;yy++){
for(var zz=rz[n]-4;zz<rz[n]+5;zz++){
setTile(xx, yy, rz[n]+3, 0);
setTile(xx, yy, rz[n]-3, 0);
setTile(rx[n]+3, yy, zz, 0);
setTile(rx[n]-3, yy, zz, 0);
setTile(xx, ry[n]+1, zz, 0);
setTile(xx, ry[n]+6, zz, 0);
}}}
}
}}
if(tp[0]!=null){
for(var n in tp){
if(tp4a[n]==1350){
tp4b[n] = false;
}
}}
if(space[0]!=null){
for(var n in space){
if(sp2a[n]==1){
if(spxa[n]>spza[n]){
for(var zz=sp2z[n]-2;zz<sp2z[n]+3;zz++)
setTile(sp2x[n], sp2y[n]+2, zz, 0);
}
else if(spxa[n]<spza[n]){
for(var xx=sp2x[n]-2;xx<sp2x[n]+3;xx++)
setTile(xx, sp2y[n]+2, sp2z[n], 0);
}
}
if(sp4a[n]==1790){
for(var xx=spx[n]-5;xx<spx[n]+6;xx++)
for(var zz=spz[n]-5;zz<spz[n]+6;zz++)
setTile(xx, spy[n]-1, zz, 0);
for(var xx=spx[n]-4;xx<spx[n]+5;xx++)
for(var zz=spz[n]-4;zz<spz[n]+5;zz++)
setTile(xx, spy[n]-2, zz, 0);
for(var xx=spx[n]-3;xx<spx[n]+4;xx++)
for(var zz=spz[n]-3;zz<spz[n]+4;zz++)
setTile(xx, spy[n]-3, zz, 0);
for(var xx=spx[n]-2;xx<spx[n]+3;xx++)
for(var zz=spz[n]-2;zz<spz[n]+3;zz++)
setTile(xx, spy[n]-4, zz, 0);
}
if(sp4a==1780){
for(var xx=spx[n]-1;xx<spx[n]+2;xx++)
for(var yy=0;yy<spy[n]-3;yy++)
for(var zz=spz[n]-1;zz<spz[n]+2;zz++)
setTile(xx, yy, zz, 0);
}
}}
if(force[0]!=null){
for(var n in force){
if(fo1a[n]==148){
setTile(px+3*sin, py+2, pz+3*cos, 0);
setTile(px+5*sin, py+2, pz+5*cos, 89);
}
if(fo1a[n]==146){
setTile(px+4*sin, py+2, pz+4*cos, 0);
setTile(px+6*sin, py+2, pz+6*cos, 89);
}
if(fo1a[n]==144){
setTile(px+5*sin, py+2, pz+5*cos, 0);
setTile(px+7*sin, py+2, pz+7*cos, 89);
}
if(fo1a[n]==142){
setTile(px+6*sin, py+2, pz+6*cos, 0);
setTile(px+8*sin, py+2, pz+8*cos, 89);
}
if(fo1a[n]==140){
setTile(px+7*sin, py+2, pz+7*cos, 0);
setTile(px+8*sin, py+2, pz+8*cos, 0);
ESP.antiLack(3);
explode(px+6*sin, py+2, pz+6*cos, 2);
explode(px+9*sin, py+2, pz+9*cos, 2);
}
if(fo2a[n]==295){
ESP.antiLack(3);
explode(fo2x+1.5*foxa, fo2y, fo2z+1.5*foza, 2.5);
}
if(fo2a[n]==290){
ESP.antiLack(3);
explode(fo2x+3*foxa, fo2y, fo2z+3*foza, 2.5);
}
if(fo2a[n]==285){
ESP.antiLack(3);
explode(fo2x+4.5*foxa, fo2y, fo2z+4.5*foza, 2.5);
}
if(fo2a[n]==280){
ESP.antiLack(3);
explode(fo2x+6*foxa, fo2y, fo2z+6*foza, 2.5);
}
if(fo2a[n]==275){
ESP.antiLack(3);
explode(fo2x+7.5*foxa, fo2y, fo2z+7.5*foza, 2.5);
}
if(fo2a[n]==270){
ESP.antiLack(3);
explode(fo2x+9*foxa, fo2y, fo2z+9*foza, 2.5);
}
}}
if(rein[0]!=null){
for(var n in rein){
if(re1a[n]==145){
for(var xx=re1x[n]-1;xx<re1x[n]+2;xx++)
for(var yy=re1y[n]+5;yy<re1y[n]+7;yy++)
for(var zz=re1z[n]-1;zz<re1z[n]+2;zz++)
setTile(xx, yy, zz, 0);
for(var yy=re1y[n]+4;yy<re1y[n]+6;yy++){
setTile(re1x[n]+2, yy, re1z[n], 0);
setTile(re1x[n]-2, yy, re1z[n], 0);
setTile(re1x[n], yy, re1z[n]+2, 0);
setTile(re1x[n], yy, re1z[n]-2, 0);
}
for(var xx=re1x[n]-1;xx<re1x[n]+2;xx++)
for(var yy=re1y[n]+1;yy<re1y[n]+5;yy++)
for(var zz=re1z[n]-1;zz<re1z[n]+2;zz++)
setTile(xx, yy, zz, 79);
for(var yy=re1y[n]+2;yy<re1y[n]+4;yy++){
setTile(re1x[n]+2, yy, re1z[n], 79);
setTile(re1x[n]-2, yy, re1z[n], 79);
setTile(re1x[n], yy, re1z[n]+2, 79);
setTile(re1x[n], yy, re1z[n]-2, 79);
}
}
if(re1a[n]==140){
for(var xx=re1x[n]-1;xx<re1x[n]+2;xx++)
for(var yy=re1y[n]+1;yy<re1y[n]+5;yy++)
for(var zz=re1z[n]-1;zz<re1z[n]+2;zz++)
setTile(xx, yy, zz, 0);
for(var yy=re1y[n]+2;yy<re1y[n]+4;yy++){
setTile(re1x[n]+2, yy, re1z[n], 0);
setTile(re1x[n]-2, yy, re1z[n], 0);
setTile(re1x[n], yy, re1z[n]+2, 0);
setTile(re1x[n], yy, re1z[n]-2, 0);
}
ESP.antiLack(3);
explode(re1x[n]+0.5, re1y[n]+2, re1z[n]+0.5, 2.5);
setTile(re1x[n]+1, re1y[n]+1, re1z[n], 80);
setTile(re1x[n]-1, re1y[n]+1, re1z[n], 80);
setTile(re1x[n], re1y[n]+1, re1z[n]+1, 80);
setTile(re1x[n], re1y[n]+1, re1z[n]-1, 80);
}
if(re1a[n]==135){
setTile(re1x[n]+1, re1y[n]+1, re1z[n], 0);
setTile(re1x[n]-1, re1y[n]+1, re1z[n], 0);
setTile(re1x[n], re1y[n]+1, re1z[n]+1, 0);
setTile(re1x[n], re1y[n]+1, re1z[n]-1, 0);
setTile(re1x[n]+2, re1y[n]+2, re1z[n], 80);
setTile(re1x[n]-2, re1y[n]+2, re1z[n], 80);
setTile(re1x[n], re1y[n]+2, re1z[n]+2, 80);
setTile(re1x[n], re1y[n]+2, re1z[n]-2, 80);
}
if(re1a[n]==130){
setTile(re1x[n]+2, re1y[n]+2, re1z[n], 0);
setTile(re1x[n]-2, re1y[n]+2, re1z[n], 0);
setTile(re1x[n], re1y[n]+2, re1z[n]+2, 0);
setTile(re1x[n], re1y[n]+2, re1z[n]-2, 0);
}
if(re2a[n]==295){
for(var gun=3;gun<30;gun++){
setTile(px+gun*sin, py+1, pz+gun*cos, 173);
}
if(re2x[n]>re2z[n]){
for(var gun=3;gun<30;gun++){
setTile(px+gun*sin, py+3, pz+gun*cos+1, 173);
setTile(px+gun*sin, py+3, pz+gun*cos-1, 173);
}
}
else if(re2x[n]<re2z[n]){
for(var gun=3;gun<30;gun++){
setTile(px+gun*sin+1, py+3, pz+gun*cos, 173);
setTile(px+gun*sin-1, py+3, pz+gun*cos, 173);
}
}
}
if(re2a[n]==290){
ESP.antiLack(3);
for(var gun=3;gun<30;gun++){
setTile(px+gun*sin, py+1, pz+gun*cos, 0);
explode(px+gun*sin, py+1, pz+gun*cos, 1.3);
}
if(re2x[n]>re2z[n]){
for(var gun=3;gun<30;gun++){
setTile(px+gun*sin, py+3, pz+gun*cos+1, 0);
setTile(px+gun*sin, py+3, pz+gun*cos-1, 0);
explode(px+gun*sin, py+3, pz+gun*cos+1, 1.3);
explode(px+gun*sin, py+3, pz+gun*cos-1, 1.3);
}
}
else if(re2x[n]<re2z[n]){
for(var gun=3;gun<30;gun++){
setTile(px+gun*sin+1, py+3, pz+gun*cos, 0);
setTile(px+gun*sin-1, py+3, pz+gun*cos, 0);
explode(px+gun*sin+1, py+3, pz+gun*cos, 1.3);
explode(px+gun*sin-1, py+3, pz+gun*cos, 1.3);
}
}
}
if(re3a[n]==298){
setTile(re3x[n]+2, re3y[n]+2, re3z[n], 0);
setTile(re3x[n]-2, re3y[n]+2, re3z[n], 0);
setTile(re3x[n], re3y[n]+2, re3z[n]+2, 0);
setTile(re3x[n], re3y[n]+2, re3z[n]-2, 0);
setTile(re3x[n]+4, re3y[n]+2, re3z[n], 35, 14);
setTile(re3x[n]-4, re3y[n]+2, re3z[n], 35, 14);
setTile(re3x[n], re3y[n]+2, re3z[n]+4, 35, 14);
setTile(re3x[n], re3y[n]+2, re3z[n]-4, 35, 14);
}
if(re3a[n]==296){
setTile(re3x[n]+4, re3y[n]+2, re3z[n], 0);
setTile(re3x[n]-4, re3y[n]+2, re3z[n], 0);
setTile(re3x[n], re3y[n]+2, re3z[n]+4, 0);
setTile(re3x[n], re3y[n]+2, re3z[n]-4, 0);
setTile(re3x[n]+5, re3y[n]+2, re3z[n]+2, 35, 14);
setTile(re3x[n]+5, re3y[n]+2, re3z[n]-2, 35, 14);
setTile(re3x[n]-5, re3y[n]+2, re3z[n]+2, 35, 14);
setTile(re3x[n]-5, re3y[n]+2, re3z[n]-2, 35, 14);
setTile(re3x[n]+2, re3y[n]+2, re3z[n]+5, 35, 14);
setTile(re3x[n]-2, re3y[n]+2, re3z[n]+5, 35, 14);
setTile(re3x[n]+2, re3y[n]+2, re3z[n]-5, 35, 14);
setTile(re3x[n]-2, re3y[n]+2, re3z[n]-5, 35, 14);
}
if(re3a[n]==292){
setTile(re3x[n]+5, re3y[n]+2, re3z[n]+2, 0);
setTile(re3x[n]+5, re3y[n]+2, re3z[n]-2, 0);
setTile(re3x[n]-5, re3y[n]+2, re3z[n]+2, 0);
setTile(re3x[n]-5, re3y[n]+2, re3z[n]-2, 0);
setTile(re3x[n]+2, re3y[n]+2, re3z[n]+5, 0);
setTile(re3x[n]-2, re3y[n]+2, re3z[n]+5, 0);
setTile(re3x[n]+2, re3y[n]+2, re3z[n]-5, 0);
setTile(re3x[n]-2, re3y[n]+2, re3z[n]-5, 0);
ESP.antiLack(3);
explode(re3x[n]+5, re3y[n]+2, re3z[n]+2, 2.5);
explode(re3x[n]+5, re3y[n]+2, re3z[n]-2, 2.5);
explode(re3x[n]-5, re3y[n]+2, re3z[n]+2, 2.5);
explode(re3x[n]-5, re3y[n]+2, re3z[n]-2, 2.5);
explode(re3x[n]+2, re3y[n]+2, re3z[n]+5, 2.5);
explode(re3x[n]-2, re3y[n]+2, re3z[n]+5, 2.5);
explode(re3x[n]+2, re3y[n]+2, re3z[n]-5, 2.5);
explode(re3x[n]-2, re3y[n]+2, re3z[n]-5, 2.5);
}
if(re4a[n]==1795){
for(var yy=rey[n]+7;yy<rey[n]+9;yy++){
setTile(rex[n]+7, yy, rez[n]+7, 0);
setTile(rex[n]+7, yy, rez[n], 0);
setTile(rex[n]+7, yy, rez[n]-7, 0);
setTile(rex[n], yy, rez[n]+7, 0);
setTile(rex[n], yy, rez[n]-7, 0);
setTile(rex[n]-7, yy, rez[n]+7, 0);
setTile(rex[n]-7, yy, rez[n], 0);
setTile(rex[n]-7, yy, rez[n]-7, 0);
}
for(var yy=rey[n]+4;yy<rey[n]+6;yy++){
setTile(rex[n]+7, yy, rez[n]+7, 173);
setTile(rex[n]+7, yy, rez[n], 173);
setTile(rex[n]+7, yy, rez[n]-7, 173);
setTile(rex[n], yy, rez[n]+7, 173);
setTile(rex[n], yy, rez[n]-7, 173);
setTile(rex[n]-7, yy, rez[n]+7, 173);
setTile(rex[n]-7, yy, rez[n], 173);
setTile(rex[n]-7, yy, rez[n]-7, 173);
}
}
if(re4a[n]==1790){
for(var yy=rey[n]+5;yy<rey[n]+7;yy++){
setTile(rex[n]+7, yy, rez[n]+7, 0);
setTile(rex[n]+7, yy, rez[n], 0);
setTile(rex[n]+7, yy, rez[n]-7, 0);
setTile(rex[n], yy, rez[n]+7, 0);
setTile(rex[n], yy, rez[n]-7, 0);
setTile(rex[n]-7, yy, rez[n]+7, 0);
setTile(rex[n]-7, yy, rez[n], 0);
setTile(rex[n]-7, yy, rez[n]-7, 0);
}
for(var yy=rey[n]+2;yy<rey[n]+5;yy++){
setTile(rex[n]+7, yy, rez[n]+7, 173);
setTile(rex[n]+7, yy, rez[n], 173);
setTile(rex[n]+7, yy, rez[n]-7, 173);
setTile(rex[n], yy, rez[n]+7, 173);
setTile(rex[n], yy, rez[n]-7, 173);
setTile(rex[n]-7, yy, rez[n]+7, 173);
setTile(rex[n]-7, yy, rez[n], 173);
setTile(rex[n]-7, yy, rez[n]-7, 173);
}
}
if(re4a[n]==1785){
for(var yy=rey[n]+3;yy<rey[n]+5;yy++){
setTile(rex[n]+7, yy, rez[n]+7, 0);
setTile(rex[n]+7, yy, rez[n], 0);
setTile(rex[n]+7, yy, rez[n]-7, 0);
setTile(rex[n], yy, rez[n]+7, 0);
setTile(rex[n], yy, rez[n]-7, 0);
setTile(rex[n]-7, yy, rez[n]+7, 0);
setTile(rex[n]-7, yy, rez[n], 0);
setTile(rex[n]-7, yy, rez[n]-7, 0);
}
for(var yy=rey[n];yy<rey[n]+3;yy++){
setTile(rex[n]+7, yy, rez[n]+7, 173);
setTile(rex[n]+7, yy, rez[n], 173);
setTile(rex[n]+7, yy, rez[n]-7, 173);
setTile(rex[n], yy, rez[n]+7, 173);
setTile(rex[n], yy, rez[n]-7, 173);
setTile(rex[n]-7, yy, rez[n]+7, 173);
setTile(rex[n]-7, yy, rez[n], 173);
setTile(rex[n]-7, yy, rez[n]-7, 173);
}
}
if(re4a[n]==1780){
for(var xx=rex[n]-11;xx<rex[n]+12;xx++)
for(var yy=rey[n]-5;yy<rey[n]+5;yy++)
for(var zz=rez[n]-11;zz<rez[n]+12;zz++)
if(getTile(xx, yy, zz)!=0&&getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 1);
}
}
if(re4a[n]==1775){
for(var yy=rey[n];yy<rey[n]+3;yy++){
setTile(rex[n]+7, yy, rez[n]+7, 0);
setTile(rex[n]+7, yy, rez[n], 0);
setTile(rex[n]+7, yy, rez[n]-7, 0);
setTile(rex[n], yy, rez[n]+7, 0);
setTile(rex[n], yy, rez[n]-7, 0);
setTile(rex[n]-7, yy, rez[n]+7, 0);
setTile(rex[n]-7, yy, rez[n], 0);
setTile(rex[n]-7, yy, rez[n]-7, 0);
}
setTile(rex[n]+7, rey[n], rez[n]+7, 2);
setTile(rex[n]+7, rey[n], rez[n], 2);
setTile(rex[n]+7, rey[n], rez[n]-7, 2);
setTile(rex[n], rey[n], rez[n]+7, 2);
setTile(rex[n], rey[n], rez[n]-7, 2);
setTile(rex[n]-7, rey[n], rez[n]+7, 2);
setTile(rex[n]-7, rey[n], rez[n], 2);
setTile(rex[n]-7, rey[n], rez[n]-7, 2);
ESP.antiLack(3);
explode(rex[n]+7, rey[n]+1, rez[n]+7, 4);
explode(rex[n]+7, rey[n]+1, rez[n], 4);
explode(rex[n]+7, rey[n]+1, rez[n]-7, 4);
explode(rex[n], rey[n]+1, rez[n]+7, 4);
explode(rex[n], rey[n]+1, rez[n]-7, 4);
explode(rex[n]-7, rey[n]+1, rez[n]+7, 4);
explode(rex[n]-7, rey[n]+1, rez[n], 4);
explode(rex[n]-7, rey[n]+1, rez[n]-7, 4);
explode(rex[n]+7, rey[n]+2, rez[n]+7, 2.5);
explode(rex[n]+7, rey[n]+2, rez[n], 2.5);
explode(rex[n]+7, rey[n]+2, rez[n]-7, 2.5);
explode(rex[n], rey[n]+2, rez[n]+7, 2.5);
explode(rex[n], rey[n]+2, rez[n]-7, 2.5);
explode(rex[n]-7, rey[n]+2, rez[n]+7, 2.5);
explode(rex[n]-7, rey[n]+2, rez[n], 2.5);
explode(rex[n]-7, rey[n]+2, rez[n]-7, 2.5);
}
}}
if(magnet[0]!=null){
for(var n in magnet){
if(mag1a[n]==1){
Entity.remove(mag1b);
}
if(mag3a[n]==295){
setTile(mag3x[n]+4, mag3y[n], mag3z[n]+4, 2);
setTile(mag3x[n]+4, mag3y[n], mag3z[n], 2);
setTile(mag3x[n]+4, mag3y[n], mag3z[n]-4, 2);
setTile(mag3x[n], mag3y[n], mag3z[n]+4, 2);
setTile(mag3x[n], mag3y[n], mag3z[n]-4, 2);
setTile(mag3x[n]-4, mag3y[n], mag3z[n]+4, 2);
setTile(mag3x[n]-4, mag3y[n], mag3z[n], 2);
setTile(mag3x[n]-4, mag3y[n], mag3z[n]-4, 2);
setTile(mag3x[n]+4, mag3y[n]+1, mag3z[n]+4, 15);
setTile(mag3x[n]+4, mag3y[n]+1, mag3z[n], 15);
setTile(mag3x[n]+4, mag3y[n]+1, mag3z[n]-4, 15);
setTile(mag3x[n], mag3y[n]+1, mag3z[n]+4, 15);
setTile(mag3x[n], mag3y[n]+1, mag3z[n]-4, 15);
setTile(mag3x[n]-4, mag3y[n]+1, mag3z[n]+4, 15);
setTile(mag3x[n]-4, mag3y[n]+1, mag3z[n], 15);
setTile(mag3x[n]-4, mag3y[n]+1, mag3z[n]-4, 15);
}
if(mag3a[n]==290){
setTile(mag3x[n]+4, mag3y[n]+1, mag3z[n]+4, 0);
setTile(mag3x[n]+4, mag3y[n]+1, mag3z[n], 0);
setTile(mag3x[n]+4, mag3y[n]+1, mag3z[n]-4, 0);
setTile(mag3x[n], mag3y[n]+1, mag3z[n]+4, 0);
setTile(mag3x[n], mag3y[n]+1, mag3z[n]-4, 0);
setTile(mag3x[n]-4, mag3y[n]+1, mag3z[n]+4, 0);
setTile(mag3x[n]-4, mag3y[n]+1, mag3z[n], 0);
setTile(mag3x[n]-4, mag3y[n]+1, mag3z[n]-4, 0);
ESP.antiLack(3);
explode(mag3x[n]+4, mag3y[n]+1.5, mag3z[n]+4, 2.5);
explode(mag3x[n]+4, mag3y[n]+1.5, mag3z[n], 2.5);
explode(mag3x[n]+4, mag3y[n]+1.5, mag3z[n]-4, 2.5);
explode(mag3x[n], mag3y[n]+1.5, mag3z[n]+4, 2.5);
explode(mag3x[n], mag3y[n]+1.5, mag3z[n]-4, 2.5);
explode(mag3x[n]-4, mag3y[n]+1.5, mag3z[n]+4, 2.5);
explode(mag3x[n]-4, mag3y[n]+1.5, mag3z[n], 2.5);
explode(mag3x[n]-4, mag3y[n]+1.5, mag3z[n]-4, 2.5);
}
if(mag4a[n]==1770){
explode(magx[n]+4, magy[n]+1, magz[n], 2);
explode(magx[n]-4, magy[n]+1, magz[n], 2);
explode(magx[n], magy[n]+1, magz[n]+4, 2);
explode(magx[n], magy[n]+1, magz[n]-4, 2);
}
if(mag4a[n]==870){
for(var mag4b=-2;mag4b<3;mag4b++){
setTile(magx[n]+mag4b, magy[n]+1, magz[n]+3, 0);
setTile(magx[n]+mag4b, magy[n]+1, magz[n]-3, 0);
setTile(magx[n]+3, magy[n]+1, magz[n]+mag4b, 0);
setTile(magx[n]-3, magy[n]+1, magz[n]+mag4b, 0);
}
}
}}
if(steve[0]!=null){
for(var n in steve){
if(st2a[n]==150){
st2b[n] = false;
}
if(st4a[n]==1798){
setTile(stx[n]+1, sty[n]+1, stz[n], 46);
}
if(st4a[n]==1796){
setTile(stx[n]+1, sty[n]+1, stz[n]+1, 46);
}
if(st4a[n]==1794){
setTile(stx[n]+1, sty[n]+1, stz[n]-1, 46);
}
if(st4a[n]==1792){
setTile(stx[n], sty[n]+1, stz[n]-1, 46);
}
if(st4a[n]==1790){
setTile(stx[n]+1, sty[n]+2, stz[n], 46);
}
if(st4a[n]==1788){
setTile(stx[n]+1, sty[n]+1, stz[n]+1, 46);
}
if(st4a[n]==186){
setTile(stx[n]+2, sty[n]+1, stz[n], 46);
}
if(st4a[n]==1784){
setTile(stx[n], sty[n]+1, stz[n]+2, 46);
}
if(st4a[n]==1782){
setTile(stx[n]+1, sty[n]+1, stz[n]-2, 46);
}
if(st4a[n]==1780){
setTile(stx[n]+2, sty[n]+1, stz[n]+2, 46);
}
if(st4a[n]==1778){
setTile(stx[n], sty[n]+2, stz[n]+1, 46);
}
if(st4a[n]==1776){
setTile(stx[n], sty[n]+2, stz[n]-1, 46);
}
if(st4a[n]==1774){
setTile(stx[n]+3, sty[n]+1, stz[n], 46);
}
if(st4a[n]==1772){
setTile(stx[n], sty[n]+1, stz[n]+5, 46);
}
if(st4a[n]==1770){
setTile(stx[n]-2, sty[n]+1, stz[n]+3, 46);
}
if(st4a[n]==1768){
setTile(stx[n]-4, sty[n]+1, stz[n]+2, 46);
}
if(st4a[n]==1766){
setTile(stx[n]+3, sty[n]+1, stz[n]+2, 46);
}
if(st4a[n]==1764){
setTile(stx[n]+4, sty[n]+1, stz[n]+2, 46);
}
if(st4a[n]==1762){
setTile(stx[n]-2, sty[n]+1, stz[n]-3, 46);
}
if(st4a[n]==1760){
ESP.antiLack(3);
explode(stx[n], sty[n]+1.5, stz[n], 2);
}
}}
if(hero[0]!=null){
for(var n in hero){
if(he1c[n]>0){
he1c[n]--;
}
if(he1c[n]==1){
setTile(he1x[n], he1y[n], he1z[n], he1d[n]);
}
if(he4a[n]==1770){
for(var yy=hey[n]-2;yy<hey[n]+6;yy++){
explode(hex[n]+4, yy, hez[n]+4, 1.6);
explode(hex[n]+4, yy, hez[n]-4, 1.6);
explode(hex[n]-4, yy, hez[n]+4, 1.6);
explode(hex[n]-4, yy, hez[n]-4, 1.6);
}
setTile(hex[n]+4, hey[n]+9, hez[n]+4, 89);
setTile(hex[n]+4, hey[n]+9, hez[n]-4, 89);
setTile(hex[n]-4, hey[n]+9, hez[n]+4, 89);
setTile(hex[n]-4, hey[n]+9, hez[n]-4, 89);
}
if(he4a[n]==1725){
for(var yy=hey[n]-2;yy<hey[n]+6;yy++){
explode(hex[n]+4, yy, hez[n]+4, 1.6);
explode(hex[n]+4, yy, hez[n]-4, 1.6);
explode(hex[n]-4, yy, hez[n]+4, 1.6);
explode(hex[n]-4, yy, hez[n]-4, 1.6);
}
setTile(hex[n]+4, hey[n]+9, hez[n]+4, 89);
setTile(hex[n]+4, hey[n]+9, hez[n]-4, 89);
setTile(hex[n]-4, hey[n]+9, hez[n]+4, 89);
setTile(hex[n]-4, hey[n]+9, hez[n]-4, 89);
}
if(he4a[n]==1680){
for(var yy=hey[n]-2;yy<hey[n]+6;yy++){
explode(hex[n]+4, yy, hez[n]+4, 1.6);
explode(hex[n]+4, yy, hez[n]-4, 1.6);
explode(hex[n]-4, yy, hez[n]+4, 1.6);
explode(hex[n]-4, yy, hez[n]-4, 1.6);
}
setTile(hex[n]+4, hey[n]+9, hez[n]+4, 89);
setTile(hex[n]+4, hey[n]+9, hez[n]-4, 89);
setTile(hex[n]-4, hey[n]+9, hez[n]+4, 89);
setTile(hex[n]-4, hey[n]+9, hez[n]-4, 89);
}
if(he4a[n]==1350){
Level.setTime(0);
setTile(hex[n]+8, hey[n]+2, hez[n]+8, 0);
setTile(hex[n]+8, hey[n]+2, hez[n]-8, 0);
setTile(hex[n]-8, hey[n]+2, hez[n]+8, 0);
setTile(hex[n]-8, hey[n]+2, hez[n]-8, 0);
setTile(hex[n]+4, hey[n]+9, hez[n]+4, 0);
setTile(hex[n]+4, hey[n]+9, hez[n]-4, 0);
setTile(hex[n]-4, hey[n]+9, hez[n]+4, 0);
setTile(hex[n]-4, hey[n]+9, hez[n]-4, 0);
}
}}
if(hermit[0]!=null){
for(var n in hermit){
if(her4a[n]==900){
ESP.antiLack(3);
for(var xx=herx[n]-12;xx<herx[n]+14;xx++)
for(var yy=hery[n]+1;yy<hery[n]+12;yy++)
for(var zz=herz[n]-14;zz<herz[n]+14;zz++)
if(getTile(xx, yy, zz)!=0&&getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
}
}}
if(clay[0]!=null){
for(var n in clay){
if(cl2a[n]==255){
ESP.antiLack(3);
explode(cl2x[n]+0.5, cl2y[n]+2, cl2z[n]+0.5, 3);
}
if(cl4a[n]==1795){
setTile(clx[n]+6, cly[n]+2, clz[n]+6, 82);
setTile(clx[n]+6, cly[n]+2, clz[n], 82);
setTile(clx[n]+6, cly[n]+2, clz[n]-6, 82);
setTile(clx[n], cly[n]+2, clz[n]+6, 82);
setTile(clx[n], cly[n]+2, clz[n]-6, 82);
setTile(clx[n]-6, cly[n]+2, clz[n]+6, 82);
setTile(clx[n]-6, cly[n]+2, clz[n], 82);
setTile(clx[n]-6, cly[n]+2, clz[n]-6, 82);
}
if(cl4a[n]==1790){
setTile(clx[n]+6, cly[n]+3, clz[n]+6, 82);
setTile(clx[n]+6, cly[n]+3, clz[n], 82);
setTile(clx[n]+6, cly[n]+3, clz[n]-6, 82);
setTile(clx[n], cly[n]+3, clz[n]+6, 82);
setTile(clx[n], cly[n]+3, clz[n]-6, 82);
setTile(clx[n]-6, cly[n]+3, clz[n]+6, 82);
setTile(clx[n]-6, cly[n]+3, clz[n], 82);
setTile(clx[n]-6, cly[n]+3, clz[n]-6, 82);
}
if(cl4a[n]==1785){
setTile(clx[n]+6, cly[n]+4, clz[n]+6, 82);
setTile(clx[n]+6, cly[n]+4, clz[n], 82);
setTile(clx[n]+6, cly[n]+4, clz[n]-6, 82);
setTile(clx[n], cly[n]+4, clz[n]+6, 82);
setTile(clx[n], cly[n]+4, clz[n]-6, 82);
setTile(clx[n]-6, cly[n]+4, clz[n]+6, 82);
setTile(clx[n]-6, cly[n]+4, clz[n], 82);
setTile(clx[n]-6, cly[n]+4, clz[n]-6, 82);
}
if(cl4a[n]==1780){
setTile(clx[n]+6, cly[n]+5, clz[n]+6, 82);
setTile(clx[n]+6, cly[n]+5, clz[n], 82);
setTile(clx[n]+6, cly[n]+5, clz[n]-6, 82);
setTile(clx[n], cly[n]+5, clz[n]+6, 82);
setTile(clx[n], cly[n]+5, clz[n]-6, 82);
setTile(clx[n]-6, cly[n]+5, clz[n]+6, 82);
setTile(clx[n]-6, cly[n]+5, clz[n], 82);
setTile(clx[n]-6, cly[n]+5, clz[n]-6, 82);
}
if(cl4a[n]==1775){
ESP.antiLack(3);
explode(clx[n]+6, cly[n]+4, clz[n]+6, 3);
explode(clx[n]+6, cly[n]+4, clz[n], 3);
explode(clx[n]+6, cly[n]+4, clz[n]-6, 3);
explode(clx[n], cly[n]+4, clz[n]+6, 3);
explode(clx[n], cly[n]+4, clz[n]-6, 3);
explode(clx[n]-6, cly[n]+4, clz[n]+6, 3);
explode(clx[n]-6, cly[n]+4, clz[n], 3);
explode(clx[n]-6, cly[n]+4, clz[n]-6, 3);
explode(clx[n]+6, cly[n]+1, clz[n]+6, 3);
explode(clx[n]+6, cly[n]+1, clz[n], 3);
explode(clx[n]+6, cly[n]+1, clz[n]-6, 3);
explode(clx[n], cly[n]+1, clz[n]+6, 3);
explode(clx[n], cly[n]+1, clz[n]-6, 3);
explode(clx[n]-6, cly[n]+1, clz[n]+6, 3);
explode(clx[n]-6, cly[n]+1, clz[n], 3);
explode(clx[n]-6, cly[n]+1, clz[n]-6, 3);
}
if(cl2a[n]==121){
for(var xx=cl2x[n]-2;xx<cl2x[n]+3;xx++)
for(var yy=cl2y[n]+1;yy<cl2y[n]+5;yy++)
for(var zz=cl2z[n]-2;zz<cl2z[n]+3;zz++)
if(getTile(xx, yy, zz)==82){
setTile(xx, yy, zz, 0);
}
}
}}
if(kirito[0]!=null){
for(var n in kirito){
if(k2a[n]==298){
setTile(k2x[n], k2y[n]+2, k2z[n], 0);
for(var ss=-1;ss<2;ss++){
setTile(k2x[n]+ss, k2y[n]+2, k2z[n]+2, 57);
setTile(k2x[n]+ss, k2y[n]+2, k2z[n]-2, 57);
setTile(k2x[n]+2, k2y[n]+2, k2z[n]+ss, 57);
setTile(k2x[n]-2, k2y[n]+2, k2z[n]+ss, 57);
}
}
if(k2a[n]==296){
for(var ss=-1;ss<2;ss++){
setTile(k2x[n]+ss, k2y[n]+2, k2z[n]+2, 0);
setTile(k2x[n]+ss, k2y[n]+2, k2z[n]-2, 0);
setTile(k2x[n]+2, k2y[n]+2, k2z[n]+ss, 0);
setTile(k2x[n]-2, k2y[n]+2, k2z[n]+ss, 0);
}
for(var ss=-2;ss<3;ss++){
setTile(k2x[n]+ss, k2y[n]+2, k2z[n]+3, 57);
setTile(k2x[n]+ss, k2y[n]+2, k2z[n]-3, 57);
setTile(k2x[n]+3, k2y[n]+2, k2z[n]+ss, 57);
setTile(k2x[n]-3, k2y[n]+2, k2z[n]+ss, 57);
}
}
if(k2a[n]==294){
for(var ss=-2;ss<3;ss++){
setTile(k2x[n]+ss, k2y[n]+2, k2z[n]+3, 0);
setTile(k2x[n]+ss, k2y[n]+2, k2z[n]-3, 0);
setTile(k2x[n]+3, k2y[n]+2, k2z[n]+ss, 0);
setTile(k2x[n]-3, k2y[n]+2, k2z[n]+ss, 0);
}
for(var ss=-3;ss<4;ss++){
setTile(k2x[n]+ss, k2y[n]+2, k2z[n]+4, 57);
setTile(k2x[n]+ss, k2y[n]+2, k2z[n]-4, 57);
setTile(k2x[n]+4, k2y[n]+2, k2z[n]+ss, 57);
setTile(k2x[n]-4, k2y[n]+2, k2z[n]+ss, 57);
}
}
if(k2a[n]==290){
for(var ss=-3;ss<4;ss++){
setTile(k2x[n]+ss, k2y[n]+2, k2z[n]+4, 0);
setTile(k2x[n]+ss, k2y[n]+2, k2z[n]-4, 0);
setTile(k2x[n]+4, k2y[n]+2, k2z[n]+ss, 0);
setTile(k2x[n]-4, k2y[n]+2, k2z[n]+ss, 0);
}
ESP.antiLack(3);
explode(k2x[n]+3, k2y[n]+2, k2z[n], 2.5);
explode(k2x[n]-3, k2y[n]+2, k2z[n], 2.5);
explode(k2x[n], k2y[n]+2, k2z[n]+3, 2.5);
explode(k2x[n], k2y[n]+2, k2z[n]-3, 2.5);
}
if(k3a[n]==295){
setTile(px+3*sin, py+2, pz+3*cos, 0);
setTile(px+4*sin, py+2, pz+4*cos, 0);
for(var gun=5;gun<8;gun++){
setTile(px+gun*sin, py+2, pz+gun*cos, 87);
setTile(px+gun*sin, py+3, pz+gun*cos, 51);
}
}
if(k3a[n]==295){
setTile(px+5*sin, py+2, pz+5*cos, 0);
setTile(px+6*sin, py+2, pz+6*cos, 0);
for(var gun=7;gun<10;gun++){
setTile(px+gun*sin, py+2, pz+gun*cos, 87);
setTile(px+gun*sin, py+3, pz+gun*cos, 51);
}
}
if(k3a[n]==290){
for(var gun=7;gun<10;gun++)
setTile(px+gun*sin, py+2, pz+gun*cos, 0);
ESP.antiLack(3);
explode(px+7*sin, py+2, pz+7*cos, 2);
explode(px+9*sin, py+2, pz+9*cos, 2);
}
if(k4a[n]==1796){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1792){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1788){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1784){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1780){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1776){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1772){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1768){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1764){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1760){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1756){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1752){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1748){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1744){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1740){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n])+0.2, Entity.getZ(k4b[n]), 0.5);
}
if(k4a[n]==1736){
explode(Entity.getX(k4b[n]), Entity.getY(k4b[n]), Entity.getZ(k4b[n]), 0.5);
}
}}
if(jungle[0]!=null){
for(var n in jungle){
if(j3a[n]==150){
ESP.antiLack(3);
explode(j3x[n]+0.5, j3y[n]+2, j3z[n]+0.5, 3);
}
if(j3a[n]==120){
for(var xx=j3x[n]-2;xx<j3x[n]+3;xx++)
for(var yy=j3y[n]+1;yy<j3y[n]+5;yy++)
for(var zz=j3z[n]-2;zz<j3z[n]+3;zz++)
if(getTile(xx, yy, zz)==48){
setTile(xx, yy, zz, 0);
}
}
if(j4a[n]==1780){
for(var xx=jx[n]-11;xx<jx[n]+12;xx++){
for(var zz=jz[n]-11;zz<jz[n]+12;zz++){
setTile(xx, jy[n], zz, 18, 3);
setTile(xx, jy[n]-1, zz, 17, 3);
setTile(xx, jy[n]-2, zz, 18, 3);
}}
}
if(j4a[n]==1775){
for(var xx=jx[n]-11;xx<jx[n]+12;xx++)
for(var yy=jy[n]-6;yy<jy[n]-2;yy++)
for(var zz=jz[n]-11;zz<jz[n]+12;zz++)
setTile(xx, yy, zz, 9);
setTile(jx[n]+6, jy[n]-6, jz[n]+6, 89);
setTile(jx[n]+6, jy[n]-6, jz[n], 89);
setTile(jx[n]+6, jy[n]-6, jz[n]-6, 89);
setTile(jx[n], jy[n]-6, jz[n]+6, 89);
setTile(jx[n], jy[n]-6, jz[n], 89);
setTile(jx[n], jy[n]-6, jz[n]-6, 89);
setTile(jx[n]-6, jy[n]-6, jz[n]+6, 89);
setTile(jx[n]-6, jy[n]-6, jz[n], 89);
setTile(jx[n]-6, jy[n]-6, jz[n]-6, 89);
Level.spawnMob(jx[n]+6, jy[n]-5, jz[n]+6, 32);
Level.spawnMob(jx[n]+6, jy[n]-5, jz[n], 32);
Level.spawnMob(jx[n]+6, jy[n]-5, jz[n]-6, 32);
Level.spawnMob(jx[n], jy[n]-5, jz[n]+6, 32);
Level.spawnMob(jx[n], jy[n]-5, jz[n], 32);
Level.spawnMob(jx[n], jy[n]-5, jz[n]-6, 32);
Level.spawnMob(jx[n]-6, jy[n]-5, jz[n]+6, 32);
Level.spawnMob(jx[n]-6, jy[n]-5, jz[n], 32);
Level.spawnMob(jx[n]-6, jy[n]-5, jz[n]-6, 32);
Level.spawnMob(jx[n], jy[n]-5, jz[n], 32);
Level.spawnMob(jx[n], jy[n]-5, jz[n], 32);
}
if(j4a[n]==900){
for(var xx=jx[n]-11;xx<jx[n]+12;xx++)
for(var yy=jy[n]-6;yy<jy[n]+1;yy++)
for(var zz=jz[n]-11;zz<jz[n]+12;zz++)
setTile(xx, yy, zz, 0);
setTile(jx[n]+6, jy[n]-6, jz[n]+6, 3);
setTile(jx[n]+6, jy[n]-6, jz[n], 3);
setTile(jx[n]+6, jy[n]-6, jz[n]-6, 3);
setTile(jx[n], jy[n]-6, jz[n]+6, 3);
setTile(jx[n], jy[n]-6, jz[n], 3);
setTile(jx[n], jy[n]-6, jz[n]-6, 3);
setTile(jx[n]-6, jy[n]-6, jz[n]+6, 3);
setTile(jx[n]-6, jy[n]-6, jz[n], 3);
setTile(jx[n]-6, jy[n]-6, jz[n]-6, 3);
}
}}
if(kanade[0]!=null){
for(var n in kanade){
if(ka3b[n]==true){
for(var xx=ka3x[n]-1;xx<ka3x[n]+2;xx++){
for(var yy=ka3y[n]+1;yy<ka3y[n]+4;yy++){
for(var zz=ka3z[n]-1;zz<ka3z[n]+2;zz++){
setTile(xx, yy, ka3z[n]+2, 20);
setTile(xx, yy, ka3z[n]-2, 20);
setTile(ka3x[n]+2 ,yy, zz, 20);
setTile(ka3x[n]-2 ,yy, zz, 20);
setTile(xx, ka3y[n]+4, zz, 20);
}}}
}
if(ka3a[n]==150&&ka3b[n]==true){
for(var xx=ka3x[n]-1;xx<ka3x[n]+2;xx++){
for(var yy=ka3y[n]+1;yy<ka3y[n]+4;yy++){
for(var zz=ka3z[n]-1;zz<ka3z[n]+2;zz++){
setTile(xx, yy, ka3z[n]+2, 0);
setTile(xx, yy, ka3z[n]-2, 0);
setTile(ka3x[n]+2 ,yy, zz, 0);
setTile(ka3x[n]-2 ,yy, zz, 0);
setTile(xx, ka3y[n]+4, zz, 0);
}}}
ka3b[n] =false;
}
if(ka4a[n]==1795){
ESP.antiLack(3);
explode(kax[n]+4, kay[n]+1, kaz[n]+4, 2);
explode(kax[n]+6, kay[n]+1, kaz[n], 2);
explode(kax[n]+4, kay[n]+1, kaz[n]-4, 2);
explode(kax[n], kay[n]+1, kaz[n]+6, 2);
explode(kax[n], kay[n]+1, kaz[n]-6, 2);
explode(kax[n]-4, kay[n]+1, kaz[n]+4, 2);
explode(kax[n]-6, kay[n]+1, kaz[n], 2);
explode(kax[n]-4, kay[n]+1, kaz[n]-4, 2);
}
if(ka4a[n]==1790){
ESP.antiLack(3);
explode(kax[n]+6, kay[n]+1, kaz[n]+6, 2.5);
explode(kax[n]+9, kay[n]+1, kaz[n], 2.5);
explode(kax[n]+6, kay[n]+1, kaz[n]-6, 2.5);
explode(kax[n], kay[n]+1, kaz[n]+9, 2.5);
explode(kax[n], kay[n]+1, kaz[n]-9, 2.5);
explode(kax[n]-6, kay[n]+1, kaz[n]+6, 2.5);
explode(kax[n]-9, kay[n]+1, kaz[n], 2.5);
explode(kax[n]-6, kay[n]+1, kaz[n]-6, 2.5);
}
if(ka4a[n]==1785){
ESP.antiLack(3);
explode(kax[n]+8, kay[n]+1, kaz[n]+8, 3);
explode(kax[n]+8, kay[n]+1, kaz[n]-8, 3);
explode(kax[n]-8, kay[n]+1, kaz[n]+8, 3);
explode(kax[n]-8, kay[n]+1, kaz[n]-8, 3);
explode(kax[n]+12, kay[n]+1, kaz[n]+3, 3);
explode(kax[n]-12, kay[n]+1, kaz[n]+3, 3);
explode(kax[n]+12, kay[n]+1, kaz[n]-3, 3);
explode(kax[n]-12, kay[n]+1, kaz[n]-3, 3);
explode(kax[n]+3, kay[n]+1, kaz[n]+12, 3);
explode(kax[n]+3, kay[n]+1, kaz[n]-12, 3);
explode(kax[n]-3, kay[n]+1, kaz[n]+12, 3);
explode(kax[n]-3, kay[n]+1, kaz[n]-12, 3);
}
if(ka4a[n]==1780){
ESP.antiLack(3);
explode(kax[n]+10, kay[n]+1, kaz[n]+10, 3.5);
explode(kax[n]+17, kay[n]+1, kaz[n], 3.5);
explode(kax[n]+10, kay[n]+1, kaz[n]-10, 3.5);
explode(kax[n], kay[n]+1, kaz[n]+17, 3.5);
explode(kax[n], kay[n]+1, kaz[n]-17, 3.5);
explode(kax[n]-10, kay[n]+1, kaz[n]+10, 3.5);
explode(kax[n]-17, kay[n]+1, kaz[n], 3.5);
explode(kax[n]-10, kay[n]+1, kaz[n]-1, 3.5);
explode(kax[n]+15, kay[n]+1, kaz[n]+5, 3.5);
explode(kax[n]-15, kay[n]+1, kaz[n]+5, 3.5);
explode(kax[n]+15, kay[n]+1, kaz[n]-5, 3.5);
explode(kax[n]-15, kay[n]+1, kaz[n]-5, 3.5);
explode(kax[n]+5, kay[n]+1, kaz[n]+15, 3.5);
explode(kax[n]+5, kay[n]+1, kaz[n]-15, 3.5);
explode(kax[n]-5, kay[n]+1, kaz[n]+15, 3.5);
explode(kax[n]-5, kay[n]+1, kaz[n]-15, 3.5);
}
}
}
if(time[0]!=null){
for(var n in time){
if(ti3a[n]>150){
teleport(ti3b[n], ti3x[n], ti3y[n], ti3z[n]);
}
if(ti3a==150){
if(getTile(ti3x[n], ti3y-0.75[n], ti3z[n])==95&&!ESP.isPlayer(ti3b[n])){
setTile(ti3x[n], ti3y-0.75[n], ti3z[n], 0);
}
if(getTile(ti3x[n], Entity.getY(ti3b[n])-2, ti3z[n])==95&&ESP.isPlayer(ti3b[n])){
setTile(ti3x[n], Entity.getY(ti3b[n])-2, ti3z[n], 0);
}
}
if(ti4a[n]>1350){
for(var ts=0;ts<ti4c+1;ts++){
teleport(ti4b[ts], tix[ts], tiy[ts], tiz[ts]);
if(Entity.getHealth(ti4b[ts])<=0&&!ESP.isPlayer(ti4b[ts]))
ti4b.splice(ts, 1);
tix.splice(ts, 1);
tiy.splice(ts, 1);
tiz.splice(ts, 1);
}
}
if(ti4a[n]==1350){
ESP.timeStop(false);
}
}}
if(snipe[0]!=null){
for(var n in snipe){
if(sn4a[n]==1350){
sn4b[n] = false;
for(var xx=sn4x[n]-2;xx<sn4x[n]+3;xx++)
for(var zz=sn4z[n]-2;zz<sn4z[n]+3;zz++)
setTile(xx, sn4y[n]+15, zz, 0);
teleport(snipe[n], sn4x[n], sn4y[n]+3, sn4z[n]);
}
if(snipe[0]!=null){
if(ESP.getSniperX(n)!=snx[n]||ESP.getSniperY(n)!=sny[n]||ESP.getSniperZ(n)!=snz[n]){
setTile(snx[n], sny[n], snz[n], sn4c[n], sn4d[n]);
snx[n] = ESP.getSniperX(n);
sny[n] = ESP.getSniperY(n);
snz[n] = ESP.getSniperZ(n);
sn4c[n] = getTile(snx[n], sny[n], snz[n]);
sn4d[n] = Level.getData(snx[n], sny[n], snz[n]);
if(!(sn4c[n]==54||sn4c[n]==51||sn4c[n]==64||sn4c[n]==26||sn4c[n]==63||sn4c[n]==68)){
setTile(snx[n], sny[n], snz[n], 35, 14);
}
}
}
}}
if(zombie[0]!=null){
for(var n in zombie){
if(Entity.getHealth(z2b[n])>0){
if(z2a[n]==270||z2a[n]==210||z2a[n]==165){
ESP.zombieFireAttack(n);
}
}
if(z2a[n]==150){
Entity.setHealth(z2b[n], 0);
}
if(Entity.getHealth(z3b[n])>0){
if(z3a[n]==270){
ESP.zombieWaterAttack(n);
}
if(z3a[n]==210){
if(z3y[n]!=null){
setTile(z3x[n], z3y[n], z3z[n], 0);
z3y[n] = null;
}
ESP.zombieWaterAttack(n);
}
if(z3a[n]==165){
if(z3y[n]!=null){
setTile(z3x[n], z3y[n], z3z[n], 0);
z3y[n] = null;
}
ESP.zombieWaterAttack(n);
}
}
if(z3a[n]==150){
Entity.setHealth(z3b[n], 0);
}
if(z3a[n]==135&&z3y[n]!=null){
setTile(z3x[n], z3y[n], z3z[n], 0);
z3y[n] = null;
}
}}
if(necro[0]!=null){
for(var n in necro){
if(Entity.getHealth(ne4b[n])>0){
if(ne4a[n]==1770||ne4a[n]==1695||ne4a[n]==1650||ne4a[n]==1590||ne4a[n]==1530||ne4a[n]==1485||ne4a[n]==1440||ne4a[n]==1390||ne4a[n]==1360||ne4a[n]==1330||ne4a[n]==1270||ne4a[n]==1195||ne4a[n]==1120||ne4a[n]==1075||ne4a[n]==1000||ne4a[n]==940||ne4a[n]==910){
ESP.necroAttack(n);
}
}
if(ne4a[n]==900){
Entity.setHealth(ne4b[n], 0);
Entity.setHealth(ne4c[n], 0);
}
if(asn3a[n]==295||asn3a[n]==290||asn3a[n]==285||asn3a[n]==280||asn3a[n]==275||asn3a[n]==270||asn3a[n]==265){
explode(Entity.getX(asn3b[n]), Entity.getY(asn3b[n])+0.2, Entity.getZ(asn3b[n]), 0.5);
}
}}
if(holy[0]!=null){
for(var n in holy){
if(ho1a[n]==145){
for(var gun=2;gun<7;gun++)
setTile(px+gun*sin, py+1, pz+gun*cos, 0);
ESP.antiLack(3);
explode(px+3*sin, py+1, pz+3*cos, 2);
}
if(ho2a[n]==295){
for(var yy=py+1;yy<py+6;yy++)
setTile(px, yy, pz, 0);
for(var ss=1;ss<6;ss++)
setTile(px+ss*sin, py+ss, pz+ss*cos, 155);
}
if(ho2a[n]==290){
for(var ss=1;ss<6;ss++){
setTile(px+ss*sin, py+ss, pz+ss*cos, 0);
setTile(px+ss*sin, py-1, pz+ ss*cos, 155);
}
}
if(ho2a[n]==285){
for(var ss=1;ss<6;ss++)
setTile(px+ss*sin, py-1, pz+ ss*cos, 0);
ESP.antiLack(3);
explode(px+4*sin, py-1, pz+4*cos, 2);
explode(px+7*sin, py-1, pz+7*cos, 2);
}
if(ho3a[n]==295){
for(var gun=3;gun<25;gun++){
setTile(px+gun*sin, py+2, pz+gun*cos, 0);
ESP.antiLack(3);
explode(px+gun*sin, py+2, pz+gun*cos, 1.7);
}
}
if(ho4a[n]==1795){
setTile(px-sin, py+1, pz-cos, 0);
setTile(px-sin, py+3, pz-cos, 0);
setTile(px-2*sin, py+2, pz-2*cos, 0);
setTile(px-3*sin, py+1, pz-3*cos, 0);
for(var ss=3;ss<8;ss++)
setTile(px-ss*sin, py+ss, pz-ss*cos, 0);
setTile(px, py+1, pz, 17, 2);
setTile(px+sin, py+2, pz+cos, 41);
setTile(px, py+2, pz, 41);
setTile(px-sin, py+2, pz-cos, 41);
for(var ss=3;ss<8;ss++)
setTile(px, py+ss, pz, 155);
}
if(ho4a[n]==1790){
setTile(px, py+1, pz, 0);
setTile(px+sin, py+2, pz+cos, 0);
setTile(px, py+2, pz, 0);
setTile(px-sin, py+2, pz-cos, 0);
for(var ss=3;ss<8;ss++)
setTile(px, py+ss, pz, 0);
setTile(px+sin, py+1, pz+cos, 17, 2);
setTile(px+sin, py+3, pz+cos, 41);
setTile(px+2*sin, py+2, pz+2*cos, 41);
setTile(px+3*sin, py+1, pz+3*cos, 41);
for(var ss=3;ss<8;ss++)
setTile(px+ss*sin, py+ss, pz+ss*cos, 155);
}
if(ho4a[n]==1785){
setTile(px, py, pz, 0);
setTile(px+sin, py+1, pz+cos, 0);
setTile(px+sin, py+3, pz+cos, 0);
setTile(px+2*sin, py+2, pz+2*cos, 0);
setTile(px+3*sin, py+1, pz+3*cos, 0);
for(var ss=3;ss<8;ss++)
setTile(px+ss*sin, py+ss, pz+ss*cos, 0);
setTile(px+sin, py-1, pz+cos, 17, 2);
setTile(px+2*sin, py-1, pz+2*cos, 17, 2);
setTile(px+3*sin, py-1, pz+3*cos, 41);
setTile(px+3*sin, py, pz+3*cos, 41);
setTile(px+3*sin, py-2, pz+3*cos, 41);
for(var ss=4;ss<9;ss++)
setTile(px+ss*sin, py-1, pz+ss*cos, 155);
}
if(ho4a[n]==1780){
setTile(px+sin, py-1, pz+cos, 0);
setTile(px+2*sin, py-1, pz+2*cos, 0);
setTile(px+3*sin, py-1, pz+3*cos, 0);
setTile(px+3*sin, py, pz+3*cos, 0);
setTile(px+3*sin, py-2, pz+3*cos, 0);
for(var ss=4;ss<9;ss++)
setTile(px+ss*sin, py-1, pz+ss*cos, 0);
ESP.antiLack(3);
for(var gun=3;gun<20;gun++)
explode(px+2*gun*sin, py+1, pz+2*gun*cos, 3);
explode(hox[0]+6, hoy+1, hoz[0]+6, 3);
explode(hox[0]+6, hoy+1, hoz[0], 3);
explode(hox[0]+6, hoy+1, hoz[0]-6, 3);
explode(hox[0], hoy+1, hoz[0]+6, 3);
explode(hox[0], hoy+1, hoz[0]-6, 3);
explode(hox[0]-6, hoy+1, hoz[0]+6, 3);
explode(hox[0]-6, hoy+1, hoz[0], 3);
explode(hox[0]-6, hoy+1, hoz[0]-6, 3);
}
}}
if(solar[0]!=null){
for(var n in solar){
if(sol2a[n]==295){
for(var gun=3;gun<25;gun++){
setTile(px+gun*sin, py+2, pz+gun*cos, 0);
ESP.antiLack(3);
explode(px+gun*sin, py+2, pz+gun*cos, 1.6);
}
}
if(sol4a[n]==1795){
for(var yy=soly[n]+5;yy<soly[n]+11;yy++)
setTile(solx[n], yy, solz[n], 0);
setTile(solx[n]+1, soly[n]+8, solz[n], 0);
setTile(solx[n]-1, soly[n]+8, solz[n], 0);
for(var yy=soly[n]+1;yy<soly[n]+5;yy++)
setTile(solx[n], yy, solz[n], 41);
setTile(solx[n]+1, soly[n]+5, solz[n], 42);
setTile(solx[n], soly[n]+5, solz[n], 42);
setTile(solx[n]-1, soly[n]+5, solz[n], 42);
setTile(solx[n], soly[n]+6, solz[n], 17);
setTile(solx[n], soly[n]+7, solz[n], 17);
ESP.solarHyperPlus(40);
}
if(sol4a[n]==1645){
for(var yy=soly[n]+1;yy<soly[n]+5;yy++)
setTile(solx[n], yy, solz[n], 0);
setTile(solx[n]+1, soly[n]+5, solz[n], 0);
setTile(solx[n], soly[n]+5, solz[n], 0);
setTile(solx[n]-1, soly[n]+5, solz[n], 0);
setTile(solx[n], soly[n]+6, solz[n], 0);
setTile(solx[n], soly[n]+7, solz[n], 0);
}
}}
if(lunar[0]!=null){
for(var n in lunar){
if(lu2a[n]==295){
for(var gun=3;gun<25;gun++){
setTile(px+gun*sin, py+2, pz+gun*cos, 0);
ESP.antiLack(3);
explode(px+gun*sin, py+2, pz+gun*cos, 1.6);
}
}
if(lu4a[n]==1795){
for(var yy=luy[n]+5;yy<luy[n]+12;yy++)
setTile(lux[n], yy, luz[n], 0);
setTile(lux[n]+1, luy[n]+10, luz[n], 0);
setTile(lux[n]-1, luy[n]+10, luz[n], 0);
setTile(lux[n], luy[n]+10, luz[n]+1, 0);
setTile(lux[n], luy[n]+10, luz[n]-1, 0);
for(var yy=luy[n]+1;yy<luy[n]+6;yy++)
setTile(lux[n], yy, luz[n], 17);
setTile(lux[n], luy[n]+6, luz[n], 155, 1);
setTile(lux[n], luy[n]+7, luz[n], 155, 1);
setTile(lux[n]+1, luy[n]+7, luz[n], 155, 1);
setTile(lux[n]-1, luy[n]+7, luz[n], 155, 1);
setTile(lux[n], luy[n]+7, luz[n]+1, 155, 1);
setTile(lux[n], luy[n]+7, luz[n]-1, 155, 1);
setTile(lux[n], luy[n]+8, luz[n], 155, 1);
ESP.lunarHyperPlus(lunar, 40);
}
if(lu4a[n]==1645){
for(var yy=luy[n]+1;yy<luy[n]+9;yy++)
setTile(lux[n], yy, luz[n], 0);
setTile(lux[n]+1, luy[n]+7, luz[n], 0);
setTile(lux[n]-1, luy[n]+7, luz[n], 0);
setTile(lux[n], luy[n]+7, luz[n]+1, 0);
setTile(lux[n], luy[n]+7, luz[n]-1, 0);
}
}}
if(has[0]!=null){
for(var n in has){
if(ha4a[n]==1770){
arroundMobHealthDown(has[n], 30, 5);
}
if(ha4a[n]==1740){
arroundMobHealthDown(has[n], 50, 10);
}
}}
if(zwei[0]!=null){
for(var n in zwei){
if(zw1a[n]==145){
ESP.antiLack(3);
for(var gun=3;gun<20;gun++)
explode(px+gun*sin, py+2, pz+gun*cos, 1.6);
}
if(zw2a[n]==150){
for(var xx=zw2x[n]-1;xx<zw2x[n]+2;xx++){
for(var yy=zw2y[n]+1;yy<zw2y[n]+4;yy++){
for(var zz=zw2z[n]-1;zz<zw2z[n]+2;zz++){
setTile(xx, yy, zw2z[n]+2, 0);
setTile(xx, yy, zw2z[n]-2, 0);
setTile(zw2x[n]+2, yy, zz, 0);
setTile(zw2x[n]-2, yy, zz, 0);
setTile(xx, zw2y[n]+4, zz, 0);
}}}
}
if(zw3a[n]>150){
zw3x[n] = Entity.getX(zwei[n]);
if(Entity.getPitch(zwei[n])==90){
zw3y[n] = Entity.getY(zwei[n])-3;
}
else{
zw3y[n] = Entity.getY(zwei[n])-2;
}
zw3z[n] = Entity.getZ(zwei[n]);
for(var xx=zw3x[n]-2;xx<zw3x[n]+3;xx++){
for(var zz=zw3z[n]-2;zz<zw3z[n]+3;zz++){
if(getTile(xx, zw3y[n]+1, zz)==20){
setTile(xx, zw3y[n]+1, zz, 0);
}
if(getTile(xx, zw3y[n]-1, zz)==20){
setTile(xx, zw3y[n]-1, zz, 0);
}
if(getTile(xx, zw3y[n], zw3z[n]+2)==20){
setTile(xx, zw3y[n], zw3z[n]+2, 0);
}
if(getTile(xx, zw3y[n], zw3z[n]-2)==20){
setTile(xx, zw3y[n], zw3z[n]-2, 0);
}
}}
for(var zz=zw3z[n]-1;zz<zw3z[n]+2;zz++){
if(getTile(zw3x[n]+2, zw3y[n], zz)==20){
setTile(zw3x[n]+2, zw3y[n], zz, 0);
}
if(getTile(zw3x[n]-2, zw3y[n], zz)==20){
setTile(zw3x[n]-2, zw3y[n], zz, 0);
}
for(var xx=zw3x[n]-1;xx<zw3x[n]+2;xx++)
if(getTile(xx, zw3y[n], zz)==0){
setTile(xx, zw3y[n], zz, 20);
}
}
}
if(zw3a[n]==150){
for(var xx=zw3x[n]-2;xx<zw3x[n]+3;xx++)
for(var yy=zw3y[n]-1;yy<zw3y[n]+2;yy++)
for(var zz=zw3z[n]-2;zz<zw3z[n]+3;zz++)
if(getTile(xx, yy, zz)==20){
setTile(xx, yy, zz, 0);
}
zw3b[n] = -1;
}
if(zw3b[n]>0){
zw3b[n]--;
}
if(zw3b[n]==-1){
zw3x[n] = Entity.getX(zwei[n]);
zw3y[n] = Entity.getY(zwei[n])-4;
zw3z[n] = Entity.getZ(zwei[n]);
if(getTile(zw3x[n], zw3y[n]-1, zw3z[n])!=0){
for(var xx=zw3x[n]-1;xx<zw3x[n]+2;xx++)
for(var zz=zw3z[n]-1;zz<zw3z[n]+2;zz++)
if(getTile(xx, zw3y[n]+1, zz)==0){
setTile(xx, zw3y[n]+1, zz, 30);
}
zw3b[n] = 16;
}
}
if(zw3b[n]==1){
for(var xx=zw3x[n]-1;xx<zw3x[n]+2;xx++)
for(var zz=zw3z[n]-1;zz<zw3z[n]+2;zz++)
if(getTile(xx, zw3y[n]+1, zz)==30){
setTile(xx, zw3y[n]+1, zz, 0);
}
}
if(zw4a[n]==1795){
for each(var pos in zw4b[n]){
setTile(pos[0]+1, pos[1]+2, pos[2]+1, 0);
setTile(pos[0]+1, pos[1]+2, pos[2]-1, 0);
setTile(pos[0]-1, pos[1]+2, pos[2]+1, 0);
setTile(pos[0]-1, pos[1]+2, pos[2]-1, 0);
setTile(pos[0], pos[1]+2, pos[2], 79);
}
}
if(zw4a[n]==1790){
ESP.antiLack(3);
for each(var pos in zw4b[n]){
setTile(pos[0], pos[1]+2, pos[2], 0);
explode(pos[0], pos[1]+1, pos[2], 2);
}
}
if(zw4a[n]==900){
zw4b[n] = [];
}
}}
if(deco[0]!=null){
for(var n in deco){
if(dec3a[n]==295){
ESP.antiLack(3)
explode(dec3x[n]+5, dec3y[n]+1, dec3z[n], 3);
explode(dec3x[n], dec3y[n]+1, dec3z[n]-5, 3);
explode(dec3x[n], dec3y[n]+1, dec3z[n]+5, 3);
explode(dec3x[n]-5, dec3y[n]+1, dec3z[n], 3);
for(var xx=dec3x[n]-6;xx<dec3x[n]+7;xx++)
for(var yy=dec3y[n]-1;yy<dec3y[n]+4;yy++)
for(var zz=dec3z[n]-6;zz<dec3z[n]+7;zz++)
if(getTile(xx, yy, zz)==89){
setTile(xx, yy, zz, 0)
}
}
if(dec4a[n]==1785){
ESP.antiLack(90);
}
if(dec4a[n]==1650){
for(var xx=decx[n]-8;xx<decx[n]+9;xx++){
for(var yy=decy[n];yy<decy[n]+6;yy++){
for(var zz=decz[n]-8;zz<decz[n]+9;zz++){
setTile(xx, yy, decz[n]+9, 0);
setTile(xx, yy, decz[n]-9, 0);
setTile(decx[n]+9, yy, zz, 0);
setTile(decx[n]-9, yy, zz, 0);
}}}
}
}}
if(climate[0]!=null){
for(var n in climate){
if(cli4a[n]==900){
for(var xx=clix[n]-12;xx<clix[n]+13;xx++){
for(var yy=cliy[n]-2;yy<cliy[n]+4;yy++){
for(var zz=cliz[n]-12;zz<cliz[n]+13;zz++){
if(getTile(xx, yy, zz)==79) setTile(xx, yy, zz, 9);
else if(getTile(xx, yy+1, zz)==78) setTile(xx, yy+1, zz, 0);
}}}
}
}}
if(raid[0]!=null){
for(var n in raid){
if(rr4a[n]==1350){
Entity.setHealth(rr0[n], Entity.getHealth(rr0[n])-10);
}
}}
if(wind[0]!=null){
for(var n in wind){
if(wi1a[n]==145){
ESP.antiLack(3);
explode(px+9*sin, py+1, pz+9*cos, 2);
}
if(wi1a[n]==140){
ESP.antiLack(3);
explode(px+13*sin, py+1, pz+13*cos, 2);
}
if(wi4a[n]==1790||wi4a[n]==1780||wi4a[n]==1770||wi4a[n]==1760||wi4a[n]==1750||wi4a[n]==1790){
for each(var pp in wi4b[n])
Entity.setHealth(pp, Entity.getHealth(pp)-2);
}
if(wi4a[n]==1350){
wi4b[n] = [];
}
}}
if(energy[0]!=null){
for(var n in energy){
if(en3a[n]==295){
for(var yy=en3y[n]+1;yy<en3y[n]+6;yy++){
setTile(en3x[n]+6, yy, en3z[n]+6, 0);
setTile(en3x[n]+6, yy, en3z[n], 0);
setTile(en3x[n]+6, yy, en3z[n]-6, 0);
setTile(en3x[n], yy, en3z[n]+6, 0);
setTile(en3x[n], yy, en3z[n]-6, 0);
setTile(en3x[n]-6, yy, en3z[n]+6, 0);
setTile(en3x[n]-6, yy, en3z[n], 0);
setTile(en3x[n]-6, yy, en3z[n]-6, 0);
}
ESP.antiLack(3);
explode(en3x[n]+6, en3y[n]+1, en3z[n]+6, 2);
explode(en3x[n]+6, en3y[n]+1, en3z[n], 2);
explode(en3x[n]+6, en3y[n]+1, en3z[n]-6, 2);
explode(en3x[n], en3y[n]+1, en3z[n]+6, 2);
explode(en3x[n], en3y[n]+1, en3z[n]-6, 2);
explode(en3x[n]-6, en3y[n]+1, en3z[n]+6, 2);
explode(en3x[n]-6, en3y[n]+1, en3z[n], 2);
explode(en3x[n]-6, en3y[n]+1, en3z[n]-6, 2);
explode(en3x[n]+6, en3y[n]+3, en3z[n]+6, 2);
explode(en3x[n]+6, en3y[n]+3, en3z[n], 2);
explode(en3x[n]+6, en3y[n]+3, en3z[n]-6, 2);
explode(en3x[n], en3y[n]+3, en3z[n]+6, 2);
explode(en3x[n], en3y[n]+3, en3z[n]-6, 2);
explode(en3x[n]-6, en3y[n]+3, en3z[n]+6, 2);
explode(en3x[n]-6, en3y[n]+3, en3z[n], 2);
explode(en3x[n]-6, en3y[n]+3, en3z[n]-6, 2);
}
if(en4a[n]==1770){
for each(var pp in en4b[n])
Entity.setHealth(pp, Entity.getHealth(pp)-5);
}
if(en4a[n]==1350){
en4b = [];
}
}}
if(geno[0]!=null){
for(var n in geno){
if(g2a[n]==150){
for(var xx=g2x[n]-1;xx<g2x[n]+2;xx++){
for(var yy=g2y[n]+1;yy<g2y[n]+4;yy++){
for(var zz=g2z[n]-1;zz<g2z[n]+2;zz++){
setTile(xx, yy, g2z[n]+2, 0);
setTile(xx, yy, g2z[n]-2, 0);
setTile(g2x[n]+2, yy, zz, 0);
setTile(g2x[n]-2, yy, zz, 0);
setTile(xx, g2y[n]+4, zz, 0);
}}}
}
}}
if(server[0]!=null){
for(var n in server){
if(se4a[n]>1350){
teleport(se4b[n], Entity.getX(ad), -5, Entity.getZ(ad));
}
if(se4a[n]==1350){
teleport(se4b[n], sex[n], sey[n]+1.5, sez[n]);
Entity.setHealth(se4b[n], se4c[n]);
}
}}
if(rgun[0]!=null){
for(var n in rgun){
if(rg1a[n]==147){
setTile(px+3*sin, py+2, pz+3*cos, 0);
setTile(px+4*sin, py+2, pz+4*cos, 0);
setTile(px+5*sin, py+2, pz+5*cos, 89);
setTile(px+6*sin, py+2, pz+6*cos, 89);
}
if(rg1a[n]==144){
setTile(px+5*sin, py+2, pz+5*cos, 0);
setTile(px+6*sin, py+2, pz+6*cos, 0);
setTile(px+7*sin, py+2, pz+7*cos, 89);
setTile(px+8*sin, py+2, pz+8*cos, 89);
}
if(rg1a[n]==141){
setTile(px+7*sin, py+2, pz+7*cos, 0);
setTile(px+8*sin, py+2, pz+8*cos, 0);
ESP.antiLack(3);
explode(px+7*sin, py+2, pz+7*cos, 2);
explode(px+9*sin, py+2, pz+9*cos, 2);
}
if(rg2a[n]==295){
for(var yy=py+1;yy<py+9;yy++)
setTile(px, yy, pz, 0);
setTile(px+sin, py+1, pz+cos, 15);
setTile(px+2*sin, py+2, pz+2*cos, 15);
setTile(px+3*sin, py+3, pz+3*cos, 15);
setTile(px+4*sin, py+4, pz+4*cos, 15);
setTile(px+5*sin, py+5, pz+5*cos, 15);
setTile(px+6*sin, py+6, pz+6*cos, 15);
setTile(px+7*sin, py+7, pz+7*cos, 15);
setTile(px+8*sin, py+8, pz+8*cos, 15);
}
if(rg2a[n]==290){
setTile(px+sin, py+1, pz+cos, 0);
setTile(px+2*sin, py+2, pz+2*cos, 0);
setTile(px+3*sin, py+3, pz+3*cos, 0);
setTile(px+4*sin, py+4, pz+4*cos, 0);
setTile(px+5*sin, py+5, pz+5*cos, 0);
setTile(px+6*sin, py+6, pz+6*cos, 0);
setTile(px+7*sin, py+7, pz+7*cos, 0);
setTile(px+8*sin, py+8, pz+8*cos, 0);
for(var gun=2;gun<10;gun++)
setTile(px+gun*sin, py-1, pz+gun*cos, 15);
}
if(rg2a[n]==285){
for(var gun=2;gun<10;gun++)
setTile(px+gun*sin, py-1, pz+gun*cos, 0);
ESP.antiLack(3);
explode(px+11*sin, py-1, pz+11*cos, 2);
explode(px+9*sin, py-1, pz+9*cos, 2);
explode(px+7*sin, py-1, pz+7*cos, 1.5);
explode(px+5*sin, py-1, pz+5*cos, 1.5);
}
if(rg3a[n]==297){
setTile(rg3x[n]+2, rg3y[n]+1, rg3z[n]+2, 0);
setTile(rg3x[n]+2, rg3y[n]+1, rg3z[n], 0);
setTile(rg3x[n]+2, rg3y[n]+1, rg3z[n]-2, 0);
setTile(rg3x[n], rg3y[n]+1, rg3z[n]+2, 0);
setTile(rg3x[n], rg3y[n]+1, rg3z[n]-2, 0);
setTile(rg3x[n]-2, rg3y[n]+1, rg3z[n]+2, 0);
setTile(rg3x[n]-2, rg3y[n]+1, rg3z[n], 0);
setTile(rg3x[n]-2, rg3y[n]+1, rg3z[n]-2, 0);
setTile(rg3x[n]+4, rg3y[n]+1, rg3z[n]+4, 89);
setTile(rg3x[n]+4, rg3y[n]+1, rg3z[n], 89);
setTile(rg3x[n]+4, rg3y[n]+1, rg3z[n]-4, 89);
setTile(rg3x[n], rg3y[n]+1, rg3z[n]+4, 89);
setTile(rg3x[n], rg3y[n]+1, rg3z[n]-4, 89);
setTile(rg3x[n]-4, rg3y[n]+1, rg3z[n]+4, 89);
setTile(rg3x[n]-4, rg3y[n]+1, rg3z[n], 89);
setTile(rg3x[n]-4, rg3y[n]+1, rg3z[n]-4, 89);
}
if(rg3a[n]==294){
setTile(rg3x[n]+4, rg3y[n]+1, rg3z[n]+4, 0);
setTile(rg3x[n]+4, rg3y[n]+1, rg3z[n], 0);
setTile(rg3x[n]+4, rg3y[n]+1, rg3z[n]-4, 0);
setTile(rg3x[n], rg3y[n]+1, rg3z[n]+4, 0);
setTile(rg3x[n], rg3y[n]+1, rg3z[n]-4, 0);
setTile(rg3x[n]-4, rg3y[n]+1, rg3z[n]+4, 0);
setTile(rg3x[n]-4, rg3y[n]+1, rg3z[n], 0);
setTile(rg3x[n]-4, rg3y[n]+1, rg3z[n]-4, 0);
setTile(rg3x[n]+6, rg3y[n]+1, rg3z[n]+6, 89);
setTile(rg3x[n]+6, rg3y[n]+1, rg3z[n], 89);
setTile(rg3x[n]+6, rg3y[n]+1, rg3z[n]-6, 89);
setTile(rg3x[n], rg3y[n]+1, rg3z[n]+6, 89);
setTile(rg3x[n], rg3y[n]+1, rg3z[n]-6, 89);
setTile(rg3x[n]-6, rg3y[n]+1, rg3z[n]+6, 89);
setTile(rg3x[n]-6, rg3y[n]+1, rg3z[n], 89);
setTile(rg3x[n]-6, rg3y[n]+1, rg3z[n]-6, 89);
}
if(rg3a[n]==291){
setTile(rg3x[n]+6, rg3y[n]+1, rg3z[n]+6, 0);
setTile(rg3x[n]+6, rg3y[n]+1, rg3z[n], 0);
setTile(rg3x[n]+6, rg3y[n]+1, rg3z[n]-6, 0);
setTile(rg3x[n], rg3y[n]+1, rg3z[n]+6, 0);
setTile(rg3x[n], rg3y[n]+1, rg3z[n]-6, 0);
setTile(rg3x[n]-6, rg3y[n]+1, rg3z[n]+6, 0);
setTile(rg3x[n]-6, rg3y[n]+1, rg3z[n], 0);
setTile(rg3x[n]-6, rg3y[n]+1, rg3z[n]-6, 0);
ESP.antiLack(3);
explode(rg3x[n]+6, rg3y[n]+1, rg3z[n]+6, 3);
explode(rg3x[n]+6, rg3y[n]+1, rg3z[n], 3);
explode(rg3x[n]+6, rg3y[n]+1, rg3z[n]-6, 3);
explode(rg3x[n], rg3y[n]+1, rg3z[n]+6, 3);
explode(rg3x[n], rg3y[n]+1, rg3z[n]-6, 3);
explode(rg3x[n]-6, rg3y[n]+1, rg3z[n]+6, 3);
explode(rg3x[n]-6, rg3y[n]+1, rg3z[n], 3);
explode(rg3x[n]-6, rg3y[n]+1, rg3z[n]-6, 3);
}
if(rg4a[n]==1795){
ESP.antiLack(3);
explode(px+5*sin, py+2, pz+5*cos, 3);
for(var gun=3;gun<31;gun++)
explode(px+2*gun*sin, py+2, pz+2*gun*cos, 3.5);
for(var gun=3;gun<11;gun++)
explode(px-gun*sin, py+2, pz-gun*cos, 1.7);
}
}}
if(copy[0]!=null){
for(var n in copy){
if(co2a[n]>150){
var cyaw, cpitch, csin, ccos, ctan, cpcos;
co2x[n] = Entity.getX(copy[n]);
co2y[n] = Entity.getY(copy[n]);
co2z[n] = Entity.getZ(copy[n]);
cyaw = Math.floor(Entity.getYaw(copy[n]));
cpitch = Math.floor(Entity.getPitch(copy[n]));
csin = -Math.sin(cyaw/180*Math.PI);
ccos = Math.cos(cyaw/180*Math.PI);
ctan = -Math.sin(cpitch/180*Math.PI);
cpcos = Math.cos(cpitch/180*Math.PI);
for(var gun=3;gun<30;gun++){
if(getTile(co2x[n]+gun*csin*cpcos, co2y[n]+gun*ctan, co2z[n]+gun*ccos*cpcos)!=0&&getTile(co2x[n]+gun*csin*cpcos, co2y[n]+gun*ctan+1, co2z[n]+gun*ccos*cpcos)==0){
setTile(co2x[n]+gun*csin*cpcos, co2y[n]+gun*ctan+1, co2z[n]+gun*ccos*cpcos, 51);
break;
}
}
}
if(co3a[n]==150){
teleport(co3b[n], co3x[n], co3y[n]+1, co3z[n]);
}
if(co4a[n]==1795){
ESP.antiLack(3);
explode(cox[n]+4, coy[n]+1, coz[n]+4, 2);
explode(cox[n]+5, coy[n]+1, coz[n], 2);
explode(cox[n]+4, coy[n]+1, coz[n]-4, 2);
explode(cox[n], coy[n]+1, coz[n]+5, 2);
explode(cox[n], coy[n]+1, coz[n]-5, 2);
explode(cox[n]-4, coy[n]+1, coz[n]+4, 2);
explode(cox[n]-5, coy[n]+1, coz[n], 2);
explode(cox[n]-4, coy[n]+1, coz[n]-4, 2);
}
if(co4a[n]==1790){
explode(cox[n]+7, coy[n]+1, coz[n]+7, 3);
explode(cox[n]+9, coy[n]+1, coz[n], 3);
explode(cox[n]+7, coy[n]+1, coz[n]-7, 3);
explode(cox[n], coy[n]+1, coz[n]+9, 3);
explode(cox[n], coy[n]+1, coz[n]-9, 3);
explode(cox[n]-7, coy[n]+1, coz[n]+7, 3);
explode(cox[n]-9, coy[n]+1, coz[n], 3);
explode(cox[n]-7, coy[n]+1, coz[n]-7, 3);
}
if(co4a[n]==1785){
for(var xx=cox[n]-13;xx<cox[n]+14;xx++)
for(var yy=coy[n]-4;yy<coy[n]+1;yy++)
for(var zz=coz[n]-13;zz<coz[n]+14;zz++)
if(getTile(xx, yy, zz)==0){
setTile(xx, yy, zz, 51);
}
}
if(co4a[n]==1780){
arroundMobFireTicks(copy[n], 15, 20);
}
if(co4a[n]==1765){
for(var xx=cox[n]-1;xx<cox[n]+2;xx++)
for(var yy=coy[n]+1;yy<coy[n]+8;yy++)
for(var zz=coz[n]-1;zz<coz[n]+2;zz++)
setTile(xx, yy, zz, 0);
setTile(cox[n], coy[n]+8, coz[n], 0);
setTile(cox[n], coy[n]+6, coz[n]+2, 0);
setTile(cox[n], coy[n]+6, coz[n]+3, 0);
setTile(cox[n], coy[n]+5, coz[n]+3, 0);
setTile(cox[n], coy[n]+4, coz[n]+3, 0);
setTile(cox[n], coy[n]+3, coz[n]+3, 0);
setTile(cox[n], coy[n]+6, coz[n]-2, 0);
setTile(cox[n], coy[n]+6, coz[n]-3, 0);
setTile(cox[n], coy[n]+6, coz[n]-3, 0);
setTile(cox[n], coy[n]+5, coz[n]-3, 0);
setTile(cox[n], coy[n]+4, coz[n]-3, 0);
setTile(cox[n], coy[n]+3, coz[n]-3, 0);
setTile(cox[n]+2, coy[n]+6, coz[n], 0);
setTile(cox[n]+3, coy[n]+6, coz[n], 0);
setTile(cox[n]+3, coy[n]+5, coz[n], 0);
setTile(cox[n]+3, coy[n]+4, coz[n], 0);
setTile(cox[n]+3, coy[n]+3, coz[n], 0);
setTile(cox[n]-2, coy[n]+6, coz[n], 0);
setTile(cox[n]-3, coy[n]+6, coz[n], 0);
setTile(cox[n]-3, coy[n]+5, coz[n], 0);
setTile(cox[n]-3, coy[n]+4, coz[n], 0);
setTile(cox[n]-3, coy[n]+3, coz[n], 0);
}
}}
if(dragon[0]!=null){
for(var n in dragon){
if(dr2a[n]==295){
ESP.antiLack(3);
for(var gun=3;gun<25;gun++){
setTile(px+gun*sin, py+1, pz+gun*cos, 0);
explode(px+gun*sin, py+2, pz+gun*cos, 1.5);
}
}
if(dr4a[n]==1795){
for(var xx=drx[n]-5;xx<drx[n]+6;xx++)
for(var zz=drz[n]-5;zz<drz[n]+6;zz++)
setTile(xx, dry[n]+9, zz, 35, 10);
}
if(dr4a[n]==1790){
for(var xx=drx[n]-8;xx<drx[n]+9;xx++)
for(var zz=drz[n]-8;zz<drz[n]+9;zz++)
setTile(xx, dry[n]+9, zz, 35, 10);
}
if(dr4a[n]==1785){
for(var xx=drx[n]-11;xx<drx[n]+12;xx++)
for(var zz=drz[n]-11;zz<drz[n]+12;zz++)
setTile(xx, dry[n]+9, zz, 35, 10);
}
if(dr4a[n]==1780){
for(var yy=dry[n]+1;yy<dry[n]+9;yy++){
setTile(drx[n]+7, yy, drz[n]+7, 89);
setTile(drx[n]+7, yy, drz[n], 89);
setTile(drx[n]+7, yy, drz[n]-7, 89);
setTile(drx[n], yy, drz[n]+7, 89);
setTile(drx[n], yy, drz[n]-7, 89);
setTile(drx[n]-7, yy, drz[n]+7, 89);
setTile(drx[n]-7, yy, drz[n], 89);
setTile(drx[n]-7, yy, drz[n]-7, 89);
}
}
if(dr4a[n]==1775){
for(var yy=dry[n]+1;yy<dry[n]+9;yy++){
setTile(drx[n]+7, yy, drz[n]+7, 0);
setTile(drx[n]+7, yy, drz[n], 0);
setTile(drx[n]+7, yy, drz[n]-7, 0);
setTile(drx[n], yy, drz[n]+7, 0);
setTile(drx[n], yy, drz[n]-7, 0);
setTile(drx[n]-7, yy, drz[n]+7, 0);
setTile(drx[n]-7, yy, drz[n], 0);
setTile(drx[n]-7, yy, drz[n]-7, 0);
}
ESP.antiLack(3);
explode(drx[n]+7, dry[n]+1, drz[n]+7, 3);
explode(drx[n]+7, dry[n]+1, drz[n], 3);
explode(drx[n]+7, dry[n]+1, drz[n]-7, 3);
explode(drx[n], dry[n]+1, drz[n]+7, 3);
explode(drx[n], dry[n]+1, drz[n]-7, 3);
explode(drx[n]-7, dry[n]+1, drz[n]+7, 3);
explode(drx[n]-7, dry[n]+1, drz[n], 3);
explode(drx[n]-7, dry[n]+1, drz[n]-7, 3);
explode(drx[n]+7, dry[n]+3, drz[n]+7, 2);
explode(drx[n]+7, dry[n]+3, drz[n], 2);
explode(drx[n]+7, dry[n]+3, drz[n]-7, 2);
explode(drx[n], dry[n]+3, drz[n]+7, 2);
explode(drx[n], dry[n]+3, drz[n]-7, 2);
explode(drx[n]-7, dry[n]+3, drz[n]+7, 2);
explode(drx[n]-7, dry[n]+3, drz[n], 2);
explode(drx[n]-7, dry[n]+3, drz[n]-7, 2);
}
if(dr4a[n]==1760){
for(var xx=drx[n]-11;xx<drx[n]+12;xx++)
for(var zz=drz[n]-11;zz<drz[n]+12;zz++)
setTile(xx, dry[n]+9, zz, 0);
}
}}
if(hawk[0]!=null){
for(var n in hawk){
if(hw2a[n]>150&&(hw2a[n]%5)==0){
var hyaw, hpitch, hsin, hcos, htan, ypcos;
hwxa[n] = Entity.getX(hawk[n]);
hwya[n] = Entity.getY(hawk[n]);
hwza[n] = Entity.getZ(hawk[n]);
hyaw = Math.floor(Entity.getYaw(hawk[n]));
hpitch = Math.floor(Entity.getPitch(hawk[n]));
hsin = -Math.sin(hyaw/180*Math.PI);
hcos = Math.cos(hyaw/180*Math.PI);
htan = -Math.sin(hpitch/180*Math.PI);
hpcos = Math.cos(hpitch/180*Math.PI);
for(var gun=3;gun<30;gun++){
if(getTile(hwxa[n]+gun*hsin*hpcos, hwya[n]+gun*htan, hwza[n]+gun*hcos*hpcos)!=0&&getTile(hwza[n]+gun*hsin*hpcos, hwya[n]+gun*htan+1, hwza[n]+gun*hcos*hpcos)==0){
setTile(hwxa[n]+gun*hsin*hpcos, hwya[n]+gun*htan+1, hwza[n]+gun*hcos*hpcos, 8);
hw2x[n].push(hwxa[n]+gun*hsin*hpcos);
hw2y[n].push(hwya[n]+gun*htan+1);
hw2z[n].push(hwza[n]+gun*hcos*hpcos);
break;
}
}
}
if(hw2a[n]==75){
for(var nn in hw2x[n]){
for(var xx=hw2x[n][nn]-2;xx<hw2x[n][nn]+3;xx++)
for(var zz=hw2z[n][nn]-2;zz<hw2z[n][nn]+3;zz++)
if(getTile(xx, hw2y[n][nn], zz)==8||getTile(xx, hw2y[n][nn], zz)==9){
setTile(xx, hw2y[n][nn], zz, 0);
}
}
}
if(hw2a[n]==30){
hw2x[n] = [];
hw2y[n] = [];
hw2z[n] = [];
}
if(hw4a[n]==1795){
ESP.antiLack(3);
explode(hwx[n]+4, hwy[n]+1, hwz[n]+4, 2);
explode(hwx[n]+5, hwy[n]+1, hwz[n], 2);
explode(hwx[n]+4, hwy[n]+1, hwz[n]-4, 2);
explode(hwx[n], hwy[n]+1, hwz[n]+5, 2);
explode(hwx[n], hwy[n]+1, hwz[n]-5, 2);
explode(hwx[n]-4, hwy[n]+1, hwz[n]+4, 2);
explode(hwx[n]-5, hwy[n]+1, hwz[n], 2);
explode(hwx[n]-4, hwy[n]+1, hwz[n]-4, 2);
}
if(hw4a[n]==1790){
explode(hwx[n]+7, hwy[n]+1, hwz[n]+7, 3);
explode(hwx[n]+9, hwy[n]+1, hwz[n], 3);
explode(hwx[n]+7, hwy[n]+1, hwz[n]-7, 3);
explode(hwx[n], hwy[n]+1, hwz[n]+9, 3);
explode(hwx[n], hwy[n]+1, hwz[n]-9, 3);
explode(hwx[n]-7, hwy[n]+1, hwz[n]+7, 3);
explode(hwx[n]-9, hwy[n]+1, hwz[n], 3);
explode(hwx[n]-7, hwy[n]+1, hwz[n]-7, 3);
}
if(hw4a[n]==1785){
for(var xx=hwx[n]-13;xx<hwx[n]+14;xx++)
for(var yy=hwy[n]-4;yy<hwy[n]+1;yy++)
for(var zz=hwz[n]-13;zz<hwz[n]+14;zz++)
if(getTile(xx, yy, zz)==0){
setTile(xx, yy, zz, 9);
}
}
if(hw4a[n]==1780){
arroundMobHealthDown(hawk[n], 15, 10);
}
if(hw4a[n]==1765){
for(var xx=hwx[n]-1;xx<hwx[n]+2;xx++)
for(var yy=hwy[n]+1;yy<hwy[n]+8;yy++)
for(var zz=hwz[n]-1;zz<hwz[n]+2;zz++)
setTile(xx, yy, zz, 0);
setTile(hwx[n], hwy[n]+8, hwz[n], 0);
setTile(hwx[n], hwy[n]+6, hwz[n]+2, 0);
setTile(hwx[n], hwy[n]+6, hwz[n]+3, 0);
setTile(hwx[n], hwy[n]+5, hwz[n]+3, 0);
setTile(hwx[n], hwy[n]+4, hwz[n]+3, 0);
setTile(hwx[n], hwy[n]+3, hwz[n]+3, 0);
setTile(hwx[n], hwy[n]+6, hwz[n]-2, 0);
setTile(hwx[n], hwy[n]+6, hwz[n]-3, 0);
setTile(hwx[n], hwy[n]+6, hwz[n]-3, 0);
setTile(hwx[n], hwy[n]+5, hwz[n]-3, 0);
setTile(hwx[n], hwy[n]+4, hwz[n]-3, 0);
setTile(hwx[n], hwy[n]+3, hwz[n]-3, 0);
setTile(hwx[n]+2, hwy[n]+6, hwz[n], 0);
setTile(hwx[n]+3, hwy[n]+6, hwz[n], 0);
setTile(hwx[n]+3, hwy[n]+5, hwz[n], 0);
setTile(hwx[n]+3, hwy[n]+4, hwz[n], 0);
setTile(hwx[n]+3, hwy[n]+3, hwz[n], 0);
setTile(hwx[n]-2, hwy[n]+6, hwz[n], 0);
setTile(hwx[n]-3, hwy[n]+6, hwz[n], 0);
setTile(hwx[n]-3, hwy[n]+5, hwz[n], 0);
setTile(hwx[n]-3, hwy[n]+4, hwz[n], 0);
setTile(hwx[n]-3, hwy[n]+3, hwz[n], 0);
setTile(hwx[n]+3, hwy[n]+7, hwz[n], 0);
setTile(hwx[n]-3, hwy[n]+7, hwz[n], 0);
setTile(hwx[n], hwy[n]+7, hwz[n]+3, 0);
setTile(hwx[n], hwy[n]+7, hwz[n]-3, 0);
}
}}
if(solid[0]!=null){
for(var n in solid){
if(sd4a[n]==1770){
ESP.antiLack(3);
for(var n=0;n<sdx[n].length;n++){
for(var xx=sdx[n][nn]-1;xx<sdx[n][nn]+2;xx++)
for(var yy=sdy[n][nn]+1;yy<sdy[n][nn]+4;yy++)
for(var zz=sdz[n][nn]-1;zz<sdz[n][nn]+2;zz++)
setTile(xx, yy, zz, 0);
explode(sdx[n][nb], sdy[n][nn]+2.3, sdz[n][nn], 2);
}
}
if(sd4a[n]==1740){
sdx[n] = [];
sdy[n] = [];
sdz[n] = [];
}
if(sd2a[n]==900){
sd2x[n] = [];
sd2y[n] = [];
sd2z[n] = [];
}
}}
if(gravity[0]!=null){
for(var n in gravity){
if(!(gr1b[n]==7||gr1b[n]==95)){
if(gr1a[n]==147){
setTile(gr1x[n], gr1y[n]+1, gr1z[n], 0);
setTile(gr1x[n], gr1y[n]+2, gr1z[n], gr1b[n], gr1c[n]);
}
if(gr1a[n]==144){
setTile(gr1x[n], gr1y[n]+2, gr1z[n], 0);
setTile(gr1x[n], gr1y[n]+3, gr1z[n], gr1b[n], gr1c[n]);
}
if(gr1a[n]==141){
setTile(gr1x[n], gr1y[n]+3, gr1z[n], 0);
ESP.antiLack(3);
explode(gr1x[n], gr1y[n]+3, gr1z[n], 2.5);
}
}
if(gr4a[n]==1795){
setTile(grx[n]+7, gry[n]+2, grz[n]+7, 2);
setTile(grx[n]+7, gry[n]+2, grz[n], 2);
setTile(grx[n]+7, gry[n]+2, grz[n]-7, 2);
setTile(grx[n], gry[n]+2, grz[n]+7, 2);
setTile(grx[n], gry[n]+2, grz[n]-7, 2);
setTile(grx[n]-7, gry[n]+2, grz[n]+7, 2);
setTile(grx[n]-7, gry[n]+2, grz[n], 2);
setTile(grx[n]-7, gry[n]+2, grz[n]-7, 2);
setTile(grx[n]+7, gry[n]+1, grz[n]+7, 0);
setTile(grx[n]+7, gry[n]+1, grz[n], 0);
setTile(grx[n]+7, gry[n]+1, grz[n]-7, 0);
setTile(grx[n], gry[n]+1, grz[n]+7, 0);
setTile(grx[n], gry[n]+1, grz[n]-7, 0);
setTile(grx[n]-7, gry[n]+1, grz[n]+7, 0);
setTile(grx[n]-7, gry[n]+1, grz[n], 0);
setTile(grx[n]-7, gry[n]+1, grz[n]-7, 0);
}
if(gr4a[n]==1790){
setTile(grx[n]+7, gry[n]+3, grz[n]+7, 2);
setTile(grx[n]+7, gry[n]+3, grz[n], 2);
setTile(grx[n]+7, gry[n]+3, grz[n]-7, 2);
setTile(grx[n], gry[n]+3, grz[n]+7, 2);
setTile(grx[n], gry[n]+3, grz[n]-7, 2);
setTile(grx[n]-7, gry[n]+3, grz[n]+7, 2);
setTile(grx[n]-7, gry[n]+3, grz[n], 2);
setTile(grx[n]-7, gry[n]+3, grz[n]-7, 2);
setTile(grx[n]+7, gry[n]+2, grz[n]+7, 0);
setTile(grx[n]+7, gry[n]+2, grz[n], 0);
setTile(grx[n]+7, gry[n]+2, grz[n]-7, 0);
setTile(grx[n], gry[n]+2, grz[n]+7, 0);
setTile(grx[n], gry[n]+2, grz[n]-7, 0);
setTile(grx[n]-7, gry[n]+2, grz[n]+7, 0);
setTile(grx[n]-7, gry[n]+2, grz[n], 0);
setTile(grx[n]-7, gry[n]+2, grz[n]-7, 0);
}
if(gr4a[n]==1785){
for(var xx=grx[n]-9;xx<grx[n]+10;xx++)
for(var zz=grz[n]-9;zz<grz[n]+10;zz++)
setTile(xx, gry[n], zz, 0);
arroundMobHealthDown(gravity[n], 9, 3);
}
if(gr4a[n]==1780){
ESP.antiLack(3);
explode(grx[n]+7, gry[n]+1, grz[n]+7, 2.5);
explode(grx[n]+7, gry[n]+1, grz[n], 2.5);
explode(grx[n]+7, gry[n]+1, grz[n]-7, 2.5);
explode(grx[n], gry[n]+1, grz[n]+7, 2.5);
explode(grx[n], gry[n]+1, grz[n]-7, 2.5);
explode(grx[n]-7, gry[n]+1, grz[n]+7, 2.5);
explode(grx[n]-7, gry[n]+1, grz[n], 2.5);
explode(grx[n]-7, gry[n]+1, grz[n]-7, 2.5);
explode(grx[n]+7, gry[n]+3, grz[n]+7, 2.5);
explode(grx[n]+7, gry[n]+3, grz[n], 2.5);
explode(grx[n]+7, gry[n]+3, grz[n]-7, 2.5);
explode(grx[n], gry[n]+3, grz[n]+7, 2.5);
explode(grx[n], gry[n]+3, grz[n]-7, 2.5);
explode(grx[n]-7, gry[n]+3, grz[n]+7, 2.5);
explode(grx[n]-7, gry[n]+3, grz[n], 2.5);
explode(grx[n]-7, gry[n]+3, grz[n]-7, 2.5);
}
}}

//lalala

if(hass2c[2]>0){
hass2c[2]--;
}
if(hass2c[2]==1){
setTile(hass2x, hass2y, hass2z, hass2c[0], hass2c[1]);
}
if(hass4a==1770){
for(var n=0;n<hass4b.length;n++)
Entity.setHealth(hass4b[n], Entity.getHealth(hass4b[n])-10);
}
if(hass4a==1350){
for(var n=0;n<hass4b.length;n++)
Entity.setHealth(hass4b[n], Entity.getHealth(hass4b[n])-5);
}
if(hass4a==1320){
while(hass4b[0]!=null)
hass4b.shift();
}
if(sk2a==255){
Entity.setHealth(sk2b, Entity.getHealth(sk2b)-6);
}
if(bl1a==145){
for(var yy=py+1;yy<py+8;yy++)
setTile(px, yy, pz, 0);
setTile(px+sin, py+1, pz+cos, 49);
setTile(px+2*sin, py+2, pz+2*cos, 49);
setTile(px+3*sin, py+3, pz+3*cos, 49);
setTile(px+4*sin, py+4, pz+4*cos, 49);
setTile(px+5*sin, py+5, pz+5*cos, 49);
setTile(px+6*sin, py+6, pz+6*cos, 49);
setTile(px+7*sin, py+7, pz+7*cos, 49);
setTile(px+8*sin, py+8, pz+8*cos, 49);
}
if(bl1a==140){
setTile(px+sin, py+1, pz+cos, 0);
setTile(px+2*sin, py+2, pz+2*cos, 0);
setTile(px+3*sin, py+3, pz+3*cos, 0);
setTile(px+4*sin, py+4, pz+4*cos, 0);
setTile(px+5*sin, py+5, pz+5*cos, 0);
setTile(px+6*sin, py+6, pz+6*cos, 0);
setTile(px+7*sin, py+7, pz+7*cos, 0);
setTile(px+8*sin, py+8, pz+8*cos, 0);
for(var gun=2;gun<9;gun++)
setTile(px+gun*sin, py-1, pz+gun*cos, 49);
setTile(px+9*sin, py-1, pz+9*cos, 49);
}
if(bl1a==135){
for(var gun=2;gun<10;gun++)
setTile(px+gun*sin, py-1, pz+gun*cos, 0);
ESP.antiLack(3);
explode(px+9*sin, py-1, pz+9*cos, 2);
explode(px+7*sin, py-1, pz+7*cos, 1.5);
explode(px+5*sin, py-1, pz+5*cos, 1.5);
}
if(bl2a==295){
for(var gun=3;gun<25;gun++){
setTile(px+gun*sin, py+2, pz+gun*cos, 0);
explode(px+gun*sin, py+2, pz+gun*cos, 1.5);
}
}
if(bl3a==295){
ESP.antiLack(3);
for(var gun=3;gun<12;gun++){
setTile(px+gun*sin, py+2, pz+gun*cos, 0);
setTile(px-gun*sin, py+2, pz-gun*cos, 0);
explode(px+gun*sin, py+2, pz+gun*cos, 1.6);
explode(px-gun*sin, py+2, pz-gun*cos, 1.6);
}
}
if(bl4a==1795){
for(var bl4b=3;bl4b<17;bl4b++){
setTile(blx+bl4b, bly+2, blz+bl4b, 0);
setTile(blx+bl4b, bly+2, blz, 0);
setTile(blx+bl4b, bly+2, blz-bl4b, 0);
setTile(blx, bly+2, blz+bl4b, 0);
setTile(blx, bly+2, blz-bl4b, 0);
setTile(blx-bl4b, bly+2, blz+bl4b, 0);
setTile(blx-bl4b, bly+2, blz, 0);
setTile(blx-bl4b, bly+2, blz-bl4b, 0);
}
ESP.antiLack(3);
for(var bl4b=2;bl4b<9;bl4b++){
explode(blx+2*bl4b, bly+1, blz+2*bl4b, 2);
explode(blx+2*bl4b, bly+1, blz, 2);
explode(blx+2*bl4b, bly+1, blz-2*bl4b, 2);
explode(blx, bly+1, blz+2*bl4b, 2);
explode(blx, bly+1, blz-2*bl4b, 2);
explode(blx-2*bl4b, bly+1, blz+2*bl4b, 2);
explode(blx-2*bl4b, bly+1, blz, 2);
explode(blx-2*bl4b, bly+1, blz-2*bl4b, 2);
}
}
if(sl2a==290){
Entity.setHealth(sl2b, Entity.getHealth(sl2b)-3);
}
if(sl2a==280){
Entity.setHealth(sl2b, Entity.getHealth(sl2b)-2);
}
if(sl4a==1795){
explode(slx+6, sly+1, slz+6, 3);
explode(slx+6, sly+1, slz-6, 3);
explode(slx-6, sly+1, slz+6, 3);
explode(slx-6, sly+1, slz-6, 3);
}
if(sl4a==1790){
arroundMobHealthDown(slash, 10, 5);
}
if(ni2a==295){
setTile(px, py+1, pz, 0);
ESP.antiLack(3);
explode(px, py+1, pz, 2);
}
if(ni4a==900){
Level.setTime(0);
}
if(bl3a==295){
ESP.antiLack(3);
for(var gun=3;gun<12;gun++){
setTile(px+gun*sin, py+2, pz+gun*cos, 0);
setTile(px-gun*sin, py+2, pz-gun*cos, 0);
explode(px+gun*sin, py+2, pz+gun*cos, 1.6);
explode(px-gun*sin, py+2, pz-gun*cos, 1.6);
}
}
if(dc4a==1785){
Entity.setHealth(dc4c, Entity.getHealth(dc4c)-5);
}
if(dc4a==1770){
Entity.setHealth(dc4c, Entity.getHealth(dc4c)-5);
}
if(dc4a==1350){
Entity.setHealth(dc4c, Entity.getHealth(dc4c)-8);
}
if(am2a==295){
for(var gun=3;gun<25;gun++)
explode(px+gun*sin, py+2, pz+gun*cos, 1.7);
}
if(am4a==1785){
for(var xx=amx-12;xx<amx+13;xx++)
for(var zz=amz-12;zz<amz+13;zz++)
setTile(xx, amy-1, zz, 0);
}
if(am4a==1770){
for(var xx=amx-12;xx<amx+13;xx++)
for(var zz=amz-12;zz<amz+13;zz++)
setTile(xx, amy-2, zz, 51);
}
if(pm3a>150){
pmx = Entity.getX(puella);
if(Entity.getPitch(puella)==90){
pmy = Entity.getY(puella)-3;
}
else{
pmy = Entity.getY(puella)-2;
}
pmz = Entity.getZ(puella);
for(var xx=pmx-2;xx<pmx+3;xx++){
for(var zz=pmz-2;zz<pmz+3;zz++){
if(getTile(xx, pmy+1, zz)==20){
setTile(xx, pmy+1, zz, 0);
}
if(getTile(xx, pmy-1, zz)==20){
setTile(xx, pmy-1, zz, 0);
}
if(getTile(xx, pmy, pmz+2)==20){
setTile(xx, pmy, pmz+2, 0);
}
if(getTile(xx, pmy, pmz-2)==20){
setTile(xx, pmy, pmz-2, 0);
}
}}
for(var zz=pmz-1;zz<pmz+2;zz++){
if(getTile(pmx+2, pmy, zz)==20){
setTile(pmx+2, pmy, zz, 0);
}
if(getTile(pmx-2, pmy, zz)==20){
setTile(pmx-2, pmy, zz, 0);
}
for(var xx=pmx-1;xx<pmx+2;xx++)
if(getTile(xx, pmy, zz)==0){
setTile(xx, pmy, zz, 20);
}
}
}
if(pm3a==150){
for(var xx=pmx-2;xx<pmx+3;xx++)
for(var yy=pmy-1;yy<pmy+2;yy++)
for(var zz=pmz-2;zz<pmz+3;zz++)
if(getTile(xx, yy, zz)==20){
setTile(xx, yy, zz, 0);
}
pm3b = -1;
}
if(pm3b>0){
pm3b--;
}
if(pm3b==-1){
pmx = Entity.getX(puella);
pmy = Entity.getY(puella)-4;
pmz = Entity.getZ(puella);
if(getTile(pmx, pmy-1, pmz)!=0){
for(var xx=pmx-1;xx<pmx+2;xx++)
for(var zz=pmz-1;zz<pmz+2;zz++)
if(getTile(xx, pmy+1, zz)==0){
setTile(xx, pmy+1, zz, 30);
}
pm3b = 16;
}
}
if(pm3b==1){
for(var xx=pmx-1;xx<pmx+2;xx++)
for(var zz=pmz-1;zz<pmz+2;zz++)
if(getTile(xx, pmy+1, zz)==30){
setTile(xx, pmy+1, zz, 0);
}
}
if(sc3a>150){
var scyaw, scsin, sccos;
sc3x = Entity.getX(scalar);
sc3y = Entity.getY(scalar)-1;
sc3z = Entity.getZ(scalar);
scyaw = Math.floor(Entity.getYaw(scalar));
scsin = -Math.sin(scyaw/180*Math.PI);
sccos = Math.cos(scyaw/180*Math.PI);
if(getTile(sc3x-2*scsin, sc3y, sc3z-2*sccos)==0){
setTile(sc3x-2*scsin, sc3y, sc3z-2*sccos, 51);
}
}
if(sc4a==1795){
ESP.antiLack(3);
for(var n=0;n<scx.length;n++)
explode(scx[n], scy[n]+0.6, scz[n], 2);
}
if(sc4a==1350){
while(scx[0]!=null){
scx.shift();
scy.shift();
scz.shift();
}
}
if(v1a==145){
explode(v1x+vxa, v1y+1.2, v1z+vza, 2.5);
}
if(v1a==140){
ESP.antiLack(3);
explode(v1x+2*vxa, v1y+1.2, v1z+2*vza, 2.5);
}
if(v3b<25&&v3a%2==0){
if(getTile(v3x+v3b*vsin, v3y, v3z+v3b*vcos)!=7&&getTile(v3x+v3b*vsin, v3y, v3z+v3b*vcos)!=0){
setTile(v3x+v3b*vsin, v3y+1, v3z+v3b*vcos, getTile(v3x+v3b*vsin, v3y, v3z+v3b*vcos), Level.getData(v3x+v3b*vsin, v3y, v3z+v3b*vcos));
setTile(v3x+v3b*vsin, v3y, v3z+v3b*vcos, 0);
}
v3b++;
}
if(v3a==250){
ESP.antiLack(3);
for(var gun=2;gun<12;gun++)
explode(v3x+2*gun*vsin, v3y+2, v3z+2*gun*vcos, 1.7);
}
if(v4a==1798){
for(var n=-1;n<2;n++){
setTile(vx-2, vy+2, vz+n, 0);
setTile(vx+2, vy+2, vz+n, 0);
setTile(vx+n, vy+2, vz+2, 0);
setTile(vx+n, vy+2, vz-2, 0);
}
for(var n=-3;n<4;n++){
setTile(vx-4, vy+2, vz+n, 20);
setTile(vx+4, vy+2, vz+n, 20);
setTile(vx+n, vy+2, vz+4, 20);
setTile(vx+n, vy+2, vz-4, 20);
}
}
if(v4a==1796){
for(var n=-3;n<4;n++){
setTile(vx-4, vy+2, vz+n, 0);
setTile(vx+4, vy+2, vz+n, 0);
setTile(vx+n, vy+2, vz+4, 0);
setTile(vx+n, vy+2, vz-4, 0);
}
for(var n=-5;n<6;n++){
setTile(vx-6, vy+2, vz+n, 20);
setTile(vx+6, vy+2, vz+n, 20);
setTile(vx+n, vy+2, vz+6, 20);
setTile(vx+n, vy+2, vz-6, 20);
}
}
if(v4a==1794){
for(var n=-5;n<6;n++){
setTile(vx-6, vy+2, vz+n, 0);
setTile(vx+6, vy+2, vz+n, 0);
setTile(vx+n, vy+2, vz+6, 0);
setTile(vx+n, vy+2, vz-6, 0);
}
for(var n=-7;n<8;n++){
setTile(vx-8, vy+2, vz+n, 20);
setTile(vx+8, vy+2, vz+n, 20);
setTile(vx+n, vy+2, vz+8, 20);
setTile(vx+n, vy+2, vz-8, 20);
}
}
if(v4a==1792){
for(var n=-7;n<8;n++){
setTile(vx-8, vy+2, vz+n, 0);
setTile(vx+8, vy+2, vz+n, 0);
setTile(vx+n, vy+2, vz+8, 0);
setTile(vx+n, vy+2, vz-8, 0);
}
for(var n=-9;n<10;n++){
setTile(vx-10, vy+2, vz+n, 20);
setTile(vx+10, vy+2, vz+n, 20);
setTile(vx+n, vy+2, vz+10, 20);
setTile(vx+n, vy+2, vz-10, 20);
}
}
if(v4a==1790){
for(var n=-9;n<10;n++){
setTile(vx-10, vy+2, vz+n, 0);
setTile(vx+10, vy+2, vz+n, 0);
setTile(vx+n, vy+2, vz+10, 0);
setTile(vx+n, vy+2, vz-10, 0);
}
for(var n=-11;n<12;n++){
setTile(vx-12, vy+2, vz+n, 20);
setTile(vx+12, vy+2, vz+n, 20);
setTile(vx+n, vy+2, vz+12, 20);
setTile(vx+n, vy+2, vz-12, 20);
}
}
if(v4a==1788){
for(var n=-11;n<12;n++){
setTile(vx-12, vy+2, vz+n, 0);
setTile(vx+12, vy+2, vz+n, 0);
setTile(vx+n, vy+2, vz+12, 0);
setTile(vx+n, vy+2, vz-12, 0);
}
for(var n=-13;n<14;n++){
setTile(vx-14, vy+2, vz+n, 20);
setTile(vx+11, vy+2, vz+n, 20);
setTile(vx+n, vy+2, vz+14, 20);
setTile(vx+n, vy+2, vz-14, 20);
}
}
if(v4a==1786){
for(var n=-13;n<14;n++){
setTile(vx-14, vy+2, vz+n, 0);
setTile(vx+11, vy+2, vz+n, 0);
setTile(vx+n, vy+2, vz+14, 0);
setTile(vx+n, vy+2, vz-14, 0);
}
for(var n=0;n<v4b.length;n++)
Entity.setHealth(v4b[n], Entity.getHealth(v4b[n])-10);
}
if(v4a==1350){
while(v4b[0]!=null)
v4b.shift();
}
if(te2a==298){
explode(te2x+5, te2y+1.2, te2z, 2.5);
}
if(te2a==296){
ESP.antiLack(3);
explode(te2x+5, te2y+1.2, te2z-5, 2.5);
}
if(te2a==294){
explode(te2x, te2y+1.2, te2z-5, 2.5);
}
if(te2a==292){
ESP.antiLack(3);
explode(te2x-5, te2y+1.2, te2z-5, 2.5);
}
if(te2a==290){
explode(te2x-5, te2y+1.2, te2z, 2.5);
}
if(te2a==288){
ESP.antiLack(3);
explode(te2x-5, te2y+1.2, te2z+5, 2.5);
}
if(te2a==286){
explode(te2x, te2y+1.2, te2z+5, 2.5);
}
if(te4a==1785){
for(var n in te4b){
setTile(tex[n], tey[n], tez[n], 0);
Entity.setFireTicks(te4b[n], 15);
explode(tex[n], tey[n], tez[n], 2);
}
}
if(te4a==1740){
for(var n in te4b)
Entity.setHealth(te4b[n], Entity.getHealth(te4b[n])-7);
}
if(te4a==1350){
while(te4b[0]!=null){
te4b.shift();
tex.shift();
tey.shift();
tez.shift();
}
}
if(ame1a==145){
ESP.antiLack(3);
for(var gun=5;gun<20;gun++)
explode(px+gun*sin, py+2, pz+gun*cos, 1.8);
setTile(px+2*sin, py+2, pz+2*cos, 247);
setTile(px+3*sin, py+2, pz+3*cos, 247);
setTile(px+4*sin, py+2, pz+4*cos, 247);
}
if(ame1a==140){
setTile(px+2*sin, py+2, pz+2*cos, 0);
setTile(px+3*sin, py+2, pz+3*cos, 0);
setTile(px+4*sin, py+2, pz+4*cos, 0);
}
if(ame2a==225){
setTile(ame2x+5, ame2y+4, ame2z+5, 0);
setTile(ame2x+5, ame2y+4, ame2z, 0);
setTile(ame2x+5, ame2y+4, ame2z-5, 0);
setTile(ame2x, ame2y+4, ame2z+5, 0);
setTile(ame2x, ame2y+4, ame2z-5, 0);
setTile(ame2x-5, ame2y+4, ame2z+5, 0);
setTile(ame2x-5, ame2y+4, ame2z, 0);
setTile(ame2x-5, ame2y+4, ame2z-5, 0);
}
if(ame3a>150){
ame3x = Entity.getX(ameca);
if(Entity.getPitch(ameca)==90){
ame3y = Entity.getY(ameca)-3;
}
else{
ame3y = Entity.getY(ameca)-2;
}
ame3z = Entity.getZ(ameca);
for(var xx=ame3x-2;xx<ame3x+3;xx++){
for(var zz=ame3z-2;zz<ame3z+3;zz++){
if(getTile(xx, ame3y+1, zz)==247){
setTile(xx, ame3y+1, zz, 0);
}
if(getTile(xx, ame3y-1, zz)==247){
setTile(xx, ame3y-1, zz, 0);
}
if(getTile(xx, ame3y, ame3z+2)==247){
setTile(xx, ame3y, ame3z+2, 0);
}
if(getTile(xx, ame3y, ame3z-2)==247){
setTile(xx, ame3y, ame3z-2, 0);
}
}}
for(var zz=ame3z-1;zz<ame3z+2;zz++){
if(getTile(ame3x+2, ame3y, zz)==247){
setTile(ame3x+2, ame3y, zz, 0);
}
if(getTile(ame3x-2, ame3y, zz)==247){
setTile(ame3x-2, ame3y, zz, 0);
}
for(var xx=ame3x-1;xx<ame3x+2;xx++)
if(getTile(xx, ame3y, zz)==0){
setTile(xx, ame3y, zz, 247);
}
}
}
if(ame3a==150){
for(var xx=ame3x-2;xx<ame3x+3;xx++)
for(var yy=ame3y-1;yy<ame3y+2;yy++)
for(var zz=ame3z-2;zz<ame3z+3;zz++)
if(getTile(xx, yy, zz)==247){
setTile(xx, yy, zz, 0);
}
ame3b = -1;
}
if(ame3b>0){
ame3b--;
}
if(ame3b==-1){
ame3x = Entity.getX(ameca);
ame3y = Entity.getY(ameca)-4;
ame3z = Entity.getZ(ameca);
if(getTile(ame3x, ame3y-1, ame3z)!=0){
for(var xx=ame3x-1;xx<ame3x+2;xx++)
for(var zz=ame3z-1;zz<ame3z+2;zz++)
if(getTile(xx, ame3y+1, zz)==0){
setTile(xx, ame3y+1, zz, 30);
}
ame3b = 16;
}
}
if(ame3b==1){
for(var xx=ame3x-1;xx<ame3x+2;xx++)
for(var zz=ame3z-1;zz<ame3z+2;zz++)
if(getTile(xx, ame3y+1, zz)==30){
setTile(xx, ame3y+1, zz, 0);
}
}
if(ame4a==1795){
for(var n=0;n<amex.length;n++){
explode(amex[n], amey[n]+1, amez[n], 2.5);
setTile(amex[n], amey[n]+2, amez[n], 247);
}
}
if(ame4a==1790){
for(var n=0;n<amex.length;n++)
setTile(amex[n], amey[n]+2, amez[n], 0);
}
if(ame4a==1350){
while(amex[0]!=null){
amex.shift();
amey.shift();
amez.shift();
}
}
if(se3a==1){
se3b = false;
}
if(sea4a>1350){
teleport(sea4b, seax, seay, seaz);
setTile(seax, seay+1, seaz, 30);
Entity.setFireTicks(sea4b, 2);
for(var xx=seax-1;xx<seax+2;xx++){
for(var yy=seay+1;yy<seay+4;yy++){
for(var zz=seaz-1;zz<seaz+2;zz++){
setTile(xx, yy, seaz+2, 20);
setTile(xx, yy, seaz-2, 20);
setTile(seax+2 ,yy, zz, 20);
setTile(seax-2 ,yy, zz, 20);
setTile(xx, seay+4, zz, 20);
}}}
}
if(sea4a==1350){
setTile(seax, seay+1, seaz, 0);
Entity.setHealth(sea4b, Entity.getHealth(sea4b)-5);
for(var xx=seax-1;xx<seax+2;xx++){
for(var yy=seay+1;yy<seay+4;yy++){
for(var zz=seaz-1;zz<seaz+2;zz++){
setTile(xx, yy, seaz+2, 0);
setTile(xx, yy, seaz-2, 0);
setTile(seax+2 ,yy, zz, 0);
setTile(seax-2 ,yy, zz, 0);
setTile(xx, seay+4, zz, 0);
}}}
}
if(an1a==145){
ESP.antiLack(3);
for(var gun=3;gun<20;gun++){
setTile(px+gun*sin, py+2, pz+gun*cos, 0);
explode(px+gun*sin, py+2, pz+gun*cos, 1.7);
}
}
if(an2a>150){
an2x = Entity.getX(angel);
if(Entity.getPitch(angel)==90){
an2y = Entity.getY(angel)-3;
}
else{
an2y = Entity.getY(angel)-2;
}
an2z = Entity.getZ(angel);
for(var xx=an2x-2;xx<an2x+3;xx++){
for(var zz=an2z-2;zz<an2z+3;zz++){
if(getTile(xx, an2y+1, zz)==20){
setTile(xx, an2y+1, zz, 0);
}
if(getTile(xx, an2y-1, zz)==20){
setTile(xx, an2y-1, zz, 0);
}
if(getTile(xx, an2y, an2z+2)==20){
setTile(xx, an2y, an2z+2, 0);
}
if(getTile(xx, an2y, an2z-2)==20){
setTile(xx, an2y, an2z-2, 0);
}
}}
for(var zz=an2z-1;zz<an2z+2;zz++){
if(getTile(an2x+2, an2y, zz)==20){
setTile(an2x+2, an2y, zz, 0);
}
if(getTile(an2x-2, an2y, zz)==20){
setTile(an2x-2, an2y, zz, 0);
}
for(var xx=an2x-1;xx<an2x+2;xx++)
if(getTile(xx, an2y, zz)==0){
setTile(xx, an2y, zz, 20);
}
}
}
if(an2a==150){
for(var xx=an2x-2;xx<an2x+3;xx++)
for(var yy=an2y-1;yy<an2y+2;yy++)
for(var zz=an2z-2;zz<an2z+3;zz++)
if(getTile(xx, yy, zz)==20){
setTile(xx, yy, zz, 0);
}
an2b = -1;
}
if(an2b>0){
an2b--;
}
if(an2b==-1){
an2x = Entity.getX(angel);
an2y = Entity.getY(angel)-4;
an2z = Entity.getZ(angel);
if(getTile(an2x, an2y-1, an2z)!=0){
for(var xx=an2x-1;xx<an2x+2;xx++)
for(var zz=an2z-1;zz<an2z+2;zz++)
if(getTile(xx, an2y+1, zz)==0){
setTile(xx, an2y+1, zz, 30);
}
an2b = 16;
}
}
if(an2b==1){
for(var xx=an2x-1;xx<an2x+2;xx++)
for(var zz=an2z-1;zz<an2z+2;zz++)
if(getTile(xx, an2y+1, zz)==30){
setTile(xx, an2y+1, zz, 0);
}
}
if(an3a==295){
for(var gun=3;gun<15;gun++){
setTile(px+gun*sin, py+2, pz+gun*cos, 0);
setTile(px-gun*sin, py+2, pz-gun*cos, 0);
explode(px+gun*sin, py+2, pz+gun*cos, 1.8);
explode(px-gun*sin, py+2, pz-gun*cos, 1.8);
}
}
if(an4a==1795){
for(var yy=any+7;yy<any+9;yy++){
setTile(anx+7, yy, anz+7, 155);
setTile(anx+7, yy, anz, 155);
setTile(anx+7, yy, anz-7, 155);
setTile(anx, yy, anz+7, 155);
setTile(anx, yy, anz-7, 155);
setTile(anx-7, yy, anz+7, 155);
setTile(anx-7, yy, anz, 155);
setTile(anx-7, yy, anz-7, 155);
}
}
if(an4a==1790){
for(var yy=any+5;yy<any+7;yy++){
setTile(anx+7, yy, anz+7, 155);
setTile(anx+7, yy, anz, 155);
setTile(anx+7, yy, anz-7, 155);
setTile(anx, yy, anz+7, 155);
setTile(anx, yy, anz-7, 155);
setTile(anx-7, yy, anz+7, 155);
setTile(anx-7, yy, anz, 155);
setTile(anx-7, yy, anz-7, 155);
}
}
if(an4a==1785){
for(var yy=any+3;yy<any+5;yy++){
setTile(anx+7, yy, anz+7, 155);
setTile(anx+7, yy, anz, 155);
setTile(anx+7, yy, anz-7, 155);
setTile(anx, yy, anz+7, 155);
setTile(anx, yy, anz-7, 155);
setTile(anx-7, yy, anz+7, 155);
setTile(anx-7, yy, anz, 155);
setTile(anx-7, yy, anz-7, 155);
}
}
if(an4a==1780){
for(var yy=any+1;yy<any+3;yy++){
setTile(anx+7, yy, anz+7, 155);
setTile(anx+7, yy, anz, 155);
setTile(anx+7, yy, anz-7, 155);
setTile(anx, yy, anz+7, 155);
setTile(anx, yy, anz-7, 155);
setTile(anx-7, yy, anz+7, 155);
setTile(anx-7, yy, anz, 155);
setTile(anx-7, yy, anz-7, 155);
}
}
if(an4a==1775){
for(var yy=any+1;yy<any+11;yy++){
setTile(anx+7, yy, anz+7, 0);
setTile(anx+7, yy, anz, 0);
setTile(anx+7, yy, anz-7, 0);
setTile(anx, yy, anz+7, 0);
setTile(anx, yy, anz-7, 0);
setTile(anx-7, yy, anz+7, 0);
setTile(anx-7, yy, anz, 0);
setTile(anx-7, yy, anz-7, 0);
}
ESP.antiLack(3);
explode(anx+7, any+1.8, anz+7, 3);
explode(anx+7, any+1.8, anz, 3);
explode(anx+7, any+1.8, anz-7, 3);
explode(anx, any+1.8, anz+7, 3);
explode(anx, any+1.8, anz-7, 3);
explode(anx-7, any+1.8, anz+7, 3);
explode(anx-7, any+1.8, anz, 3);
explode(anx-7, any+1.8, anz-7, 3);
var p2x, p2y, p2z;
for each(var e in Entity.getAll()){
p2x = Math.abs(anx-Entity.getX(e));
p2y = Math.abs(any-Entity.getY(e));
p2z = Math.abs(anz-Entity.getZ(e));
if(p2x<=40&&p2y<=40&&p2z<=40&&angel!=e&&Entity.getEntityTypeId(e)<64)
Entity.setHealth(e, Entity.getHealth(e)-10);
}
for(var xx=anx-2;xx<anx+3;xx++)
for(var zz=anz-2;zz<anz+3;zz++)
setTile(xx, any+1, zz, 0);
}
if(wh2a>150&&(wh2a%5)==0){
var wyaw, wpitch, wsin, wcos, wtan, wpcos;
wh2x = Entity.getX(white);
wh2y = Entity.getY(white);
wh2z = Entity.getZ(white);
wyaw = Math.floor(Entity.getYaw(white));
wpitch = Math.floor(Entity.getPitch(white));
wsin = -Math.sin(wyaw/180*Math.PI);
wcos = Math.cos(wyaw/180*Math.PI);
wtan = -Math.sin(wpitch/180*Math.PI);
wpcos = Math.cos(wpitch/180*Math.PI);
ESP.antiLack(3);
for(var gun=3;gun<30;gun++){
if(getTile(wh2x+gun*wsin*wpcos, wh2y+gun*wtan, wh2z+gun*wcos*wpcos)!=0&&getTile(wh2x+gun*wsin*wpcos, wh2y+gun*wtan+1, wh2z+gun*wcos*wpcos)==0){
explode(wh2x+gun*wsin*wpcos, wh2y+gun*wtan+1, wh2z+gun*wcos*wpcos, 1.5);
break;
}
}
}
if(wh3a==285||wh3a==270){
Entity.setHealth(wh3b, Entity.getHealth(wh3b)-5);
}
if(wh4a==1795){
ESP.antiLack(3);
explode(whx+4, why+1, whz+4, 2);
explode(whx+5, why+1, whz, 2);
explode(whx+4, why+1, whz-4, 2);
explode(whx, why+1, whz+5, 2);
explode(whx, why+1, whz-5, 2);
explode(whx-4, why+1, whz+4, 2);
explode(whx-5, why+1, whz, 2);
explode(whx-4, why+1, whz-4, 2);
}
if(wh4a==1790){
explode(whx+7, why+1, whz+7, 3);
explode(whx+9, why+1, whz, 3);
explode(whx+7, why+1, whz-7, 3);
explode(whx, why+1, whz+9, 3);
explode(whx, why+1, whz-9, 3);
explode(whx-7, why+1, whz+7, 3);
explode(whx-9, why+1, whz, 3);
explode(whx-7, why+1, whz-7, 3);
}
if(wh4a==1785){
arroundMobHealthDown(white, 30, 10);
}
if(wh4a==1765){
for(var xx=whx-1;xx<whx+2;xx++)
for(var yy=why+1;yy<why+8;yy++)
for(var zz=whz-1;zz<whz+2;zz++)
setTile(xx, yy, zz, 0);
setTile(whx, why+8, whz, 0);
setTile(whx, why+6, whz+2, 0);
setTile(whx, why+6, whz+3, 0);
setTile(whx, why+5, whz+3, 0);
setTile(whx, why+4, whz+3, 0);
setTile(whx, why+3, whz+3, 0);
setTile(whx, why+6, whz-2, 0);
setTile(whx, why+6, whz-3, 0);
setTile(whx, why+6, whz-3, 0);
setTile(whx, why+5, whz-3, 0);
setTile(whx, why+4, whz-3, 0);
setTile(whx, why+3, whz-3, 0);
setTile(whx+2, why+6, whz, 0);
setTile(whx+3, why+6, whz, 0);
setTile(whx+3, why+5, whz, 0);
setTile(whx+3, why+4, whz, 0);
setTile(whx+3, why+3, whz, 0);
setTile(whx-2, why+6, whz, 0);
setTile(whx-3, why+6, whz, 0);
setTile(whx-3, why+5, whz, 0);
setTile(whx-3, why+4, whz, 0);
setTile(whx-3, why+3, whz, 0);
setTile(whx+3, why+7, whz, 0);
setTile(whx-3, why+7, whz, 0);
setTile(whx, why+7, whz+3, 0);
setTile(whx, why+7, whz-3, 0);
}
if(mt1a>75){
teleport(mt1b, mt1x, mt1y, mt1z);
}
if(mt4a>1350){
if(mt4c==true){
teleport(mt4b, mtx, mty, mtz);
mt4c = false;
}
else if(mt4c==false){
teleport(mt4b, mtx+1, mty, mtz);
mt4c = true;
}
}
if(mt4a==1350){
Entity.setHealth(mt4b, Entity.getHealth(mt4b)-10);
}
if(wo4c[0]>0){
wo4c[0]--;
}
if(wo4c[0]==1){
setTile(wox[2], woy[2], woz[2], wo4c[1], wo4c[2]);
}





//---dtj----
if(dtj!=null){
if(dt1==true){
dt1a--;
}
if(dt2==true){
dt2a--;
}
if(dt3==true){
dt3a--;
}
if(dt4==true){
dt4a--;
}
if(dt1a==0){
dt1 = false;
}
if(dt2a==0){
dt2 = false;
}
if(dt3a==0){
dt3 = false;
}
if(dt4a==0){
dt4 = false;
}
if(dtl==true){
dtla--;
}
if(dtla==0){
dtl = false;
}
if(dtla==1){
ESP.sbm("Time is over, Dark Tornado jr. Limiter Operate");
}
if(dt2a==295){
if(dtl==false){
for(var gun=4;gun<35;gun++){
setTile(px+gun*sin*pcos, py+gun*tan+0.8, pz+gun*cos*pcos, 0);
explode(px+gun*sin*pcos, py+gun*tan+0.8, pz+gun*cos*pcos, 1.8);
}
}
else if(dtl==true){
for(var gun=4;gun<50;gun++){
setTile(px+gun*sin*pcos, py+gun*tan+0.8, pz+gun*cos*pcos, 0);
explode(px+gun*sin*pcos, py+gun*tan+0.8, pz+gun*cos*pcos, 2.3);
}
}
}
if(dt4a==1795){
setTile(dtx+10, dty+1, dtz+10, 17);
setTile(dtx+10, dty+1, dtz-10, 17);
setTile(dtx-10, dty+1, dtz+10, 17);
setTile(dtx-10, dty+1, dtz-10, 17);
setTile(dtx+10, dty+2, dtz+10, 18);
setTile(dtx+10, dty+2, dtz-10, 18);
setTile(dtx-10, dty+2, dtz+10, 18);
setTile(dtx-10, dty+2, dtz-10, 18);
setTile(dtx+10, dty+9, dtz, 79);
setTile(dtx, dty+9, dtz+10, 79);
setTile(dtx-10, dty+9, dtz, 79);
setTile(dtx, dty+9, dtz-10, 79);
setTile(dtx+7, dty+2, dtz+7, 49);
setTile(dtx+7, dty+2, dtz-7, 49);
setTile(dtx-7, dty+2, dtz+7, 49);
setTile(dtx-7, dty+2, dtz-7, 49);
setTile(dtx+7, dty+9, dtz, 155);
setTile(dtx, dty+9, dtz+7, 155);
setTile(dtx-7, dty+9, dtz, 155);
setTile(dtx, dty+9, dtz-7, 155);
}
if(dt4a==1790){
setTile(dtx+10, dty+2, dtz+10, 17);
setTile(dtx+10, dty+2, dtz-10, 17);
setTile(dtx-10, dty+2, dtz+10, 17);
setTile(dtx-10, dty+2, dtz-10, 17);
setTile(dtx+10, dty+3, dtz+10, 18);
setTile(dtx+10, dty+3, dtz-10, 18);
setTile(dtx-10, dty+3, dtz+10, 18);
setTile(dtx-10, dty+3, dtz-10, 18);
setTile(dtx+10, dty+8, dtz, 79);
setTile(dtx, dty+8, dtz+10, 79);
setTile(dtx-10, dty+8, dtz, 79);
setTile(dtx, dty+8, dtz-10, 79);
setTile(dtx+7, dty+3, dtz+7, 49);
setTile(dtx+7, dty+3, dtz-7, 49);
setTile(dtx-7, dty+3, dtz+7, 49);
setTile(dtx-7, dty+3, dtz-7, 49);
setTile(dtx+7, dty+8, dtz, 155);
setTile(dtx, dty+8, dtz+7, 155);
setTile(dtx-7, dty+8, dtz, 155);
setTile(dtx, dty+8, dtz-7, 155);
}
if(dt4a==1785){
setTile(dtx+10, dty+3, dtz+10, 17);
setTile(dtx+10, dty+3, dtz-10, 17);
setTile(dtx-10, dty+3, dtz+10, 17);
setTile(dtx-10, dty+3, dtz-10, 17);
setTile(dtx+10, dty+4, dtz+10, 18);
setTile(dtx+10, dty+4, dtz-10, 18);
setTile(dtx-10, dty+4, dtz+10, 18);
setTile(dtx-10, dty+4, dtz-10, 18);
setTile(dtx+10, dty+7, dtz, 79);
setTile(dtx, dty+7, dtz+10, 79);
setTile(dtx-10, dty+7, dtz, 79);
setTile(dtx, dty+7, dtz-10, 79);
setTile(dtx+7, dty+4, dtz+7, 49);
setTile(dtx+7, dty+4, dtz-7, 49);
setTile(dtx-7, dty+4, dtz+7, 49);
setTile(dtx-7, dty+4, dtz-7, 49);
setTile(dtx+7, dty+7, dtz, 155);
setTile(dtx, dty+7, dtz+7, 155);
setTile(dtx-7, dty+7, dtz, 155);
setTile(dtx, dty+7, dtz-7, 155);
}
if(dt4a==1780){
setTile(dtx+10, dty+4, dtz+10, 17);
setTile(dtx+10, dty+4, dtz-10, 17);
setTile(dtx-10, dty+4, dtz+10, 17);
setTile(dtx-10, dty+4, dtz-10, 17);
setTile(dtx+10, dty+5, dtz+10, 18);
setTile(dtx+10, dty+5, dtz-10, 18);
setTile(dtx-10, dty+5, dtz+10, 18);
setTile(dtx-10, dty+5, dtz-10, 18);
setTile(dtx+10, dty+6, dtz, 79);
setTile(dtx, dty+6, dtz+10, 79);
setTile(dtx-10, dty+6, dtz, 79);
setTile(dtx, dty+6, dtz-10, 79);
setTile(dtx+7, dty+5, dtz+7, 49);
setTile(dtx+7, dty+5, dtz-7, 49);
setTile(dtx-7, dty+5, dtz+7, 49);
setTile(dtx-7, dty+5, dtz-7, 49);
setTile(dtx+7, dty+6, dtz, 155);
setTile(dtx, dty+6, dtz+7, 155);
setTile(dtx-7, dty+6, dtz, 155);
setTile(dtx, dty+6, dtz-7, 155);
}
if(dt4a==1775){
setTile(dtx+10, dty+5, dtz+10, 17);
setTile(dtx+10, dty+5, dtz-10, 17);
setTile(dtx-10, dty+5, dtz+10, 17);
setTile(dtx-10, dty+5, dtz-10, 17);
setTile(dtx+10, dty+6, dtz+10, 18);
setTile(dtx+10, dty+6, dtz-10, 18);
setTile(dtx-10, dty+6, dtz+10, 18);
setTile(dtx-10, dty+6, dtz-10, 18);
setTile(dtx+10, dty+5, dtz, 79);
setTile(dtx, dty+5, dtz+10, 79);
setTile(dtx-10, dty+5, dtz, 79);
setTile(dtx, dty+5, dtz-10, 79);
setTile(dtx+7, dty+6, dtz+7, 49);
setTile(dtx+7, dty+6, dtz-7, 49);
setTile(dtx-7, dty+6, dtz+7, 49);
setTile(dtx-7, dty+6, dtz-7, 49);
setTile(dtx+7, dty+5, dtz, 155);
setTile(dtx, dty+5, dtz+7, 155);
setTile(dtx-7, dty+5, dtz, 155);
setTile(dtx, dty+5, dtz-7, 155);
}
if(dt4a==1770){
setTile(dtx+10, dty+6, dtz+10, 17);
setTile(dtx+10, dty+6, dtz-10, 17);
setTile(dtx-10, dty+6, dtz+10, 17);
setTile(dtx-10, dty+6, dtz-10, 17);
setTile(dtx+10, dty+7, dtz+10, 18);
setTile(dtx+10, dty+7, dtz-10, 18);
setTile(dtx-10, dty+7, dtz+10, 18);
setTile(dtx-10, dty+7, dtz-10, 18);
setTile(dtx+10, dty+4, dtz, 79);
setTile(dtx, dty+4, dtz+10, 79);
setTile(dtx-10, dty+4, dtz, 79);
setTile(dtx, dty+4, dtz-10, 79);
setTile(dtx+7, dty+7, dtz+7, 49);
setTile(dtx+7, dty+7, dtz-7, 49);
setTile(dtx-7, dty+7, dtz+7, 49);
setTile(dtx-7, dty+7, dtz-7, 49);
setTile(dtx+7, dty+4, dtz, 155);
setTile(dtx, dty+4, dtz+7, 155);
setTile(dtx-7, dty+4, dtz, 155);
setTile(dtx, dty+4, dtz-7, 155);
}
if(dt4a==1765){
setTile(dtx+10, dty+7, dtz+10, 17);
setTile(dtx+10, dty+7, dtz-10, 17);
setTile(dtx-10, dty+7, dtz+10, 17);
setTile(dtx-10, dty+7, dtz-10, 17);
setTile(dtx+10, dty+8, dtz+10, 18);
setTile(dtx+10, dty+8, dtz-10, 18);
setTile(dtx-10, dty+8, dtz+10, 18);
setTile(dtx-10, dty+8, dtz-10, 18);
setTile(dtx+10, dty+3, dtz, 79);
setTile(dtx, dty+3, dtz+10, 79);
setTile(dtx-10, dty+3, dtz, 79);
setTile(dtx, dty+3, dtz-10, 79);
setTile(dtx+7, dty+8, dtz+7, 49);
setTile(dtx+7, dty+8, dtz-7, 49);
setTile(dtx-7, dty+8, dtz+7, 49);
setTile(dtx-7, dty+8, dtz-7, 49);
setTile(dtx+7, dty+3, dtz, 155);
setTile(dtx, dty+3, dtz+7, 155);
setTile(dtx-7, dty+3, dtz, 155);
setTile(dtx, dty+3, dtz-7, 155);
}
if(dt4a==1760){
setTile(dtx+10, dty+8, dtz+10, 17);
setTile(dtx+10, dty+8, dtz-10, 17);
setTile(dtx-10, dty+8, dtz+10, 17);
setTile(dtx-10, dty+8, dtz-10, 17);
setTile(dtx+10, dty+9, dtz+10, 18);
setTile(dtx+10, dty+9, dtz-10, 18);
setTile(dtx-10, dty+9, dtz+10, 18);
setTile(dtx-10, dty+9, dtz-10, 18);
setTile(dtx+10, dty+2, dtz, 79);
setTile(dtx, dty+2, dtz+10, 79);
setTile(dtx-10, dty+2, dtz, 79);
setTile(dtx, dty+2, dtz-10, 79);
setTile(dtx+7, dty+9, dtz+7, 49);
setTile(dtx+7, dty+9, dtz-7, 49);
setTile(dtx-7, dty+9, dtz+7, 49);
setTile(dtx-7, dty+9, dtz-7, 49);
setTile(dtx+7, dty+2, dtz, 155);
setTile(dtx, dty+2, dtz+7, 155);
setTile(dtx-7, dty+2, dtz, 155);
setTile(dtx, dty+2, dtz-7, 155);
}
if(dt4a==1755){
setTile(dtx+10, dty+9, dtz+10, 17);
setTile(dtx+10, dty+9, dtz-10, 17);
setTile(dtx-10, dty+9, dtz+10, 17);
setTile(dtx-10, dty+9, dtz-10, 17);
setTile(dtx+10, dty+10, dtz+10, 18);
setTile(dtx+10, dty+10, dtz-10, 18);
setTile(dtx-10, dty+10, dtz+10, 18);
setTile(dtx-10, dty+10, dtz-10, 18);
setTile(dtx+10, dty+1, dtz, 79);
setTile(dtx, dty+1, dtz+10, 79);
setTile(dtx-10, dty+1, dtz, 79);
setTile(dtx, dty+1, dtz-10, 79);
setTile(dtx+7, dty+10, dtz+7, 49);
setTile(dtx+7, dty+10, dtz-7, 49);
setTile(dtx-7, dty+10, dtz+7, 49);
setTile(dtx-7, dty+10, dtz-7, 49);
setTile(dtx+7, dty+1, dtz, 155);
setTile(dtx, dty+1, dtz+7, 155);
setTile(dtx-7, dty+1, dtz, 155);
setTile(dtx, dty+1, dtz-7, 155);
}
if(dt4a==1750){
for(var yy=dty+1;yy<dty+11;yy++){
setTile(dtx+10, yy, dtz+10, 0);
setTile(dtx+10, yy, dtz-10, 0);
setTile(dtx-10, yy, dtz+10, 0);
setTile(dtx-10, yy, dtz-10, 0);
setTile(dtx+10, yy, dtz, 0);
setTile(dtx, yy, dtz+10, 0);
setTile(dtx-10, yy, dtz, 0);
setTile(dtx, yy, dtz-10, 0);
setTile(dtx+7, yy, dtz+7, 0);
setTile(dtx+7, yy, dtz-7, 0);
setTile(dtx-7, yy, dtz+7, 0);
setTile(dtx-7, yy, dtz-7, 0);
setTile(dtx+7, yy, dtz, 0);
setTile(dtx, yy, dtz+7, 0);
setTile(dtx-7, yy, dtz, 0);
setTile(dtx, yy, dtz-7, 0);
}
explode(dtx+10, dty+2, dtz+10, 3.5);
explode(dtx+10, dty+2, dtz-10, 3.5);
explode(dtx-10, dty+2, dtz+10, 3.5);
explode(dtx-10, dty+2, dtz-10, 3.5);
explode(dtx+10, dty+2, dtz, 3.5);
explode(dtx, dty+2, dtz+10, 3.5);
explode(dtx-10, dty+2, dtz, 3.5);
explode(dtx, dty+2, dtz-10, 3.5);
explode(dtx+7, dty+2, dtz+7, 4);
explode(dtx+7, dty+2, dtz-7, 3);
explode(dtx-7, dty+2, dtz+7, 3);
explode(dtx-7, dty+2, dtz-7, 3);
explode(dtx+7, dty+2, dtz, 3);
explode(dtx, dty+2, dtz+7, 3);
explode(dtx-7, dty+2, dtz, 3);
explode(dtx, dty+2, dtz-7, 3);
explode(dtx+10, dty+5, dtz+10, 3);
explode(dtx+10, dty+5, dtz-10, 3);
explode(dtx-10, dty+5, dtz+10, 3);
explode(dtx-10, dty+5, dtz-10, 3);
explode(dtx+10, dty+5, dtz, 3);
explode(dtx, dty+5, dtz+10, 3);
explode(dtx-10, dty+5, dtz, 3);
explode(dtx, dty+5, dtz-10, 3);
explode(dtx+7, dty+5, dtz+7, 4);
explode(dtx+7, dty+5, dtz-7, 2.5);
explode(dtx-7, dty+5, dtz+7, 2.5);
explode(dtx-7, dty+5, dtz-7, 2.5);
explode(dtx+7, dty+5, dtz, 2.5);
explode(dtx, dty+5, dtz+7, 2.5);
explode(dtx-7, dty+5, dtz, 2.5);
explode(dtx, dty+5, dtz-7, 2.5);
explode(dtx+4, dty+1, dtz+4, 0.5);
explode(dtx+4, dty+1, dtz-4, 0.5);
explode(dtx-4, dty+1, dtz+4, 0.5);
explode(dtx-4, dty+1, dtz-4, 0.5);
for(var xx=dtx-16;xx<dtx+17;xx++)
for(var yy=dty-7;yy<dty;yy++)
for(var zz=dtz-16;zz<dtz+14;zz++)
if(getTile(xx, yy, zz)==0){
setTile(xx, yy, zz, 51);
}
for(var xx=dtx-1;xx<dtx+2;xx++){
for(var zz=dtz-1;zz<dtz+2;zz++){
setTile(xx, dty, zz, 2);
setTile(xx, dty+1, zz, 0);}}
for(var xx=dtx-13;xx<dtx+14;xx++){
setTile(xx, dty+1, dtz+13, 30);
setTile(xx, dty+1, dtz-13, 30);
}
for(var zz=dtz-13;zz<dtz+14;zz++){
setTile(dtx+13, dty+1, zz, 30);
setTile(dtx-13, dty+1, zz, 30);
}
setTile(dtx+12, dty+5, dtz+12, 10);
setTile(dtx+12, dty+5, dtz-12, 10);
setTile(dtx-12, dty+5, dtz+12, 10);
setTile(dtx-12, dty+5, dtz-12, 10);
}
if(dt4a==1715){
for(var xx=dtx-16;xx<dtx+17;xx++)
for(var yy=dty-7;yy<dty+1;yy++)
for(var zz=dtz-16;zz<dtz+14;zz++)
if(getTile(xx, yy, zz)==0){
setTile(xx, yy, zz, 51);
}
for(var xx=dtx-1;xx<dtx+2;xx++){
for(var zz=dtz-1;zz<dtz+2;zz++){
setTile(xx, dty, zz, 2);
setTile(xx, dty+1, zz, 0);}}
}
if(dt4a==1400){
for(var xx=dtx-16;xx<dtx+17;xx++)
for(var yy=dty+1;yy<dty+10;yy++)
for(var zz=dtz-16;zz<dtz+17;zz++)
if(getTile(xx, yy, zz)!=0){
setTile(xx, yy, zz, 0);
}
for(var xx=dtx-13;xx<dtx+14;xx++)
for(var zz=dtz-13;zz<dtz+14;zz++)
if(getTile(xx, dty, zz)==87){
setTile(xx, dty, zz, 2);
}
}
}
//-----
if(fe!=null){
if(fe1==true){
fe1a--;
}
if(fe2==true){
fe2a--;
}
if(fe3==true){
fe3a--;
}
if(fe4==true){
fe4a--;
}
if(fe1a==0){
fe1 = false;
}
if(fe2a==0){
fe2 = false;
}
if(fe3a==0){
fe3 = false;
}
if(fe4a==0){
fe4 = false;
}
if(fe4a==1350&&fe4b==true){
for(var xx=fex-11;xx<fex+12;xx++){
for(var zz=fez-11;zz<fez+12;zz++){
if(auto==true){
setTile(xx, fey, zz, 2);
}
setTile(xx, fey+1, zz, 0);
}}
fe4b = false;
}
}




//---------------------------------------
if(cloud[0]!=null){
for(var n in cloud){
if(cc3a[n]==150&&cc3b[n]==true){
mmxc[n] = Entity.getX(cloud[n]);
mmyc[n] = Entity.getY(cloud[n])-2;
mmzc[n] = Entity.getZ(cloud[n]);
cc3b[n] = false;
cc3c[n] = true;
for(var xx=mmxc[n]-2;xx<mmxc[n]+3;xx++)
for(var yy=mmyc[n]-1;yy<mmyc[n]+2;yy++)
for(var zz=mmzc[n]-2;zz<mmzc[n]+3;zz++)
if(getTile(xx, yy, zz)==35){
setTile(xx, yy, zz, 0);
}
}
if(cc3b[n]==true){
mmxc[n] = Entity.getX(cloud[n]);
if(Entity.getPitch(cloud[n])==90){
mmyc[n] = Entity.getY(cloud[n])-3;
}
else{
mmyc[n] = Entity.getY(cloud[n])-2;
}
mmzc[n] = Entity.getZ(cloud[n]);
for(var xx=mmxc[n]-1;xx<mmxc[n]+2;xx++){
for(var zz=mmzc[n]-1;zz<mmzc[n]+2;zz++)
if(getTile(xx, mmyc[n], zz)==0){
setTile(xx, mmyc[n], zz, 35);
}
if(getTile(xx, mmyc[n], mmzc[n]+2)==35){
setTile(xx, mmyc[n], mmzc[n]+2, 0);
}
if(getTile(xx, mmyc[n], mmzc[n]-2)==35){
setTile(xx, mmyc[n], mmzc[n]-2, 0);
}
}
for(var xx=mmxc[n]-2;xx<mmxc[n]+3;xx++)
for(var zz=mmzc[n]-2;zz<mmzc[n]+3;zz++){
if(getTile(xx, mmyc[n]-1, zz)==35){
setTile(xx, mmyc[n]-1, zz, 0);
}
if(getTile(mmxc[n]+2, mmyc[n], zz)==35){
setTile(mmxc[n]+2, mmyc[n], zz, 0);
}
if(getTile(mmxc[n]-2, mmyc[n], zz)==35){
setTile(mmxc[n]-2, mmyc[n], zz, 0);
}
}
for(var xx=mmxc[n]-2;xx<mmxc[n]+3;xx++)
for(var zz=mmzc[n]-2;zz<mmzc[n]+3;zz++)
if(getTile(xx, mmyc[n]+1, zz)==35){
setTile(xx, mmyc[n]+1, zz, 0);
}
}
if(cc3c[n]==true){
mmxc[n] = Entity.getX(cloud);
mmyc[n] = Entity.getY(cloud)-2;
mmzc[n] = Entity.getZ(cloud);
if(getTile(mmxc[n], mmyc[n]-5, mmzc[n])!=0){
for(var xx=mmxc[n]-1;xx<mmxc[n]+2;xx++)
for(var zz=mmzc[n]-1;zz<mmzc[n]+2;zz++)
if(getTile(xx, mmyc[n]-3, zz)==0){
setTile(xx, mmyc[n]-3, zz, 30);
}
cc3c[n] = false;
cc3d[n] = 16;
}
}
if(cc3d[n]>0){
cc3d[n]--;
}
if(cc3d[n]==1){
for(var xx=mmxc[n]-1;xx<mmxc[n]+2;xx++)
for(var zz=mmzc[n]-1;zz<mmzc[n]+2;zz++)
if(getTile(xx, mmyc[n]-3, zz)==30){
setTile(xx, mmyc[n]-3, zz, 0);
}
}
}}
if(heal[0]!=null){
for(var n in heal){
if(h4a[n]>1350&&heal2==false){
hx[n] = Player.getX();
hy[n] = Player.getY()+2;
hz[n] = Player.getZ();
for(var xx=hx[n]-1;xx<hx[n]+2;xx++)
for(var yy=hy[n]-1;yy<hy[n]+2;yy++)
for(var zz=hz[n]-1;zz<hz[n]+2;zz++)
if(getTile(xx, yy, zz)==89){
setTile(xx, yy, zz, 0);
}
if(getTile(hx[n], hy[n], hz[n])==0){
setTile(hx[n], hy[n], hz[n], 89);
}
}
}}
if(hermit[0]!=null){
for(var n in hermit){
if(her1a[n]==145){
for(var gun=3;gun<20;gun++)
explode(px+gun*sin, py+2, pz+gun*cos, 1.6);
}
if(her2a[n]==1){
her2b[n] = false;
}
if(her3b[n]>0){
her3b[n]--;
}
if(her3a[n]>150){
her3x[n] = Entity.getX(hermit[n]);
if(Entity.getPitch(hermit[n])==90){
her3y[n] = Entity.getY(hermit[n])-3;
}
else{
her3y[n] = Entity.getY(hermit[n])-2;
}
her3z[n] = Entity.getZ(hermit[n]);
for(var xx=her3x[n]-1;xx<her3x[n]+2;xx++)
for(var zz=her3z[n]-1;zz<her3z[n]+2;zz++)
if(getTile(xx, her3y[n], zz)==0){
setTile(xx, her3y[n], zz, 18);
}
for(var xx=her3x[n]-2;xx<her3x[n]+3;xx++){
for(var zz=her3z[n]-2;zz<her3z[n]+3;zz++){
if(getTile(xx, her3y[n]+1, zz)==18){
setTile(xx, her3y[n]+1, zz, 0);
}
if(getTile(xx, her3y[n]-1, zz)==18){
setTile(xx, her3y[n]-1, zz, 0);
}
if(getTile(xx, her3y[n], her3z[n]+2)==18){
setTile(xx, her3y[n], her3z[n]+2, 0);
}
if(getTile(xx, her3y[n], her3z[n]-2)==18){
setTile(xx, her3y[n], her3z[n]-2, 0);
}
}}
for(var zz=herz[n]-1;zz<herz[n]+2;zz++){
if(getTile(herx[n]+2, hery, zz)==18){
setTile(herx[n]+2, hery, zz, 0);
}
if(getTile(herx[n]-2, hery[n], zz)==18){
setTile(herx[n]-2, hery[n], zz, 0);
}
}
}
if(her3a[n]==150){
for(var xx=her3x[n]-2;xx<her3x[n]+3;xx++)
for(var yy=her3y[n]-1;yy<her3y[n]+2;yy++)
for(var zz=her3z[n]-2;zz<her3z[n]+3;zz++)
if(getTile(xx, yy, zz)==18){
setTile(xx, yy, zz, 0);
}
her3b[n] = -1;
}
if(her3b[n]==-1){
her3x[n] = Entity.getX(hermit[n]);
her3y[n] = Entity.getY(hermit[n])-4;
her3z[n] = Entity.getZ(hermit[n]);
if(getTile(her3x[n], her3y[n], her3z[n])!=0){
for(var xx=her3x[n]-1;xx<her3x[n]+2;xx++)
for(var zz=her3z[n]-1;zz<her3z[n]+2;zz++)
if(getTile(xx, her3y[n]+2, zz)==0){
setTile(xx, her3y[n]+2, zz, 30);
}
her3b[n] = 16;
}
}
if(her3b==1){
for(var xx=her3x[n]-1;xx<her3x[n]+2;xx++)
for(var zz=her3z[n]-1;zz<her3z[n]+2;zz++)
if(getTile(xx, her3y[n]+2, zz)==30){
setTile(xx, her3y[n]+2, zz, 0);
}
}
}}




//auto recovery
if(auto==true){
if(w4b[0]==0&&w4c[0]==true&&water2==false){
autoRecover(wxa[0], wya[0], wza[0], 11, 2);
w4c[0] = false;
}
if(water[0]!=null){
for(var n=1;n<water.length;n++){
if(w4b[n]==0&&w4c[n]==true){
autoRecover(wxa[n], wya[n], wza[n], 11, 2);
w4c[n] = false;
}
}}
if(tree[0]!=null){
for(var n in tree){
if(t4a[n]==1000) autoRecover(tx[n], ty[n], tz[n], 12, 2);
if(t4a[n]==1030) autoRecover(tx[n], ty[n], tz[n], 12, 3);
}}
if(creeper[0]!=null){
for(var n in creeper){
if(c1c[n]==true){
c1b[n]--;
if(c1b[n]==120)
autoRecover(cx[n], cy[n]-4, cz[n], 3, 3);
if(c1b[n]==90)
autoRecover(cx[n], cy[n]-3, cz[n], 3, 3);
if(c1b[n]==60)
autoRecover(cx[n], cy[n]-2, cz[n], 3, 3);
if(c1b[n]==30)
autoRecover(cx[n], cy[n]-1, cz[n], 3, 3);
if(c1b[n]==0)
autoRecover(cx[n], cy[n], cz[n], 3, 2);
}
if(c1f[n]==true){
c1e[n]--;
if(c1e[n]==120)
autoRecover(cx1[n], cy1[n]-4, cz1[n], 3, 3);
if(c1e[n]==90)
autoRecover(cx1[n], cy1[n]-3, cz1[n], 3, 3);
if(c1e[n]==60)
autoRecover(cx1[n], cy1[n]-2, cz1[n], 3, 3);
if(c1e[n]==30)
autoRecover(cx1[n], cy1[n]-1, cz1[n], 3, 3);
if(c1e[n]==0)
autoRecover(cx1[n], cy1[n], cz1[n], 3, 2);
}
if(c3a[n]==30)
autoRecover(cx3[n], cy3[n], cz3[n], 13, 2);
if(c3a[n]==60)
autoRecover(cx3[n], cy3[n]-1, cz3[n], 13, 3);
if(c3a[n]==90)
autoRecover(cx3[n], cy3[n]-2, cz3[n], 13, 3);
if(c3a[n]==120)
autoRecover(cx3[n], cy3[n]-3, cz3[n], 12, 3);
if(c3a[n]==150)
autoRecover(cx3[n], cy3[n]-4, cz3[n], 12, 3);
if(c2a[n]==30)
autoRecover(c2x[n], c2y[n], c2z[n], 8, 2);
if(c2a[n]==60)
autoRecover(c2x[n], c2y[n]-1, c2z[n], 8, 3);
if(c2a[n]==90)
autoRecover(c2x[n], c2y[n]-2, c2z[n], 8, 3);
if(c2a[n]==120)
autoRecover(c2x[n], c2y[n]-3, c2z[n], 8, 3);
if(c2a[n]==150)
autoRecover(c2x[n], c2y[n]-4, c2z[n], 8, 3);
if(c2a[n]==180)
autoRecover(c2x[n], c2y[n]-5, c2z[n], 8, 3);
if(c4a[n]==900)
autoRecover(cx2[n], cy2[n], cz2[n], 15, 2);
if(c4a[n]==930)
autoRecover(cx2[n], cy2[n]-1, cz2[n], 15, 3);
if(c4a[n]==960)
autoRecover(cx2[n], cy2[n]-2, cz2[n], 15, 3);
if(c4a[n]==990)
autoRecover(cx2[n], cy2[n]-3, cz2[n], 15, 3);
if(c4a[n]==1020)
autoRecover(cx2[n], cy2[n]-4, cz2[n], 15, 3);
if(c4a[n]==1050)
autoRecover(cx2[n], cy2[n]-5, cz2[n], 15, 3);
if(c4a[n]==1080)
autoRecover(cx2[n], cy2[n]-6, cz2[n], 15, 3);
}}
if(soil[0]!=null){
for(var n in soil){
if(s2a[n]==15)
autoRecover(s2x[n], s2y[n], s2z[n], 1, 2);
if(s2a[n]==45)
autoRecover(s2x[n], s2y[n]-1, s2z[n], 1, 3);
if(s2a[n]==75)
autoRecover(s2x[n], s2y[n]-2, s2z[n], 1, 3);
if(s2a[n]==105)
autoRecover(s2x[n], s2y[n]-3, s2z[n], 1, 3);
if(s4a[n]==800)
autoRecover(sx[n], sy[n], sz[n], 9, 2);
if(s4a[n]==830)
autoRecover(sx[n], sy[n]-1, sz[n], 9, 3);
if(s4a[n]==860)
autoRecover(sx[n], sy[n]-2, sz[n], 9, 3);
if(s4a[n]==890)
autoRecover(sx[n], sy[n]-3, sz[n], 9, 3);
if(s4a[n]==920)
autoRecover(sx[n], sy[n]-4, sz[n], 9, 3);
if(s4a[n]==950)
autoRecover(sx[n], sy[n]-5, sz[n], 9, 3);
}}
if(light[0]!=null){
for(var n in light){
if(l4a[n]==900)
autoRecover(lxa[n], lya[n], lza[n], 16, 2);
if(l4a[n]==930)
autoRecover(lxa[n], lya[n]-1, lza[n], 16, 3);
if(l4a[n]==960)
autoRecover(lxa[n], lya[n]-2, lza[n], 16, 3);
if(l4a[n]==990)
autoRecover(lxa[n], lya[n]-3, lza[n], 16, 3);
if(l4a[n]==1020)
autoRecover(lxa[n], lya[n]-4, lza[n], 16, 3);
}}
if(titan[0]!=null){
for(var n in titan){
if(tt4a[n]==1500)
autoRecover(ttx[n], tty[n]-3, ttz[n], 14, 3);
if(tt4a[n]==1470)
autoRecover(ttx[n], tty[n]-2, ttz[n], 14, 3);
if(tt4a[n]==1440)
autoRecover(ttx[n], tty[n]-1, ttz[n], 14, 3);
if(tt4a[n]==1410)
autoRecover(ttx[n], tty[n], ttz[n], 14, 2);
if(tt2a[n]==200)
autoRecover(ttxa[n], ttya[n]-3, ttza[n], 4, 3);
if(tt2a[n]==180)
autoRecover(ttxa[n], ttya[n]-2, ttza[n], 4, 2);
}}
if(thunder[0]!=null){
for(var n in thunder){
if(th3a[n]==70)
autoRecover(thxb[n], thyb[n], thzb[n], 5, 2);
if(th3a[n]==100)
autoRecover(thxb[n], thyb[n]-1, thzb[n], 5, 3);
if(th3a[n]==130)
autoRecover(thxb[n], thyb[n]-2, thzb[n], 5, 3);
if(th3a[n]==160)
autoRecover(thxb[n], thyb[n]-3, thzb[n], 4, 3);
if(th3a[n]==190)
autoRecover(thxb[n], thyb[n]-4, thzb[n], 4, 3);
if(th4a[n]==1350)
autoRecover(thx[n], thy[n], thz[n], 15, 2);
if(th4a[n]==1380)
autoRecover(thx[n], thy[n]-1, thz[n], 15, 3);
if(th4a[n]==1410)
autoRecover(thx[n], thy[n]-2, thz[n], 15, 3);
if(th4a[n]==1440)
autoRecover(thx[n], thy[n]-3, thz[n], 15, 3);
if(th4a[n]==1470)
autoRecover(thx[n], thy[n]-4, thz[n], 14, 3);
if(th4a[n]==1500)
autoRecover(thx[n], thy[n]-5, thz[n], 14, 3);
}}
if(tnt[0]!=null){
for(var n in tnt){
if(tn1a[n]==1)
autoRecover(tn1x[n], tn1z[n], tn1z[n], 3, 2);
if(tn1a[n]==31)
autoRecover(tn1x[n], tn1z[n]-1, tn1z[n], 3, 3);
if(tn1a[n]==61)
autoRecover(tn1x[n], tn1z[n]-2, tn1z[n], 3, 3);
if(tn1a[n]==91)
autoRecover(tn1x[n], tn1z[n]-3, tn1z[n], 3, 3);
if(tn3a[n]==15)
autoRecover(tnx3[n], tny3[n], tnx3[n], 8, 2);
if(tn3a[n]==45)
autoRecover(tnx3[n], tny3[n]-1, tnx3[n], 8, 3);
if(tn3a[n]==75)
autoRecover(tnx3[n], tny3[n]-2, tnx3[n], 8, 3);
if(tn3a[n]==105)
autoRecover(tnx3[n], tny3[n]-3, tnx3[n], 8, 3);
if(tn4a[n]==900)
autoRecover(tnx2[n], tny2[n], tnx2[n], 12, 2);
if(tn4a[n]==930)
autoRecover(tnx2[n], tny2[n]-1, tnx2[n], 12, 3);
if(tn4a[n]==960)
autoRecover(tnx2[n], tny2[n]-2, tnx2[n], 12, 3);
if(tn4a[n]==990)
autoRecover(tnx2[n], tny2[n]-3, tnx2[n], 12, 3);
if(tn4a[n]==1020)
autoRecover(tnx2[n], tny2[n]-4, tnx2[n], 12, 3);
if(tn4a[n]==1050)
autoRecover(tnx2[n], tny2[n]-5, tnx2[n], 12, 3);
if(tn4a[n]==1080)
autoRecover(tnx2[n], tny2[n]-6, tnx2[n], 12, 3);
if(tn4a[n]==1110)
autoRecover(tnx2[n], tny2[n]-7, tnx2[n], 12, 3);
if(tn4a[n]==1140){
for(var xx=tnx2-12;xx<tnx2+13;xx++)
for(var zz=tnz2-12;zz<tnz2+13;zz++)
if(getTile(xx, tny-7, zz)==0){
setTile(xx,tny2-7,zz,3);
}
}
if(tn2a[n]==30)
autoRecover(tnx[n], tny[n], tnz[n], 10, 2);
if(tn2a[n]==60)
autoRecover(tnx[n], tny[n]-1, tnz[n], 10, 3);
if(tn2a[n]==90)
autoRecover(tnx[n], tny[n]-2, tnz[n], 10, 3);
if(tn2a[n]==120)
autoRecover(tnx[n], tny[n]-3, tnz[n], 10, 3);
if(tn2a[n]==150)
autoRecover(tnx[n], tny[n]-4, tnz[n], 10, 3);
if(tn2a[n]==180)
autoRecover(tnx[n], tny[n]-5, tnz[n], 10, 3);
}}
if(trap[0]!=null){
for(var n in trap){
if(tr1a[n]==15)
autoRecover(trx1[n], try1[n], trz1[n], 5, 2);
if(tr1a[n]==30)
autoRecover(trx1[n], try1[n]-1, trz1[n], 5, 3);
if(tr1a[n]==45)
autoRecover(trx1[n], try1[n]-2, trz1[n], 5, 3);
if(tr1a[n]==60)
autoRecover(trx1[n], try1[n]-3, trz1[n], 5, 3);
if(tr1a[n]==75)
autoRecover(trx1[n], try1[n]-4, trz1[n], 5, 3);
if(tr2a[n]==30)
autoRecover(trx2[n], try2[n], trz2[n], 2, 2);
if(tr2a[n]==60)
autoRecover(trx2[n], try2[n]-1, trz2[n], 2, 3);
if(tr2a[n]==90)
autoRecover(trx2[n], try2[n]-2, trz2[n], 2, 3);
}}
if(fire[0]!=null){
for(var n in fire){
if(f2a[n]==15)
autoRecover(f2x[n], f2y[n], f2z[n], 1, 2);
if(f2a[n]==45)
autoRecover(f2x[n], f2y[n]-1, f2z[n], 1, 3);
if(f2a[n]==75)
autoRecover(f2x[n], f2y[n]-2, f2z[n], 1, 3);
if(f2a[n]==105)
autoRecover(f2x[n], f2y[n]-3, f2z[n], 1, 3);
if(f2a[n]==135)
autoRecover(f2x[n], f2y[n]-4, f2z[n], 1, 3);
}}
if(meca[0]!=null){
for(var n in meca){
if(mm3a[n]==30)
autoRecover(mmx[n], mmy[n], mmz[n], 5, 2);
if(mm3a[n]==60)
autoRecover(mmx[n], mmy[n]-1, mmz[n], 5, 3);
if(mm3a[n]==90)
autoRecover(mmx[n], mmy[n]-2, mmz[n], 5, 3);
if(mm2a[n]==90)
autoRecover(mmx2a[n], mmy2a[n], mmz2a[n], 11, 2);
if(mm2a[n]==120)
autoRecover(mmx2a[n], mmy2a[n]-1, mmz2a[n], 11, 3);
if(mm2a[n]==150)
autoRecover(mmx2a[n], mmy2a[n]-2, mmz2a[n], 11, 3);
if(mm2a[n]==180)
autoRecover(mmx2a[n], mmy2a[n]-3, mmz2a[n], 11, 3);
if(mm4a[n]==1000)
autoRecover(mmx4[n], mmy4[n], mmz4[n], 11, 2);
if(mm4a[n]==1030)
autoRecover(mmx4[n], mmy4[n]-1, mmz4[n], 11, 3);
if(mm4a[n]==1060)
autoRecover(mmx4[n], mmy4[n]-2, mmz4[n], 11, 3);
if(mm4a[n]==1090)
autoRecover(mmx4[n], mmy4[n]-3, mmz4[n], 11, 3);
if(mm4a[n]==1020)
autoRecover(mmx4[n], mmy4[n]-4, mmz4[n], 11, 3);
}}
if(arrow[0]!=null){
for(var n in arrow){
if(ar4a[n]==600)
autoRecover(arx[n], ary[n], arz[n], 14, 2);
if(ar4a[n]==630)
autoRecover(arx[n], ary[n]-1, arz[n], 14, 3);
if(ar4a[n]==660)
autoRecover(arx[n], ary[n]-2, arz[n], 14, 3);
if(ar4a[n]==690)
autoRecover(arx[n], ary[n]-3, arz[n], 14, 3);
if(ar4a[n]==720)
autoRecover(arx[n], ary[n]-4, arz[n], 14, 3);
if(ar4a[n]==750)
autoRecover(arx[n], ary[n]-5, arz[n], 14, 3);
}}
if(mage[0]!=null){
for(var n in mage){
if(ma4a[n]==600)
autoRecover(max[n], may[n], maz[n], 14, 2);
if(ma4a[n]==630)
autoRecover(max[n], may[n]-1, maz[n], 14, 3);
if(ma4a[n]==660)
autoRecover(max[n], may[n]-2, maz[n], 14, 3);
if(ma4a[n]==690)
autoRecover(max[n], may[n]-3, maz[n], 14, 3);
if(ma4a[n]==720)
autoRecover(max[n], may[n]-4, maz[n], 14, 3);
if(ma4a[n]==750)
autoRecover(max[n], may[n]-5, maz[n], 14, 3);
}}
if(hfreeze[0]!=null){
for(var n in hfreeze){
if(hf4a[n]==900)
autoRecover(hfx[n], hfy[n], hfy[n], 11, 2);
if(hf4a[n]==930)
autoRecover(hfx[n], hfy[n]-1, hfy[n], 11, 3);
if(hf4a[n]==960)
autoRecover(hfx[n], hfy[n]-2, hfy[n], 11, 3);
if(hf4a[n]==990)
autoRecover(hfx[n], hfy[n]-3, hfy[n], 11, 3);
if(hf4a[n]==1020)
autoRecover(hfx[n], hfy[n]-4, hfy[n], 11, 3);
}}
if(soldier[0]!=null){
for(var n in soldier){
if(Cool.isFalse(so2b[n])){
if(so2a[n]==15)
autoRecover(so2x[n], so2z[n], so2z[n], 3, 2);
if(so2a[n]==45)
autoRecover(so2x[n], so2z[n]-1, so2z[n], 3, 3);
if(so2a[n]==75)
autoRecover(so2x[n], so2z[n]-2, so2z[n], 3, 3);
if(so2a[n]==105)
autoRecover(so2x[n], so2z[n]-3, so2z[n], 3, 3);
if(so2a[n]==135)
autoRecover(so2x[n], so2z[n]-4, so2z[n], 3, 3);
}
}}
if(assault[0]!=null){
for(var n in assault){
if(asu2a[n]==30)
autoRecover(asu2x[n], asu2y[n]-4, asu2z[n], 4, 2);
if(asu2a[n]==60)
autoRecover(asu2x[n], asu2y[n]-1, asu2z[n], 4, 3);
if(asu2a[n]==90)
autoRecover(asu2x[n], asu2y[n]-2, asu2z[n], 4, 3);
if(asu2a[n]==120)
autoRecover(asu2x[n], asu2y[n]-3, asu2z[n], 4, 3);
}}
if(burst[0]!=null){
for(var n in burst){
if(bus4a[n]==900)
autoRecover(busx[n], busy[n], busz[n], 17, 2);
if(bus4a[n]==930)
autoRecover(busx[n], busy[n]-1, busz[n], 17, 3);
if(bus4a[n]==960)
autoRecover(busx[n], busy[n]-2, busz[n], 17, 3);
if(bus4a[n]==990)
autoRecover(busx[n], busy[n]-3, busz[n], 17, 3);
if(bus4a[n]==1020)
autoRecover(busx[n], busy[n]-4, busz[n], 17, 3);
if(bus4a[n]==1050)
autoRecover(busx[n], busy[n]-5, busz[n], 16, 3);
}}
if(warrior[0]!=null){
for(var n in warrior){
if(wa4a[n]==900)
autoRecover(wax[n], way[n], waz[n], 12, 2);
if(wa4a[n]==930)
autoRecover(wax[n], way[n]-1, waz[n], 12, 3);
if(wa4a[n]==960)
autoRecover(wax[n], way[n]-2, waz[n], 12, 3);
if(wa4a[n]==990)
autoRecover(wax[n], way[n]-3, waz[n], 12, 3);
if(wa4a[n]==1020)
autoRecover(wax[n], way[n]-4, waz[n], 12, 3);
}}
if(ore[0]!=null){
for(var n in ore){
if(Cool.isFalse(o4d[n])){
if(o4a[n]==930)
autoRecover(ox[n], oy[n], oz[n], 11, 2);
if(o4a[n]==960)
autoRecover(ox[n], oy[n]-1, oz[n], 11, 3);
if(o4a[n]==990)
autoRecover(ox[n], oy[n]-2, oz[n], 11, 3);
if(o4a[n]==1020)
autoRecover(ox[n], oy[n]-3, oz[n], 11, 3);
if(o4a[n]==1050)
autoRecover(ox[n], oy[n]-4, oz[n], 11, 3);
}
}}
if(tp[0]!=null){
for(var n in tp){
if(tp4a[n]==900)
autoRecover(tpx[n], tpy[n], tpz[n], 2, 2);
if(tp4a[n]==930)
autoRecover(tpx[n], tpy[n]-1, tpz[n], 2, 3);
if(tp4a[n]==960)
autoRecover(tpx[n], tpy[n]-2, tpz[n], 2, 3);
if(tp4a[n]==990)
autoRecover(tpx[n], tpy[n]-3, tpz[n], 2, 3);
}}
if(space[0]!=null){
for(var n in space){
if(sp4a[n]==1350)
autoRecover(spx[n], spy[n]-5, spz[n], 1, 3);
if(sp4a[n]==1320)
autoRecover(spx[n], spy[n]-4, spz[n], 2, 3);
if(sp4a[n]==1290){
autoRecover(spx[n], spy[n]-3, spz[n], 3, 3);
for(var xx=spx[n]-1;xx<spx[n]+2;xx++)
for(var yy=0;yy<spy[n]-7;yy++)
for(var zz=spz[n]-1;zz<spz[n]+2;zz++)
setTile(xx, yy, zz, 0);
}
if(sp4a[n]==1260)
autoRecover(spx[n], spy[n]-2, spz[n], 4, 3);
if(sp4a[n]==1230)
autoRecover(spx[n], spy[n]-1, spz[n], 5, 3);
if(sp4a[n]==1200){
autoRecover(spx[n], spy[n], spz[n], 6, 2);
for(var xx=spx[n]-1;xx<spx[n]+2;xx++){
for(var zz=spz[n]-1;zz<spz[n]+2;zz++){
for(var yy=1;yy<spy[n]-5;yy++)
setTile(xx, yy, zz, 3);
setTile(xx, 0, zz, 7);
}}
}
}}
if(sattack[0]!=null){
for(var n in sattack){
if(sa2a[n]==1)
autoRecover(sa2x[n], sa2y[n], sa2z[n], 7, 2);
if(sa2a[n]==31)
autoRecover(sa2x[n], sa2y[n]-1, sa2z[n], 7, 3);
if(sa2a[n]==61)
autoRecover(sa2x[n], sa2y[n]-2, sa2z[n], 7, 3);
if(sa2a[n]==91)
autoRecover(sa2x[n], sa2y[n]-3, sa2z[n], 7, 3);
if(sa2a[n]==121)
autoRecover(sa2x[n], sa2y[n]-4, sa2z[n], 7, 3);
if(sa2a[n]==151)
autoRecover(sa2x[n], sa2y[n]-5, sa2z[n], 7, 3);
if(sa2a[n]==181)
autoRecover(sa2x[n], sa2y[n]-6, sa2z[n], 7, 3);
if(sa3a[n]==30)
autoRecover(sa3x[n], sa3y[n], sa3z[n], 9, 2);
if(sa3a[n]==60)
autoRecover(sa3x[n], sa3y[n]-1, sa3z[n], 9, 3);
if(sa3a[n]==90)
autoRecover(sa3x[n], sa3y[n]-2, sa3z[n], 9, 3);
if(sa3a[n]==120)
autoRecover(sa3x[n], sa3y[n]-3, sa3z[n], 9, 3);
if(sa4a[n]==1350&&sa4b[n]==true){
autoRecover(sax[n], say[n], saz[n], 10, 2);
sa4b[n] = false;
}
}}
if(force[0]!=null){
for(var n in force){
if(fo4a[n]==900)
autoRecover(fox[n], foy[n], foz[n], 18, 2);
if(fo4a[n]==930)
autoRecover(fox[n], foy[n]-1, foz[n], 18, 3);
if(fo4a[n]==960)
autoRecover(fox[n], foy[n]-2, foz[n], 18, 3);
if(fo4a[n]==990)
autoRecover(fox[n], foy[n]-3, foz[n], 18, 3);
if(fo4a[n]==1020)
autoRecover(fox[n], foy[n]-4, foz[n], 18, 3);
}}
if(rein[0]!=null){
for(var n in rein){
if(re1a[n]==1)
autoRecover(re1x[n], re1y[n], re1z[n], 4, 2);
if(re1a[n]==31)
autoRecover(re1x[n], re1y[n]-1, re1z[n], 4, 3);
if(re1a[n]==61)
autoRecover(re1x[n], re1y[n]-2, re1z[n], 4, 3);
if(re1a[n]==91)
autoRecover(re1x[n], re1y[n]-3, re1z[n], 4, 3);
if(re3a[n]==31)
autoRecover(re3x[n], re3y[n], re3z[n], 8, 2);
if(re3a[n]==61)
autoRecover(re3x[n], re3y[n]-1, re3z[n], 8, 3);
if(re3a[n]==91)
autoRecover(re3x[n], re3y[n]-2, re3z[n], 8, 3);
if(re3a[n]==121)
autoRecover(re3x[n], re3y[n]-3, re3z[n], 8, 3);
if(re4a[n]==870){
for(var xx=rex[n]-11;xx<rex[n]+12;xx++)
for(var yy=rey[n];yy<rey[n]+5;yy++)
for(var zz=rez[n]-11;zz<rez[n]+12;zz++)
if(getTile(xx, yy, zz)==1){
setTile(xx, yy, zz, 0);
}
}
if(re4a[n]==900)
autoRecover(rex[n], rey[n], rez[n], 12, 2);
if(re4a[n]==930)
autoRecover(rex[n], rey[n]-1, rez[n], 12, 3);
if(re4a[n]==960)
autoRecover(rex[n], rey[n]-2, rez[n], 12, 3);
if(re4a[n]==990)
autoRecover(rex[n], rey[n]-3, rez[n], 12, 3);
if(re4a[n]==1020)
autoRecover(rex[n], rey[n]-4, rez[n], 12, 3);
if(re4a[n]==1050)
autoRecover(rex[n], rey[n]-5, rez[n], 12, 3);
if(re4a[n]==1080)
autoRecover(rex[n], rey[n]-6, rez[n], 12, 3);
}}
if(magnet[0]!=null){
for(var n in magnet){
if(mag3a[n]==1)
autoRecover(mag3x[n], mag3y[n], mag3z[n], 9, 2);
if(mag3a[n]==31)
autoRecover(mag3x[n], mag3y[n]-1, mag3z[n], 9, 3);
if(mag3a[n]==61)
autoRecover(mag3x[n], mag3y[n]-2, mag3z[n], 9, 3);
if(mag4a[n]==900)
autoRecover(magx[n], magy[n], magz[n], 13, 2);
if(mag4a[n]==930)
autoRecover(magx[n], magy[n]-1, magz[n], 13, 3);
if(mag4a[n]==960)
autoRecover(magx[n], magy[n]-2, magz[n], 13, 3);
if(mag4a[n]==990)
autoRecover(magx[n], magy[n]-3, magz[n], 13, 3);
if(mag4a[n]==1020)
autoRecover(magx[n], magy[n]-4, magz[n], 13, 3);
}}
if(steve[0]!=null){
for(var n in steve){
if(Cool.isFalse(st2c[n])){
if(st2a[n]==1)
autoRecover(st2x[n], st2y[n], st2z[n], 4, 2);
if(st2a[n]==31)
autoRecover(st2x[n], st2y[n]-1, st2z[n], 4, 3);
if(st2a[n]==61)
autoRecover(st2x[n], st2y[n]-2, st2z[n], 4, 3);
if(st2a[n]==91)
autoRecover(st2x[n], st2y[n]-3, st2z[n], 4, 3);
}
if(st4a[n]==900){
for(var xx=stx[n]-19;xx<stx[n]+20;xx++)
for(var zz=stz[n]-19;zz<stz[n]+20;zz++)
if(getTile(xx, sty[n], zz)==0){
setTile(xx, sty[n], zz, 2);
}
}
if(st4a[n]==930){
for(var xx=stx[n]-19;xx<stx[n]+20;xx++)
for(var zz=stz[n]-19;zz<stz[n]+20;zz++)
if(getTile(xx, sty[n]-1, zz)==0){
setTile(xx, sty[n]-1, zz, 3);
}
}
if(st4a[n]==960){
for(var xx=stx[n]-19;xx<stx[n]+20;xx++)
for(var zz=stz[n]-19;zz<stz[n]+20;zz++)
if(getTile(xx, sty[n]-2, zz)==0){
setTile(xx, sty[n]-2, zz,3);
}
}
if(st4a[n]==990){
for(var xx=stx[n]-19;xx<stx[n]+20;xx++)
for(var zz=stz[n]-19;zz<stz[n]+20;zz++)
if(getTile(xx, sty[n]-3, zz)==0){
setTile(xx, sty[n]-3, zz,3);
}
}
if(st4a[n]==1020){
for(var xx=stx[n]-19;xx<stx[n]+20;xx++)
for(var zz=stz[n]-19;zz<stz[n]+20;zz++)
if(getTile(xx, sty[n]-4, zz)==0){
setTile(xx, sty[n]-4, zz,3);
}
}
if(st4a[n]==1050){
for(var xx=stx[n]-19;xx<stx[n]+20;xx++)
for(var zz=stz[n]-19;zz<stz[n]+20;zz++)
if(getTile(xx, sty[n]-5, zz)==0){
setTile(xx, sty[n]-5, zz,3);
}
}
if(st4a[n]==1080){
for(var xx=stx[n]-19;xx<stx[n]+20;xx++)
for(var zz=stz[n]-19;zz<stz[n]+20;zz++)
if(getTile(xx, sty[n]-6, zz)==0){
setTile(xx, sty[n]-6, zz,3);
}
}
}}
if(hero[0]!=null){
for(var n in hero){
if(he3a[n]==1)
autoRecover(he3x[n], he3y[n], he3z[n], 6, 2);
if(he3a[n]==31)
autoRecover(he3x[n], he3y[n]-1, he3z[n], 6, 3);
if(he3a[n]==61)
autoRecover(he3x[n], he3y[n]-2, he3z[n], 6, 3);
if(he3a[n]==91)
autoRecover(he3x[n], he3y[n]-3, he3z[n], 6, 3);
if(he3a[n]==121)
autoRecover(he3x[n], he3y[n]-4, he3z[n], 6, 3);
if(he3a[n]==151)
autoRecover(he3x[n], he3y[n]-5, he3z[n], 6, 3);
if(he4a[n]==900)
autoRecover(hex[n], hey[n], hez[n], 16, 2);
if(he4a[n]==960)
autoRecover(hex[n], hey[n]-1, hez[n], 16, 3);
if(he4a[n]==990)
autoRecover(hex[n], hey[n]-2, hez[n], 16, 3);
if(he4a[n]==1020)
autoRecover(hex[n], hey[n]-3, hez[n], 16, 3);
if(he4a[n]==1050)
autoRecover(hex[n], hey[n]-4, hez[n], 16, 3);
}}
if(sand[0]!=null){
for(var n in sand){
if(m3a[n]==1)
autoRecover(m3x[n], m3y[n], m3z[n], 4, 1);
if(m3a[n]==31)
autoRecover(m3x[n], m3y[n]-1, m3z[n], 4, 3);
if(m3a[n]==61)
autoRecover(m3x[n], m3y[n]-2, m3z[n], 4, 3);
}}
if(clay[0]!=null){
for(var n in clay){
if(cl2a[n]==1)
autoRecover(cl2x[n], cl2y[n], cl2z[n], 4, 2);
if(cl2a[n]==31)
autoRecover(cl2x[n], cl2y[n]-1, cl2z[n], 4, 3);
if(cl2a[n]==91)
autoRecover(cl2x[n], cl2y[n]-2, cl2z[n], 4, 3);
if(cl3a[n]==1)
autoRecover(cl3x[n], cl3y[n], cl3z[n], 4, 2);
if(cl3a[n]==31)
autoRecover(cl3x[n], cl3y[n]-1, cl3z[n], 4, 3);
if(cl3a[n]==61)
autoRecover(cl3x[n], cl3y[n]-2, cl3z[n], 4, 3);
if(cl3a[n]==91)
autoRecover(cl3x[n], cl3y[n]-3, cl3z[n], 4, 3);
if(cl4a[n]==900)
autoRecover(clx[n], cly[n], clz[n], 11, 2);
if(cl4a[n]==930)
autoRecover(clx[n], cly[n]-1, clz[n], 11, 3);
if(cl4a[n]==960)
autoRecover(clx[n], cly[n]-2, clz[n], 11, 3);
if(cl4a[n]==990)
autoRecover(clx[n], cly[n]-3, clz[n], 11, 3);
if(cl4a[n]==1020)
autoRecover(clx[n], cly[n]-4, clz[n], 11, 3);
}}
if(kirito[0]!=null){
for(var n in kirito){
if(k2a[n]==1)
autoRecover(k2x[n], k2y[n], k2z[n], 7, 2);
if(k2a[n]==31)
autoRecover(k2x[n], k2y[n]-1, k2z[n], 7, 3);
if(k2a[n]==61)
autoRecover(k2x[n], k2y[n]-2, k2z[n], 7, 3);
if(k2a[n]==91)
autoRecover(k2x[n], k2y[n]-3, k2z[n], 7, 3);
if(k2a[n]==1)
autoRecover(k2x[n], k2y[n]-1, k2z[n], 7, 3);
}}
if(jungle[0]!=null){
for(var n in jungle){
if(j3a[n]==1)
autoRecover(j3x[n], j3y[n], j3z[n], 4, 2);
if(j3a[n]==31)
autoRecover(j3x[n], j3y[n]-1, j3z[n], 4, 3);
if(j3a[n]==61)
autoRecover(j3x[n], j3y[n]-2, j3z[n], 4, 3);
if(j3a[n]==91)
autoRecover(j3x[n], j3y[n]-3, j3z[n], 4, 3);
if(j4a[n]==870)
autoRecover(jx[n], jy[n]-6, jz[n], 11, 3);
if(j4a[n]==840)
autoRecover(jx[n], jy[n]-5, jz[n], 11, 3);
if(j4a[n]==810)
autoRecover(jx[n], jy[n]-4, jz[n], 11, 3);
if(j4a[n]==780)
autoRecover(jx[n], jy[n]-3, jz[n], 11, 3);
if(j4a[n]==750)
autoRecover(jx[n], jy[n]-2, jz[n], 11, 3);
if(j4a[n]==720)
autoRecover(jx[n], jy[n]-1, jz[n], 11, 3);
if(j4a[n]==690)
autoRecover(jx[n], jy[n], jz[n], 11, 2);
}}
if(kanade[0]!=null){
for(var n in kanade){
if(ka4a[n]==900)
autoRecover(kax[n], kay[n], kaz[n], 23, 2);
if(ka4a[n]==930)
autoRecover(kax[n], kay[n]-1, kaz[n], 23, 3);
if(ka4a[n]==960)
autoRecover(kax[n], kay[n]-2, kaz[n], 23, 3);
if(ka4a[n]==990)
autoRecover(kax[n], kay[n]-3, kaz[n], 23, 3);
if(ka4a[n]==1020)
autoRecover(kax[n], kay[n]-4, kaz[n], 23, 3);
if(ka4a[n]==1050)
autoRecover(kax[n], kay[n]-5, kaz[n], 23, 3);
}}
if(holy[0]!=null){
for(var n in holy){
if(ho4a[n]==900){
for(var nn=0;nn<3;nn++)
autoRecover(hox[n][nn], kay[n][nn], kaz[n][nn], 12, 2);
}
if(ho4a[n]==930){
for(var nn=0;nn<3;nn++)
autoRecover(hox[n][nn], kay[n][nn]-1, kaz[n][nn], 12, 3);
}
if(ho4a[n]==960){
for(var nn=0;nn<3;nn++)
autoRecover(hox[n][nn], kay[n][nn]-2, kaz[n][nn], 12, 3);
}
if(ho4a[n]==990){
for(var nn=0;nn<3;nn++)
autoRecover(hox[n][nn], kay[n][nn]-3, kaz[n][nn], 12, 3);
}
if(ho4a[n]==1020){
for(var nn=0;nn<3;nn++)
autoRecover(hox[n][nn], kay[n][nn]-4, kaz[n][nn], 12, 3);
}
if(ho4a[n]==1050){
for(var nn=0;nn<3;nn++)
autoRecover(hox[n][nn], kay[n][nn]-5, kaz[n][nn], 12, 3);
}
}}
if(has[0]!=null){
for(var n in has){
if(ha2a[n]==30)
autoRecover(ha2x[n], ha2y[n], ha2z[n], 5, 2);
if(ha2a[n]==60)
autoRecover(ha2x[n], ha2y[n]-1, ha2z[n], 5, 3);
if(ha2a[n]==90)
autoRecover(ha2x[n], ha2y[n]-2, ha2z[n], 5, 3);
if(ha2a[n]==120)
autoRecover(ha2x[n], ha2y[n]-3, ha2z[n], 5, 3);
if(ha2a[n]==150)
autoRecover(ha2x[n], ha2y[n]-4, ha2z[n], 5, 3);
}}
if(random[0]!=null){
for(var n in random){
if(ra4a[n]==1755&&ra4b[n]==1){
for(var xx=rax[n]-12;xx<rax[n]+13;xx++)
setTile(xx, ray[n], raz[n], 2);
for(var zz=raz[n]-12;zz<raz[n]+13;zz++)
setTile(rax[n], ray[n], zz, 2);
}
if(ra4b==1||ra4b==3){
if(ra4a[n]==900)
autoRecover(rax[n], ray[n], raz[n], 12, 2);
if(ra4a[n]==930)
autoRecover(rax[n], ray[n]-1, raz[n], 12, 3);
}
if(ra4b==3){
if(ra4a[n]==960)
autoRecover(rax[n], ray[n]-2, raz[n], 12, 3);
if(ra4a[n]==990)
autoRecover(rax[n], ray[n]-3, raz[n], 12, 3);
if(ra4a[n]==1020)
autoRecover(rax[n], ray[n]-4, raz[n], 12, 3);
if(ra4a[n]==1050)
autoRecover(rax[n], ray[n]-5, raz[n], 12, 3);
}
}}
if(zwei[0]!=null){
for(var n in zwei){
if(zw4a[n]==1350){
for each(var pos in zw4b[n])
autoRecover(pos[0], pos[1], pos[2], 4, 2);
}
if(zw4a[n]==1380){
for each(var pos in zw4b[n])
autoRecover(pos[0], pos[1]-1, pos[2], 4, 3);
}
if(zw4a[n]==1410){
for each(var pos in zw4b[n])
autoRecover(pos[0], pos[1]-2, pos[2], 4, 3);
}
if(zw4a[n]==1440){
for each(var pos in zw4b[n])
autoRecover(pos[0], pos[1]-3, pos[2], 4, 3);
}
}}
if(deco[0]!=null){
for(var n in deco){
if(dec3a[n]==30)
autoRecover(dec3x[n], dec3y[n], dec3z[n], 10, 2);
if(dec3a[n]==60)
autoRecover(dec3x[n], dec3y[n]-1, dec3z[n], 10, 3);
if(dec3a[n]==90)
autoRecover(dec3x[n], dec3y[n]-2, dec3z[n], 10, 3);
if(dec3a[n]==120)
autoRecover(dec3x[n], dec3y[n]-3, dec3z[n], 10, 3);
if(dec4a[n]==900)
autoRecover(decx[n], decy[n], decz[n], 14, 2);
if(dec4a[n]==930)
autoRecover(decx[n], decy[n]-1, decz[n], 14, 3);
if(dec4a[n]==960)
autoRecover(decx[n], decy[n]-2, decz[n], 14, 3);
if(dec4a[n]==990)
autoRecover(decx[n], decy[n]-3, decz[n], 14, 3);
if(dec4a[n]==1020)
autoRecover(decx[n], decy[n]-4, decz[n], 14, 3);
if(dec4a[n]==1050)
autoRecover(decx[n], decy[n]-5, decz[n], 14, 3);
if(dec4a[n]==1080)
autoRecover(decx[n], decy[n]-6, decz[n], 14, 3);
if(dec4a[n]==1100)
autoRecover(decx[n], decy[n]-7, decz[n], 14, 3);
if(dec4a[n]==1140)
autoRecover(decx[n], decy[n]-8, decz[n], 14, 3);
}}
if(wind[0]!=null){
for(var n in wind){
if(wi4a[n]==900)
autoRecover(wix[n], wiy[n], wix[n], 9, 2);
if(wi4a[n]==930)
autoRecover(wix[n], wiy[n]-1, wix[n], 9, 3);
if(wi4a[n]==960)
autoRecover(wix[n], wiy[n]-2, wix[n], 9, 3);
if(wi4a[n]==990)
autoRecover(wix[n], wiy[n]-3, wix[n], 9, 3);
}}
if(energy[0]!=null){
for(var n in energy){
if(en1a[n]==1)
autoRecover(en1x[n], en1y[n], en1z[n], 5, 2);
if(en1a[n]==31)
autoRecover(en1x[n], en1y[n]-1, en1z[n], 5, 3);
if(en1a[n]==61)
autoRecover(en1x[n], en1y[n]-2, en1z[n], 5, 3);
if(en1a[n]==61)
autoRecover(en1x[n], en1y[n]-3, en1z[n], 5, 3);
if(en3a[n]==1)
autoRecover(en3x[n], en3y[n], en3z[n], 10, 2);
if(en3a[n]==31)
autoRecover(en3x[n], en3y[n]-1, en3z[n], 10, 3);
if(en3a[n]==61)
autoRecover(en3x[n], en3y[n]-2, en3z[n], 10, 3);
if(en3a[n]==91)
autoRecover(en3x[n], en3y[n]-3, en3z[n], 10, 3);
if(en3a[n]==121)
autoRecover(en3x[n], en3y[n]-4, en3z[n], 10, 3);
}}
if(geno[0]!=null){
for(var n in geno){
if(g2a[n]==1)
autoRecover(g2x[n], g2y[n], g2z[n], 6, 2);
if(g2a[n]==31)
autoRecover(g2x[n], g2y[n]-1, g2z[n], 6, 3);
if(g2a[n]==61)
autoRecover(g2x[n], g2y[n]-2, g2z[n], 6, 3);
if(g2a[n]==91)
autoRecover(g2x[n], g2y[n]-3, g2z[n], 6, 3);
if(g4a[n]==900){
for(var nn in g4b[n])
autoRecover(g4b[n][0], g4b[n][1], g4b[n][2], 4, 2);
}
if(g4a[n]==930){
for(var nn in g4b[n])
autoRecover(g4b[n][0], g4b[n][1]-1, g4b[n][2], 4, 3);
}
if(g4a[n]==960){
for(var nn in g4b[n])
autoRecover(g4b[n][0], g4b[n][1]-2, g4b[n][2], 4, 3);
}
if(g4a[n]==990){
for(var nn in g4b[n])
autoRecover(g4b[n][0], g4b[n][1]-3, g4b[n][2], 4, 3);
}
}}
if(rgun[0]!=null){
for(var n in rgun){
if(rg3a[n]==1)
autoRecover(rg3x[n], rg3y[n], rg3z[n], 12, 2);
if(rg3a[n]==31)
autoRecover(rg3x[n], rg3y[n]-1, rg3z[n], 12, 3);
if(rg3a[n]==61)
autoRecover(rg3x[n], rg3y[n]-2, rg3z[n], 12, 3);
if(rg3a[n]==91)
autoRecover(rg3x[n], rg3y[n]-3, rg3z[n], 12, 3);
if(rg3a[n]==121)
autoRecover(rg3x[n], rg3y[n]-4, rg3z[n], 12, 3);
if(rg4a[n]==900){
autoRecover(rgx[n][0], rgy[n], rgz[n][0], 7, 2);
for(var nn=1;nn<4;nn++)
autoRecover(rgx[n][nn], rgy[n], rgz[n][nn], 14, 2);
}
if(rg4a[n]==930){
autoRecover(rgx[n][0], rgy[n]-1, rgz[n][0], 7, 3);
for(var nn=1;nn<4;nn++)
autoRecover(rgx[n][nn], rgy[n]-1, rgz[n][nn], 14, 3);
}
if(rg4a[n]==960){
autoRecover(rgx[n][0], rgy[n]-2, rgz[n][0], 7, 3);
for(var nn=1;nn<4;nn++)
autoRecover(rgx[n][nn], rgy[n]-2, rgz[n][nn], 14, 3);
}
if(rg4a[n]==990){
autoRecover(rgx[n][0], rgy[n]-3, rgz[n][0], 7, 3);
for(var nn=1;nn<4;nn++)
autoRecover(rgx[n][nn], rgy[n]-3, rgz[n][nn], 14, 3);
}
if(rg4a[n]==1020){
for(var nn=1;nn<4;nn++)
autoRecover(rgx[n][nn], rgy[n]-4, rgz[n][nn], 14, 3);
}
if(rg4a[n]==1050){
for(var nn=1;nn<4;nn++)
autoRecover(rgx[n][nn], rgy[n]-5, rgz[n][nn], 14, 3);
}
if(rg4a[n]==1080){
for(var nn=1;nn<4;nn++)
autoRecover(rgx[n][nn], rgy[n]-6, rgz[n][nn], 14, 3);
}
}}
if(copy[0]!=null){
for(var n in copy){
if(co4a[n]==900)
autoRecover(cox[n], coy[n], coz[n], 14, 2);
if(co4a[n]==930)
autoRecover(cox[n], coy[n]-1, coz[n], 14, 3);
if(co4a[n]==960)
autoRecover(cox[n], coy[n]-2, coz[n], 14, 3);
if(co4a[n]==990)
autoRecover(cox[n], coy[n]-3, coz[n], 14, 3);
if(co4a[n]==1020)
autoRecover(cox[n], coy[n]-4, coz[n], 14, 3);
}}
if(dragon[0]!=null){
for(var n in dragon){
if(dr4a[n]==900)
autoRehwver(drx[n], dry[n], drz[n], 12, 2);
if(dr4a[n]==930)
autoRehwver(drx[n], dry[n]-1, drz[n], 12, 3);
if(dr4a[n]==960)
autoRehwver(drx[n], dry[n]-2, drz[n], 12, 3);
if(dr4a[n]==990)
autoRehwver(drx[n], dry[n]-3, drz[n], 12, 3);
if(dr4a[n]==1020)
autoRehwver(drx[n], dry[n]-4, drz[n], 12, 3);
}}
if(hawk[0]!=null){
for(var n in hawk){
if(hw1a[n]==75)
autoRehwver(hw1x[n], hw1y[n], hw1z[n], 14, 2);
if(hw4a[n]==900)
autoRehwver(hwx[n], hwy[n], hwz[n], 14, 2);
if(hw4a[n]==930)
autoRehwver(hwx[n], hwy[n]-1, hwz[n], 14, 3);
if(hw4a[n]==960)
autoRehwver(hwx[n], hwy[n]-2, hwz[n], 14, 3);
if(hw4a[n]==990)
autoRehwver(hwx[n], hwy[n]-3, hwz[n], 14, 3);
if(hw4a[n]==1020)
autoRehwver(hwx[n], hwy[n]-4, hwz[n], 14, 3);
}}
if(gravity[0]!=null){
for(var n in gravity){
if(gr4a[n]==900)
autoRehwver(grx[n], gry[n], grz[n], 14, 2);
if(gr4a[n]==930)
autoRehwver(grx[n], gry[n]-1, grz[n], 14, 3);
if(gr4a[n]==960)
autoRehwver(grx[n], gry[n]-2, grz[n], 14, 3);
if(gr4a[n]==990)
autoRehwver(grx[n], gry[n]-3, grz[n], 14, 3);
if(gr4a[n]==1020)
autoRehwver(grx[n], gry[n]-4, grz[n], 14, 3);
}}
if(bl4a==900){
for(var xx=blx-24;xx<blx+25;xx++)
for(var zz=blz-24;zz<blz+25;zz++)
setTile(xx, bly, zz, 2);
}
if(bl4a==930){
for(var xx=blx-24;xx<blx+25;xx++)
for(var zz=blz-24;zz<blz+25;zz++)
setTile(xx, bly-1, zz, 3);
}
if(bl4a==960){
for(var xx=blx-24;xx<blx+25;xx++)
for(var zz=blz-24;zz<blz+25;zz++)
setTile(xx, bly-2, zz, 3);
}
if(bl4a==990){
for(var xx=blx-24;xx<blx+25;xx++)
for(var zz=blz-24;zz<blz+25;zz++)
setTile(xx, bly-3, zz,3);
}
if(bl4a==1020){
for(var xx=blx-24;xx<blx+25;xx++)
for(var zz=blz-24;zz<blz+25;zz++)
setTile(xx, bly-4, zz, 3);
}
if(sl4a==900){
for(var xx=slx-15;xx<slx+16;xx++)
for(var zz=slz-15;zz<slz+16;zz++)
setTile(xx, sly, zz, 2);
}
if(sl4a==930){
for(var xx=slx-15;xx<slx+16;xx++)
for(var zz=slz-15;zz<slz+16;zz++)
setTile(xx, sly-1, zz, 3);
}
if(sl4a==960){
for(var xx=slx-15;xx<slx+16;xx++)
for(var zz=slz-15;zz<slz+16;zz++)
setTile(xx, sly-2, zz, 3);
}
if(sl4a==990){
for(var xx=slx-15;xx<slx+16;xx++)
for(var zz=slz-15;zz<slz+16;zz++)
setTile(xx, sly-3, zz,3);
}
if(sl4a==1020){
for(var xx=slx-15;xx<slx+16;xx++)
for(var zz=slz-15;zz<slz+16;zz++)
setTile(xx, sly-4, zz, 3);
}
if(mu4a==900){
for(var xx=mux-9;xx<mux+10;xx++)
for(var yy=muy+1;yy<muy+8;yy++)
for(var zz=muz-9;zz<muz+10;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
for(var xx=mux-9;xx<mux+10;xx++)
for(var zz=muz-9;zz<muz+10;zz++)
setTile(xx, muy, zz, 2);
}
if(end4a==900){
for(var xx=endx+2;xx<endx+5;xx++)
for(var yy=endy+1;yy<endy+8;yy++)
for(var zz=ensz-5;zz<endz-2;zz++)
setTile(xx, yy, zz, 0);
setTile(endx+3, endy+7, endz-4, 0);
setTile(endx+3, endy+9, endz-4, 0);
for(var xx=endx-9;xx<endx+10;xx++)
for(var yy=endy+1;yy<endy+3;yy++)
for(var zz=endz-9;zz<endz+10;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
for(var xx=endx-9;xx<endx+10;xx++)
for(var zz=endz-9;zz<endz+10;zz++)
setTile(xx, endy, zz, 2);
}
if(ta4a==900){
for(var xx=tax-9;xx<tax+10;xx++)
for(var yy=tay+1;yy<tay+24;yy++)
for(var zz=taz-9;zz<taz+10;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
setTile(tax-4, tay+25, taz-4, 0);
setTile(tax-4, tay+25, taz-3, 0);
for(var xx=tax-5;xx<tax-2;xx++)
for(var zz=taz-4;zz<taz-2;zz++)
setTile(xx, tay+24, zz, 0);
setTile(tax-4, tay+24, taz-5, 0);
setTile(tax-4, tay+24, taz-4, 0);
setTile(tax-3, tay+24, taz-5, 0);
setTile(tax-3, tay+24, taz-2, 0);
setTile(tax-3, tay+24, taz-5, 0);
setTile(tax-3, tay+24, taz-2, 0);
for(var xx=tax-9;xx<tax+10;xx++)
for(var zz=taz-9;zz<taz+10;zz++)
setTile(xx, tay, zz, 2);
}
if(ru3a==1){
for(var xx=ru3x-12;xx<ru3x+13;xx++)
for(var zz=ru3z-12;zz<ru3z+13;zz++)
setTile(xx, ru3y, zz, 2);
}
if(ru3a==31){
for(var xx=ru3x-12;xx<ru3x+13;xx++)
for(var zz=ru3z-12;zz<ru3z+13;zz++)
setTile(xx, ru3y-1, zz, 3);
}
if(ru3a==61){
for(var xx=ru3x-12;xx<ru3x+13;xx++)
for(var zz=ru3z-12;zz<ru3z+13;zz++)
setTile(xx, ru3y-2, zz, 3);
}
if(ru3a==91){
for(var xx=ru3x-12;xx<ru3x+13;xx++)
for(var zz=ru3z-12;zz<ru3z+13;zz++)
setTile(xx, ru3y-3, zz, 3);
}
if(ru3a==121){
for(var xx=ru3x-12;xx<ru3x+13;xx++)
for(var zz=ru3z-12;zz<ru3z+13;zz++)
setTile(xx, ru3y-4, zz, 3);
}
if(ru4a==900){
for(var xx=rux-21;xx<rux+22;xx++)
for(var zz=ruz-21;zz<ruz+22;zz++)
setTile(xx, ruy, zz, 2);
}
if(ru4a==930){
for(var xx=rux-21;xx<rux+22;xx++)
for(var zz=ruz-21;zz<ruz+22;zz++)
setTile(xx, ruy-1, zz, 3);
}
if(ru4a==960){
for(var xx=rux-21;xx<rux+22;xx++)
for(var zz=ruz-21;zz<ruz+22;zz++)
setTile(xx, ruy-2, zz, 3);
}
if(ru4a==990){
for(var xx=rux-21;xx<rux+22;xx++)
for(var zz=ruz-21;zz<ruz+22;zz++)
setTile(xx, ruy-3, zz, 3);
}
if(ru4a==1020){
for(var xx=rux-21;xx<rux+22;xx++)
for(var zz=ruz-21;zz<ruz+22;zz++)
setTile(xx, ruy-4, zz, 3);
}
if(ru4a==1050){
for(var xx=rux-21;xx<rux+22;xx++)
for(var zz=ruz-21;zz<ruz+22;zz++)
setTile(xx, ruy-5, zz, 3);
}
if(ru4a==1080){
for(var xx=rux-21;xx<rux+22;xx++)
for(var zz=ruz-21;zz<ruz+22;zz++)
setTile(xx, ruy-6, zz, 3);
}
if(ru4a==1110){
for(var xx=rux-21;xx<rux+22;xx++)
for(var zz=ruz-21;zz<ruz+22;zz++)
setTile(xx, ruy-7, zz, 3);
}
if(sw4a==900){
for(var xx=swx-5;xx<swx+6;xx++)
for(var yy=swy+1;yy<swy+9;yy++)
for(var zz=swz-5;zz<swz+6;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
for(var xx=swx-9;xx<swx+10;xx++)
for(var zz=swz-9;zz<swz+10;zz++)
setTile(xx, swy, zz, 2);
}
if(am3a==1){
for(var xx=am3x-10;xx<am3x+11;xx++)
for(var zz=am3z-10;zz<am3z+11;zz++)
setTile(xx, am3y, zz, 2);
}
if(am3a==31){
for(var xx=am3x-10;xx<am3x+11;xx++)
for(var zz=am3z-10;zz<am3z+11;zz++)
setTile(xx, am3y-1, zz, 3);
}
if(am3a==61){
for(var xx=am3x-10;xx<am3x+11;xx++)
for(var zz=am3z-10;zz<am3z+11;zz++)
setTile(xx, am3y-2, zz, 3);
}
if(am3a==91){
for(var xx=am3x-10;xx<am3x+11;xx++)
for(var zz=am3z-10;zz<am3z+11;zz++)
setTile(xx, am3y-3, zz, 3);
}
if(am3a==121){
for(var xx=am3x-10;xx<am3x+11;xx++)
for(var zz=am3z-10;zz<am3z+11;zz++)
setTile(xx, am3y-4, zz, 3);
}
if(am3a==151){
for(var xx=am3x-10;xx<am3x+11;xx++)
for(var zz=am3z-10;zz<am3z+11;zz++)
setTile(xx, am3y-5, zz, 3);
}
if(am4a==900){
for(var xx=amx-12;xx<amx+13;xx++)
for(var zz=amz-12;zz<amz+13;zz++)
setTile(xx, amy, zz, 2);
}
if(am4a==930){
for(var xx=amx-12;xx<amx+13;xx++)
for(var zz=amz-12;zz<amz+13;zz++)
setTile(xx, amy-1, zz, 3);
}
if(am4a==960){
for(var xx=amx-12;xx<amx+13;xx++)
for(var zz=amz-12;zz<amz+13;zz++)
setTile(xx, amy-2, zz, 3);
}
if(hb4a==900){
ESP.antiLack(3);
for(var xx=hbx-4;xx<hbx+5;xx++)
for(var yy=hby+1;yy<hby+28;yy++)
for(var zz=hbz-4;zz<hbz+5;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
setTile(hbx-1, hby+1, hbz-5, 0);
setTile(hbx, hby+1, hbz-5, 0);
setTile(hbx+1, hby+1, hbz-5, 0);
setTile(hbx, hby+28, hbz, 0);
setTile(hbx, hby+29, hbz, 0);
}
if(sc1a==1){
for(var xx=sc1x-6;xx<sc1x+7;xx++)
for(var zz=sc1z-6;zz<sc1z+7;zz++)
setTile(xx, sc1y, zz, 2);
}
if(sc1a==31){
for(var xx=sc1x-6;xx<sc1x+7;xx++)
for(var zz=sc1z-6;zz<sc1z+7;zz++)
setTile(xx, sc1y-1, zz, 3);
}
if(sc1a==61){
for(var xx=sc1x-6;xx<sc1x+7;xx++)
for(var zz=sc1z-6;zz<sc1z+7;zz++)
setTile(xx, sc1y-2, zz, 3);
}
if(sc1a==91){
for(var xx=sc1x-6;xx<sc1x+7;xx++)
for(var zz=sc1z-6;zz<sc1z+7;zz++)
setTile(xx, sc1y-3, zz, 3);
}
if(te2a==1){
for(var xx=te2x-8;xx<te2x+9;xx++)
for(var zz=te2z-8;zz<te2z+9;zz++)
setTile(xx, te2y, zz, 2);
}
if(te2a==31){
for(var xx=te2x-8;xx<te2x+9;xx++)
for(var zz=te2z-8;zz<te2z+9;zz++)
setTile(xx, te2y-1, zz, 3);
}
if(te2a==61){
for(var xx=te2x-8;xx<te2x+9;xx++)
for(var zz=te2z-8;zz<te2z+9;zz++)
setTile(xx, te2y-2, zz, 3);
}
if(te2a==91){
for(var xx=te2x-8;xx<te2x+9;xx++)
for(var zz=te2z-8;zz<te2z+9;zz++)
setTile(xx, te2y-3, zz, 3);
}
if(te2a==121){
for(var xx=te2x-8;xx<te2x+9;xx++)
for(var zz=te2z-8;zz<te2z+9;zz++)
setTile(xx, te2y-4, zz, 3);
}
if(te2a==151){
for(var xx=te2x-8;xx<te2x+9;xx++)
for(var zz=te2z-8;zz<te2z+9;zz++)
setTile(xx, te2y-5, zz, 3);
}
if(ame2a==1){
for(var xx=ame2x-13;xx<ame2x+14;xx++)
for(var zz=ame2z-13;zz<ame2z+14;zz++)
setTile(xx, ame2y, zz, 2);
}
if(ame2a==31){
for(var xx=ame2x-13;xx<ame2x+14;xx++)
for(var zz=ame2z-13;zz<ame2z+14;zz++)
setTile(xx, ame2y-1, zz, 3);
}
if(ame2a==61){
for(var xx=ame2x-13;xx<ame2x+14;xx++)
for(var zz=ame2z-13;zz<ame2z+14;zz++)
setTile(xx, ame2y-2, zz, 3);
}
if(ame2a==91){
for(var xx=ame2x-13;xx<ame2x+14;xx++)
for(var zz=ame2z-13;zz<ame2z+14;zz++)
setTile(xx, ame2y-3, zz, 3);
}
if(ame2a==121){
for(var xx=ame2x-13;xx<ame2x+14;xx++)
for(var zz=ame2z-13;zz<ame2z+14;zz++)
setTile(xx, ame2y-4, zz, 3);
}
if(ame2a==151){
for(var xx=ame2x-13;xx<ame2x+14;xx++)
for(var zz=ame2z-13;zz<ame2z+14;zz++)
setTile(xx, ame2y-5, zz, 3);
}
if(an4a==900){
for(var xx=anx-13;xx<anx+14;xx++)
for(var zz=anz-13;zz<anz+14;zz++)
setTile(xx, any, zz, 2);
}
if(an4a==930){
for(var xx=anx-13;xx<anx+14;xx++)
for(var zz=anz-13;zz<anz+14;zz++)
setTile(xx, any-1, zz, 3);
}
if(an4a==960){
for(var xx=anx-13;xx<anx+14;xx++)
for(var zz=anz-13;zz<anz+14;zz++)
setTile(xx, any-2, zz, 3);
}
if(an4a==990){
for(var xx=anx-13;xx<anx+14;xx++)
for(var zz=anz-13;zz<anz+14;zz++)
setTile(xx, any-3, zz, 3);
}
if(an4a==1020){
for(var xx=anx-13;xx<anx+14;xx++)
for(var zz=anz-13;zz<anz+14;zz++)
setTile(xx, any-4, zz, 3);
}
if(an4a==1050){
for(var xx=anx-13;xx<anx+14;xx++)
for(var zz=anz-13;zz<anz+14;zz++)
setTile(xx, any-5, zz, 3);
}
if(wh4a==900){
for(var xx=whx-14;xx<whx+15;xx++)
for(var zz=whz-14;zz<whz+15;zz++)
setTile(xx, why, zz, 2);
}
if(wh4a==930){
for(var xx=whx-14;xx<whx+15;xx++)
for(var zz=whz-14;zz<whz+15;zz++)
setTile(xx, why-1, zz, 3);
}
if(wh4a==960){
for(var xx=whx-14;xx<whx+15;xx++)
for(var zz=whz-14;zz<whz+15;zz++)
setTile(xx, why-2, zz, 3);
}
if(wh4a==990){
for(var xx=whx-14;xx<whx+15;xx++)
for(var zz=whz-14;zz<whz+15;zz++)
setTile(xx, why-3, zz, 3);
}
if(wh4a==1020){
for(var xx=whx-14;xx<whx+15;xx++)
for(var zz=whz-14;zz<whz+15;zz++)
setTile(xx, why-4, zz, 3);
}




//-----------------
if(dt4a==900){
for(var xx=dtx-1;xx<dtx+2;xx++)
for(var zz=dtz-1;zz<dtz+2;zz++)
setTile(xx, dty+5, zz, 0);
}
if(dt4a==600){
for(var xx=dtx-17;xx<dtx+18;xx++)
for(var zz=dtz-17;zz<dtz+18;zz++)
setTile(xx, dty, zz, 2);
}
if(dt4a==630){
for(var xx=dtx-17;xx<dtx+18;xx++)
for(var zz=dtz-17;zz<dtz+18;zz++)
setTile(xx, dty-1, zz, 3);
}
if(dt4a==660){
for(var xx=dtx-17;xx<dtx+18;xx++)
for(var zz=dtz-17;zz<dtz+18;zz++)
setTile(xx, dty-2, zz, 3);
}
if(dt4a==680){
for(var xx=dtx-17;xx<dtx+18;xx++)
for(var zz=dtz-17;zz<dtz+18;zz++)
setTile(xx, dty-3, zz, 3);
}
if(dt4a==720){
for(var xx=dtx-17;xx<dtx+18;xx++)
for(var zz=dtz-17;zz<dtz+18;zz++)
setTile(xx, dty-4, zz, 3);
}
if(dt4a==750){
for(var xx=dtx-17;xx<dtx+18;xx++)
for(var zz=dtz-17;zz<dtz+18;zz++)
setTile(xx, dty-5, zz, 3);
}
if(dt4a==780){
for(var xx=dtx-17;xx<dtx+18;xx++)
for(var zz=dtz-17;zz<dtz+18;zz++)
setTile(xx, dty-6, zz, 3);
}
if(dt4a==810){
for(var xx=dtx-16;xx<dtx+19;xx++)
for(var zz=dtz-16;zz<dtz+19;zz++)
setTile(xx, dty-7, zz, 3);
}




}




//-------------------------
if(w5>0){
w5--;
}
if(w1aa>0){
w1aa--;
}
if(w2aa>0){
w2aa--;
}
if(w3aa>0){
w3aa--;
}
if(w5==3600){
water2 = false;
Entity.setHealth(water[0], w5a-10);
ESP.sbm("Water Controller sr. off");
w4aa = false;
for(var xx=wx[0]-2;xx<wx[0]+3;xx++)
for(var yy=wy[0]-1;yy<wy[0]+2;yy++)
for(var zz=wz[0]-2;zz<wz[0]+3;zz++)
if(getTile(xx, yy, zz)==8||getTile(xx, yy, zz)==9){
setTile(xx, yy, zz, 0);
}
}
if(w5==1){
ESP.sbm("Water Controller sr. is ready.");
}
if(w1aa==30&&w4aa==false){
setTile(w1x, w1y+2, w1z, 0);
}
if(w1aa==70&&w4aa==true){
for(var gun=4;gun<17;gun++)
explode(px+gun*sin*pcos, py+gun*tan+0.8, pz+gun*cos*pcos, 1.5);
}
if(w2aa==1){
for(var xx=w2x[0]-2;xx<w2x[0]+3;xx++)
for(var yy=w2y[0]+1;yy<w2y[0]+6;yy++)
for(var zz=w2z[0]-2;zz<w2z[0]+3;zz++)
setTile(xx, yy, zz, 0);
}
if(w3aa==147){
setTile(w3x, w3y, w3z, 2);
}
if(w4aa==true){
wx[0] = Entity.getX(water[0]);
wy[0] = Entity.getY(water[0])-1;
wz[0] = Entity.getZ(water[0]);
for(var xx=wx[0]-2;xx<wx[0]+3;xx++)
for(var yy=wy[0]-1;yy<wy[0]+2;yy++)
for(var zz=wz[0]-2;zz<wz[0]+3;zz++)
if(getTile(xx, yy, zz)==8||getTile(xx, yy, zz)==9){
setTile(xx, yy, zz, 0);
}
for(var xx=wx[0]-1;xx<wx[0]+2;xx++)
for(var zz=wz[0]-1;zz<wz[0]+2;zz++)
if(getTile(xx, wy, zz)==0){
setTile(xx, wy, zz, 8);
}
}
if(Entity.getHealth(water[0])<=0&&water2==true&&w4aa==true){
w4aa = false;
for(var xx=wx[0]-2;xx<wx[0]+3;xx++)
for(var yy=wy[0]-1;yy<wy[0]+2;yy++)
for(var zz=wz[0]-2;zz<wz[0]+3;zz++)
if(getTile(xx, yy, zz)==8||getTile(xx, yy, zz)==9){
setTile(xx, yy, zz, 0);
}
}
//---
if(b5>0){
b5--;
}
if(b1aa>0){
b1aa--;
}
if(b2aa>0){
b2aa--;
}
if(b3aa>0){
b3aa--;
}
if(b5==3600){
bind2 = false;
Entity.setHealth(bind[0], b5a-10);
ESP.sbm("The Binder sr. off");
b4aa = false;
for(var xx=bx-4;xx<bx+5;xx++)
for(var yy=by;yy<by+3;yy++)
for(var zz=bz-4;zz<bz+5;zz++)
if(getTile(xx, yy, zz)==30){
setTile(xx, yy, zz, 0);
}
}
if(b5==1){
ESP.sbm("The Binder sr. is ready.");
}
if(b3aa==135){
explode(b3x+0.5, b3y+2.5, b3z+0.5, 2.5);
if(b3ab==true){
for(var xx=b3x-4;xx<b3x+5;xx++)
for(var zz=b3z-4;zz<b3z+5;zz++)
setTile(xx, b3y, zz, 2);
}
}
if(b3aa==1){
for(var xx=b3x-2;xx<b3x+3;xx++)
for(var yy=b3y+1;yy<b3y+5;yy++)
for(var zz=b3z-2;zz<b3z+3;zz++)
setTile(xx, yy, zz, 0);
}
if(b4aa==true){
bx = Entity.getX(bind[0]);
by = Entity.getY(bind[0])-2;
bz = Entity.getZ(bind[0]);
for(var xx=bx-4;xx<bx+5;xx++)
for(var yy=by;yy<by+3;yy++)
for(var zz=bz-4;zz<bz+5;zz++)
if(getTile(xx, yy, zz)==30){
setTile(xx, yy, zz, 0);
}
for(var xx=bx-3;xx<bx+4;xx++)
for(var zz=bz-3;zz<bz+4;zz++)
if(getTile(xx, by+1, zz)==0){
setTile(xx, by+1, zz, 30);
}
for(var xx=bx-1;xx<bx+2;xx++)
for(var zz=bz-1;zz<bz+2;zz++)
if(getTile(xx, by+1, zz)==30){
setTile(xx, by+1, zz, 0);
}
}
if(Entity.getHealth(bind[0])<=0){
b4aa = false;
for(var xx=bx-4;xx<bx+5;xx++)
for(var yy=by;yy<by+3;yy++)
for(var zz=bz-4;zz<bz+5;zz++)
if(getTile(xx, yy, zz)==30){
setTile(xx, yy, zz, 0);
}
}
//---
if(h5>0){
h5--;
}
if(h1aa>0){
h1aa--;
}
if(h2aa>0){
h2aa--;
}
if(h3aa>0){
h3aa--;
}
if(h5==3600){
heal2 = false;
Entity.setHealth(heal, h5a-15);
ESP.sbm("Dark Healer off");
h4aa = false;
}
if(h5==1){
ESP.sbm("Dark Healer is ready.");
}
if(h3aa==120){
explode(Entity.getX(h3ab), Entity.getY(h3ab), Entity.getZ(h3ab), 1.5);
}
//---
if(a5>0){
a5--;
}
if(a1aa>0){
a1aa--;
}
if(a2aa>0){
a2aa--;
}
if(a3aa>0){
a3aa--;
}
if(a5==3600){
air2 = false;
Entity.setHealth(air[0], a5a-10);
ESP.sbm("Air Bander sr. off");
a4aa = false;
for(var xx=ax-2;xx<ax+3;xx++)
for(var yy=ay-1;yy<ay+2;yy++)
for(var zz=az-2;zz<az+3;zz++)
if(getTile(xx, yy, zz)==20){
setTile(xx, yy, zz, 0)
}
}
if(a5==1){
ESP.sbm("Air Bander sr. is ready.");
}
if(a1aa==70){
explode(px+9*sin*pcos, py+9*tan+0.8, pz+9*cos*pcos, 2);
}
if(a1aa==65){
explode(px+15*sin*pcos, py+15*tan+0.8, pz+15*cos*pcos, 2.5);
}
if(a3aa==145){
explode(a3x+6, a3y+1, a3z+6, 2);
explode(a3x+7, a3y+1, a3z, 2);
explode(a3x+6, a3y+1, a3z-6, 2);
explode(a3x, a3y+1, a3z+7, 2);
explode(a3x, a3y+1, a3z-7, 2);
explode(a3x-6, a3y+1, a3z+6, 2);
explode(a3x-7, a3y+1, a3z, 2);
explode(a3x-6, a3y+1, a3z-6, 2);
}
if(a4aa==true){
ax = Entity.getX(air[0]);
if(Entity.getPitch(air[0])==90){
ay = Entity.getY(air[0])-3;
}
else{
ay = Entity.getY(air[0])-2;
}
az = Entity.getZ(air[0]);
for(var xx=ax-2;xx<ax+3;xx++)
for(var yy=ay-1;yy<ay+2;yy++)
for(var zz=az-2;zz<az+3;zz++)
if(getTile(xx, yy, zz)==20){
setTile(xx, yy, zz, 0)
}
for(var xx=ax-1;xx<ax+2;xx++)
for(var zz=az-1;zz<az+2;zz++)
if(getTile(xx, ay, zz)==0){
setTile(xx, ay, zz, 20)
}
}
if(Entity.getHealth(air[0])<=0){
a4aa = false;
for(var xx=ax-2;xx<ax+3;xx++)
for(var yy=ay-1;yy<ay+2;yy++)
for(var zz=az-2;zz<az+3;zz++)
if(getTile(xx, yy, zz)==20){
setTile(xx, yy, zz, 0)
}
}




//-------------------------------
if(h.r1>0){
h.r1--;
}
if(h.r2>0){
h.r2--;
}
if(h.r3>0){
h.r3--;
}
if(h.r4>0){
h.r4--;
}

if(h.r4==900){
for(var xx=h.rx-20;xx<h.rx+21;xx++)
for(var zz=h.rz-20;zz<h.rz+21;zz++)
setTile(xx, h.ry, zz, 2);
}
if(h.r4==930){
for(var xx=h.rx-20;xx<h.rx+21;xx++)
for(var zz=h.rz-20;zz<h.rz+21;zz++)
setTile(xx, h.ry-1, zz, 3);
}
if(h.r4==960){
for(var xx=h.rx-20;xx<h.rx+21;xx++)
for(var zz=h.rz-20;zz<h.rz+21;zz++)
setTile(xx, h.ry-2, zz, 3);
}
if(h.r4==990){
for(var xx=h.rx-20;xx<h.rx+21;xx++)
for(var zz=h.rz-20;zz<h.rz+21;zz++)
setTile(xx, h.ry-3, zz, 3);
}
if(h.r4==1020){
for(var xx=h.rx-20;xx<h.rx+21;xx++)
for(var zz=h.rz-20;zz<h.rz+21;zz++)
setTile(xx, h.ry-4, zz, 3);
}
if(h.r4==1050){
for(var xx=h.rx-20;xx<h.rx+21;xx++)
for(var zz=h.rz-20;zz<h.rz+21;zz++)
setTile(xx, h.ry-5, zz, 3);
}
if(h.r4==1080){
for(var xx=h.rx-20;xx<h.rx+21;xx++)
for(var zz=h.rz-20;zz<h.rz+21;zz++)
setTile(xx, h.ry-6, zz, 3);
}
if(h.r4==1110){
for(var xx=h.rx-20;xx<h.rx+21;xx++)
for(var zz=h.rz-20;zz<h.rz+21;zz++)
if(getTile(xx, h.ry-7, zz)==0){
setTile(xx, h.ry-7, zz, 3);
}
}


//passive
if(passOnoff){
for(var n in fire){
Entity.setFireTicks(fire[n], 0);
if(getTile(Entity.getX(fire[n]), Entity.getY(fire[n])-1, Entity.getZ(fire[n]))==51){
ESP.setHealth(fire[n], f0[n]);
}
else{
f0[n] = Entity.getHealth(fire[n]);
}
}
for(var n in water){
if(getTile(Entity.getX(water[n]), Entity.getY(water[n])-1, Entity.getZ(water[n]))==8||getTile(Entity.getX(water[n]), Entity.getY(water[n])-1, Entity.getZ(water[n]))==9||getTile(Entity.getX(water[n]), Entity.getY(water[n])-2, Entity.getZ(water[n]))==8||getTile(Entity.getX(water[n]), Entity.getY(water[n])-2, Entity.getZ(water[n]))==9){
ESP.setHealth(water[n], w0[n]);
}
else{
w0[n] = Entity.getHealth(water[n]);
}
}
if(t0>0){
t0--;
}
if(t0==0){
t0 = 75;
}
if(t0==1&&tree[0]!=null){
if(tree[1]!=null){
for(var n in tree)
ESP.healNG(n);
}
else{
ESP.healNG(0);
}
}
for(var n in soil){
var sbbbb = getTile(Entity.getX(soil[n]), Entity.getY(soil[n]), Entity.getZ(soil[n]));
if(sbbbb==1||sbbbb==2||sbbbb==3||sbbbb==4||sbbbb==12||sbbbb==13||sbbbb==24){
setTile(Entity.getX(soil[n]), Entity.getY(soil[n]), Entity.getZ(soil[n]), 0);
}
}
if(i0>0){
i0--;
}
if(i0==0){
i0 = 75;
}
if(i0==1&&ice!=null){
for(var n in ice)
ESP.healFreezer(n);
}
if(m0>0){
m0--;
}
if(m0==0){
m0 = 75;
}
if(m0==1){
for(var n in sand){
if((getTile(Entity.getX(sand[n]), Entity.getY(sand[n])-2, Entity.getZ(sand[n]))==12||getTile(Entity.getX(sand[n]), Entity.getY(sand[n])-2, Entity.getZ(sand[n]))==24)&&Entity.getHealth(sand[n])<=25){
ESP.setHealth(sand[n], Entity.getHealth(sand[n])+2);
}
}
}
if(e0>0){
e0--;
}
if(e0==0){
e0 = 75;
}
if(e0==1){
if(getTile(Entity.getX(elsa[n]), Entity.getY(elsa[n])-2, Entity.getZ(elsa[n]))==79&&Entity.getHealth(elsa[n])<=25){
ESP.setHealth(elsa[n], Entity.getHealth(elsa[n])+2);
}
}
if(mm0>0){
mm0--;
}
if(mm0==0){
mm0 = 75;
}
if(mm0==1){
for(var n in meca){
if(Entity.getHealth(meca[n])<20)
ESP.setHealth(meca[n], Entity.getHealth(meca[n])+1);
}
}
if(h0>0){
h0--;
}
if(h0==0){
h0 = 75;
}
if(h0==1){
for(var n in heal)
ESP.setHealth(heal[n], Entity.getHealth(heal[n])+2);
}
if(n0>0){
n0--;
}
if(n0==0){
n0 = 75;
}
if(n0==1){
for(var n in nether)
if(getTile(Entity.getX(nether[n]), Entity.getY(nether[n])-2, Entity.getZ(nether[n]))==87&&Entity.getHealth(nether[n])<=25){
ESP.setHealth(nether[n], Entity.getHealth(nether[n])+2);
}
}
if(cc0>0){
cc0--;
}
if(cc0==0){
cc0 = 75;
}
if(cc0==1){
for(var n in cloud)
if(getTile(Entity.getX(cloud[n]), Entity.getY(cloud[n])-2, Entity.getZ(cloud[n]))==35&&Level.getData(Entity.getX(cloud[n]), Entity.getY(cloud[n])-2, Entity.getZ(cloud[n]))==0&&Entity.getHealth(cloud[n])<=25){
ESP.setHealth(cloud[n], Entity.getHealth(cloud[n])+2);
}
}
for(var n in melt){
if(getTile(Entity.getX(melt[n]), Entity.getY(melt[n])-1, Entity.getZ(melt[n]))==10||getTile(Entity.getX(melt[n]), Entity.getY(melt[n])-1, Entity.getZ(melt[n]))==11){
ESP.setHealth(melt[n], me0[n]);
}
else{
me0[n] = Entity.getHealth(melt[n]);
}
}
for(var n in hfreeze){
if(getTile(Entity.getX(hfreeze[n]), Entity.getY(hfreeze[n])-2, Entity.getZ(hfreeze[n]))==79||getTile(Entity.getX(hfreeze[n]), Entity.getY(hfreeze[n])-3, Entity.getZ(hfreeze[n]))==79){
ESP.setHealth(hfreeze[n], hf0[n]);
}
else{
hf0[n] = Entity.getHealth(hfreeze[n]);
}
}
if(her0>0){
her0--;
}
if(her0==0){
her0 = 75;
}
if(her0==1&&hermit[0]!=null){
for(var n in hermit)
ESP.healHermit(n);
}
if(j0>0){
j0--;
}
if(j0==0){
j0 = 75;
}
if(j0==1&&jungle[0]!=null){
for(var n in jungle)
ESP.healJF(n);
}
for(var n in copy)
Entity.setFireTicks(copy[n], 0);
if(en0>0){
en0--;
}
if(en0==0){
en0 = 75;
}
if(en0==1){
if(getTile(Entity.getX(ender), Entity.getY(ender)-2, Entity.getZ(ender))==121&&Entity.getHealth(ender)<=25){
ESP.setHealth(ender, Entity.getHealth(ender)+2);
}
}
if(ta0>0){
ta0--;
}
if(ta0==0){
ta0 = 75;
}
if(ta0==1&&taiga!=null){
ESP.healTA();
}

Entity.setFireTicks(fe, 0);

//-----
for(var n in defense){
if(d0[n]>Entity.getHealth(defense[n])&&Entity.getHealth(defense[n])!=0){
defenserHit(defense[n], d0[n]-Entity.getHealth(defense[n]));
}
d0[n] = Entity.getHealth(defense[n]);
}
for(var n in time){
if(ti0>0){
ti0--;
}
if(time[n]!=null&&Entity.getHealth(time[n])<=0&&Cool.isFalse(ti0a[n])){
ESP.heal(time[n]);
ti0a[n] = true;
ti0[n] = 301;
}
if(ti0[n]==1){
ESP.kill(time[n]);
}
if(ti0[n]==0&&Entity.getHealth(time)>0&&time[n]!=null){
ti0a[n] = false;
}
}
for(var n in hawk)
if(hw0[n]>Entity.getHealth(hawk[n])&&Entity.getHealth(hawk[n])!=0){
hawkEyeHit(n);
}
hw0[n] = Entity.getHealth(hawk[n]);
if(g0>Entity.getHealth(gem)&&Entity.getHealth(gem)!=0){
lightGemstoneHit();
}
g0 = Entity.getHealth(gem);

}


//---
if(he.b4>1350&&he.b4a>Entity.getHealth(he.buf)&&Entity.getHealth(he.buf)>0){
Entity.setHealth(he.buf, Entity.getHealth(he.buf)+1);
}
he.b4a = Entity.getHealth(he.buf);


//------------------------------
if(anti==true){
anti2--;
}
if(anti2==0){
anti = false;
}
if(anti3>0){
anti3--;
}
if(anti3==1){
anti3 = 2700;
ESP.removeMob();
ESP.toast("All Mobs were removed.");
}
if(anti4>0){
anti4--;
}
if(anti4==1){
anti4 = 900;
for each(var e in Entity.getAll()){
if(Entity.getEntityTypeId(e)==64){
Entity.remove(e);
}
}
ESP.toast("Dropped Items were removed.");
}




//-------------------------------


if(ad1==true){
ad1a--;   
}
if(ad1a==1){
setNightMode(false);
}
if(ad1a==0){
ad1 = false;
}
if(fill){
adx = Entity.getX(ad);
ady = Entity.getY(ad)-2;
adz = Entity.getZ(ad);
for(var xx=adx-2;xx<adx+3;xx++){
for(var zz=adz-2;zz<adz+3;zz++){
setTile(xx,ady,zz,2);}}
for(var xx=adx-2;xx<adx+3;xx++){
for(var yy=ady-2;yy<ady;yy++){
for(var zz=adz-2;zz<adz+3;zz++){
setTile(xx,yy,zz,3);}}}
for(var xx=adx-2;xx<adx+3;xx++)
for(var yy=ady+1;yy<ady+6;yy++)
for(var zz=adz-2;zz<adz+3;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
}



//-------------------
if(expl>=0){
expl++;
}
if(lang==0){
if(expl==150) ESP.sbm("If you touch the obsidian, it will turn into a glowing obsidian and the E.S.P. will be turned on.");
if(expl==300) ESP.sbm("Then, if you touch it again, it will turn into an obsidian and the E.S.P. will be turned off.");
if(expl==450) ESP.sbm("While the E.S.P. is turning on, you can use the E.S.P. which you selected.");
if(expl==600) ESP.sbm("If you touch or hit someone with chain armor, skills of the E.S.P will work.");
if(expl==750) ESP.sbm("There are 4 skills of each E.S.P with cool times.");
if(expl==900) ESP.sbm("The cool times of skills are....\n   Item      hat  coat  pants  shoes\ncool time    10   20      20     120");
if(expl==1050) ESP.sbm("Air Bander and The Teleporter's hat cool time is 5 seconds.");
if(expl==1200) ESP.sbm("Mass Titan's shoes cool time is 150 seconds.");
if(expl==1350) ESP.sbm("If you use a Hyper Skill(shoes), the skill's name will be printed to admin's chating Window.");
}
else if(lang==1){
if(expl==150) ESP.sbm("옵시디언을 터치하시면, 빛나는 옵시디언으로 바뀌면서 능력이 활성화 됩니다.");
if(expl==300) ESP.sbm("한번 더 터치하시면 옵시디언으로 돌아오면서 능력이 비활성화 됩니다.");
if(expl==450) ESP.sbm("능력이 활상화된 상태에서, 선택하신 능력을 사용하실 수 있습니다.");
if(expl==600) ESP.sbm("터치하시거나 누군가를 때리시면, 해당 능력의 스킬이 발동됩니다.");
if(expl==750) ESP.sbm("능력마다 스킬은 4개이며, 쿨타임이 있습니다.");
if(expl==900) ESP.sbm("쿨타임은...\n아이템   모자   윗옷  바지  신발\n쿨타임    10      20    20    120");
if(expl==1050) ESP.sbm("Air Bander와 The Teleporter의 모자 스킬의 쿨타임은 5초 입니다.");
if(expl==1200) ESP.sbm("Mass Titan의 신발 스킬의 쿨타임은 150초 입니다.");
if(expl==1350) ESP.sbm("궁극기(신발)을 사용하실 경우, 서버장의 체팅창에 그 스킬의 이름이 뜹니다.");
}


//0.4.3
if(of1>0){
of1--;   
}
if(of2>0){
of2--;
}
if(of3>0){
of3--;
}
if(of4>0){
of4--;
}
if(ow1>0){
ow1--;
}
if(ow2>0){
ow2--;
}
if(ow3>0){
ow3--;
}
if(ow4>0){
ow4--;
}
if(ot1>0){
ot1--;
}
if(ot2>0){
ot2--;
}
if(ot3>0){
ot3--;
}
if(ot4>0){
ot4--;
}
if(oc1>0){
oc1--;
}
if(oc2>0){
oc2--;
}
if(oc3>0){
oc3--;
}
if(oc4>0){
oc4--;
}
if(os1>0){
os1--;
}
if(os2>0){
os2--;
}
if(os3>0){
os3--;
}
if(os4>0){
os4--;
}
if(oss1>0){
oss1--;
}
if(oss2>0){
oss2--;
}
if(oss3>0){
oss3--;
}
if(oss4>0){
oss4--;
}
if(ol1>0){
ol1--;
}
if(ol2>0){
ol2--;
}
if(ol3>0){
ol3--;
}
if(ol4>0){
ol4--;
}
if(od1>0){
od1--;
}
if(od2>0){
od2--;
}
if(od3>0){
od3--;
}
if(od4>0){
od4--;
}
if(oi1>0){
oi1--;
}
if(oi2>0){
oi2--;
}
if(oi3>0){
oi3--;
}
if(oi4>0){
oi4--;
}

if(of2==1){
for(var xx=of2x-1;xx<of2x+2;xx++)
for(var zz=of2z-1;zz<of2z+2;zz++)
setTile(xx, of2y, zz, 2);
}
if(of2==31){
for(var xx=of2x-1;xx<of2x+2;xx++)
for(var zz=of2z-1;zz<of2z+2;zz++)
setTile(xx, of2y-1, zz, 3);
}
if(of2==61){
for(var xx=of2x-1;xx<of2x+2;xx++)
for(var zz=of2z-1;zz<of2z+2;zz++)
setTile(xx, of2y-2, zz, 3);
}
if(of4==1350){
setTile(ofx+4, ofy, ofz+4, 2);
setTile(ofx+4, ofy, ofz+2, 2);
setTile(ofx+4, ofy, ofz, 2);
setTile(ofx+4, ofy, ofz-2, 2);
setTile(ofx+4, ofy, ofz-4, 2);
setTile(ofx+2, ofy, ofz+4, 2);
setTile(ofx+2, ofy, ofz+2, 2);
setTile(ofx+2, ofy, ofz, 2);
setTile(ofx+2, ofy, ofz-2, 2);
setTile(ofx+2, ofy, ofz-4, 2);
setTile(ofx, ofy, ofz+4, 2);
setTile(ofx, ofy, ofz+2, 2);
setTile(ofx, ofy, ofz, 89);
setTile(ofx, ofy, ofz-2, 2);
setTile(ofx, ofy, ofz-4, 2);
setTile(ofx-4, ofy, ofz+4, 2);
setTile(ofx-4, ofy, ofz+2, 2);
setTile(ofx-4, ofy, ofz, 2);
setTile(ofx-4, ofy, ofz-2, 2);
setTile(ofx-4, ofy, ofz-4, 2);
setTile(ofx-2, ofy, ofz+4, 2);
setTile(ofx-2, ofy, ofz+2, 2);
setTile(ofx-2, ofy, ofz, 2);
setTile(ofx-2, ofy, ofz-2, 2);
setTile(ofx-2, ofy, ofz-4, 2);
setTile(ofx+7, ofy, ofz+7, 2);
setTile(ofx+7, ofy, ofz-7, 2);
setTile(ofx-7, ofy, ofz+7, 2);
setTile(ofx-7, ofy, ofz-7, 2);
setTile(ofx+8, ofy, ofz, 2);
setTile(ofx, ofy, ofz+8, 2);
setTile(ofx-8, ofy, ofz, 2);
setTile(ofx, ofy, ofz-8, 2);
}
if(ow1==115){
setTile(ow1x, ow1y+1, ow1z, 0);
}
if(ow2==150){
for(var xx=ow2x-2;xx<ow2x+3;xx++)
for(var zz=ow2z-2;zz<ow2z+3;zz++)
setTile(xx, ow2y, zz, 2);
}
if(ow3==150){
setTile(ow3x+3, ow3y+1, ow3z, 0);
setTile(ow3x-3, ow3y+1, ow3z, 0);
setTile(ow3x, ow3y+1, ow3z+3, 0);
setTile(ow3x, ow3y+1, ow3z-3, 0);
}
if(ow4==1500){
setTile(owx+9, owy+10, owz+9, 0);
setTile(owx+9, owy+10, owz-9, 0);
setTile(owx-9, owy+10, owz+9, 0);
setTile(owx-9, owy+10, owz-9, 0);
setTile(owx+9, owy+10, owz, 0);
setTile(owx-9, owy+10, owz, 0);
setTile(owx, owy+10, owz+9, 0);
setTile(owx, owy+10, owz-9, 0);
setTile(owx+1, owy+1, owz, 0);
setTile(owx-1, owy+1, owz, 0);
setTile(owx, owy+1, owz+1, 0);
setTile(owx, owy+1, owz-1, 0);
}
if(oc4==900){
for(var xx=ocx-17;xx<ocx+18;xx++)
for(var zz=ocz-17;zz<ocz+18;zz++)
setTile(xx, ocy, zz, 2);
}
if(oc4==930){
for(var xx=ocx-17;xx<ocx+18;xx++)
for(var zz=ocz-17;zz<ocz+18;zz++)
setTile(xx, ocy-1, zz, 3);
}
if(oc4==960){
for(var xx=ocx-17;xx<ocx+18;xx++)
for(var zz=ocz-17;zz<ocz+18;zz++)
setTile(xx, ocy-2, zz, 3);
}
if(oc4==990){
for(var xx=ocx-17;xx<ocx+18;xx++)
for(var zz=ocz-17;zz<ocz+18;zz++)
setTile(xx, ocy-3, zz, 3);
}
if(oc4==1020){
for(var xx=ocx-17;xx<ocx+18;xx++)
for(var zz=ocz-17;zz<ocz+18;zz++)
setTile(xx, ocy-4, zz, 3);
}
if(os3==150){
setTile(os3x, os3y+5, os3z, 0);
}
if(os4==1500){
for(var xx=osx-8;xx<osx+9;xx++)
for(var zz=osz-8;zz<osz+9;zz++)
setTile(xx, osy+1, zz, 0);
}
if(ol3==150){
setTile(ol3x+2, ol3y+3, ol3z, 0);
setTile(ol3x-2, ol3y+3, ol3z, 0);
setTile(ol3x, ol3y+3, ol3z+2, 0);
setTile(ol3x, ol3y+3, ol3z-2, 0);
}
if(ol4==900){
for(var xx=olx-12;xx<olx+13;xx++)
for(var zz=olz-12;zz<olz+13;zz++)
setTile(xx, oly, zz, 2);
}
if(ol4==930){
for(var xx=olx-12;xx<olx+13;xx++)
for(var zz=olz-12;zz<olz+13;zz++)
setTile(xx, oly-1, zz, 3);
}
if(ol4==960){
for(var xx=olx-12;xx<olx+13;xx++)
for(var zz=olz-12;zz<olz+13;zz++)
setTile(xx, oly-2, zz, 3);
}
if(ol4==990){
for(var xx=olx-12;xx<olx+13;xx++)
for(var zz=olz-12;zz<olz+13;zz++)
setTile(xx, oly-3, zz, 3);
}
if(ol4==1020){
for(var xx=olx-12;xx<olx+13;xx++)
for(var zz=olz-12;zz<olz+13;zz++)
setTile(xx, oly-4, zz, 3);
}
if(od1==75){
setTile(od1x, od1y+2, od1z, 0);
}
if(od3==225){
setTile(od3x+2, od3y+2, od3z+1, 0);
setTile(od3x+2, od3y+2, od3z, 0);
setTile(od3x+2, od3y+2, od3z-1, 0);
setTile(od3x-2, od3y+2, od3z+1, 0);
setTile(od3x-2, od3y+2, od3z, 0);
setTile(od3x-2, od3y+2, od3z-1, 0);
setTile(od3x+1, od3y+2, od3z+2, 0);
setTile(od3x, od3y+2, od3z+2, 0);
setTile(od3x-1, od3y+2, od3z+2, 0);
setTile(od3x+1, od3y+2, od3z-2, 0);
setTile(od3x, od3y+2, od3z-2, 0);
setTile(od3x-1, od3y+2, od3z-2, 0);
setTile(od3x, od3y+1, od3z, 0);
}
if(od4==1350){
Level.setTime(0);
setTile(odx+9, ody+8, odz+9, 0);
setTile(odx+9, ody+8, odz, 0);
setTile(odx+9, ody+8, odz-9, 0);
setTile(odx, ody+8, odz+9, 0);
setTile(odx, ody+8, odz-9, 0);
setTile(odx-9, ody+8, odz+9, 0);
setTile(odx-9, ody+8, odz, 0);
setTile(odx-9, ody+8, odz-9, 0);
}
if(oi1==105){
for(var xx=oi1x-1;xx<oi1x+2;xx++)
for(var zz=oi1z-1;zz<oi1z+2;zz++)
setTile(xx, oi1y, zz, 79);
}
if(oi4==900){
for(var xx=oix-6;xx<oix+7;xx++)
for(var zz=oiz-6;zz<oiz+7;zz++)
setTile(xx, oiy, zz, 2);
for(var xx=oix-6;xx<oix+7;xx++)
for(var yy=oiy+1;yy<oiy+6;yy++)
for(var zz=oiz-6;zz<oiz+7;zz++)
setTile(xx, yy, zz, 0);
}




if(adt>0){
adt--;
}
if(adt==1){
ad = Player.getEntity();
}
exp.c = 0;
if(menu!=null){
if(Entity.getHealth(ad)>adH){
adH = Entity.getHealth(ad);
}
Entity.setHealth(ad, adH);
}


//A.I.S.
//aifire
if(aift>0){
aift--;
}
if(aift==0&&getTile(Entity.getX(aifire), Entity.getY(aifire)-1, Entity.getZ(aifire))==2){
aif2 = Math.floor(Math.random()*9);
if(aif2<3){
aifx = Math.floor(Entity.getX(aifire));
aify = Math.floor(Entity.getY(aifire));
aifz = Math.floor(Entity.getZ(aifire));
yaw = Math.floor(Entity.getYaw(aifire));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var xx=aifx+4*sin-1;xx<aifx+4*sin+2;xx++)
for(var zz=aifz+4*cos-1;zz<aifz+4*cos+2;zz++)
setTile(xx, aify, zz, 51);
setTile(aifx+4*sin+2, aify, aifz+4*cos, 51);
setTile(aifx+4*sin, aify, aifz+4*cos+2, 51);
setTile(aifx+4*sin-2, aify, aifz+4*cos, 51);
setTile(aifx+4*sin, aify, aifz+4*cos-2, 51);
}
if((aif2==3)||(aif2==4)){
aifx = Math.floor(Entity.getX(aifire));
aify = Math.floor(Entity.getY(aifire))-1;
aifz = Math.floor(Entity.getZ(aifire));
yaw = Math.floor(Entity.getYaw(aifire));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var xx=aifx+4*sin-1;xx<aifx+4*sin+2;xx++){
for(var yy=aify-2;yy<aify+1;yy++)
for(var zz=aifz+4*cos-1;zz<aifz+4*cos+2;zz++){
setTile(xx+2, yy, zz-1, 0);
setTile(xx+2, aify-3, zz-1, 51);}}
}
if((aif2==5)||(aif2==6)){
aifx = Math.floor(Entity.getX(aifire));
aify = Math.floor(Entity.getY(aifire));
aifz = Math.floor(Entity.getZ(aifire));
yaw = Math.floor(Entity.getYaw(aifire));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<20;gun++)
setTile(aifx+gun*sin, aify, aifz+gun*cos, 51);
}
if(aif2==7){
ESP.aiSbm("Burning Area");
aifx = Entity.getX(aifire);
aify = Entity.getY(aifire);
aifz = Entity.getZ(aifire);
for(var xx=aifx-9;xx<aifx+10;xx++)
for(var zz=aifz-9;zz<aifz+10;zz++)
setTile(xx, aify, zz, 51);
for(var xx=aifx-1;xx<aifx+2;xx++)
for(var zz=aifz-1;zz<aifz+2;zz++)
setTile(xx, aify, zz, 0);
}
if(aifd==false){
aift = 225;
}
else if(aifd==true){
aift = -1;
}
}
if((aif2==3)||(aif2==4)){
if(aift==15){
Entity.setVelY(aifire, 0.4);
for(var xx=aifx+4*sin-1;xx<aifx+4*sin+2;xx++)
for(var zz=aifz+4*cos-1;zz<aifz+4*cos+2;zz++)
setTile(xx+2, aify, zz-1, 2);
}
if(aift==30){
Entity.setVelY(aifire, 0.4);
for(var xx=aifx+4*sin-1;xx<aifx+4*sin+2;xx++)
for(var zz=aifz+4*cos-1;zz<aifz+4*cos+2;zz++)
setTile(xx+2, aify-1, zz-1, 3);
}
if(aift==45){
Entity.setVelY(aifire, 0.4);
for(var xx=aifx+4*sin-1;xx<aifx+4*sin+2;xx++)
for(var zz=aifz+4*cos-1;zz<aifz+4*cos+2;zz++)
setTile(xx+2, aify-2, zz-1, 3);
}
if(aift==60){
Entity.setVelY(aifire, 0.4);
for(var xx=aifx+4*sin-1;xx<aifx+4*sin+2;xx++)
for(var zz=aifz+4*cos-1;zz<aifz+4*cos+2;zz++)
setTile(xx+2, aify-3, zz-1, 3);
}
}
if(aift==75&&aif2==7){
for(var xx=aifx-9;xx<aifx+10;xx++)
for(var zz=aifz-9;zz<aifz+10;zz++)
setTile(xx, aify, zz, 0);
}
if(aift>75&&aif2==7){
Entity.setVelX(aifire, 0.00001);
Entity.setVelX(aifire, -0.00001);
Entity.setVelZ(aifire, 0.00001);
Entity.setVelZ(aifire, -0.00001);
}
if(aift==0&&aifd==true){
aift = -1;
}
//aiwater
if(aiwt>0){
aiwt--;
}
if(aiwt==0&&getTile(Entity.getX(aiwater), Entity.getY(aiwater)-1, Entity.getZ(aiwater))==2){
aiw2 = Math.floor(Math.random()*9);
if(aiw2<3){
aiwx = Math.floor(Entity.getX(aiwater));
aiwy = Math.floor(Entity.getY(aiwater));
aiwz = Math.floor(Entity.getZ(aiwater));
yaw = Math.floor(Entity.getYaw(aiwater));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(aiwx+4*sin, aiwy, aiwz+4*cos, 8);
}
if((aiw2==3)||(aiw2==4)){
aiwx = Math.floor(Entity.getX(aiwater));
aiwy = Math.floor(Entity.getY(aiwater))-1;
aiwz = Math.floor(Entity.getZ(aiwater));
yaw = Math.floor(Entity.getYaw(aiwater));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var xx=aiwx+6*sin-2;xx<aiwx+6*sin+3;xx++)
for(var zz=aiwz+6*cos-2;zz<aiwz+6*cos+3;zz++)
setTile(xx-1, aiwy, zz, 0);
setTile(aiwx+6*sin+1, aiwy, aiwz+6*cos+2, 8);
setTile(aiwx+6*sin+1, aiwy, aiwz+6*cos-2, 8);
setTile(aiwx+6*sin-3, aiwy, aiwz+6*cos+2, 8);
setTile(aiwx+6*sin-3, aiwy, aiwz+6*cos-2, 8);
}
if((aiw2==5)||(aiw2==6)){
aiwx = Entity.getX(aiwater);
aiwy = Entity.getY(aiwater);
aiwz = Entity.getZ(aiwater);
for(var xx=aiwx-2;xx<aiwx+3;xx++)
for(var zz=aiwz-2;zz<aiwz+3;zz++)
setTile(xx, aiwy, zz, 79);
for(var xx=aiwx-1;xx<aiwx+2;xx++)
for(var zz=aiwz-1;zz<aiwz+2;zz++)
setTile(xx, aiwy, zz, 0);
setTile(aiwx+3, aiwy, aiwz, 8);
setTile(aiwx, aiwy, aiwz+3, 8);
setTile(aiwx-3, aiwy, aiwz, 8);
setTile(aiwx, aiwy, aiwz-3, 8);
}
if(aiw2==7){
ESP.aiSbm("Wide Flood");
aiwx = Entity.getX(aiwater)+2;
aiwy = Entity.getY(aiwater)-1;
aiwz = Entity.getZ(aiwater)-3;
for(var xx=aiwx-9;xx<aiwx+10;xx++)
for(var zz=aiwz-9;zz<aiwz+10;zz++)
setTile(xx, aiwy, zz, 0);
setTile(aiwx+7, aiwy+8, aiwz+7, 8);
setTile(aiwx+7, aiwy+8, aiwz, 8);
setTile(aiwx+7, aiwy+8, aiwz-7, 8);
setTile(aiwx, aiwy+8, aiwz+7, 8);
setTile(aiwx, aiwy+8, aiwz-7, 8);
setTile(aiwx-7, aiwy+8, aiwz+7, 8);
setTile(aiwx-7, aiwy+8, aiwz, 8);
setTile(aiwx-7, aiwy+8, aiwz-7, 8);
}
if(aiwd==false){
aiwt = 225;
}
else if(aiwd==true){
aiwt = -1;
}
}
if(aiwt==180&&aiw2<3){
setTile(aiwx+4*sin, aiwy, aiwz+4*cos, 0);
}
if(aiwt==75&&((aiw2==3)||(aiw2==4))){
Entity.setVelY(aiwater, 0.4);
for(var xx=aiwx+6*sin-2;xx<aiwx+6*sin+3;xx++)
for(var zz=aiwz+6*cos-2;zz<aiwz+6*cos+3;zz++)
setTile(xx-1, aiwy, zz, 2);
}
if(aiwt>75&&((aiw2==5)||(aiw2==6))){
Entity.setVelX(aiwater, 0.00001);
Entity.setVelX(aiwater, -0.00001);
Entity.setVelZ(aiwater, 0.00001);
Entity.setVelZ(aiwater, -0.00001);
}
if(aiwt==75&&((aiw2==5)||(aiw2==6))){
setTile(aiwx+3, aiwy, aiwz, 0);
setTile(aiwx, aiwy, aiwz+3, 0);
setTile(aiwx-3, aiwy, aiwz, 0);
setTile(aiwx, aiwy, aiwz-3, 0);
}
if(aiwt==150&&aiw2==7){
setTile(aiwx+7, aiwy+8, aiwz+7, 0);
setTile(aiwx+7, aiwy+8, aiwz, 0);
setTile(aiwx+7, aiwy+8, aiwz-7, 0);
setTile(aiwx, aiwy+8, aiwz+7, 0);
setTile(aiwx, aiwy+8, aiwz-7, 0);
setTile(aiwx-7, aiwy+8, aiwz+7, 0);
setTile(aiwx-7, aiwy+8, aiwz, 0);
setTile(aiwx-7, aiwy+8, aiwz-7, 0);
for(var xx=aiwx-9;xx<aiwx+10;xx++)
for(var zz=aiwz-9;zz<aiwz+10;zz++)
setTile(xx, aiwy, zz, 9);
}
if(aiwt==15&&aiw2==7){
Entity.setVelY(aiwater, 0.4);
for(var xx=aiwx-9;xx<aiwx+10;xx++)
for(var zz=aiwz-9;zz<aiwz+10;zz++)
setTile(xx, aiwy, zz, 2);
}
if(aiwt==0&&aiwd==true){
aiwt = -1;
}
//aitree
if(aitt>0){
aitt--;
}
if(aitt==0&&getTile(Entity.getX(aitree), Entity.getY(aitree)-1, Entity.getZ(aitree))==2){
ait2 = Math.floor(Math.random()*9);
if(ait2<3){
aitx = Math.floor(Entity.getX(aitree));
aity = Math.floor(Entity.getY(aitree))-1;
aitz = Math.floor(Entity.getZ(aitree));
yaw = Math.floor(Entity.getYaw(aitree));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var yy=aity+1;yy<aity+7;yy++)
setTile(aitx+3*sin, yy, aitz+3*cos, 17);
setTile(aitx+3*sin, aity+7, aitz+3*cos, 18);
for(var yy=aity+6;yy<aity+8;yy++){
setTile(aitx+3*sin+1, yy, aitz+3*cos, 18);
setTile(aitx+3*sin, yy, aitz+3*cos-1, 18);
setTile(aitx+3*sin, yy, aitz+3*cos+1, 18);
setTile(aitx+3*sin-1, yy, aitz+3*cos, 18);
}
for(var yy=aity+4;yy<aity+6;yy++){
setTile(aitx+3*sin+1, yy, aitz+3*cos+1, 18);
setTile(aitx+3*sin+1, yy, aitz+3*cos-1, 18);
setTile(aitx+3*sin+1, yy, aitz+3*cos, 18);
setTile(aitx+3*sin-1, yy, aitz+3*cos+1, 18);
setTile(aitx+3*sin-1, yy, aitz+3*cos-1, 18);
setTile(aitx+3*sin-1, yy, aitz+3*cos, 18);
setTile(aitx+3*sin, yy, aitz+3*cos+1, 18);
setTile(aitx+3*sin, yy, aitz+3*cos-1, 18);
setTile(aitx+3*sin+2, yy, aitz+3*cos+1, 18);
setTile(aitx+3*sin+2, yy, aitz+3*cos-1, 18);
setTile(aitx+3*sin+2, yy, aitz+3*cos, 18)
setTile(aitx+3*sin-2, yy, aitz+3*cos+1, 18);
setTile(aitx+3*sin-2, yy, aitz+3*cos-1, 18);
setTile(aitx+3*sin-2, yy, aitz+3*cos, 18);
setTile(aitx+3*sin+1, yy, aitz+3*cos+2, 18);
setTile(aitx+3*sin-1, yy, aitz+3*cos+2, 18);
setTile(aitx+3*sin, yy, aitz+3*cos+2, 18);
setTile(aitx+3*sin+1, yy, aitz+3*cos-2, 18);
setTile(aitx+3*sin-1, yy, aitz+3*cos-2, 18);
setTile(aitx+3*sin, yy, aitz+3*cos-2, 18);
}
}
if((ait2==3)||(ait2==4)){
aitx = Math.floor(Entity.getX(aitree));
aity = Math.floor(Entity.getY(aitree))-1;
aitz = Math.floor(Entity.getZ(aitree));
yaw = Math.floor(Entity.getYaw(aitree));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(aitx+5*sin+2, aity+1, aitz+5*cos+2, 17);
setTile(aitx+5*sin+1, aity+1, aitz+5*cos+2, 17);
setTile(aitx+5*sin, aity+1, aitz+5*cos+2, 17);
setTile(aitx+5*sin-1, aity+1, aitz+5*cos+2, 17);
setTile(aitx+5*sin-2, aity+1, aitz+5*cos+2, 17);
setTile(aitx+5*sin+2, aity+1, aitz+5*cos-2, 17);
setTile(aitx+5*sin+1, aity+1, aitz+5*cos-2, 17);
setTile(aitx+5*sin, aity+1, aitz+5*cos-2, 17);
setTile(aitx+5*sin-1, aity+1, aitz+5*cos-2, 17);
setTile(aitx+5*sin-2, aity+1, aitz+5*cos-2, 17);
setTile(aitx+5*sin-2, aity+1, aitz+5*cos+1, 17);
setTile(aitx+5*sin-2, aity+1, aitz+5*cos, 17);
setTile(aitx+5*sin-2, aity+1, aitz+5*cos-1, 17);
setTile(aitx+5*sin+2, aity+1, aitz+5*cos+1, 17);
setTile(aitx+5*sin+2, aity+1, aitz+5*cos, 17);
setTile(aitx+5*sin+2, aity+1, aitz+5*cos-1, 17);
setTile(aitx+5*sin+2, aity+2, aitz+5*cos+2, 17);
setTile(aitx+5*sin+1, aity+2, aitz+5*cos+2, 17);
setTile(aitx+5*sin, aity+2, aitz+5*cos+2, 17);
setTile(aitx+5*sin-1, aity+2, aitz+5*cos+2, 17);
setTile(aitx+5*sin-2, aity+2, aitz+5*cos+2, 17);
setTile(aitx+5*sin+2, aity+2, aitz+5*cos-2, 17);
setTile(aitx+5*sin+1, aity+2, aitz+5*cos-2, 17);
setTile(aitx+5*sin, aity+2, aitz+5*cos-2, 17);
setTile(aitx+5*sin-1, aity+2, aitz+5*cos-2, 17);
setTile(aitx+5*sin-2, aity+2, aitz+5*cos-2, 17);
setTile(aitx+5*sin-2, aity+2, aitz+5*cos+1, 17);
setTile(aitx+5*sin-2, aity+2, aitz+5*cos, 17);
setTile(aitx+5*sin-2, aity+2, aitz+5*cos-1, 17);
setTile(aitx+5*sin+2, aity+2, aitz+5*cos+1, 17);
setTile(aitx+5*sin+2, aity+2, aitz+5*cos, 17);
setTile(aitx+5*sin+2, aity+2, aitz+5*cos-1, 17);
setTile(aitx+5*sin+2, aity+3, aitz+5*cos+2, 17);
setTile(aitx+5*sin+1, aity+3, aitz+5*cos+2, 17);
setTile(aitx+5*sin, aity+3, aitz+5*cos+2, 17);
setTile(aitx+5*sin-1, aity+3, aitz+5*cos+2, 17);
setTile(aitx+5*sin-2, aity+3, aitz+5*cos+2, 17);
setTile(aitx+5*sin+2, aity+3, aitz+5*cos-2, 17);
setTile(aitx+5*sin+1, aity+3, aitz+5*cos-2, 17);
setTile(aitx+5*sin, aity+3, aitz+5*cos-2, 17);
setTile(aitx+5*sin-1, aity+3, aitz+5*cos-2, 17);
setTile(aitx+5*sin-2, aity+3, aitz+5*cos-2, 17);
setTile(aitx+5*sin-2, aity+3, aitz+5*cos+1, 17);
setTile(aitx+5*sin-2, aity+3, aitz+5*cos, 17);
setTile(aitx+5*sin-2, aity+3, aitz+5*cos-1, 17);
setTile(aitx+5*sin+2, aity+3, aitz+5*cos+1, 17);
setTile(aitx+5*sin+2, aity+3, aitz+5*cos, 17);
setTile(aitx+5*sin+2, aity+3, aitz+5*cos-1, 17);
setTile(aitx+5*sin+1, aity+4, aitz+5*cos-1, 17);
setTile(aitx+5*sin+1, aity+4, aitz+5*cos, 17);
setTile(aitx+5*sin+1, aity+4, aitz+5*cos+1, 17);
setTile(aitx+5*sin, aity+4, aitz+5*cos-1, 17);
setTile(aitx+5*sin, aity+4, aitz+5*cos, 17);
setTile(aitx+5*sin, aity+4, aitz+5*cos+1, 17);
setTile(aitx+5*sin-1, aity+4, aitz+5*cos-1, 17);
setTile(aitx+5*sin-1, aity+4, aitz+5*cos, 17);
setTile(aitx+5*sin-1, aity+4, aitz+5*cos+1, 17);
setTile(aitx+5*sin, aity, aitz+5*cos, 87);
setTile(aitx+5*sin, aity+1, aitz+5*cos, 51);
}
if((ait2==5)||(ait2==6)){
aimc = 1;
}
if(ait2==7){
ESP.aiSbm("Lava Leaf...");
aitx = Entity.getX(aitree);
aity = Entity.getY(aitree)-1;
aitz = Entity.getZ(aitree);
for(var xx=aitx-8;xx<aitx+9;xx++)
for(var zz=aitz-8;zz<aitz+9;zz++)
setTile(xx, aity, zz, 18);
}
aitt = 225;
}
if(aitt==15&&((ait2==5)||(ait2==6))){
aimc = 0;
Entity.setHealth(aitree, Entity.getHealth(aitree)+10);
setVelX(aitree, 1);
}
if((ait2==5)||(ait2==6)){
if(aitt==210){
Entity.setVelY(aitree, 0.4);
}
if(aitt==180){
Entity.setVelX(aitree, 0.4);
}
if(aitt==150){
Entity.setVelZ(aitree, 0.4);
}
if(aitt==135){
Entity.setVelY(aitree, 0.4);
}
if(aitt==120){
Entity.setVelZ(aitree, 0.4);
}
if(aitt==90){
Entity.setVelY(aitree, 0.4);
}
if(aitt==75){
Entity.setVelX(aitree, 0.6);
}
if(aitt==60){
Entity.setVelY(aitree, 0.4);
}
if(aitt==30){
Entity.setVelZ(aitree, -0.4);
}
}
if(aitt==90&&ait2==7){
ESP.aiSbm("Lava Leaf");
for(var xx=aitx-7;xx<aitx+8;xx++)
for(var zz=aitz-7;zz<aitz+8;zz++)
setTile(xx, aity-1, zz, 11);
}
if(aitt==1&&ait2==7){
for(var xx=aitx-7;xx<aitx+8;xx++)
for(var zz=aitz-7;zz<aitz+8;zz++)
setTile(xx, aity-1, zz, 3);
for(var xx=aitx-8;xx<aitx+9;xx++)
for(var zz=aitz-8;zz<aitz+9;zz++)
setTile(xx, aity, zz, 2);
}
if(aitt==0&&aitd==true){
aitt = -1;
}
//aicreeper
if(aict>0){
aict--;
}
if(aict==0&&getTile(Entity.getX(aicreeper), Entity.getY(aicreeper)-1, Entity.getZ(aicreeper))==2){
aic2 = Math.floor(Math.random()*9);
if(aic2<3){
aicx = Math.floor(Entity.getX(aicreeper));
aicy = Math.floor(Entity.getY(aicreeper))-1;
aicz = Math.floor(Entity.getZ(aicreeper));
yaw = Math.floor(Entity.getYaw(aicreeper));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
explode(aicx+4*sin+2, aicy, aicz+4*cos, 2.5);
}
if((aic2==3)||(aic2==4)){
aicx = Math.floor(Entity.getX(aicreeper));
aicy = Math.floor(Entity.getY(aicreeper))-1;
aicz = Math.floor(Entity.getZ(aicreeper));
yaw = Math.floor(Entity.getYaw(aicreeper));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(aicx+5*sin, aicy+1, aicz+5*cos, 46);
setTile(aicx+5*sin, aicy+2, aicz+5*cos, 46);
Level.spawnMob(Math.floor(aicx+5*sin)+0.5, aicy+9, Math.floor(aicz+5*cos)+0.5, 65);
}
if((aic2==5)||(aic2==6)){
aicx = Entity.getX(aicreeper);
aicy = Entity.getY(aicreeper)-1;
aicz = Entity.getZ(aicreeper);
ESP.antiLack(3);
explode(aicx+5, aicy, aicz+5, 2.5);
explode(aicx+5, aicy, aicz, 2.5);
explode(aicx+5, aicy, aicz-5, 2.5);
explode(aicx, aicy, aicz+5, 2.5);
explode(aicx, aicy, aicz-5, 2.5);
explode(aicx-5, aicy, aicz+5, 2.5);
explode(aicx-5, aicy, aicz, 2.5);
explode(aicx-5, aicy, aicz-5, 2.5);
}
if(aic2==7){
ESP.aiSbm("Meteor");
aicx = Entity.getX(aicreeper);
aicy = Entity.getY(aicreeper)-1;
aicz = Entity.getZ(aicreeper);
ESP.antiLack(90);
explode(aicx+5, aicy, aicz+5, 3.5);
explode(aicx+5, aicy, aicz-5, 3.5);
explode(aicx-5, aicy, aicz+5, 3.5);
explode(aicx-5, aicy, aicz-5, 3.5);
Level.spawnMob(aicx+4, aicy+5, aicz-1, 65);
Level.spawnMob(aicx-6, aicy+8, aicz+4, 65);
Level.spawnMob(aicx, aicy+9, aicz+7, 65);
Level.spawnMob(aicx+2, aicy+4, aicz-2, 65);
Level.spawnMob(aicx-7, aicy+11, aicz-5, 65);
Level.spawnMob(aicx+6, aicy+7, aicz+3, 65);
}
if(aicd==false){
aict = 225;
}
}
if(aict==0&&aicd==true){
aict = -1;
}
if(aic2<=4){
if(aict==15){
Entity.setVelY(aicreeper, 0.4);
for(var xx=aicx+4*sin-5;xx<aicx+4*sin+6;xx++)
for(var zz=aicz+4*cos-5;zz<aicz+4*cos+6;zz++)
setTile(xx, aicy, zz, 2);
}
if(aict==30){
Entity.setVelY(aicreeper, 0.4);
for(var xx=aicx+4*sin-4;xx<aicx+4*sin+5;xx++)
for(var zz=aicz+4*cos-4;zz<aicz+4*cos+5;zz++)
setTile(xx, aicy-1, zz, 3);
}
if(aict==45){
Entity.setVelY(aicreeper, 0.4);
for(var xx=aicx+4*sin-4;xx<aicx+4*sin+5;xx++)
for(var zz=aicz+4*cos-4;zz<aicz+4*cos+5;zz++)
setTile(xx, aicy-2, zz, 3);
}
if(aict==60){
Entity.setVelY(aicreeper, 0.4);
for(var xx=aicx+4*sin-4;xx<aicx+4*sin+5;xx++)
for(var zz=aicz+4*cos-4;zz<aicz+4*cos+5;zz++)
setTile(xx, aicy-3, zz, 3);
}
}
if(aic2>=5){
if(aict==15){
Entity.setVelY(aicreeper, 0.4);
for(var xx=aicx+4*sin-8;xx<aicx+4*sin+9;xx++)
for(var zz=aicz+4*cos-8;zz<aicz+4*cos+9;zz++)
setTile(xx, aicy, zz, 2);
}
if(aict==30){
Entity.setVelY(aicreeper, 0.4);
for(var xx=aicx+4*sin-8;xx<aicx+4*sin+9;xx++)
for(var zz=aicz+4*cos-8;zz<aicz+4*cos+9;zz++)
setTile(xx, aicy-1, zz, 3);
}
if(aict==45){
Entity.setVelY(aicreeper, 0.4);
for(var xx=aicx+4*sin-8;xx<aicx+4*sin+9;xx++)
for(var zz=aicz+4*cos-8;zz<aicz+4*cos+9;zz++)
setTile(xx, aicy-2, zz, 3);
}
if(aict==60){
Entity.setVelY(aicreeper, 0.4);
for(var xx=aicx+4*sin-8;xx<aicx+4*sin+9;xx++)
for(var zz=aicz+4*cos-8;zz<aicz+4*cos+9;zz++)
setTile(xx, aicy-3, zz, 3);
}
if(aict==75){
Entity.setVelY(aicreeper, 0.4);
for(var xx=aicx+4*sin-8;xx<aicx+4*sin+9;xx++)
for(var zz=aicz+4*cos-8;zz<aicz+4*cos+9;zz++)
setTile(xx, aicy-4, zz, 3);
}
if(aict==90){
Entity.setVelY(aicreeper, 0.4);
for(var xx=aicx+4*sin-8;xx<aicx+4*sin+9;xx++)
for(var zz=aicz+4*cos-8;zz<aicz+4*cos+9;zz++)
setTile(xx, aicy-5, zz, 3);
}
}
//aisoil
if(aist>0){
aist--;
}
if(aist==0&&getTile(Entity.getX(aisoil), Entity.getY(aisoil)-1, Entity.getZ(aisoil))==2){
ais2 = Math.floor(Math.random()*9);
if(ais2<3){
aisx = Math.floor(Entity.getX(aisoil));
aisy = Math.floor(Entity.getY(aisoil))-1;
aisz = Math.floor(Entity.getZ(aisoil));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var xx=aisx+4*sin-1;xx<aisx+4*sin+2;xx++){
for(var zz=aisz+4*cos-1;zz<aisz+4*cos+2;zz++){
for(var yy=aisy-2;yy<aisy;yy++)
setTile(xx, yy, zz, 0);
setTile(xx, aisy, zz, 13);
setTile(xx, aisy+5, zz, 13);
setTile(xx, aisy+8, zz, 13);
}}
}
if((ais2==3)||(ais2==4)){
aisx = Math.floor(Entity.getX(aisoil));
aisy = Math.floor(Entity.getY(aisoil))-1;
aisz = Math.floor(Entity.getZ(aisoil));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var xx=aisx+4*sin-1;xx<aisx+4*sin+2;xx++)
for(var yy=aisy-3;yy<aisy+1;yy++)
for(var zz=aisz+4*cos-1;zz<aisz+4*cos+2;zz++)
setTile(xx-2, yy, zz+1, 0);
setTile(aisx+4*sin-2, aisy-3, aisz+4*cos+1, 11);
}
if((ais2==5)||(ais2==6)){
aisx = Math.floor(Entity.getX(aisoil));
aisy = Math.floor(Entity.getY(aisoil))-1;
aisz = Math.floor(Entity.getZ(aisoil));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var xx=aisx+4*sin-1;xx<aisx+4*sin+2;xx++){
for(var yy=aisy+1;yy<aisy+4;yy++){
for(var zz=aisz+4*cos-1;zz<aisz+4*cos+2;zz++){
setTile(xx, yy, aisz+4*cos+2, 24);
setTile(xx, yy, aisz+4*cos-2, 24);
setTile(aisx+4*sin+2, yy, zz, 24);
setTile(aisx+4*sin-2, yy, zz, 24);
setTile(xx, yy, zz, 0);
setTile(xx, aisy+4, zz, 24);
setTile(aisx+4*sin, aisy, aisz+4*cos, 11);
}}}
}
if(ais2==7){
ESP.aiSbm("Sink Hole");
aisx = Entity.getX(aisoil);
aisy = Entity.getY(aisoil)-1;
aisz = Entity.getZ(aisoil);
for(var xx=aisx-9;xx<aisx+10;xx++){
for(var yy=aisy-2;yy<aisy+1;yy++){
for(var zz=aisz-9;zz<aisz+10;zz++){
setTile(xx, yy, zz, 0);
setTile(xx, aisy-3, zz, 13);
}}}
setTile(aisx+6, aisy-2, aisz+6, 10);
setTile(aisx+6, aisy-2, aisz, 10);
setTile(aisx+6, aisy-2, aisz-6, 10);
setTile(aisx, aisy-2, aisz+6, 10);
setTile(aisx, aisy-2, aisz-6, 10);
setTile(aisx-6, aisy-2, aisz+6, 10);
setTile(aisx-6, aisy-2, aisz, 10);
setTile(aisx-6, aisy-2, aisz-6, 10);
for(var xx=aisx;xx<aisx+10;xx++)
setTile(xx, aisy, aisz, 1);
}
if(aisd==false){
aist = 225;
}
else if(aisd==true){
aist = -1;
}
}
if(ais2==7){
if(aist>75){
Entity.setVelX(aisoil, 0.00001);
Entity.setVelX(aisoil, -0.00001);
Entity.setVelZ(aisoil, 0.00001);
Entity.setVelZ(aisoil, -0.00001);
}
if(aist==1){
for(var xx=aisx-9;xx<aisx+10;xx++)
for(var zz=aisz-9;zz<aisz+10;zz++)
setTile(xx, aisy, zz, 2);
Entity.setVelY(aisoil, 0.4);
}
if(aist==31){
for(var xx=aisx-9;xx<aisx+10;xx++)
for(var zz=aisz-9;zz<aisz+10;zz++)
setTile(xx, aisy-1, zz, 3);
Entity.setVelY(aisoil, 0.4);
}
if(aist==61){
for(var xx=aisx-9;xx<aisx+10;xx++)
for(var zz=aisz-9;zz<aisz+10;zz++)
setTile(xx, aisy-2, zz, 3);
Entity.setVelY(aisoil, 0.4);
}
if(aist==91){
for(var xx=aisx-9;xx<aisx+10;xx++)
for(var zz=aisz-9;zz<aisz+10;zz++)
setTile(xx, aisy-3, zz, 3);
Entity.setVelY(aisoil, 0.4);
}
}
if(aist==0&&aisd==true){
aist = -1;
}
//aisummon
if(aisst>0){
aisst--;
}
if(aisst==0&&getTile(Entity.getX(aisummon), Entity.getY(aisummon)-1, Entity.getZ(aisummon))==2){
aiss2 = Math.floor(Math.random()*9);
aissx = Math.floor(Entity.getX(aisummon));
aissy = Math.floor(Entity.getY(aisummon));
aissz = Math.floor(Entity.getZ(aisummon));
yaw = Math.floor(Entity.getYaw(aisummon));
pitch = Math.floor(Entity.getPitch(aisummon));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
if(aiss2<3){
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 32, "mob/zombie.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 32, "mob/zombie.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 36, "mob/pigzombie.png");
}
if((aiss2==3)||(aiss2==4)){
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 33, "mob/creeper.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 33, "mob/creeper.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 33, "mob/creeper.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 33, "mob/creeper.png");
}
if((aiss2==5)||(aiss2==6)){
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 34, "mob/skeleton.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 34, "mob/skeleton.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 34, "mob/skeleton.png");
uuu = Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 34, "mob/skeleton.png");
ddd = Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 35, "mob/spider.png");
Entity.rideAnimal(uuu, ddd);
}
if(aiss2==7){
ESP.aiSbm("Master Summon");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 32, "mob/zombie.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 32, "mob/zombie.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 32, "mob/zombie.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 32, "mob/zombie.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 32, "mob/zombie.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 33, "mob/creeper.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 33, "mob/creeper.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 33, "mob/creeper.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 34, "mob/skeleton.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 34, "mob/skeleton.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 34, "mob/skeleton.png");
uuu = Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 34, "mob/skeleton.png");
ddd = Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 35, "mob/spider.png");
Entity.rideAnimal(uuu, ddd);
uuu = Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 34, "mob/skeleton.png");
ddd = Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 35, "mob/spider.png");
Entity.rideAnimal(uuu, ddd);
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 36, "mob/pigzombie.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 36, "mob/pigzombie.png");
Level.spawnMob(aissx+4*sin, aissy+2, aissz+4*cos, 36, "mob/pigzombie.png");
}
if(aissd==false){
aisst = 225;
}
}
if(aisst==0&&aissd==true){
aisst = -1;
}



//---------------
if(aimc==1){
aitx = Entity.getX(aitree);
aity = Entity.getY(aitree)-1;
aitz = Entity.getZ(aitree);
for(var xx=aitx-1;xx<aitx+2;xx++)
for(var zz=aitz-1;zz<aitz+2;zz++)
if(getTile(xx, aity, zz)==0){
setTile(xx, aity, zz, 17);
}
}
//--A.I.S. deathHook---
if(Entity.getHealth(aifire)<=0&&aifd2==true){
ESP.aiSbm("Fire User was died");
aifd = true;
aifd2 = false;
}
if(Entity.getHealth(aiwater)<=0&&aiwd2==true){
ESP.aiSbm("Water Controller was died");
aiwd = true;
aiwd2 = false;
}
if(Entity.getHealth(aitree)<=0&&aitd2==true){
ESP.aiSbm("Nature Guardian was died");
aitd = true;
aitd2 = false;
}
if(Entity.getHealth(aicreeper)<=0&&aicd2==true){
ESP.aiSbm("I am Creeper was died");
aicd = true;
aicd2 = false;
}
if(Entity.getHealth(aisoil)<=0&&aisd2==true){
ESP.aiSbm("Soil Maaister was died");
aisd = true;
aisd2 = false;
}
if(Entity.getHealth(aisummon)<=0&&aissd2==true){
ESP.aiSbm("The Summoner was died");
aissd = true;
aissd2 = false
}


//A.I.P.
if(ait>0){
ait--;
}
if(ait==1){
setTile(espch[0], espch[1], espch[2], 49);
}
//fire ai
if(ai2ft>0){
ai2ft--;
}
if(ai2ft==0){
var ai2fr = Math.floor(Math.random()*9);
if(ai2fr<3){
ai2fx = Math.floor(Entity.getX(ai2fire2));
ai2fy = Math.floor(Entity.getY(ai2fire2));
ai2fz = Math.floor(Entity.getZ(ai2fire2));
yaw = Math.floor(Entity.getYaw(ai2fire2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var xx=ai2fx+4*sin-1;xx<ai2fx+4*sin+2;xx++)
for(var zz=ai2fz+4*cos-1;zz<ai2fz+4*cos+2;zz++)
setTile(xx, ai2fy, zz, 51);
setTile(ai2fx+4*sin+2, ai2fy, ai2fz+4*cos, 51);
setTile(ai2fx+4*sin, ai2fy, ai2fz+4*cos+2, 51);
setTile(ai2fx+4*sin-2, ai2fy, ai2fz+4*cos, 51);
setTile(ai2fx+4*sin, ai2fy, ai2fz+4*cos-2, 51);
}
if((ai2fr==3)||(ai2fr==4)){
ai2fx = Math.floor(Entity.getX(ai2fire2));
ai2fy = Math.floor(Entity.getY(ai2fire2))-1;
ai2fz = Math.floor(Entity.getZ(ai2fire2));
yaw = Math.floor(Entity.getYaw(ai2fire2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var xx=ai2fx+4*sin-1;xx<ai2fx+4*sin+2;xx++){
for(var yy=ai2fy-2;yy<ai2fy+1;yy++)
for(var zz=ai2fz+4*cos-1;zz<ai2fz+4*cos+2;zz++){
setTile(xx+2, yy, zz-1, 0);
setTile(xx+2, ai2fy-3, zz-1, 51);}}
}
if((ai2fr==5)||(ai2fr==6)){
ai2fx = Math.floor(Entity.getX(ai2fire2));
ai2fy = Math.floor(Entity.getY(ai2fire2));
ai2fz = Math.floor(Entity.getZ(ai2fire2));
yaw = Math.floor(Entity.getYaw(ai2fire2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<20;gun++)
setTile(ai2fx+gun*sin, ai2fy, ai2fz+gun*cos, 51);
}
if(ai2fr==7){
ai2fx = Entity.getX(ai2fire2);
ai2fy = Entity.getY(ai2fire2);
ai2fz = Entity.getZ(ai2fire2);
for(var xx=ai2fx-9;xx<ai2fx+10;xx++)
for(var zz=ai2fz-9;zz<ai2fz+10;zz++)
setTile(xx, ai2fy, zz, 51);
for(var xx=ai2fx-1;xx<ai2fx+2;xx++)
for(var zz=ai2fz-1;zz<ai2fz+2;zz++)
setTile(xx, ai2fy, zz, 0);
}
if(ai2fd==false){
ai2ft = 225;
}
else if(ai2fd==true){
ai2ft = -1;
}
}
if((ai2fr==3)||(ai2fr==4)){
if(ai2ft==15){
Entity.setVelY(ai2fire2, 0.4);
for(var xx=ai2fx+4*sin-1;xx<ai2fx+4*sin+2;xx++)
for(var zz=ai2fz+4*cos-1;zz<ai2fz+4*cos+2;zz++)
setTile(xx+2, ai2fy, zz-1, 2);
}
if(ai2ft==30){
Entity.setVelY(ai2fire2, 0.4);
for(var xx=ai2fx+4*sin-1;xx<ai2fx+4*sin+2;xx++)
for(var zz=ai2fz+4*cos-1;zz<ai2fz+4*cos+2;zz++)
setTile(xx+2, ai2fy-1, zz-1, 3);
}
if(ai2ft==45){
Entity.setVelY(ai2fire2, 0.4);
for(var xx=ai2fx+4*sin-1;xx<ai2fx+4*sin+2;xx++)
for(var zz=ai2fz+4*cos-1;zz<ai2fz+4*cos+2;zz++)
setTile(xx+2, ai2fy-2, zz-1, 3);
}
if(ai2ft==60){
Entity.setVelY(ai2fire2, 0.4);
for(var xx=ai2fx+4*sin-1;xx<ai2fx+4*sin+2;xx++)
for(var zz=ai2fz+4*cos-1;zz<ai2fz+4*cos+2;zz++)
setTile(xx+2, ai2fy-3, zz-1, 3);
}
}
if(ai2ft==75&&ai2fr==7){
for(var xx=ai2fx-9;xx<ai2fx+10;xx++)
for(var zz=ai2fz-9;zz<ai2fz+10;zz++)
setTile(xx, ai2fy, zz, 0);
}
if(ai2ft>75&&ai2fr==7){
Entity.setVelX(ai2fire2, 0.00001);
Entity.setVelX(ai2fire2, -0.00001);
Entity.setVelZ(ai2fire2, 0.00001);
Entity.setVelZ(ai2fire2, -0.00001);
}
if(ai2ft==0&&ai2fd==true){
ai2ft = -1;
}
//water ai
if(ai2wt>0){
ai2wt--;
}
if(ai2wt==0){
var ai2wr = Math.floor(Math.random()*9);
if(ai2wr<3){
ai2wx = Math.floor(Entity.getX(ai2water2));
ai2wy = Math.floor(Entity.getY(ai2water2));
ai2wz = Math.floor(Entity.getZ(ai2water2));
yaw = Math.floor(Entity.getYaw(ai2water2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(ai2wx+4*sin, ai2wy, ai2wz+4*cos, 8);
}
if((ai2wr==3)||(ai2wr==4)){
ai2wx = Math.floor(Entity.getX(ai2water2));
ai2wy = Math.floor(Entity.getY(ai2water2))-1;
ai2wz = Math.floor(Entity.getZ(ai2water2));
yaw = Math.floor(Entity.getYaw(ai2water2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var xx=ai2wx+6*sin-2;xx<ai2wx+6*sin+3;xx++)
for(var zz=ai2wz+6*cos-2;zz<ai2wz+6*cos+3;zz++)
setTile(xx-1, ai2wy, zz, 0);
setTile(ai2wx+6*sin+1, ai2wy, ai2wz+6*cos+2, 8);
setTile(ai2wx+6*sin+1, ai2wy, ai2wz+6*cos-2, 8);
setTile(ai2wx+6*sin-3, ai2wy, ai2wz+6*cos+2, 8);
setTile(ai2wx+6*sin-3, ai2wy, ai2wz+6*cos-2, 8);
}
if((ai2wr==5)||(ai2wr==6)){
ai2wx = Entity.getX(ai2water2);
ai2wy = Entity.getY(ai2water2);
ai2wz = Entity.getZ(ai2water2);
for(var xx=ai2wx-2;xx<ai2wx+3;xx++)
for(var zz=ai2wz-2;zz<ai2wz+3;zz++)
setTile(xx, ai2wy, zz, 79);
for(var xx=ai2wx-1;xx<ai2wx+2;xx++)
for(var zz=ai2wz-1;zz<ai2wz+2;zz++)
setTile(xx, ai2wy, zz, 0);
setTile(ai2wx+3, ai2wy, ai2wz, 8);
setTile(ai2wx, ai2wy, ai2wz+3, 8);
setTile(ai2wx-3, ai2wy, ai2wz, 8);
setTile(ai2wx, ai2wy, ai2wz-3, 8);
}
if(ai2wr==7){
ESP.aiSbm("Wide Flood");
ai2wx = Entity.getX(ai2water2)+2;
ai2wy = Entity.getY(ai2water2)-1;
ai2wz = Entity.getZ(ai2water2)-3;
for(var xx=ai2wx-9;xx<ai2wx+10;xx++)
for(var zz=ai2wz-9;zz<ai2wz+10;zz++)
setTile(xx, ai2wy, zz, 0);
setTile(ai2wx+7, ai2wy+8, ai2wz+7, 8);
setTile(ai2wx+7, ai2wy+8, ai2wz, 8);
setTile(ai2wx+7, ai2wy+8, ai2wz-7, 8);
setTile(ai2wx, ai2wy+8, ai2wz+7, 8);
setTile(ai2wx, ai2wy+8, ai2wz-7, 8);
setTile(ai2wx-7, ai2wy+8, ai2wz+7, 8);
setTile(ai2wx-7, ai2wy+8, ai2wz, 8);
setTile(ai2wx-7, ai2wy+8, ai2wz-7, 8);
}
if(ai2wd==false){
ai2wt = 225;
}
else if(ai2wd==true){
ai2wt = -1;
}
}
if(ai2wt==180&&ai2wr<3){
setTile(ai2wx+4*sin, ai2wy, ai2wz+4*cos, 0);
}
if(ai2wt==75&&((ai2wr==3)||(ai2wr==4))){
Entity.setVelY(ai2water2, 0.4);
for(var xx=ai2wx+6*sin-2;xx<ai2wx+6*sin+3;xx++)
for(var zz=ai2wz+6*cos-2;zz<ai2wz+6*cos+3;zz++)
setTile(xx-1, ai2wy, zz, 2);
}
if(ai2wt>75&&((ai2wr==5)||(ai2wr==6))){
Entity.setVelX(ai2water2, 0.00001);
Entity.setVelX(ai2water2, -0.00001);
Entity.setVelZ(ai2water2, 0.00001);
Entity.setVelZ(ai2water2, -0.00001);
}
if(ai2wt==75&&((ai2wr==5)||(ai2wr==6))){
setTile(ai2wx+3, ai2wy, ai2wz, 0);
setTile(ai2wx, ai2wy, ai2wz+3, 0);
setTile(ai2wx-3, ai2wy, ai2wz, 0);
setTile(ai2wx, ai2wy, ai2wz-3, 0);
}
if(ai2wt==150&&ai2wr==7){
setTile(ai2wx+7, ai2wy+8, ai2wz+7, 0);
setTile(ai2wx+7, ai2wy+8, ai2wz, 0);
setTile(ai2wx+7, ai2wy+8, ai2wz-7, 0);
setTile(ai2wx, ai2wy+8, ai2wz+7, 0);
setTile(ai2wx, ai2wy+8, ai2wz-7, 0);
setTile(ai2wx-7, ai2wy+8, ai2wz+7, 0);
setTile(ai2wx-7, ai2wy+8, ai2wz, 0);
setTile(ai2wx-7, ai2wy+8, ai2wz-7, 0);
for(var xx=ai2wx-9;xx<ai2wx+10;xx++)
for(var zz=ai2wz-9;zz<ai2wz+10;zz++)
setTile(xx, ai2wy, zz, 9);
}
if(ai2wt==15&&ai2wr==7){
Entity.setVelY(ai2water2, 0.4);
for(var xx=ai2wx-9;xx<ai2wx+10;xx++)
for(var zz=ai2wz-9;zz<ai2wz+10;zz++)
setTile(xx, ai2wy, zz, 2);
}
if(ai2wt==0&&ai2wd==true){
ai2wt = -1;
}
//creeper ai
if(ai2ct>0){
ai2ct--;
}
if(ai2ct==0){
ai2cr = Math.floor(Math.random()*9);
if(ai2cr<3){
ai2cx = Math.floor(Entity.getX(ai2creeper2));
ai2cy = Math.floor(Entity.getY(ai2creeper2))-1;
ai2cz = Math.floor(Entity.getZ(ai2creeper2));
yaw = Math.floor(Entity.getYaw(ai2creeper2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
explode(ai2cx+4*sin+2, ai2cy, ai2cz+4*cos, 2.5);
}
if((ai2cr==3)||(ai2cr==4)){
ai2cx = Math.floor(Entity.getX(ai2creeper2));
ai2cy = Math.floor(Entity.getY(ai2creeper2))-1;
ai2cz = Math.floor(Entity.getZ(ai2creeper2));
yaw = Math.floor(Entity.getYaw(ai2creeper2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(ai2cx+5*sin, ai2cy+1, ai2cz+5*cos, 46);
setTile(ai2cx+5*sin, ai2cy+2, ai2cz+5*cos, 46);
Level.spawnMob(Math.floor(ai2cx+5*sin)+0.5, ai2cy+9, Math.floor(ai2cz+5*cos)+0.5, 65);
}
if((ai2cr==5)||(ai2cr==6)){
ai2cx = Entity.getX(ai2creeper2);
ai2cy = Entity.getY(ai2creeper2)-1;
ai2cz = Entity.getZ(ai2creeper2);
ESP.antiLack(3);
explode(ai2cx+5, ai2cy, ai2cz+5, 2.5);
explode(ai2cx+5, ai2cy, ai2cz, 2.5);
explode(ai2cx+5, ai2cy, ai2cz-5, 2.5);
explode(ai2cx, ai2cy, ai2cz+5, 2.5);
explode(ai2cx, ai2cy, ai2cz-5, 2.5);
explode(ai2cx-5, ai2cy, ai2cz+5, 2.5);
explode(ai2cx-5, ai2cy, ai2cz, 2.5);
explode(ai2cx-5, ai2cy, ai2cz-5, 2.5);
}
if(ai2cr==7){
ESP.aiSbm("Meteor");
ai2cx = Entity.getX(ai2creeper2);
ai2cy = Entity.getY(ai2creeper2)-1;
ai2cz = Entity.getZ(ai2creeper2);
ESP.antiLack(90);
explode(ai2cx+5, ai2cy, ai2cz+5, 3.5);
explode(ai2cx+5, ai2cy, ai2cz-5, 3.5);
explode(ai2cx-5, ai2cy, ai2cz+5, 3.5);
explode(ai2cx-5, ai2cy, ai2cz-5, 3.5);
Level.spawnMob(ai2cx+4, ai2cy+5, ai2cz-1, 65);
Level.spawnMob(ai2cx-6, ai2cy+8, ai2cz+4, 65);
Level.spawnMob(ai2cx, ai2cy+9, ai2cz+7, 65);
Level.spawnMob(ai2cx+2, ai2cy+4, ai2cz-2, 65);
Level.spawnMob(ai2cx-7, ai2cy+11, ai2cz-5, 65);
Level.spawnMob(ai2cx+6, ai2cy+7, ai2cz+3, 65);
}
if(ai2cd==false){
ai2ct = 225;
}
}
if(ai2ct==0&&ai2cd==true){
ai2ct = -1;
}
if(ai2cr<=4){
if(ai2ct==15){
Entity.setVelY(ai2creeper2, 0.4);
for(var xx=ai2cx+4*sin-5;xx<ai2cx+4*sin+6;xx++)
for(var zz=ai2cz+4*cos-5;zz<ai2cz+4*cos+6;zz++)
setTile(xx, ai2cy, zz, 2);
}
if(ai2ct==30){
Entity.setVelY(ai2creeper2, 0.4);
for(var xx=ai2cx+4*sin-4;xx<ai2cx+4*sin+5;xx++)
for(var zz=ai2cz+4*cos-4;zz<ai2cz+4*cos+5;zz++)
setTile(xx, ai2cy-1, zz, 3);
}
if(ai2ct==45){
Entity.setVelY(ai2creeper2, 0.4);
for(var xx=ai2cx+4*sin-4;xx<ai2cx+4*sin+5;xx++)
for(var zz=ai2cz+4*cos-4;zz<ai2cz+4*cos+5;zz++)
setTile(xx, ai2cy-2, zz, 3);
}
if(ai2ct==60){
Entity.setVelY(ai2creeper2, 0.4);
for(var xx=ai2cx+4*sin-4;xx<ai2cx+4*sin+5;xx++)
for(var zz=ai2cz+4*cos-4;zz<ai2cz+4*cos+5;zz++)
setTile(xx, ai2cy-3, zz, 3);
}
}
if(ai2cr>=5){
if(ai2ct==15){
Entity.setVelY(ai2creeper2, 0.4);
for(var xx=ai2cx+4*sin-8;xx<ai2cx+4*sin+9;xx++)
for(var zz=ai2cz+4*cos-8;zz<ai2cz+4*cos+9;zz++)
setTile(xx, ai2cy, zz, 2);
}
if(ai2ct==30){
Entity.setVelY(ai2creeper2, 0.4);
for(var xx=ai2cx+4*sin-8;xx<ai2cx+4*sin+9;xx++)
for(var zz=ai2cz+4*cos-8;zz<ai2cz+4*cos+9;zz++)
setTile(xx, ai2cy-1, zz, 3);
}
if(ai2ct==45){
Entity.setVelY(ai2creeper2, 0.4);
for(var xx=ai2cx+4*sin-8;xx<ai2cx+4*sin+9;xx++)
for(var zz=ai2cz+4*cos-8;zz<ai2cz+4*cos+9;zz++)
setTile(xx, ai2cy-2, zz, 3);
}
if(ai2ct==60){
Entity.setVelY(ai2creeper2, 0.4);
for(var xx=ai2cx+4*sin-8;xx<ai2cx+4*sin+9;xx++)
for(var zz=ai2cz+4*cos-8;zz<ai2cz+4*cos+9;zz++)
setTile(xx, ai2cy-3, zz, 3);
}
if(ai2ct==75){
Entity.setVelY(ai2creeper2, 0.4);
for(var xx=ai2cx+4*sin-8;xx<ai2cx+4*sin+9;xx++)
for(var zz=ai2cz+4*cos-8;zz<ai2cz+4*cos+9;zz++)
setTile(xx, ai2cy-4, zz, 3);
}
if(ai2ct==90){
Entity.setVelY(ai2creeper2, 0.4);
for(var xx=ai2cx+4*sin-8;xx<ai2cx+4*sin+9;xx++)
for(var zz=ai2cz+4*cos-8;zz<ai2cz+4*cos+9;zz++)
setTile(xx, ai2cy-5, zz, 3);
}
}
//mage ai
if(ai2mt>0){
ai2mt--;
}
if(ai2mt==0){
ai2mr = Math.floor(Math.random()*9);
if(ai2mr<3){
ai2mx = Math.floor(Entity.getX(ai2mage2));
ai2my = Math.floor(Entity.getY(ai2mage2))-1;
ai2mz = Math.floor(Entity.getZ(ai2mage2));
yaw = Math.floor(Entity.getYaw(ai2mage2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<18;gun++)
setTile(ai2mx+gun*sin, ai2my+1, ai2mz+gun*cos, 51);
}
if((ai2mr==3)||(ai2mr==4)){
ai2mx = Entity.getX(ai2mage2);
ai2my = Entity.getY(ai2mage2)-1;
ai2mz = Entity.getZ(ai2mage2);
setTile(ai2mx+2, ai2my+1, ai2mz+2, 8);
setTile(ai2mx+2, ai2my+1, ai2mz-2, 8);
setTile(ai2mx-2, ai2my+1, ai2mz+2, 8);
setTile(ai2mx-2, ai2my+1, ai2mz-2, 8);
}
if((ai2mr==5)||(ai2mr==6)){
ai2mx = Math.floor(Entity.getX(ai2mage2));
ai2my = Math.floor(Entity.getY(ai2mage2))-1;
ai2mz = Math.floor(Entity.getZ(ai2mage2));
yaw = Math.floor(Entity.getYaw(ai2mage2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
if(Math.abs(sin)>Math.abs(cos)){
for(var yy=ai2my+1;yy<ai2my+5;yy++)
for(var zz=ai2mz+5*cos-2;zz<ai2mz+5*cos+3;zz++)
setTile(ai2mx, yy, zz, 17);
}
else if(Math.abs(sin)<Math.abs(cos)){
for(var xx=ai2mx+5*sin-2;xx<ai2mx+5*sin+3;xx++)
for(var yy=ai2my+1;yy<ai2my+5;yy++)
setTile(xx, yy, ai2mz, 17);
}
}
if(ai2mr==7){
ai2mx = Entity.getX(ai2mage2);
ai2my = Entity.getY(ai2mage2)-1;
ai2mz = Entity.getZ(ai2mage2);
ESP.antiLack(3);
explode(ai2mx+5, ai2my, ai2my+5, 2.5);
}
if(ai2md==false){
ai2mt = 225;
}
}
if(ai2mt==0&&ai2md==true){
ai2mt = -1;
}
if(ai2mt==150&&(ai2mr==3||ai2mr==4)){
setTile(ai2mx+2, ai2my+1, ai2mz+2, 0);
setTile(ai2mx+2, ai2my+1, ai2mz-2, 0);
setTile(ai2mx-2, ai2my+1, ai2mz+2, 0);
setTile(ai2mx-2, ai2my+1, ai2mz-2, 0);
}
if(ai2mr==7){
if(ai2mt==220){
explode(ai2mx+6, ai2my, ai2mz, 2.5);
}
if(ai2mt==215){
explode(ai2mx+5, ai2my, ai2mz-5, 2.5);
}
if(ai2mt==210){
explode(ai2mx, ai2my, ai2mz-6, 2.5);
}
if(ai2mt==205){
explode(ai2mx-5, ai2my, ai2mz-5, 2.5);
}
if(ai2mt==200){
explode(ai2mx-6, ai2my, ai2mz, 2.5);
}
if(ai2mt==195){
explode(ai2mx-5, ai2my, ai2mz+5, 2.5);
}
if(ai2mt==190){
explode(ai2mx, ai2my, ai2mz+6, 2.5);
}
if(ai2mt==175){
ESP.antiLack(3);
explode(ai2mx+6, ai2my+1, ai2mz+6, 3);
explode(ai2mx+7, ai2my+1, ai2mz, 3);
explode(ai2mx+6, ai2my+1, ai2mz-6, 3);
explode(ai2mx, ai2my+1, ai2mz+7, 3);
explode(ai2mx, ai2my+1, ai2mz-7, 3);
explode(ai2mx-6, ai2my+1, ai2mz+6, 3);
explode(ai2mx-7, ai2my+1, ai2mz, 3);
explode(ai2mx-6, ai2my+1, ai2mz-6, 3);
}
if(ai2mt==1){
for(var xx=ai2mx-12;xx<ai2mx+13;xx++)
for(var zz=ai2mz-12;zz<ai2mz+13;zz++)
setTile(xx, ai2my, zz, 2);
}
if(ai2mt==31){
for(var xx=ai2mx-12;xx<ai2mx+13;xx++)
for(var zz=ai2mz-12;zz<ai2mz+13;zz++)
setTile(xx, ai2my-1, zz, 3);
}
if(ai2mt==61){
for(var xx=ai2mx-12;xx<ai2mx+13;xx++)
for(var zz=ai2mz-12;zz<ai2mz+13;zz++)
setTile(xx, ai2my-2, zz, 3);
}
if(ai2mt==91){
for(var xx=ai2mx-12;xx<ai2mx+13;xx++)
for(var zz=ai2mz-12;zz<ai2mz+13;zz++)
setTile(xx, ai2my-3, zz, 3);
}
if(ai2mt==121){
for(var xx=ai2mx-12;xx<ai2mx+13;xx++)
for(var zz=ai2mz-12;zz<ai2mz+13;zz++)
setTile(xx, ai2my-4, zz, 3);
}
if(ai2mt==150){
for(var xx=ai2mx-12;xx<ai2mx+13;xx++)
for(var zz=ai2mz-12;zz<ai2mz+13;zz++)
setTile(xx, ai2my-5, zz, 3);
}
}
//jungle ai
if(ai2jt>0){
ai2jt--;
}
if(ai2jt==0){
ai2jr = Math.floor(Math.random()*9);
if(ai2jr<3){
ai2jx = Math.floor(Entity.getX(ai2jungle2));
ai2jy = Math.floor(Entity.getY(ai2jungle2))-1;
ai2jz = Math.floor(Entity.getZ(ai2jungle2));
yaw = Math.floor(Entity.getYaw(ai2jungle2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var yy=ai2jy+1;yy<ai2jy+7;yy++)
setTile(ai2jx+5*sin, yy, ai2jz+5*cos, 17, 3);
setTile(ai2jx+5*sin, ai2jy+7, ai2jz+5*cos, 18, 3);
for(var yy=ai2jy+6;yy<ai2jy+8;yy++){
setTile(ai2jx+5*sin+1, yy, ai2jz+5*cos, 18, 3);
setTile(ai2jx+5*sin, yy, ai2jz+5*cos-1, 18, 3);
setTile(ai2jx+5*sin, yy, ai2jz+5*cos+1, 18, 3);
setTile(ai2jx+5*sin-1, yy, ai2jz+5*cos, 18, 3);
}
for(var yy=ai2jy+4;yy<ai2jy+6;yy++){
setTile(ai2jx+5*sin+1, yy, ai2jz+5*cos+1, 18, 3);
setTile(ai2jx+5*sin+1, yy, ai2jz+5*cos-1, 18, 3);
setTile(ai2jx+5*sin+1, yy, ai2jz+5*cos, 18, 3);
setTile(ai2jx+5*sin-1, yy, ai2jz+5*cos+1, 18, 3);
setTile(ai2jx+5*sin-1, yy, ai2jz+5*cos-1, 18, 3);
setTile(ai2jx+5*sin-1, yy, ai2jz+5*cos, 18, 3);
setTile(ai2jx+5*sin, yy, ai2jz+5*cos+1, 18, 3);
setTile(ai2jx+5*sin, yy, ai2jz+5*cos-1, 18, 3);
setTile(ai2jx+5*sin+2, yy, ai2jz+5*cos+1, 18, 3);
setTile(ai2jx+5*sin+2, yy, ai2jz+5*cos-1, 18, 3);
setTile(ai2jx+5*sin+2, yy, ai2jz+5*cos, 18, 3)
setTile(ai2jx+5*sin-2, yy, ai2jz+5*cos+1, 18, 3);
setTile(ai2jx+5*sin-2, yy, ai2jz+5*cos-1, 18, 3);
setTile(ai2jx+5*sin-2, yy, ai2jz+5*cos, 18, 3);
setTile(ai2jx+5*sin+1, yy, ai2jz+5*cos+2, 18, 3);
setTile(ai2jx+5*sin-1, yy, ai2jz+5*cos+2, 18, 3);
setTile(ai2jx+5*sin, yy, ai2jz+5*cos+2, 18, 3);
setTile(ai2jx+5*sin+1, yy, ai2jz+5*cos-2, 18, 3);
setTile(ai2jx+5*sin-1, yy, ai2jz+5*cos-2, 18, 3);
setTile(ai2jx+5*sin, yy, ai2jz+5*cos-2, 18, 3);
}
}
if((ai2jr==3)||(ai2jr==4)){
ai2jx = Math.floor(Entity.getX(ai2jungle2));
ai2jy = Math.floor(Entity.getY(ai2jungle2))-1;
ai2jz = Math.floor(Entity.getZ(ai2jungle2));
yaw = Math.floor(Entity.getYaw(ai2jungle2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
setTile(ai2jx+7*sin-6, ai2jy+11, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-5, ai2jy+7, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-5, ai2jy+11, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-5, ai2jy+11, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-5, ai2jy+11, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin-5, ai2jy+11, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin-5, ai2jy+12, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-5, ai2jy+12, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+7, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+7, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+7, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+8, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+11, ai2jz+7*cos-4, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+11, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+11, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+11, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+11, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+11, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+11, ai2jz+7*cos+5, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+12, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+12, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+12, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+12, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+12, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+12, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin-4, ai2jy+13, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+7, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+7, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+7, ai2jz+7*cos, 17, 3);
setTile(ai2jx+7*sin-3, ai2jy+7, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+7, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+8, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+8, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+8, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+11, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+11, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+11, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+11, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+11, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+11, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+11, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+11, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+11, ai2jz+7*cos+5, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+12, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+12, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+12, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+12, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+12, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+12, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+12, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+13, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+13, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+13, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+13, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+13, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin-3, ai2jy+13, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+6, ai2jz+7*cos, 17, 3);
setTile(ai2jx+7*sin-2, ai2jy+7, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+7, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+7, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+8, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+11, ai2jz+7*cos-4, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+11, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+11, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+11, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+11, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+11, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+11, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+11, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+11, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+11, ai2jz+7*cos+5, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+11, ai2jz+7*cos+6, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+12, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+12, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+12, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+12, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+12, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+12, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+12, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+12, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+12, ai2jz+7*cos+5, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+13, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+13, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+13, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+13, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+13, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+13, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin-2, ai2jy+13, ai2jz+7*cos+4, 18, 3);
for(var yy=ai2jy+1;yy<ai2jy+13;yy++){
setTile(ai2jx+7*sin-1, yy, ai2jz+7*cos, 17, 3);
setTile(ai2jx+7*sin-1, yy, ai2jz+7*cos+1, 17, 3);
setTile(ai2jx+7*sin, yy, ai2jz+7*cos, 17, 3);
setTile(ai2jx+7*sin, yy, ai2jz+7*cos+1, 17, 3);
}
setTile(ai2jx+7*sin-1, ai2jy+11, ai2jz+7*cos-5, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+11, ai2jz+7*cos-4, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+11, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+11, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+11, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+11, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+11, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+11, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+11, ai2jz+7*cos+5, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+11, ai2jz+7*cos+6, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+12, ai2jz+7*cos-4, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+12, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+12, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+12, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+12, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+12, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+12, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+12, ai2jz+7*cos+5, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+13, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+13, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+13, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+13, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+13, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+13, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+13, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin-1, ai2jy+13, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin, ai2jy+11, ai2jz+7*cos-5, 18, 3);
setTile(ai2jx+7*sin, ai2jy+11, ai2jz+7*cos-4, 18, 3);
setTile(ai2jx+7*sin, ai2jy+11, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin, ai2jy+11, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin, ai2jy+11, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin, ai2jy+11, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin, ai2jy+11, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin, ai2jy+11, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin, ai2jy+11, ai2jz+7*cos+5, 18, 3);
setTile(ai2jx+7*sin, ai2jy+12, ai2jz+7*cos-4, 18, 3);
setTile(ai2jx+7*sin, ai2jy+12, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin, ai2jy+12, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin, ai2jy+12, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin, ai2jy+12, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin, ai2jy+12, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin, ai2jy+12, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin, ai2jy+12, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin, ai2jy+12, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin, ai2jy+13, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin, ai2jy+13, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin, ai2jy+13, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin, ai2jy+13, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin, ai2jy+13, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin, ai2jy+13, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin, ai2jy+13, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+11, ai2jz+7*cos-5, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+11, ai2jz+7*cos-4, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+11, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+11, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+11, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+11, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+11, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+11, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+11, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+11, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+11, ai2jz+7*cos+5, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+12, ai2jz+7*cos-4, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+12, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+12, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+12, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+12, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+12, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+12, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+12, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+12, ai2jz+7*cos+4, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+13, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+13, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+13, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+13, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+13, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin+1, ai2jy+13, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+11, ai2jz+7*cos-4, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+11, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+11, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+11, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+11, ai2jz+7*cos+5, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+12, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+12, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+12, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+12, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+12, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+12, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+12, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+13, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+13, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+13, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+13, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin+3, ai2jy+11, ai2jz+7*cos-4, 18, 3);
setTile(ai2jx+7*sin+3, ai2jy+11, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin+3, ai2jy+11, ai2jz+7*cos-1, 18, 3);
for(var zz=ai2jz+7*cos;zz<ai2jz+7*cos+5;zz++){
setTile(ai2jx+7*sin+3, ai2jy+11, zz, 18, 3);
setTile(ai2jx+7*sin+4, ai2jy+11, zz, 18, 3);
setTile(ai2jx+7*sin+2, ai2jy+11, zz, 18, 3);
}
setTile(ai2jx+7*sin+3, ai2jy+11, ai2jz+7*cos+5, 18, 3);
setTile(ai2jx+7*sin+3, ai2jy+12, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin+3, ai2jy+12, ai2jz+7*cos, 18, 3);
setTile(ai2jx+7*sin+3, ai2jy+12, ai2jz+7*cos+1, 18, 3);
setTile(ai2jx+7*sin+3, ai2jy+12, ai2jz+7*cos+2, 18, 3);
setTile(ai2jx+7*sin+3, ai2jy+12, ai2jz+7*cos+3, 18, 3);
setTile(ai2jx+7*sin+4, ai2jy+11, ai2jz+7*cos-3, 18, 3);
setTile(ai2jx+7*sin+4, ai2jy+11, ai2jz+7*cos-2, 18, 3);
setTile(ai2jx+7*sin+4, ai2jy+11, ai2jz+7*cos-1, 18, 3);
setTile(ai2jx+7*sin+5, ai2jy+11, ai2jz+7*cos, 18, 3);
}
if((ai2jr==5)||(ai2jr==6)){
ai2jx = Math.floor(Entity.getX(ai2jungle2));
ai2jy = Math.floor(Entity.getY(ai2jungle2))-1;
ai2jz = Math.floor(Entity.getZ(ai2jungle2));
yaw = Math.floor(Entity.getYaw(ai2jungle2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
for(var xx=ai2jx+6*sin-2;xx<ai2jx+6*sin+3;xx++)
for(var yy=ai2jy+1;yy<ai2jy+5;yy++)
for(var zz=ai2jz+6*cos-2;zz<ai2jz+6*cos+3;zz++)
setTile(xx, yy, zz, 48);
for(var xx=ai2jx+6*sin-1;xx<ai2jx+6*sin+2;xx++)
for(var yy=ai2jy+1;yy<ai2jy+4;yy++)
for(var zz=ai2jz+6*cos-1;zz<ai2jz+6*cos+2;zz++)
setTile(xx, yy, zz, 0);
Level.spawnMob(ai2jx+6*sin, ai2jy+2.5, ai2jz+6*cos, 32, "mob/zombie.png");
Level.spawnMob(ai2jx+6*sin, ai2jy+2.5, ai2jz+6*cos, 65);
}
if(ai2jr==7){
ai2jx = Entity.getX(ai2jungle2);
ai2jy = Entity.getY(ai2jungle2)-1;
ai2jz = Entity.getZ(ai2jungle2);
for(var xx=ai2jx-9;xx<ai2jx+10;xx++)
for(var yy=ai2jy-5;yy<ai2jy+1;yy++)
for(var zz=ai2jz-9;zz<ai2jz+10;zz++)
setTile(xx, yy, zz, 0);
}
if(ai2jd==false){
ai2jt = 225;
}
}
if(ai2jt==0&&ai2jd==true){
ai2jt = -1;
}
if(ai2jd==150&&(ai2jr==3||ai2jr==4)){
setTile(ai2jx+2, ai2jy+1, ai2jz+2, 0);
setTile(ai2jx+2, ai2jy+1, ai2jz-2, 0);
setTile(ai2jx-2, ai2jy+1, ai2jz+2, 0);
setTile(ai2jx-2, ai2jy+1, ai2jz-2, 0);
}
if(ai2jr==7){
if(ai2jt==210){
for(var xx=ai2jx-11;xx<ai2jx+12;xx++){
for(var zz=ai2jz-11;zz<ai2jz+12;zz++){
setTile(xx, ai2jy, zz, 18, 3);
setTile(xx, ai2jy-1, zz, 17, 3);
setTile(xx, ai2jy-2, zz, 18, 3);
}}
Entity.setPosition(ai2jungle2, ai2jx, ai2jy+2, ai2jz);
}
if(ai2jt==1){
for(var xx=ai2jx-9;xx<ai2jx+10;xx++)
for(var zz=ai2jz-9;zz<ai2jz+10;zz++)
setTile(xx, ai2jy, zz, 2);
}
if(ai2jt==31){
for(var xx=ai2jx-9;xx<ai2jx+10;xx++)
for(var zz=ai2jz-9;zz<ai2jz+10;zz++)
setTile(xx, ai2jy-1, zz, 3);
}
if(ai2jt==61){
for(var xx=ai2jx-9;xx<ai2jx+10;xx++)
for(var zz=ai2jz-9;zz<ai2jz+10;zz++)
setTile(xx, ai2jy-2, zz, 3);
}
if(ai2jt==91){
for(var xx=ai2jx-9;xx<ai2jx+10;xx++)
for(var zz=ai2jz-9;zz<ai2jz+10;zz++)
setTile(xx, ai2jy-3, zz, 3);
}
if(ai2jt==121){
for(var xx=ai2jx-9;xx<ai2jx+10;xx++)
for(var zz=ai2jz-9;zz<ai2jz+10;zz++)
setTile(xx, ai2jy-4, zz, 3);
}
if(ai2jt==150){
for(var xx=ai2jx-9;xx<ai2jx+10;xx++)
for(var zz=ai2jz-9;zz<ai2jz+10;zz++)
setTile(xx, ai2jy-5, zz, 3);
}
if(ai2jt==180){
for(var xx=ai2jx-9;xx<ai2jx+10;xx++)
for(var yy=ai2jy-5;yy<ai2jy+1;yy++)
for(var zz=ai2jz-9;zz<ai2jz+10;zz++)
setTile(xx, yy, zz, 0);
}
}
//raid ai
if(ai2rt>0){
ai2rt--;
}
if(ai2rt==0){
ai2rr = Math.floor(Math.random()*9);
if(ai2rr<3){
ai2rx = Math.floor(Entity.getX(ai2raid2));
ai2ry = Math.floor(Entity.getY(ai2raid2))-1;
ai2rz = Math.floor(Entity.getZ(ai2raid2));
yaw = Math.floor(Entity.getYaw(ai2raid2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
explode(ai2rx+7*sin, ai2ry+1, 7+gun*cos, 2.5);
}
if((ai2rr==3)||(ai2rr==4)){
Entity.setHealth(ai2raid4, Entity.getHealth(ai2raid4)-5);
}
if((ai2rr==5)||(ai2rr==6)){
Entity.setFireTicks(ai2raid4, 10);
setTile(Entity.getX(ai2raid4), Entity.getY(ai2raid4)-1, Entity.getZ(ai2raid4), 30);
}
if(ai2rr==7){
explode(Entity.getX(ai2raid4), Entity.getY(ai2raid4)+0.4, Entity.getZ(ai2raid4), 1);
ai2rx = Math.floor(Entity.getX(ai2raid2));
ai2ry = Math.floor(Entity.getY(ai2raid2))-1;
ai2rz = Math.floor(Entity.getZ(ai2raid2));
yaw = Math.floor(Entity.getYaw(ai2raid2));
sin = -Math.sin(yaw/180*Math.PI);
cos = Math.cos(yaw/180*Math.PI);
teleport(ai2raid4, ai2rx+3*sin, ai2ry+3, ai2rz+3*cos);
}
if(ai2rd==false){
ai2rt = 225;
}
}
if(ai2rt==0&&ai2rd==true){
ai2rt = -1;
}



//deathHook
if(Entity.getHealth(ai2fire2)<=0&&ai2fd2==true){
ESP.sbm("Fire User(aip) was died");
ai2fd = true;
ai2fd2 = false;
}
if(Entity.getHealth(ai2water2)<=0&&ai2wd2==true){
ESP.sbm("Water Controller(aip) was died");
ai2wd = true;
ai2wd2 = false;
}
if(Entity.getHealth(ai2creeper2)<=0&&ai2cd2==true){
ESP.sbm("I am Creeper(aip) was died");
ai2cd = true;
ai2cd2 = false;
}
if(Entity.getHealth(ai2mage2)<=0&&ai2md2==true){
ESP.sbm("The Mage(aip) was died");
ai2md = true;
ai2md2 = false;
}
if(Entity.getHealth(ai2jungle2)<=0&&ai2jd2==true){
ESP.sbm("Jungle Former(aip) was died");
ai2jd = true;
ai2jd2 = false;
}
if(Entity.getHealth(ai2raid2)<=0&&ai2rd2==true){
ESP.sbm("Remote Raider(aip) was died");
ai2rd = true;
ai2rd2 = false;
}


if(fixt>0){
fixt--;
}
if(fixt==1){
for(var xx=221;xx<256;xx++){
for(var zz=108;zz<148;zz++){
if(getTile(xx, 19, zz)==0){
setTile(xx, 19, zz, 2);
}
setTile(xx, 34, zz, 89);
}}
ESP.toast("능력 연습장 수복 완료");
}
if(fixt==31){
for(var xx=221;xx<256;xx++)
for(var zz=108;zz<148;zz++)
setTile(xx, 18, zz, 3);
}
if(fixt==61){
for(var xx=221;xx<256;xx++)
for(var zz=108;zz<148;zz++)
setTile(xx, 17, zz, 3);
}
if(fixt==91){
for(var xx=221;xx<256;xx++)
for(var zz=108;zz<148;zz++)
setTile(xx, 16, zz, 3);
}
if(fixt==121){
for(var xx=221;xx<256;xx++)
for(var zz=108;zz<148;zz++)
setTile(xx, 15, zz, 3);
}
if(fixt==151){
for(var xx=221;xx<256;xx++)
for(var zz=108;zz<148;zz++)
setTile(xx, 14, zz, 3);
}
if(fixt==181){
for(var xx=221;xx<256;xx++)
for(var zz=108;zz<148;zz++)
setTile(xx, 13, zz, 3);
}
if(fixt==211){
for(var xx=221;xx<258;xx++)
for(var zz=108;zz<148;zz++)
setTile(xx, 12, zz, 3);
}
if(fixt==241){
for(var xx=221;xx<256;xx++)
for(var zz=108;zz<148;zz++)
setTile(xx, 11, zz, 3);
}
if(fixt==271){
for(var xx=221;xx<256;xx++)
for(var zz=108;zz<148;zz++)
setTile(xx, 10, zz, 3);
}


//show cooltime
if(adt1>0){
adt1--;
}
if(adt2>0){
adt2--;
}
if(adt3>0){
adt3--;
}
if(adt4>0){
adt4--;
}
if(adsc){
if((ad==water[0]&&water2)||(ad==air[0]&&air2)||(ad==bind[0]&&bind2)||(ad==heal[0]&&heal2)){
if(mcpev3) ModPE.showTipMessage("\n\n\n         기본기 "+Math.floor((adt1+14)/30)+"초, 스킬1 "+Math.floor((adt2+14)/30)+"초, 스킬2 "+Math.floor((adt3+14)/30)+"초");
else ModPE.showTipMessage("\n\n\n                                                          기본기 "+Math.floor((adt1+14)/30)+"초, 스킬1 "+Math.floor((adt2+14)/30)+"초, 스킬2 "+Math.floor((adt3+14)/30)+"초");
}
else{
if(mcpev3) ModPE.showTipMessage("\n\n\n     기본기 "+Math.floor((adt1+14)/15)+"초, 스킬1 "+Math.floor((adt2+14)/15)+"초, 스킬2 "+Math.floor((adt3+14)/15)+"초, 궁극기 "+Math.floor((adt4+14)/15)+"초");
else ModPE.showTipMessage("\n\n\n                                                          기본기 "+Math.floor((adt1+14)/15)+"초, 스킬1 "+Math.floor((adt2+14)/15)+"초, 스킬2 "+Math.floor((adt3+14)/15)+"초, 궁극기 "+Math.floor((adt4+14)/15)+"초");
}
}


if(bgmOnoff){
if(bgmTime>0){
bgmTime--;
}
if(bgmTime==0){
bgmPlayer(true);
}
if(dn2!=checkArea()){
bgmPlayer(true);
}
if((checkArea()==6||checkArea()==1)&&dn!=nightCheck()){
bgmPlayer(true);
}
}

if(slt2){
makeStreetlights(false);
slt2 = false;
}
if(dn!=nightCheck()&&streetLight==true){
makeStreetlights(nightCheck());
slt = 451;
}
if(nightCheck()==false&&slt>0){
slt = 0;
}
dn = nightCheck();
dn2 = checkArea();

for(var n in banList){
teleport(banList[n], Entity.getX(ad), -5, Entity.getZ(ad));
}


//S.E.
if(se.tf){
if(se.d1>0){
se.d1--;
}
if(se.d2>0){
se.d2--;
}
if(se.d3>0){
se.d3--;
}
if(se.d4>0){
se.d4--;
}
if(se.b1>0){
se.b1--;
}
if(se.b2>0){
se.b2--;
}
if(se.b3>0){
se.b3--;
}
if(se.b4>0){
se.b4--;
}
if(se.g1>0){
se.g1--;
}
if(se.g2>0){
se.g2--;
}
if(se.g3>0){
se.g3--;
}
if(se.g4>0){
se.g4--;
}
if(se.l1>0){
se.l1--;
}
if(se.l2>0){
se.l2--;
}
if(se.l3>0){
se.l3--;
}
if(se.l4>0){
se.l4--;
}
if(se.a1>0){
se.a1--;
}
if(se.a2>0){
se.a2--;
}
if(se.a3>0){
se.a3--;
}
if(se.a4>0){
se.a4--;
}
if(se.h1>0){
se.h1--;
}
if(se.h2>0){
se.h2--;
}
if(se.h3>0){
se.h3--;
}
if(se.h4>0){
se.h4--;
}
if(se.ga1>0){
se.ga1--;
}
if(se.ga2>0){
se.ga2--;
}
if(se.ga3>0){
se.ga3--;
}
if(se.ga4>0){
se.ga4--;
}
if(se.r1>0){
se.r1--;
}
if(se.r2>0){
se.r2--;
}
if(se.r3>0){
se.r3--;
}
if(se.r4>0){
se.r4--;
}
if(se.i1>0){
se.i1--;
}
if(se.i2>0){
se.i2--;
}
if(se.i3>0){
se.i3--;
}
if(se.i4>0){
se.i4--;
}
if(se.o1>0){
se.o1--;
}
if(se.o2>0){
se.o2--;
}
if(se.o3>0){
se.o3--;
}
if(se.o4>0){
se.o4--;
}
if(se.bl1>0){
se.bl1--;
}
if(se.bl2>0){
se.bl2--;
}
if(se.bl3>0){
se.bl3--;
}
if(se.bl4>0){
se.bl4--;
}
if(se.c1>0){
se.c1--;
}
if(se.c2>0){
se.c2--;
}
if(se.c3>0){
se.c3--;
}
if(se.c4>0){
se.c4--;
}
if(se.do1>0){
se.do1--;
}
if(se.do2>0){
se.do2--;
}
if(se.do3>0){
se.do3--;
}
if(se.do4>0){
se.do4--;
}
if(se.ht1>0){
se.ht1--;
}
if(se.ht2>0){
se.ht2--;
}
if(se.ht3>0){
se.ht3--;
}
if(se.ht4>0){
se.ht4--;
}
if(se.e1>0){
se.e1--;
}
if(se.e2>0){
se.e2--;
}
if(se.e3>0){
se.e3--;
}
if(se.e4>0){
se.e4--;
}

if(se.d1==145){
ESP.antiLack(3);
for(var gun=3;gun<20;gun++){
setTile(px+gun*sin, py+2, pz+gun*cos, 0);
explode(px+gun*sin, py+2, pz+gun*cos, 1.8);
}
}
if(se.d2==295){
for(var gun=3;gun<14;gun++){
setTile(px+gun*sin, py+2, pz+gun*cos, 0);
setTile(px-gun*sin, py+2, pz-gun*cos, 0);
explode(px+gun*sin, py+2, pz+gun*cos, 1.8);
explode(px-gun*sin, py+2, pz-gun*cos, 1.8);
}
}
if(se.r1==145){
ESP.antiLack(3);
setTile(px+4*sin, py+2, pz+4*cos, 0);
explode(px+4*sin, py+2.7, pz+4*cos, 3);
}
if(se.r3==295){
ESP.antiLack(3);
for(var gun=3;gun<25;gun++){
setTile(px+gun*sin, py+2, pz+gun*cos, 0);
explode(px+gun*sin, py+2, pz+gun*cos, 1.8);
}
}
if(se.r4==1770){
for(var yy=se.ry+1;yy<se.ry+11;yy++){
setTile(se.rx+7, yy, se.rz+7, 0);
setTile(se.rx+7, yy, se.rz, 0);
setTile(se.rx+7, yy, se.rz-7, 0);
setTile(se.rx, yy, se.rz+7, 0);
setTile(se.rx, yy, se.rz-7, 0);
setTile(se.rx-7, yy, se.rz+7, 0);
setTile(se.rx-7, yy, se.rz, 0);
setTile(se.rx-7, yy, se.rz-7, 0);
}
}
if(se.i2==285){
Entity.setHealth(se.i2a, Entity.getHealth(se.i2a)-6);
}
if(se.i4>1350){
se.ix = Entity.getX(se.ima);
se.iy = Entity.getY(se.ima)-2;
se.iz = Entity.getZ(se.ima);
for(var xx=se.ix-1;xx<se.ix+2;xx++)
for(var yy=se.iy+1;yy<se.iy+4;yy++)
for(var zz=se.iz-1;zz<se.iz+2;zz++)
if(getTile(xx, yy, zz)!=7){
setTile(xx, yy, zz, 0);
}
ESP.heal(se.ima);
}
if(se.e4==900){
if(nightCheck())
Level.setTime(100);
for(var xx=se.ex-18;xx<se.ex+19;xx++){
setTile(xx, se.ey+2, se.ez-19, 95);
setTile(xx, se.ey+2, se.ez+19, 95);
}
for(var zz=se.ez-18;zz<se.ez+19;zz++){
setTile(se.ex+19, se.ey+2, zz, 95);
setTile(se.ex-19, se.ey+2, zz, 95);
}
for(var xx=se.ex-18;xx<se.ex+19;xx++){
for(var yy=se.ey-3;yy<se.ey+9;yy++){
for(var zz=se.ez-18;zz<se.ez+19;zz++){
if(getTile(xx, yy, zz)==3){
setTile(xx, yy, zz, 2);
}
if(getTile(xx, yy, zz)==41){
setTile(xx, yy, zz, 3);
}
if(getTile(xx, yy, zz)==22){
setTile(xx, yy, zz, 9);
}
}}}
}



if(auto){
if(se.d4==1350){
Level.setTime(100);
for(var xx=se.dx-11;xx<se.dx+12;xx++)
for(var zz=se.dz-11;zz<se.dz+12;zz++)
setTile(xx, se.dy, zz, 2);
}
if(se.b4==900){
for(var xx=se.bx-17;xx<se.bx+18;xx++)
for(var zz=se.bz-17;zz<se.bz+18;zz++)
setTile(xx, se.by, zz, 2);
}
if(se.b4==930){
for(var xx=se.bx-17;xx<se.bx+18;xx++)
for(var zz=se.bz-17;zz<se.bz+18;zz++)
setTile(xx, se.by-1, zz, 3);
}
if(se.b4==960){
for(var xx=se.bx-17;xx<se.bx+18;xx++)
for(var zz=se.bz-17;zz<se.bz+18;zz++)
setTile(xx, se.by-2, zz, 3);
}
if(se.b4==990){
for(var xx=se.bx-17;xx<se.bx+18;xx++)
for(var zz=se.bz-17;zz<se.bz+18;zz++)
setTile(xx, se.by-3, zz, 3);
}
if(se.b4==1020){
for(var xx=se.bx-17;xx<se.bx+18;xx++)
for(var zz=se.bz-17;zz<se.bz+18;zz++)
setTile(xx, se.by-4, zz, 3);
}
if(se.b4==1050){
for(var xx=se.bx-17;xx<se.bx+18;xx++)
for(var zz=se.bz-17;zz<se.bz+18;zz++)
setTile(xx, se.by-5, zz, 3);
}
if(se.b4==1080){
for(var xx=se.bx-17;xx<se.bx+18;xx++)
for(var zz=se.bz-17;zz<se.bz+18;zz++)
setTile(xx, se.by-6, zz, 3);
}
if(se.b4==1110){
for(var xx=se.bx-17;xx<se.bx+18;xx++)
for(var zz=se.bz-17;zz<se.bz+18;zz++)
if(getTile(xx, se.by-7, zz)==0){
setTile(xx, se.by-7, zz, 3);
}
}
if(se.b4==1140){
for(var xx=se.bx-17;xx<se.bx+18;xx++)
for(var zz=se.bz-17;zz<se.bz+18;zz++)
if(getTile(xx, se.by-8, zz)==0){
setTile(xx, se.by-8, zz, 3);
}
}
if(se.b4==1170){
for(var xx=se.bx-17;xx<se.bx+18;xx++)
for(var zz=se.bz-17;zz<se.bz+18;zz++)
if(getTile(xx, se.by-9, zz)==0){
setTile(xx, se.by-9, zz, 3);
}
}
if(se.b4==1200){
for(var xx=se.bx-17;xx<se.bx+18;xx++)
for(var zz=se.bz-17;zz<se.bz+18;zz++)
if(getTile(xx, se.by-10, zz)==0){
setTile(xx, se.by-10, zz, 3);
}
}


}


}

//H.E.
if(he.e1>0){
he.e1--;
}
if(he.e2>0){
he.e2--;
}
if(he.e3>0){
he.e3--;
}
if(he.e4>0){
he.e4--;
}
if(he.s1>0){
he.s1--;
}
if(he.s2>0){
he.s2--;
}
if(he.s3>0){
he.s3--;
}
if(he.s4>0){
he.s4--;
}
if(he.t1>0){
he.t1--;
}
if(he.t2>0){
he.t2--;
}
if(he.t3>0){
he.t3--;
}
if(he.t4>0){
he.t4--;
}
if(he.b1>0){
he.b1--;
}
if(he.b2>0){
he.b2--;
}
if(he.b3>0){
he.b3--;
}
if(he.b4>0){
he.b4--;
}
if(he.x1>0){
he.x1--;
}
if(he.x2>0){
he.x2--;
}
if(he.x3>0){
he.x3--;
}
if(he.x4>0){
he.x4--;
}

if(he.e1==145){
for(var gun=2;gun<5;gun++)
setTile(px+gun*sin, py+2, pz+gun*cos, 0);
ESP.antiLack(3);
explode(px+4*sin, py+2.5, pz+4*cos, 2);
}
if(he.e2==295){
ESP.antiLack(3);
for(var gun=3;gun<25;gun++)
explode(px+gun*sin, py+2, pz+gun*cos, 1.7);
}
if(he.e3b>0){
he.e3b--;
}
if(he.e3b==1){
setTile(he.e3x, he.e3y+2, he.e3z, 0);
ESP.antiLack(3);
explode(he.e3x, he.e3y+2, he.e3z, 3);
}
if(he.e3==1){
he.e3a = false;
}
if(he.e4==1795){
ESP.antiLack(3);
for(var n=3;n<17;n++){
explode(he.ex+n, he.ey+2, he.ez+n, 2);
explode(he.ex+n, he.ey+2, he.ez, 2);
explode(he.ex+n, he.ey+2, he.ez-n, 2);
explode(he.ex, he.ey+2, he.ez+n, 2);
explode(he.ex, he.ey+2, he.ez-n, 2);
explode(he.ex-n, he.ey+2, he.ez+n, 2);
explode(he.ex-n, he.ey+2, he.ez, 2);
explode(he.ex-n, he.ey+2, he.ez-n, 2);
}
}
if(he.s4==1770){
for each(var e in he.s4a)
Entity.setHealth(e, Entity.getHealth(e)-10);
}
if(he.s4==1740){
for each(var e in he.s4a)
Entity.setHealth(e, 20);
}
if(he.s4==1680){
for each(var e in he.s4a)
Entity.setHealth(e, Entity.getHealth(e)-5);
}
if(he.s4==1340){
for each(var e in he.s4a)
Entity.setHealth(e, Entity.getHealth(e)-10);
}
if(he.s4==900){
he.s4a = new Array();
}
if(he.t4==1797){
ESP.antiLack(3);
explode(he.tx+7, he.ty+1, he.tz+7, 3);
explode(he.tx-7, he.ty+1, he.tz-7, 3);
}
if(he.t4==1794){
ESP.antiLack(3);
explode(he.tx, he.ty+1, he.tz+7, 3);
explode(he.tx, he.ty+1, he.tz-7, 3);
}
if(he.t4==1791){
ESP.antiLack(3);
explode(he.tx-7, he.ty+1, he.tz+7, 3);
explode(he.tx+7, he.ty+1, he.tz-7, 3);
}
if(he.t4==1788){
ESP.antiLack(3);
explode(he.tx+7, he.ty+1, he.tz, 3);
explode(he.tx-7, he.ty+1, he.tz, 3);
}
if(he.t4==1785){
ESP.antiLack(3);
explode(he.tx+7, he.ty+1, he.tz+7, 3);
explode(he.tx-7, he.ty+1, he.tz-7, 3);
}
if(he.t4==1782){
ESP.antiLack(3);
explode(he.tx, he.ty+1, he.tz+7, 3);
explode(he.tx, he.ty+1, he.tz-7, 3);
}
if(he.t4==1779){
ESP.antiLack(3);
explode(he.tx-7, he.ty+1, he.tz+7, 3);
explode(he.tx+7, he.ty+1, he.tz-7, 3);
}
if(he.b3==270||he.b3==240||he.b3==210||he.b3==180){
Entity.setHealth(he.b3a, Entity.getHealth(he.b3a)-2);
}
if(he.x4==1770){
setTile(he.xx, he.xy+1, he.xz, 51);
}
if(he.x4==1350){
if(auto){
setTiles(he.xx-2, he.xx+2, he.xy+1, he.xy+4, he.xz-2, he.xz+2, 0);
setTiles(he.xx-2, he.xx+2, he.xy, he.xy, he.xz-2, he.xz+2, 2);
}
else{
setTiles(he.xx-2, he.xx+2, he.xy, he.xy+4, he.xz-2, he.xz+2, 0);
}
}


if(auto){
if(he.e4==900){
for(var xx=he.ex-17;xx<he.ex+18;xx++)
for(var zz=he.ez-17;zz<he.ez+18;zz++)
setTile(xx, he.ey, zz, 2);
}
if(he.e4==930){
for(var xx=he.ex-17;xx<he.ex+18;xx++)
for(var zz=he.ez-17;zz<he.ez+18;zz++)
setTile(xx, he.ey-1, zz, 3);
}
if(he.e4==960){
for(var xx=he.ex-17;xx<he.ex+18;xx++)
for(var zz=he.ez-17;zz<he.ez+18;zz++)
setTile(xx, he.ey-2, zz, 3);
}
if(he.e4==990){
for(var xx=he.ex-17;xx<he.ex+18;xx++)
for(var zz=he.ez-17;zz<he.ez+18;zz++)
setTile(xx, he.ey-3, zz, 3);
}
if(he.e4==1020){
for(var xx=he.ex-17;xx<he.ex+18;xx++)
for(var zz=he.ez-17;zz<he.ez+18;zz++)
setTile(xx, he.ey-4, zz, 3);
}
if(he.e4==1050){
for(var xx=he.ex-17;xx<he.ex+18;xx++)
for(var zz=he.ez-17;zz<he.ez+18;zz++)
setTile(xx, he.ey-5, zz, 3);
}
if(he.t4==900){
for(var xx=he.tx-14;xx<he.tx+15;xx++)
for(var zz=he.tz-14;zz<he.tz+15;zz++)
setTile(xx, he.ty, zz, 2);
}
if(he.t4==930){
for(var xx=he.tx-14;xx<he.tx+15;xx++)
for(var zz=he.tz-14;zz<he.tz+15;zz++)
setTile(xx, he.ty-1, zz, 3);
}
if(he.t4==960){
for(var xx=he.tx-14;xx<he.tx+15;xx++)
for(var zz=he.tz-14;zz<he.tz+15;zz++)
setTile(xx, he.ty-2, zz, 3);
}
if(he.t4==990){
for(var xx=he.tx-13;xx<he.tx+14;xx++)
for(var zz=he.tz-13;zz<he.tz+14;zz++)
setTile(xx, he.ty-3, zz, 3);
}
if(he.t4==1020){
for(var xx=he.tx-13;xx<he.tx+14;xx++)
for(var zz=he.tz-13;zz<he.tz+14;zz++)
setTile(xx, he.ty-4, zz, 3);
}


}




if(hhhhh>0){
hhhhh--;
if(nightCheck()==false)
Level.setTime(14000);
}
if(hhhhh<0){
hhhhh++;
}
if(hhhhh==1){
theyAreComing();
}
if(hhhhh==151){
for(var n=0;n<5;n++)
Entity.remove(cree[n]);
}
if(hhhhh==181){
ctx.runOnUiThread(new java.lang.Runnable({
run : function(){
try{
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
dialog.setTitle("???'s Message");
dialog.setMessage("I will call you. Will you accept?");
dialog.setNegativeButton("Yes", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
anti3 = 30;
hhhhh = -150;
bgmPlayer(false);
playWLMusic();
}
}));
dialog.setPositiveButton("No", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
wl.m("Then, good bye.");
Entity.setHealth(ad, 0);
hhhhh = -300;
}
}));
dialog.show();
}
catch(e){
ESP.sbm(e+", "+e.lineNumber);
}
}}));
}
if(hhhhh==255){
wl.m("Do you know who am I?");
}
if(hhhhh==-270){
ModPE.leaveGame();
hhhhh = 90;
}
if(hhhhh==-135){
makeHiddenArea();
Entity.setPosition(ad, 100, 12, 150);
makeLady();
}
if(hhhhh==-90){
wl.t = 1350;
hhhhh = 0;
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)&&ad!=e){
wl.pn.push(" "+Player.getName(e));
Entity.remove(e);
}
}
if(wl.pn[0]!=null)
wl.m("Hello,"+Player.getName(ad)+". Good-bye,"+wl.pn+".");
else
wl.m("Hello,"+Player.getName(ad)+".");
auto = false;
}
if(wl.t>0){
wl.t--;
}
if((wl.t%90)==1&&wl.t>10){
ladyAttack();
}
if((wl.t%90)==10){
if(checkPlayerIsThere(ad)==false){
teleport(ad, 110, 12, 160);
}
}
if((wl.t%300)==10){
Level.spawnMob(120, 13, 150, 32);
Level.spawnMob(120, 13, 150, 32);
Level.spawnMob(100, 13, 170, 35);
Level.spawnMob(100, 13, 170, 35);
Level.spawnMob(120, 13, 170, 34);
Level.spawnMob(120, 13, 170, 34);
}
if(wl.t==1){
redScreen();
wl.t = -76;
}
if(wl.t<0){
wl.t++;
}
if(wl.t==-6){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var nm = ctx.getSystemService(android.content.Context.NOTIFICATION_SERVICE);
var noti = new android.app.Notification.Builder(ctx);
noti.setSmallIcon(android.R.drawable.ic_menu_info_details);
noti.setContentTitle("???' Message");
noti.setContentText("Good bye, "+Player.getName(Player.getEntity())+".");
noti.setContentInfo("초능력자 대전 "+version);
noti.setOngoing(false);
nm.notify(1, noti.getNotification());
}
catch(e){
print(e+", "+e.lineNumber);
}
}
}));
}
if(wl.t==-1){
makeCrash();
}
if(wl.o>0){
wl.o--;
}


//death count
for(var n=0;n<dc.p.length;n++){
if(Entity.getHealth(dc.p[n])<=0&&dc.t[n]==true&&Ban.isBanned(dc.p[n])==false&&se4b!=dc.p[n]){
dc.c[n]++;
dc.t[n] = false;
}
else if(Entity.getHealth(dc.p[n])>0){
dc.t[n] = true;
}
}


if(slt>0){
slt--;
}
if(slt==1){
makeStreetlights(true);
slt = 451;
}

for(var n in p.c){
if(p.c[n]>0){
p.c[n]--;
}
if(p.c[n]==1){
ESP.toast(n+"번 파티의 파티스킬 쿨타임이 다 되었습니다.");
}

}


if(getTile(Entity.getX(ad), Entity.getY(ad)-2, Entity.getZ(ad))==70){
Entity.setVelX(ad, 0.00001);
Entity.setVelX(ad, -0.00001);
Entity.setVelZ(ad, 0.00001);
Entity.setVelZ(ad, -0.00001);
}

if(mp3==true){
if(Math.round(Entity.getX(ad))==-1029&&Math.floor(Entity.getY(ad))==9&&Math.round(Entity.getZ(ad))==993){
Entity.setPosition(ad, 116, 52, 25);
ESP.toast("Teleported to Over World.");
}
if(Math.round(Entity.getX(ad)-0.5)==-1015&&Math.floor(Entity.getY(ad))==20&&Math.round(Entity.getZ(ad)-0.5)==-1007){
Entity.setPosition(ad, 116, 52, 25);
ESP.toast("Teleported to Over World.");
}

pa.sin = Math.sin(pa.n*Math.PI/27);
pa.cos = Math.cos(pa.n*Math.PI/27);
Level.addParticle(ParticleType.flame, -999.5+pa.sin, 46.5, 3008.5+pa.cos, 0, 0, 0, 3);
Level.addParticle(ParticleType.flame, -996.5+pa.sin, 46.5, 3008.5+pa.cos, 0, 0, 0, 3);
Level.addParticle(ParticleType.flame, -996.5+pa.sin, 46.5, 3005.5+pa.cos, 0, 0, 0, 3);
Level.addParticle(ParticleType.flame, -999.5+pa.sin, 46.5, 3005.5+pa.cos, 0, 0, 0, 3);
pa.n++;
if(pa.n>360){
pa.n = 0;
}


}


if(dt.l){
if(dt.t>0){
dt.t--;
}
Entity.setHealth(dt.p, 3000);
Entity.setFireTicks(dt.p, 0);
if(dt.t==152){
if(dt.ek==1) dtm("Why did you call me, "+Player.getName(ad)+".");
if(dt.ek==2) dtm("어찌하여 나를 불렀는가, "+Player.getName(ad)+".");
}
if(dt.f==false){
if(dt.t==1){
dt.r = ESP.random(5);
if(dt.ek==1){
if(dt.r==0) dtm("Hello?");
if(dt.r==1) dtm("I am the ESI, Dark Tornado.");
if(dt.r==2) dtm("Hey, "+Player.getName(ad)+", I'd like to know why you called me.");
if(dt.r==3){
dtm("Humm...");
Entity.setVelY(dt.p, 1.5);
}
}
else if(dt.ek==2){
if(dt.r==0) dtm("안녕하신가...");
if(dt.r==1) dtm("내가 ESI인 Dark Tornado.일세.");
if(dt.r==2) dtm("이보시게, "+Player.getName(ad)+", 그대는 왜 나를 불렀는가.");
if(dt.r==3){
dtm("음...");
Entity.setVelY(dt.p, 1.5);
}
}
dt.t = 151;
}
}
if(dt.f==true&&dt.t==1){
darkTornadoAssault();
dt.t = 121;
}
dt.sin = Math.sin(dt.n*Math.PI/27);
dt.cos = Math.cos(dt.n*Math.PI/27);
Level.addParticle(ParticleType.flame, Entity.getX(dt.p)+dt.sin, Entity.getY(dt.p)+1, Entity.getZ(dt.p)+dt.cos, 0, 0, 0, 3);
dt.n++;
if(dt.n>360){
dt.n = 0;
}
if(dt.f){
Level.addParticle(ParticleType.lava, Entity.getX(dt.p), Entity.getY(dt.p)+2.5, Entity.getZ(dt.p), 0, 0, 0, 2);
}

}
if(Entity.getHealth(dt.p)<=0){
dt.l = false;
dt.f = false;
dt.t = 0;
}

if(ra.t>0){
ra.t--;
}
if(ra.t==1){
for(var pp in ra.p)
Entity.setHealth(pp, 20);
}
for(var n in ra.p){
var pp = ra.p[n];
if(mp3&&!townCheck(Entity.getX(pp), Entity.getZ(pp))){
Entity.setHealth(pp, 20);
ra.p.splice(n, 1);
}
}
ra.x = Math.round(Entity.getX(ad)-0.5);
ra.y = Entity.getY(ad)-2;
ra.z = Math.round(Entity.getZ(ad)-0.5);
if(getTile(ra.x, ra.y-1, ra.z)==63&&Level.getSignText(ra.x, ra.y-1, ra.z, 0)=="Type"&&ra.onoff==false){
ra.t2 = Entity.getHealth(ad)-21;
ESP.sbm(ra.e[ra.t2]);
ra.onoff = true;
}
else if(getTile(ra.x, ra.y-1, ra.z)!=63&&Level.getSignText(ra.x, ra.y-1, ra.z, 0)!="Type"&&ra.onoff==true){
ra.onoff = false;
}
if(ra.t3>0){
ra.t3--;
}

if(tttt[0]!=null){
for(var n=0;n<tttt.length;n++){
if(tttt[n].tt>0){
tttt[n].tt--;
}
if(tttt[n].tt==0){
Entity.remove(tttt[n].tp);
tttt.splice(n, 1);
}
}
}


}


//Commands
function procCmd(cmd){
var Data = cmd.split(" ");
//time set
if(cmd=="day"){
Level.setTime(0);
ESP.sbm("Time Day");
}
else if(cmd=="night"){
Level.setTime(14000);
ESP.sbm("Time Night");
}

//admin+
if(cmd=="fill"){
admin = 0;
ESP.sbm("Filling Mode");
}
if(cmd=="delete"){
admin = 1;
ESP.sbm("Deleting Mode");
}
if(cmd=="both"){
admin = 2;
ESP.sbm("Filling&Deleting Mode");
}
if(cmd=="gun"){
admin = 3;
ESP.sbm("Rail Gun Mode");
}
if(cmd=="auto"){
fill = true;
ESP.sbm("Auto Filling&Deleting Mode");
}
if(cmd=="auto off"){
fill = false;
ESP.sbm("Auto Filling&Deleting Mode off");
}
if(cmd=="move1"){
admin2 = 0;
ESP.sbm("Teleportion mode");
}
if(cmd=="move1+"){
admin2 = 4;
ESP.sbm("Teleportion mode plus");
}
if(cmd=="move2"){
admin2 = 1;
ESP.sbm("Faster mode");
}
if(cmd=="wide"){
admin = 4;
ESP.sbm("Wide Filling&Deleting Mode");
}
if(cmd=="heal"){
admin = 5;
ESP.sbm("Healing Mode");
}
if(Data[0]=="kill"&&Data[1]==null){
admin = 6;
ESP.sbm("Killing Mode");
}
if(cmd=="send"){
admin = 8;
ESP.sbm("Sending Mode");
}

if(Data[0]=="kill"&&Data[1]!=null){
var n = espCode.indexOf(Data[1]);
if(n!=-1){
ESP.kill(eval(espCodes[n]));
ESP.sbm(ra.n[n]+" was killed");
}
else if(Data[1]=="dtj"){
ESP.kill(dtj);
ESP.sbm("Dark Tornado jr. was killed");
}
else if(Data[1]=="fe"){
ESP.kill(fe);
ESP.sbm("Fire Expert was killed");
}
else{
if(Data[5]!=null){
killPlayer(Data[1]+" "+Data[2]+" "+Data[3]+" "+Data[4]+" "+Data[5]);
}
else if(Data[4]!=null){
killPlayer(Data[1]+" "+Data[2]+" "+Data[3]+" "+Data[4]);
}
else if(Data[3]!=null){
killPlayer(Data[1]+" "+Data[2]+" "+Data[3]);
}
else if(Data[2]!=null){
killPlayer(Data[1]+" "+Data[2]);
}
else{
killPlayer(Data[1]);
}
}

}

if(Data[0]=="send"&&Data[1]!=null){
var n = espCode.indexOf(Data[1]);
if(n!=-1){
ESP.send(eval(espCodes[n]));
ESP.sbm(ra.n[n]+" was sent");
}
else if(Data[1]=="dtj"){
ESP.send(dtj);
ESP.sbm("Dark Tornado jr. was sent");
}
else if(Data[1]=="fe"){
ESP.send(fe);
ESP.sbm("Fire Expert was sent");
}
else{
if(Data[5]!=null){
ESP.sendHuman(Data[1]+" "+Data[2]+" "+Data[3]+" "+Data[4]+" "+Data[5]);
}
else if(Data[4]!=null){
ESP.sendHuman(Data[1]+" "+Data[2]+" "+Data[3]+" "+Data[4]);
}
else if(Data[3]!=null){
ESP.sendHuman(Data[1]+" "+Data[2]+" "+Data[3]);
}
else if(Data[2]!=null){
ESP.sendHuman(Data[1]+" "+Data[2]);
}
else{
ESP.sendHuman(Data[1]);
}
}

}

if(Data[0]=="heal"&&Data[1]!=null){
if(Data[2]==null){
var n = espCode.indexOf(Data[1]);
if(n!=-1){
ESP.heal(eval(espCodes[n]));
ESP.sbm(ra.n[n]+" was healed");
}
else if(Data[1]=="dtj"){
ESP.heal(dtj);
ESP.sbm("Dark Tornado jr. was healed");
}
else if(Data[1]=="fe"){
ESP.heal(fe);
ESP.sbm("Fire Expert was healed");
}

}
else if(Data[2]!=null){
var n = espCode.indexOf(Data[1]);
if(n!=-1){
ESP.setHealth(eval(espCodes[n]), Data[2]);
ESP.sbm(ra.n[n]+"s health was set to"+Data[2]+".");
}
if(Data[1]=="dtj"){
ESP.setHealth(dtj, Data[2]);
ESP.sbm("Dark Tornado jr.'s health was set to"+Data[2]+".");
}
if(Data[1]=="fe"){
ESP.setHealth(fe, Data[2]);
ESP.sbm("Fire Expert's health was set to"+Data[2]+".");
}
}

}
if(Data[0]==".heal"){
if(Data[5]!=null){
healPlayer(Data[1]+" "+Data[2]+" "+Data[3]+" "+Data[4]+" "+Data[5]);
}
else if(Data[4]!=null){
healPlayer(Data[1]+" "+Data[2]+" "+Data[3]+" "+Data[4]);
}
else if(Data[3]!=null){
healPlayer(Data[1]+" "+Data[2]+" "+Data[3]);
}
else if(Data[2]!=null){
healPlayer(Data[1]+" "+Data[2]);
}
else{
healPlayer(Data[1]);
}
}

//remote on
if(Data[0]=="on"&&Data[2]!=0){
var n = espCode.indexOf(Data[1]);
if(n!=-1){
if(Data[1]=="mush"){
if(mcpev){
if(Data[5]!=null){
mush = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]+" "+Data[5]);
}
if(Data[4]!=null){
mush = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]);
}
if(Data[3]!=null){
mush = ESP.findHuman(Data[2]+" "+Data[3]);
}
else{
mush = ESP.findHuman(Data[2]);
}
ESP.sbm("Mushroom Grower on");
}
else{
ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
}
}
else if(Data[1]=="ender"){
if(mcpev){
if(Data[5]!=null){
ender = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]+" "+Data[5]);
}
if(Data[4]!=null){
ender = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]);
}
if(Data[3]!=null){
ender = ESP.findHuman(Data[2]+" "+Data[3]);
}
else{
ender = ESP.findHuman(Data[2]);
}
ESP.sbm("Ender Girl on");
}
else{
ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
}
}
else if(Data[1]=="taiga"){
if(mcpev){
if(Data[5]!=null){
taiga = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]+" "+Data[5]);
}
if(Data[4]!=null){
taiga = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]);
}
if(Data[3]!=null){
taiga = ESP.findHuman(Data[2]+" "+Data[3]);
}
else{
taiga = ESP.findHuman(Data[2]);
}
ESP.sbm("Taiga Appearer on");
}
else{
ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
}
}
else if(Data[1]=="swamp"){
if(mcpev){
if(Data[5]!=null){
swamp = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]+" "+Data[5]);
}
if(Data[4]!=null){
swamp = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]);
}
if(Data[3]!=null){
swamp = ESP.findHuman(Data[2]+" "+Data[3]);
}
else{
swamp = ESP.findHuman(Data[2]);
}
ESP.sbm("Swamp Generater on");
}
else{
ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
}
}
else if(Data[1]=="asum"){
if(mcpev){
if(Data[5]!=null){
asum = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]+" "+Data[5]);
}
if(Data[4]!=null){
asum = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]);
}
if(Data[3]!=null){
asum = ESP.findHuman(Data[2]+" "+Data[3]);
}
else{
asum = ESP.findHuman(Data[2]);
}
ESP.sbm("Arch Summoner on");
}
else{
ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
}
}
else if(Data[1]=="dtj"){
if(Data[5]!=null){
dtj = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]+" "+Data[5]);
}
if(Data[4]!=null){
dtj = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]);
}
if(Data[3]!=null){
dtj = ESP.findHuman(Data[2]+" "+Data[3]);
}
else{
dtj = ESP.findHuman(Data[2]);
}
ESP.sbm("Dark Tornado jr. on");
}
else if(Data[1]=="fe"){
if(Data[5]!=null){
fe = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]+" "+Data[5]);
}
if(Data[4]!=null){
fe = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]);
}
if(Data[3]!=null){
fe = ESP.findHuman(Data[2]+" "+Data[3]);
}
else{
fe = ESP.findHuman(Data[2]);
}
ESP.sbm("Fire Expert on");
}
else{
if(Data[5]!=null){
playerTarget = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]+" "+Data[5]);
}
if(Data[4]!=null){
playerTarget = ESP.findHuman(Data[2]+" "+Data[3]+" "+Data[4]);
}
if(Data[3]!=null){
playerTarget = ESP.findHuman(Data[2]+" "+Data[3]);
}
else{
playerTarget = ESP.findHuman(Data[2]);
}
SB.espOn(n);
ESP.sbm(ra.n[n]+" on");
}

}
}

if(cmd=="move3"){
admin2 = 2;
ESP.sbm("Flash Jump Mode");
}
if(cmd=="move4"){
admin2 = 3;
ESP.sbm("Super Jump Mode");
}
if(cmd=="move off"){
admin2 = 5;
ESP.sbm("Clock Moving Mode off");
}
if(cmd=="time"){
admin = 7;
ESP.sbm("Time Control Mode");
}
if(Data[0]=="tp"&&Data[3]!=null){
Entity.setPosition(Player.getEntity(), Data[1], Data[2], Data[3]);
ESP.sbm("Teleported to "+Data[1]+", "+Data[2]+", "+Data[3]);
}
if(cmd=="hideout"){
if(ho==false){
Entity.setPosition(ad,18,13,19);
ESP.sbm("Teleported to Hideout");
}
else if(ho==true){
teleport(Player.getEntity(),18,13,19);
ESP.sbm("Someone Teleported to Hideout");
}
}
if(cmd=="house"){
if(mp==false){
Entity.setPosition(ad,127,53,23);
}
if(mp==true){
Entity.setPosition(ad,6,53.5,23);
}
ESP.sbm("Teleported to Admin's House");
}
if(cmd=="release"){
dtl = true;
ESP.sbm("Dark Tornado jr. Limiter Release");
dtla = 4500;
}
if(cmd=="operate"){
dtl = false;
ESP.sbm("Dark Tornado jr. Limiter Operate");
}
if(cmd=="ho open"){
ho = true;
ESP.sbm("Hideout is opened");
}
if(cmd=="ho close"){
ho = false;
ESP.sbm("Hideout is opened");
}
if(cmd=="return"){
if(mp3==true){
if(mp==false){
Entity.setPosition(ad, 116, 52, 25);
}
else if(mp==true){
Entity.setPosition(ad, 24, 52, 23);
}
}
else if(mp3==false){
ESP.toast("전용맵이 아닙니다.");
}
}

//off
if(Data[1]=="off"){
var n = espCode.indexOf(Data[0]);
if(n!=-1){
SB.espOff(n);
ESP.sbm(ra.n[n]+" off");
}
}
if(cmd=="dtj off"){
dtj = null;
ESP.sbm("Dark Tornado jr. off");
}
if(cmd=="fe off"){
fe = null;
ESP.sbm("Fire Expert off");
}

//reset
else if(cmd=="reset"){
ESP.reset();
ESP.sbm("All Reset");
}

//2nd+
if(cmd=="w2"){
water2 = true;
ESP.toast("water 2nd on");
}
if(cmd=="w2 off"){
water2 = false;
ESP.toast("water 2nd off");
}
if(cmd=="b2"){
bind2 = true;
ESP.toast("bind 2nd on");
}
if(cmd=="b2 off"){
bind2 = false;
ESP.toast("bind 2nd off");
}
if(cmd=="h2"){
heal2 = true;
ESP.toast("dark heal on");
}
if(cmd=="h2 off"){
heal2 = false;
ESP.toast("dark heal off");
}
if(cmd=="a2"){
air2 = true;
ESP.toast("air 2nd on");
}
if(cmd=="a2 off"){
air2 = false;
ESP.toast("air 2nd off");
}

//help
if(cmd=="help"){
lang = 0;
expl = 0;
ESP.sbm("You can turn on E.S.P. by touching an obsidian under a sign which an Esper's name was writen.");
}
if(cmd=="도움말"){
lang = 1;
expl = 0;
ESP.sbm("능력활성화는 능력자 이름이 쓰여있는 표지판 아래에 있는 옵시디언을 터치하시면 됩니다.");
}

//anti lack off
if(cmd=="al off"){
anti = false;
anti2 = 0;
ESP.toast("Anti Lack was reseted.");
}

if(cmd=="rm"){
ESP.toast("Removing Mob on");
anti3 = 45;
}
if(cmd=="rm off"){
ESP.toast("Removing Mob off");
anti3 = 0;
}
if(cmd=="rd"){
ESP.toast("Removing Dropped Items on");
anti4 = 45;
}
if(cmd=="rd off"){
ESP.toast("Removing Dropped Items off");
anti4 = 0;
}


//auto recovery+
if(cmd=="ar"){
ESP.sbm("Auto Recovery was actived.");
auto = true;
}
if(cmd=="ar off"){
ESP.sbm("Auto Recovery was stopped.");
auto = false;
}


//0.4.3
if(Data[0]=="o"){
if(Data[1]=="fire"){
if(Data[2]==null){
ofire = 1;
ESP.sbm("Fire Master(old vers) on");
}
else if(Data[2]=="off"){
ofire = 0;
ESP.sbm("Fire Master(old vers) off");
}
}
if(Data[1]=="water"){
if(Data[2]==null){
owater = 1;
ESP.sbm("Water Controller(old vers) on");
}
else if(Data[2]=="off"){
owater = 0;
ESP.sbm("Water Controller(old vers) off");
}
}
if(Data[1]=="tree"){
if(Data[2]==null){
otree = 1;
ESP.sbm("Nature Guardian(old vers) on");
}
else if(Data[2]=="off"){
otree = 0;
ESP.sbm("Nature Guardian(old vers) off");
}
}
if(Data[1]=="creeper"){
if(Data[2]==null){
ocreeper = 1;
ESP.sbm("I am Creeper(old vers) on");
}
else if(Data[2]=="off"){
ocreeper = 0;
ESP.sbm("I am Creeper(old vers) off");
}
}
if(Data[1]=="soil"){
if(Data[2]==null){
osoil = 1;
ESP.sbm("Earth Bander(old vers) on");
}
else if(Data[2]=="off"){
osoil = 0;
ESP.sbm("Earth Bander(old vers) off");
}
}
if(Data[1]=="summon"){
if(Data[2]==null){
osummon = 1;
ESP.sbm("The Summoner(old vers) on");
}
else if(Data[2]=="off"){
osummon = 0;
ESP.sbm("The Summoner(old vers) oft");
}
}
if(Data[1]=="light"){
if(Data[2]==null){
olight = 1;
ESP.sbm("The Luminous(old vers) on");
}
else if(Data[2]=="off"){
olight = 0;
ESP.sbm("The Luminous(old vers) off");
}
}
if(Data[1]=="dark"){
if(Data[2]==null){
odark = 1;
ESP.sbm("The Darkness(old vers) on");
}
else if(Data[2]=="off"){
odark = 0;
ESP.sbm("The Darkness(old vers) off");
}
}
if(Data[1]=="ice"){
if(Data[2]==null){
oice = 1;
ESP.sbm("The Freezer(old vers) on");
}
else if(Data[2]=="off"){
oice = 0;
ESP.sbm("The Freezer(old vers) off");
}
}
if(Data[1]=="all"){
ofire = 1;
owater = 1;
otree = 1;
ocreeper = 1;
osoil = 1;
osummon = 1;
olight = 1;
odark = 1;
oice = 1;
ESP.sbm("All Ability(old vers) on");
}
if(Data[1]=="reset"){
ofire = 0;
owater = 0;
otree = 0;
ocreeper = 0;
osoil = 0;
osummon = 0;
olight = 0;
odark = 0;
oice = 0;
ESP.sbm("All Ability(old vers) off");
}

}


//------
if(cmd=="em"&&btn==null){
ESP.addEMButton();
ESP.sbm("ESP Manager Button on");
}
if(cmd=="em off"&&btn!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
if(btn!=null){
btn.dismiss();
btn = null;
}
}}));
ESP.toast("ESP Manager Button off");
}



//
if(cmd=="build pu"){
if(mp3==true&&mp==false){
for(var xx=116;xx<129;xx++)
for(var zz=11;zz<16;zz++)
setTile(xx, 50, zz, 5);
for(var xx=116;xx<128;xx++){
setTile(xx, 50, 10, 5);
setTile(xx, 50, 16, 5);
}
setTile(116, 50, 10, 17);
setTile(116, 50, 16, 17);
setTile(116, 51, 10, 17);
for(var zz=11;zz<16;zz++)
setTile(116, 51, zz, 5);
setTile(116, 51, 16, 17);
setTile(116, 52, 10, 17);
setTile(116, 52, 11, 5);
setTile(116, 52, 12, 102);
setTile(116, 52, 13, 102);
setTile(116, 52, 14, 102);
setTile(116, 52, 15, 5);
setTile(116, 52, 16, 17);
setTile(116, 53, 10, 17);
setTile(116, 53, 11, 5);
setTile(116, 53, 12, 102);
setTile(116, 53, 13, 102);
setTile(116, 53, 14, 102);
setTile(116, 53, 15, 5);
setTile(116, 53, 16, 17);
setTile(116, 54, 10, 17);
for(var zz=11;zz<16;zz++)
setTile(116, 54, zz, 17, 8);
setTile(116, 54, 16, 17);
setTile(116, 55, 10, 17);
for(var zz=11;zz<16;zz++)
setTile(116, 55, zz, 5);
setTile(116, 55, 16, 17);
setTile(116, 56, 10, 17);
setTile(116, 56, 11, 5);
setTile(116, 56, 12, 102);
setTile(116, 56, 13, 102);
setTile(116, 56, 14, 102);
setTile(116, 56, 15, 5);
setTile(116, 56, 16, 17);
setTile(116, 57, 10, 17);
setTile(116, 57, 11, 5);
setTile(116, 57, 12, 102);
setTile(116, 57, 13, 102);
setTile(116, 57, 14, 102);
setTile(116, 57, 15, 5);
setTile(116, 57, 16, 17);
setTile(116, 58, 10, 17, 4);
setTile(116, 58, 11, 17, 8);
setTile(116, 58, 12, 17, 8);
setTile(116, 58, 13, 17, 8);
setTile(116, 58, 14, 17, 8);
setTile(116, 58, 15, 17, 8);
setTile(116, 58, 16, 17, 4);
setTile(116, 59, 10, 85);
setTile(116, 59, 11, 85);
setTile(116, 59, 12, 85);
setTile(116, 59, 13, 85);
setTile(116, 59, 14, 85);
setTile(116, 59, 15, 85);
setTile(116, 59, 16, 85);
setTile(116, 60, 10, 50, 5);
setTile(116, 60, 16, 50, 5);
setTile(117, 51, 10, 5);
setTile(117, 51, 11, 49);
setTile(117, 51, 16, 64, 1);
setTile(117, 52, 10, 5);
setTile(117, 52, 16, 64, 9);
setTile(117, 53, 10, 5);
setTile(117, 53, 11, 50, 1);
setTile(117, 53, 15, 50, 1);
setTile(117, 53, 16, 5);
setTile(117, 54, 10, 17, 4);
setTile(117, 54, 11, 5);
setTile(117, 54, 12, 5);
setTile(117, 54, 13, 5);
setTile(117, 54, 14, 5);
setTile(117, 54, 15, 5);
setTile(117, 54, 16, 17, 4);
setTile(117, 55, 10, 5);
setTile(117, 55, 11, 26, 9);
setTile(117, 55, 12, 26, 9);
setTile(117, 55, 13, 26, 9);
setTile(117, 55, 14, 26, 9);
setTile(117, 55, 15, 26, 9);
setTile(117, 55, 16, 5);
setTile(117, 56, 10, 5);
setTile(117, 56, 16, 5);
setTile(117, 57, 10, 5);
setTile(117, 57, 11, 50, 1);
setTile(117, 57, 15, 50, 1);
setTile(117, 57, 16, 5);
setTile(117, 58, 10, 17, 4);
setTile(117, 58, 11, 5);
setTile(117, 58, 12, 5);
setTile(117, 58, 13, 5);
setTile(117, 58, 14, 5);
setTile(117, 58, 15, 5);
setTile(117, 58, 16, 17, 4);
setTile(117, 59, 10, 85);
setTile(117, 59, 16, 85);
setTile(118, 51, 11, 89);
setTile(118, 51, 16, 64, 1);
setTile(118, 52, 10, 102);
setTile(118, 52, 16, 64, 8);
setTile(118, 53, 10, 102);
setTile(118, 53, 16, 5);
setTile(118, 54, 10, 17, 4);
setTile(118, 54, 11, 5);
setTile(118, 54, 12, 5);
setTile(118, 54, 13, 5);
setTile(118, 54, 14, 5);
setTile(118, 54, 15, 5);
setTile(118, 54, 16, 17, 4);
setTile(118, 55, 10, 5);
setTile(118, 55, 11, 26, 1);
setTile(118, 55, 12, 26, 1);
setTile(118, 55, 13, 26, 1);
setTile(118, 55, 14, 26, 1);
setTile(118, 55, 15, 26, 1);
setTile(118, 55, 16, 5);
setTile(118, 56, 10, 102);
setTile(118, 56, 16, 102);
setTile(118, 57, 10, 102);
setTile(118, 57, 16, 102);
setTile(118, 58, 10, 17, 4);
setTile(118, 58, 11, 5);
setTile(118, 58, 12, 5);
setTile(118, 58, 13, 5);
setTile(118, 58, 14, 5);
setTile(118, 58, 15, 5);
setTile(118, 58, 16, 17, 4);
setTile(118, 59, 10, 85);
setTile(118, 59, 16, 85);
setTile(118, 51, 10, 5);
setTile(119, 51, 10, 5);
setTile(119, 51, 11, 49);
setTile(119, 51, 15, 49);
setTile(119, 51, 16, 5);
setTile(119, 52, 10, 102);
setTile(119, 52, 16, 5);
setTile(119, 53, 10, 102);
setTile(119, 53, 16, 5);
setTile(119, 54, 10, 17, 4);
setTile(119, 54, 11, 5);
setTile(119, 54, 12, 5);
setTile(119, 54, 13, 5);
setTile(119, 54, 14, 5);
setTile(119, 54, 15, 5);
setTile(119, 54, 16, 17, 4);
setTile(119, 55, 10, 5);
setTile(119, 55, 16, 5);
setTile(119, 56, 10, 102);
setTile(119, 56, 16, 102);
setTile(119, 57, 10, 102);
setTile(119, 57, 16, 102);
setTile(119, 58, 10, 17, 4);
setTile(119, 58, 11, 5);
setTile(119, 58, 12, 5);
setTile(119, 58, 13, 5);
setTile(119, 58, 14, 5);
setTile(119, 58, 15, 5);
setTile(119, 58, 16, 17, 4);
setTile(119, 59, 10, 85);
setTile(119, 59, 16, 85);
setTile(120, 51, 10, 5);
setTile(120, 51, 11, 89);
setTile(120, 51, 15, 89);
setTile(120, 51, 16, 5);
setTile(120, 52, 10, 102);
setTile(120, 52, 16, 102);
setTile(120, 53, 10, 102);
setTile(120, 53, 16, 102);
setTile(120, 54, 10, 17, 4);
setTile(120, 54, 11, 5);
setTile(120, 54, 12, 5);
setTile(120, 54, 13, 5);
setTile(120, 54, 14, 5);
setTile(120, 54, 15, 5);
setTile(120, 54, 16, 17, 4);
setTile(120, 55, 10, 5);
setTile(120, 55, 11, 26, 10);
setTile(120, 55, 12, 26, 2);
setTile(120, 55, 14, 26);
setTile(120, 55, 15, 26, 8);
setTile(120, 55, 16, 5);
setTile(120, 56, 10, 102);
setTile(120, 56, 16, 102);
setTile(120, 57, 10, 102);
setTile(120, 57, 16, 102);
setTile(120, 58, 10, 17, 4);
setTile(120, 58, 11, 5);
setTile(120, 58, 12, 5);
setTile(120, 58, 13, 5);
setTile(120, 58, 14, 5);
setTile(120, 58, 15, 5);
setTile(120, 58, 16, 17, 4);
setTile(120, 59, 10, 85);
setTile(120, 59, 16, 85);
setTile(121, 51, 10, 5);
setTile(121, 51, 11, 49);
setTile(121, 51, 15, 49);
setTile(121, 51, 16, 5);
setTile(121, 52, 10, 102);
setTile(121, 52, 16, 102);
setTile(121, 53, 10, 102);
setTile(121, 53, 16, 102);
setTile(121, 54, 10, 17, 4);
setTile(121, 54, 11, 5);
setTile(121, 54, 12, 5);
setTile(121, 54, 13, 5);
setTile(121, 54, 14, 5);
setTile(121, 54, 15, 5);
setTile(121, 54, 16, 17, 4);
setTile(121, 55, 10, 5);
setTile(121, 55, 11, 26, 10);
setTile(121, 55, 12, 26, 2);
setTile(121, 55, 14, 26);
setTile(121, 55, 15, 26, 8);
setTile(121, 55, 16, 5);
setTile(121, 56, 10, 102);
setTile(121, 56, 16, 102);
setTile(121, 57, 10, 102);
setTile(121, 57, 16, 102);
setTile(121, 58, 10, 17, 4);
setTile(121, 58, 11, 5);
setTile(121, 58, 12, 5);
setTile(121, 58, 13, 5);
setTile(121, 58, 14, 5);
setTile(121, 58, 15, 5);
setTile(121, 58, 16, 17, 4);
setTile(121, 59, 10, 85);
setTile(121, 59, 16, 85);
setTile(121, 60, 14, 50, 2);
setTile(122, 50, 10, 17);
setTile(122, 50, 11, 5);
setTile(122, 50, 12, 5);
setTile(122, 50, 13, 5);
setTile(122, 50, 14, 5);
setTile(122, 50, 15, 5);
setTile(122, 50, 16, 17);
setTile(122, 51, 10, 17);
setTile(122, 51, 11, 89);
setTile(122, 51, 15, 89);
setTile(122, 51, 16, 17);
setTile(122, 52, 10, 17);
setTile(122, 52, 16, 17);
setTile(122, 53, 10, 17);
setTile(122, 53, 11, 50, 3);
setTile(122, 53, 15, 50, 4);
setTile(122, 53, 16, 17);
setTile(122, 54, 10, 17);
setTile(122, 54, 11, 5);
setTile(122, 54, 12, 5);
setTile(122, 54, 13, 5);
setTile(122, 54, 14, 5);
setTile(122, 54, 15, 5);
setTile(122, 54, 16, 17);
setTile(122, 55, 10, 17);
setTile(122, 55, 11, 26, 10);
setTile(122, 55, 12, 26, 2);
setTile(122, 55, 14, 26);
setTile(122, 55, 15, 26, 8);
setTile(122, 55, 16, 17);
setTile(122, 56, 10, 17);
setTile(122, 56, 16, 17);
setTile(122, 57, 10, 17);
setTile(122, 57, 11, 50, 3);
setTile(122, 57, 15, 50, 4);
setTile(122, 57, 16, 17);
setTile(122, 58, 10, 17);
setTile(122, 58, 11, 5);
setTile(122, 58, 12, 5);
setTile(122, 58, 13, 5);
setTile(122, 58, 14, 5);
setTile(122, 58, 15, 5);
setTile(122, 58, 16, 17);
setTile(122, 59, 10, 17);
setTile(122, 59, 11, 5);
setTile(122, 59, 12, 5);
setTile(122, 59, 13, 5);
setTile(122, 59, 14, 5);
setTile(122, 59, 15, 64, 2);
setTile(122, 59, 16, 17);
setTile(122, 60, 10, 17);
setTile(122, 60, 11, 5);
setTile(122, 60, 12, 102);
setTile(122, 60, 13, 102);
setTile(122, 60, 14, 5);
setTile(122, 60, 15, 64, 8);
setTile(122, 60, 16, 17);
setTile(122, 61, 10, 17);
setTile(122, 61, 11, 5);
setTile(122, 61, 12, 5);
setTile(122, 61, 13, 5);
setTile(122, 61, 14, 5);
setTile(122, 61, 15, 5);
setTile(122, 61, 16, 17);
setTile(122, 62, 10, 17, 4);
setTile(122, 62, 11, 17, 8);
setTile(122, 62, 12, 17, 8);
setTile(122, 62, 13, 17, 8);
setTile(122, 62, 14, 17, 8);
setTile(122, 62, 15, 17, 8);
setTile(122, 62, 16, 17, 4);
setTile(122, 63, 10, 50, 5);
setTile(122, 63, 16, 50, 5);
setTile(123, 51, 10, 5);
setTile(123, 51, 11, 49);
setTile(123, 51, 15, 49);
setTile(123, 51, 16, 5);
setTile(123, 52, 10, 102);
setTile(123, 52, 16, 102);
setTile(123, 53, 10, 102);
setTile(123, 53, 16, 102);
setTile(123, 54, 10, 17, 4);
setTile(123, 54, 11, 5);
setTile(123, 54, 12, 5);
setTile(123, 54, 13, 5);
setTile(123, 54, 14, 5);
setTile(123, 54, 15, 5);
setTile(123, 54, 16, 17, 4);
setTile(123, 55, 10, 5);
setTile(123, 55, 11, 26, 10);
setTile(123, 55, 12, 26, 2);
setTile(123, 55, 14, 26);
setTile(123, 55, 15, 26, 8);
setTile(123, 55, 16, 5);
setTile(123, 56, 10, 102);
setTile(123, 56, 16, 102);
setTile(123, 57, 10, 102);
setTile(123, 57, 16, 102);
setTile(123, 58, 10, 17, 4);
setTile(123, 58, 11, 5);
setTile(123, 58, 12, 5);
setTile(123, 58, 13, 5);
setTile(123, 58, 14, 5);
setTile(123, 58, 15, 5);
setTile(123, 58, 16, 17, 4);
setTile(123, 59, 10, 5);
setTile(123, 59, 11, 103);
setTile(123, 59, 16, 5);
setTile(123, 60, 10, 5);
setTile(123, 60, 11, 68, 5);
setTile(123, 60, 16, 5);
setTile(123, 61, 10, 5);
setTile(123, 61, 11, 50, 3);
setTile(123, 61, 15, 50, 4);
setTile(123, 61, 16, 5);
setTile(123, 62, 10, 17, 4);
setTile(123, 62, 11, 5);
setTile(123, 62, 12, 5);
setTile(123, 62, 13, 5);
setTile(123, 62, 14, 5);
setTile(123, 62, 15, 5);
setTile(123, 62, 16, 17, 4);
setTile(124, 51, 10, 5);
setTile(124, 51, 11, 89);
setTile(124, 51, 15, 89);
setTile(124, 51, 16, 5);
setTile(124, 52, 10, 102);
setTile(124, 52, 16, 102);
setTile(124, 53, 10, 102);
setTile(124, 53, 16, 102);
setTile(124, 54, 10, 17, 4);
setTile(124, 54, 11, 5);
setTile(124, 54, 12, 5);
setTile(124, 54, 13, 5);
setTile(124, 54, 14, 5);
setTile(124, 54, 15, 5);
setTile(124, 54, 16, 17, 4);
setTile(124, 55, 10, 5);
setTile(124, 55, 11, 26, 10);
setTile(124, 55, 12, 26, 2);
setTile(124, 55, 14, 26);
setTile(124, 55, 15, 26, 8);
setTile(124, 55, 16, 5);
setTile(124, 56, 10, 102);
setTile(124, 56, 16, 102);
setTile(124, 57, 10, 102);
setTile(124, 57, 16, 102);
setTile(124, 58, 10, 17, 4);
setTile(124, 58, 11, 5);
setTile(124, 58, 12, 5);
setTile(124, 58, 13, 5);
setTile(124, 58, 14, 5);
setTile(124, 58, 15, 5);
setTile(124, 58, 16, 17, 4);
setTile(124, 59, 10, 5);
setTile(124, 59, 16, 5);
setTile(124, 60, 10, 102);
setTile(124, 60, 16, 102);
setTile(124, 61, 10, 102);
setTile(124, 61, 16, 102);
setTile(124, 62, 10, 17, 4);
setTile(124, 62, 11, 5);
setTile(124, 62, 12, 5);
setTile(124, 62, 13, 5);
setTile(124, 62, 14, 5);
setTile(124, 62, 15, 5);
setTile(124, 62, 16, 17, 4);
setTile(125, 51, 10, 5);
setTile(125, 51, 11, 49);
setTile(125, 51, 15, 49);
setTile(125, 51, 16, 5);
setTile(125, 52, 10, 102);
setTile(125, 52, 16, 102);
setTile(125, 53, 10, 102);
setTile(125, 53, 16, 102);
setTile(125, 54, 10, 17, 4);
setTile(125, 54, 11, 5);
setTile(125, 54, 12, 5);
setTile(125, 54, 13, 5);
setTile(125, 54, 14, 5);
setTile(125, 54, 15, 5);
setTile(125, 54, 16, 17, 4);
setTile(125, 55, 10, 5);
setTile(125, 55, 16, 5);
setTile(125, 56, 10, 102);
setTile(125, 56, 16, 102);
setTile(125, 57, 10, 102);
setTile(125, 57, 16, 102);
setTile(125, 58, 10, 17, 4);
setTile(125, 58, 11, 5);
setTile(125, 58, 12, 5);
setTile(125, 58, 13, 5);
setTile(125, 58, 14, 5);
setTile(125, 58, 15, 5);
setTile(125, 58, 16, 17, 4);
setTile(125, 59, 10, 5);
setTile(125, 59, 16, 5);
setTile(125, 60, 10, 102);
setTile(125, 60, 16, 102);
setTile(125, 61, 10, 102);
setTile(125, 61, 16, 102);
setTile(125, 62, 10, 17, 4);
setTile(125, 62, 11, 5);
setTile(125, 62, 12, 5);
setTile(125, 62, 13, 5);
setTile(125, 62, 14, 5);
setTile(125, 62, 15, 5);
setTile(125, 62, 16, 17, 4);
setTile(126, 51, 10, 5);
setTile(126, 51, 11, 89);
setTile(126, 51, 15, 89);
setTile(126, 51, 16, 5);
setTile(126, 52, 10, 102);
setTile(126, 52, 16, 102);
setTile(126, 53, 10, 102);
setTile(126, 53, 16, 102);
setTile(126, 54, 10, 17, 4);
setTile(126, 54, 11, 5);
setTile(126, 54, 12, 5);
setTile(126, 54, 13, 5);
setTile(126, 54, 14, 5);
setTile(126, 54, 15, 5);
setTile(126, 54, 16, 17, 4);
setTile(126, 55, 10, 5);
setTile(126, 55, 16, 5);
setTile(126, 56, 10, 102);
setTile(126, 56, 16, 102);
setTile(126, 57, 10, 102);
setTile(126, 57, 16, 102);
setTile(126, 58, 10, 17, 4);
setTile(126, 58, 11, 5);
setTile(126, 58, 12, 5);
setTile(126, 58, 13, 5);
setTile(126, 58, 14, 5);
setTile(126, 58, 15, 5);
setTile(126, 58, 16, 17, 4);
setTile(126, 59, 10, 5);
setTile(126, 59, 16, 5);
setTile(126, 60, 10, 102);
setTile(126, 60, 16, 102);
setTile(126, 61, 10, 102);
setTile(126, 61, 16, 102);
setTile(126, 62, 10, 17, 4);
setTile(126, 62, 11, 5);
setTile(126, 62, 12, 5);
setTile(126, 62, 13, 5);
setTile(126, 62, 14, 5);
setTile(126, 62, 15, 5);
setTile(126, 62, 16, 17, 4);
setTile(127, 51, 10, 5);
setTile(127, 51, 11, 49);
setTile(127, 51, 13, 65, 4);
setTile(127, 51, 15, 49);
setTile(127, 51, 16, 5);
setTile(127, 52, 10, 5);
setTile(127, 52, 13, 65, 4);
setTile(127, 52, 16, 5);
setTile(127, 53, 10, 5);
setTile(127, 53, 11, 50, 2);
setTile(127, 53, 13, 65, 4);
setTile(127, 53, 15, 50, 2);
setTile(127, 53, 16, 5);
setTile(127, 54, 10, 17, 4);
setTile(127, 54, 11, 5);
setTile(127, 54, 12, 5);
setTile(127, 54, 13, 65, 4);
setTile(127, 54, 14, 5);
setTile(127, 54, 15, 5);
setTile(127, 54, 16, 17, 4);
setTile(127, 55, 10, 5);
setTile(127, 55, 13, 65, 4);
setTile(127, 55, 16, 5);
setTile(127, 56, 10, 5);
setTile(127, 56, 13, 65, 4);
setTile(127, 56, 16, 5);
setTile(127, 57, 10, 5);
setTile(127, 57, 11, 50, 2);
setTile(127, 57, 13, 65, 4);
setTile(127, 57, 15, 50, 2);
setTile(127, 57, 16, 5);
setTile(127, 58, 10, 17, 4);
setTile(127, 58, 11, 5);
setTile(127, 58, 12, 5);
setTile(127, 58, 13, 65, 4);
setTile(127, 58, 14, 5);
setTile(127, 58, 15, 5);
setTile(127, 58, 16, 17, 4);
setTile(127, 59, 10, 5);
setTile(127, 59, 13, 65, 4);
setTile(127, 59, 16, 5);
setTile(127, 60, 10, 5);
setTile(127, 60, 13, 65, 4);
setTile(127, 60, 16, 5);
setTile(127, 61, 10, 5);
setTile(127, 61, 11, 50, 3);
setTile(127, 61, 13, 65, 4);
setTile(127, 61, 15, 50, 4);
setTile(127, 61, 16, 5);
setTile(127, 62, 10, 17, 4);
setTile(127, 62, 11, 5);
setTile(127, 62, 12, 5);
setTile(127, 62, 13, 5);
setTile(127, 62, 14, 5);
setTile(127, 62, 15, 5);
setTile(127, 62, 16, 17, 4);
setTile(128, 50, 10, 17);
setTile(128, 50, 16, 17);
setTile(128, 51, 10, 17);
setTile(128, 51, 11, 5);
setTile(128, 51, 12, 5);
setTile(128, 51, 13, 5);
setTile(128, 51, 14, 5);
setTile(128, 51, 15, 5);
setTile(128, 51, 16, 17);
setTile(128, 52, 10, 17);
setTile(128, 52, 11, 5);
setTile(128, 52, 12, 102);
setTile(128, 52, 13, 5);
setTile(128, 52, 14, 102);
setTile(128, 52, 15, 5);
setTile(128, 52, 16, 17);
setTile(128, 53, 10, 17);
setTile(128, 53, 11, 5);
setTile(128, 53, 12, 5);
setTile(128, 53, 13, 5);
setTile(128, 53, 14, 5);
setTile(128, 53, 15, 5);
setTile(128, 53, 16, 17);
setTile(128, 54, 10, 17);
setTile(128, 54, 11, 17, 8);
setTile(128, 54, 12, 17, 8);
setTile(128, 54, 13, 17, 8);
setTile(128, 54, 14, 17, 8);
setTile(128, 54, 15, 17, 8);
setTile(128, 54, 16, 17);
setTile(128, 55, 10, 17);
setTile(128, 55, 11, 5);
setTile(128, 55, 12, 5);
setTile(128, 55, 13, 5);
setTile(128, 55, 14, 5);
setTile(128, 55, 15, 5);
setTile(128, 55, 16, 17);
setTile(128, 56, 10, 17);
setTile(128, 56, 11, 5);
setTile(128, 56, 12, 102);
setTile(128, 56, 13, 5);
setTile(128, 56, 14, 102);
setTile(128, 56, 15, 5);
setTile(128, 56, 16, 17);
setTile(128, 57, 10, 17);
setTile(128, 57, 11, 5);
setTile(128, 57, 12, 5);
setTile(128, 57, 13, 5);
setTile(128, 57, 14, 5);
setTile(128, 57, 15, 5);
setTile(128, 57, 16, 17);
setTile(128, 58, 10, 17);
setTile(128, 58, 11, 17, 8);
setTile(128, 58, 12, 17, 8);
setTile(128, 58, 13, 17, 8);
setTile(128, 58, 14, 17, 8);
setTile(128, 58, 15, 17, 8);
setTile(128, 58, 16, 17);
setTile(128, 59, 10, 17);
setTile(128, 59, 11, 5);
setTile(128, 59, 12, 5);
setTile(128, 59, 13, 5);
setTile(128, 59, 14, 5);
setTile(128, 59, 15, 5);
setTile(128, 59, 16, 17);
setTile(128, 60, 10, 17);
setTile(128, 60, 11, 5);
setTile(128, 60, 12, 102);
setTile(128, 60, 13, 5);
setTile(128, 60, 14, 102);
setTile(128, 60, 15, 5);
setTile(128, 60, 16, 17);
setTile(128, 61, 10, 17);
setTile(128, 61, 11, 5);
setTile(128, 61, 12, 5);
setTile(128, 61, 13, 5);
setTile(128, 61, 14, 5);
setTile(128, 61, 15, 5);
setTile(128, 61, 16, 17);
setTile(128, 62, 10, 17, 4);
setTile(128, 62, 11, 17, 8);
setTile(128, 62, 12, 17, 8);
setTile(128, 62, 13, 17, 8);
setTile(128, 62, 14, 17, 8);
setTile(128, 62, 15, 17, 8);
setTile(128, 62, 16, 17, 4);
setTile(128, 63, 10, 50, 5);
setTile(128, 63, 16, 50, 5);
ESP.toast("\"Power User\"건물이 생성(복구)되었습니다.");
}
else{
ESP.toast("이 맵에서는 사용할 수 없습니다.");
}
}
if(cmd=="build ad"){
if(mp3==true&&mp==false){
setTile(124, 50, 20, 135, 2);
setTile(124, 50, 21, 135);
setTile(124, 50, 22, 135, 3);
for(var xx=125;xx<131;xx++){
for(var zz=20;zz<29;zz++){
setTile(xx, 50, zz, 5, 2);
setTile(xx, 54, zz, 5, 2);
}}
for(var zz=20;zz<29;zz++){
setTile(130, 53, zz, 5, 2);
setTile(130, 55, zz, 5, 2);
setTile(130, 51, zz, 5, 2);
setTile(125, 53, zz, 5, 2);
setTile(125, 55, zz, 5, 2);
}
setTile(125, 51, 20, 5, 2);
setTile(125, 51, 21, 64, 2);
setTile(125, 52, 21, 64, 8);
for(var zz=22;zz<29;zz++)
setTile(125, 51, zz, 5, 2);
setTile(125, 52, 20, 5, 2);
setTile(125, 52, 22, 5, 2);
setTile(125, 52, 23, 5, 2);
setTile(125, 52, 24, 102);
setTile(125, 52, 25, 102);
setTile(125, 52, 26, 5, 2);
setTile(125, 52, 27, 5, 2);
setTile(125, 52, 28, 5, 2);
setTile(126, 51, 20, 5, 2);
setTile(126, 51, 27, 61, 2);
setTile(126, 51, 28, 5, 2);
setTile(126, 52, 20, 5, 2);
setTile(126, 52, 28, 5, 2);
setTile(126, 53, 20, 5, 2);
setTile(126, 53, 28, 5, 2);
setTile(126, 55, 20, 5, 2);
setTile(126, 55, 28, 5, 2);
setTile(127, 51, 20, 5, 2);
setTile(127, 51, 27, 245);
setTile(127, 51, 28, 5, 2);
setTile(127, 52, 20, 102);
setTile(127, 52, 28, 102);
setTile(127, 53, 20, 5, 2);
setTile(127, 53, 28, 5, 2);
setTile(127, 55, 20, 5, 2);
setTile(127, 55, 28, 5, 2);
setTile(128, 51, 20, 5, 2);
setTile(128, 51, 25, 26, 3);
setTile(128, 51, 27, 58, 0);
setTile(128, 51, 28, 5, 2);
setTile(128, 52, 20, 102);
setTile(128, 52, 28, 102);
setTile(128, 53, 20, 5, 2);
setTile(128, 53, 28, 5, 2);
setTile(128, 55, 20, 5, 2);
setTile(128, 55, 28, 5, 2);
setTile(129, 51, 20, 5, 2);
setTile(129, 51, 24, 49, 0);
setTile(129, 51, 25, 26, 11);
setTile(129, 51, 26, 53, 3);
setTile(129, 51, 27, 85, 0);
setTile(129, 51, 28, 5, 2);
setTile(129, 52, 20, 5, 2);
setTile(129, 52, 27, 44, 2);
setTile(129, 52, 28, 5, 2);
setTile(129, 53, 20, 5, 2);
setTile(129, 53, 28, 5, 2);
setTile(129, 55, 20, 5, 2);
setTile(129, 55, 28, 5, 2);
setTile(130, 52, 20, 5, 2);
setTile(130, 52, 21, 5, 2);
setTile(130, 52, 22, 102, 0);
setTile(130, 52, 23, 102, 0);
setTile(130, 52, 24, 5, 2);
setTile(130, 52, 25, 102, 0);
setTile(130, 52, 26, 102, 0);
setTile(130, 52, 27, 5, 2);
setTile(130, 52, 28, 5, 2);
setTile(125, 56, 20, 50);
setTile(125, 56, 28, 50);
setTile(130, 56, 20, 50);
setTile(130, 56, 28, 50);
ESP.toast("\"Admin's House\"건물이 생성(복구)되었습니다.");
}
else{
ESP.toast("이 맵에서는 사용할 수 없습니다.");
}
}

if(cmd=="fix pa"){
fixt = 300;
ESP.toast("능력 연습장 수복 시작");
}
if(cmd=="fix bf6"){
makeBattleField6();
ESP.toast("Battle Field 6 was Fixed");
}


if(cmd=="sc"){
adsc = true;
ESP.sbm("Showing Cool Time on");
}
if(cmd=="sc off"){
adsc = false;
ESP.sbm("Showing Cool Time off");
ModPE.showTipMessage("");
}

if(cmd=="bgm"){
bgmPlayer(true);
ESP.sbm("BGM on");
}
if(cmd=="bgm off"){
bgmPlayer(false);
ESP.sbm("BGM off");
}

if(cmd=="town"){
town = true;
ESP.sbm("Town Protection on");
}
if(cmd=="town off"){
town = false;
ESP.sbm("Town Protection off");
}

//eg+
if(cmd=="wl on"){
hhhhh = 300;
}



}



function deathHook(m, v){
if(v==se.avenage){
se.a4a = m;
}
}


function entityAddedHook(e){
//anti lack
if(anti==true){
if(Entity.getEntityTypeId(e)==64){
Entity.remove(e);
}

}

//add function
if(ESP.isPlayer(e)){
playerAddedHook(e);
}


}


function playerAddedHook(p){
if(Ban.wasBanned(p)){
banData.push([Entity.getHealth(p), Math.round(Entity.getX(p)), Math.floor(Entity.getY(p)), Math.round(Entity.getZ(p))]);
banList.push(p);
ESP.sbm(Player.getName(p)+" is Banned Player.");
}
dc.p.push(p);
dc.c.push(0);
dc.t.push(false);


}


function destroyBlock(x, y, z, s){
if(Level.getGameMode()==0){
if(getTile(x, y, z)==69){
preventDefault();
Level.destroyBlock(x, y, z, false);
var rrr = Math.floor(Math.random()*3);
Level.dropItem(x, y, z, 0.5, 406, 2, 0);
if(rrr==0)
Level.dropItem(x, y, z, 0.5, 406, 1, 0);
}
if(getTile(x, y, z)==70){
preventDefault();
Level.destroyBlock(x, y, z, true);
}

}


}


function chatHook(str){
if(str=="시발"||str=="씨발"||str=="썅"||str=="개새끼"||str=="슈발"){
dtm("욕하지 마, "+Player.getName(ad)+"§f.");
}
if(str=="fuck"){
dtm("Do not slang, "+Player.getName(ad)+"§f.");
}

if(str==" /over"){
Entity.setPosition(ad, 116, 52, 25);
hcm("Teleported to Over World.");
preventDefault();
}
if(str==" /nether"){
Entity.setPosition(ad, -1033, 10, 1003);
hcm("Teleported to Nether World.");
preventDefault();
}
if(str==" /ender"){
Entity.setPosition(ad, -1024, 23, -1001);
hcm("Teleported to Ender World.");
preventDefault();
}
if(str==" /time"){
Entity.setPosition(ad, 1000.5, 51, 1500.5);
hcm("Teleported to Time Zone.");
preventDefault();
}
if(str==" /past"){
Entity.setPosition(ad, 1018, 20, 1039);
hcm("Time Jumped to Past.");
preventDefault();
}
if(str==" /present"){
Entity.setPosition(ad, 116, 52, 25);
hcm("Time Jumped to Present.");
preventDefault();
}
if(str==" /future"){
Entity.setPosition(ad, 2014, 53, -1023);
hcm("Time Jumped to Future.");
preventDefault();
}
if(str==" /esi"){
Entity.setPosition(ad, -998, 45, 3007);
hcm("Teleported to the ESI Temple.");
preventDefault();
}
if(str==" /nox"){
Entity.setPosition(ESP.getUser(), -3000, 23, 0);
hcm("Teleported to Nox Oppidum.");
preventDefault();
}

if(dt.l){
if(str=="안녕"||str=="안녕?"||str=="안녕하세요"||str=="안녕하세요?")
dtm("안녕하신가, "+Player.getName(ad)+".");
if(str=="Hello"||str=="Hello?"||str=="hello"||str=="hello?") dtm("Hello, "+Player.getName(ad)+".");

}


}


//ESP Manager
function openESPManager(){
if(menu==null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
btnTime = new android.widget.PopupWindow();
var layout = new android.widget.RelativeLayout(ctx);
var button = makeButton(" day/night ", function(){dayNight();});
if(emcolor==1){
button.setBackgroundColor(android.graphics.Color.argb(70, 255, 255, 255));
}
else if(emcolor==2){
button.setBackgroundColor(android.graphics.Color.argb(0, 0, 0, 0));
}
else{
button.setBackgroundColor(android.graphics.Color.argb(70, 0, 0, 0));
}
layout.addView(button);
btnTime.setContentView(layout);
btnTime.setWidth(dip2px(ctx, 160));
btnTime.setHeight(dip2px(ctx, 48));
btnTime.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
btnTime.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT|android.view.Gravity.TOP, 10, 10);
//------
menu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("ESP\nManager\n");
text.setTextSize(25);
text.setGravity(android.view.Gravity.CENTER);
text.setTextColor(android.graphics.Color.CYAN);
text.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
SB.hiddenAbility();
}
});
if(hhhhh!=0){
text.setTextColor(android.graphics.Color.RED);
text.setOnClickListener(new android.view.View.OnClickListener(){
onClick: function(v){
ESP.toast("They are coming...");
}
});
}
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);

var btns = new Array();
var esps = ["Fire User", "Water Controller", "Nature Guardian", "I am Creeper", "Soil Master", "The Summoner", "The Luminous", "The Darkness", "The Freezer", "Desert Maker", "The Vampire", "Air Bander", "I am Elsa", "Mass Titan", "Thunder Breaker", "The Binder", "The Mechanic", "TNT Expert", "Trap Creater", "The Healer", "Nether Man", "Cloud Manager", "The Assassin", "Arrow Shooter", "The Mage", "The Defenser", "Poison Maven", "Ground Melter", "Hyper Freezer", "The Builder", "The Soldier", "The Assaulter", "The Burster", "The Warrior", "Ore Collecter", "The Rich", "The Teleporter", "Space Warpper", "Surround Attacker", "Force Shifter", "I am Reinforce", "Magnetism Distorter", "I am Steve", "I am Herobrine", "The Hermit", "Clay Gatherer", "I am Kirito", "Jungle Former", "I am Kanade", "Time Traveler", "The Sniper", "Zombie Employer", "The Necromancer", "I am Asuna", "Holy Knight", "Solar Paladin", "Lunar Wizard", "Hyper Assaulter", "Random Ability", "Reinforce Zwei", "The Decorater", "Hyper Summoner", "Climate Changer", "Remote Raider", "Wind Operater", "Energy Transfer", "The Genocider", "Server Dominator", "The Outsider", "I am Railgun", "Copying Eye", "Dragon Trainer", "Hawk Eye", "The Solidifier", "Gravity Twister"];
for(var n in esps){
btns[n] = new android.widget.Button(ctx);
btns[n].setText(esps[n]);
btns[n].setId(n);
btns[n].setOnClickListener(new android.view.View.OnClickListener(){
onClick: function(v){
SB.espManage(v.getId());
}
});
}
var mhass = makeButton("Hyper Assassin", function(){SB.hyperAssassin();});
var msikill = makeButton("Silent Killer", function(){SB.silentKiller();});
var mblack = makeButton("Black Slayer", function(){SB.blackSlayer();});
var mslash = makeButton("The Slasher", function(){SB.theSlasher();});
var mnight = makeButton("Night Worker", function(){SB.nightWorker();});
var mgem = makeButton("Light Genstone", function(){SB.lightGenstone();});
var mdra = makeButton("The Dracula", function(){SB.theDracula();});
var mmush = makeButton("Mushroom Grower", function(){
if(mcpev) SB.mushroomGrower();
else ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
});
var mender = makeButton("Ender Girl", function(){
if(mcpev) SB.enderGirl();
else ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
});
var mtaiga = makeButton("Taiga Appearer", function(){
if(mcpev) SB.taigaAppearer();
else ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
});
var mruin = makeButton("The Ruiner", function(){SB.theRuiner();});
var mswamp = makeButton("Swamp Generater", function(){
if(mcpev) SB.swampGenerater();
else ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
});
var masum = makeButton("Arch Summoner", function(){
if(mcpev) SB.archSummoner();
else ESP.toast("0.8.1 이하에서는 사용할 수 없습니다");
});
var mamage = makeButton("Arch Mage", function(){SB.archMage();});
var mpuella = makeButton("Puella Magica", function(){SB.puellaMagica();});
var mhbuild = makeButton("Hyper Builder", function(){SB.hyperBuilder();});
var mscalar = makeButton("Scalar Increaser", function(){SB.scalarIncreaser();});
var mvector = makeButton("Vector Reflacter", function(){SB.vectorReflacter();});
var mtensor = makeButton("Tensor Veerer", function(){SB.tensorVeerer();});
var mameca = makeButton("Arch Mechanic", function(){SB.archMechanic();});
var mseal = makeButton("The Sealer", function(){SB.theSealer();});
var mangel = makeButton("The Archangel", function(){SB.theArchangel();});
var mwhite = makeButton("White Eye", function(){SB.whiteEye();});
var mmental = makeButton("Mental Out", function(){SB.mentalOut();});
var mworld = makeButton("World Editor", function(){SB.worldEditor();});

var mdtj = makeButton("Dark Tornado jr.", function(){SB.darkTornadoJr();});
var mfe = makeButton("Fire Expert", function(){SB.fireExpert();});
var metc = makeButton("ETC", function(){otherESPManager();});
var minfo = makeButton("도움말", function(){
ESP.infoDialog("초능력자 대전", "\"초능력자 대전\"은 Dark Tornado가 만든 능력자 스크립트로서, 무단 공유는 허용하나, 무단 수정 및 자신이 만들었다고 주장하는 행위는 금지하며, 그냥 또는 학습을 위해 열어보는 것은 허용합니다.\n대략적인 사용법은 명령어 \"/help\"또는 \"/도움말\"을 치시면 나옵니다.\n오른쪽 아래의 \"EM\"버튼으로 on/off되는 이 버튼들(?)은 \"ESP Manager\"이며, 이곳에 있는 기능들은 대부분이 명령어로도 사용이 가능합니다. EM버튼은 위치 수정이 가능합니다.\nESP Manager의 기능들은 능력 비활성화(타 스크립트의 능력자의 경우 불가)와 능력자 전송, 사살, 회복 등이며, 서버관리자의 기능도 어느정도는 있습니다. 기능들은 버튼의  내용을 해석하시면 될 듯 싶습니다.\nESP Manager가 지원하는 능력자 스크립트는 초능력자 대전, 초능력자 대전+, 마법사 대전, 부르르 능력자, S-Transfer, Flower Fairy(꽃요정), 모두의 능력자, 사신수 능력자, The Operaters와 ELSE에 있는 능력자들입니다.\n", "2014 Dark Tornado\n(http:\/\/blog.naver.com\/dt3141592)");
});

var exit = new android.widget.Button(ctx);
exit.setText("EXIT");
exit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(menu!=null){
menu.dismiss();
menu = null;
}
if(btnTime!=null){
btnTime.dismiss();
btnTime = null;
}
}
});

for(var n in esps)
layout.addView(btns[n]);
layout.addView(mhass);
layout.addView(msikill);
layout.addView(mblack);
layout.addView(mslash);
layout.addView(mnight);
layout.addView(mgem);
layout.addView(mdra);
layout.addView(mmush);
layout.addView(mender);
layout.addView(mtaiga);
layout.addView(mruin);
layout.addView(mswamp);
layout.addView(masum);
layout.addView(mamage);
layout.addView(mpuella);
layout.addView(mhbuild);
layout.addView(mscalar);
layout.addView(mvector);
layout.addView(mtensor);
layout.addView(mameca);
layout.addView(mseal);
layout.addView(mangel);
layout.addView(mwhite);
layout.addView(mmental);
layout.addView(mworld);
layout.addView(mdtj);
layout.addView(mfe);

if(he.on){
var button = new Array();
for(var n in he.names){
button[n] = new android.widget.Button(ctx);
button[n].setText(he.names[n]);
}
var line = new android.widget.TextView(ctx);
line.setText("--<H.E.>--");
line.setTextSize(13);
line.setGravity(android.view.Gravity.CENTER);
layout.addView(line);
button[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
SBh.electricCurrent();
}
});
button[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
SBh.theShade();
}
});
button[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
SBh.tornadoStriker();
}
});
button[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
SBh.bufExerter();
}
});
button[4].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
SBh.theX();
}
});
for(var n in he.names)
layout.addView(button[n]);
var line2 = new android.widget.TextView(ctx);
line2.setText("--------");
line2.setTextSize(13);
line2.setGravity(android.view.Gravity.CENTER);
layout.addView(line2);
}

layout.addView(minfo);
layout.addView(metc);
layout.addView(exit);

var txt = new android.widget.TextView(ctx);
txt.setText("\n© 2015 Dark Tornado\n");
txt.setTextSize(11);
txt.setGravity(android.view.Gravity.CENTER);
if(he.on==false){
txt.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
passwordDialog();
}
});
}
layout.addView(txt);

var scroll = makeScroll(layout,menu);
menu.setContentView(scroll);
menu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
ESP.toast("ESP Manager on");
}
catch(e){
clientMessage("error "+e+", "+e.lineNumber);
}
}
}));
}
else if(menu!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
if(menu!=null){
menu.dismiss();
menu = null;
}
if(btnTime!=null){
btnTime.dismiss();
btnTime = null;
}
if(menu2!=null){
menu2.dismiss();
menu2 = null;
}
if(menu3!=null){
menu3.dismiss();
menu3 = null;
}
if(menu4!=null){
menu4.dismiss();
menu4 = null;
}
if(menu5!=null){
menu5.dismiss();
menu5 = null;
}
if(menu6!=null){
menu6.dismiss();
menu6 = null;
}
if(menu7!=null){
menu7.dismiss();
menu7 = null;
}
if(menu8!=null){
menu8.dismiss();
menu8 = null;
}
if(menu9!=null){
menu9.dismiss();
menu9 = null;
}
if(menu10!=null){
menu10.dismiss();
menu10 = null;
}
if(menu11!=null){
menu11.dismiss();
menu11 = null;
}
if(menu12!=null){
menu12.dismiss();
menu12 = null;
}
if(menu13!=null){
menu13.dismiss();
menu13 = null;
}
if(menuS!=null){
menuS.dismiss();
menuS = null;
}
if(menuD!=null){
menuD.dismiss();
menuD = null;
}
}catch(e){
clientMessage("error : "+e);
}
}}));
ESP.toast("ESP Manager off");
}

}

function makeButton(txt, func){
var button = new android.widget.Button(ctx);
button.setText(txt);
button.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
func();
}
});
return button;
}

function makeToggleButton(txt1, txt2, func1, func2, tf){
var button = new android.widget.ToggleButton(ctx);
button.setTextOn(txt1);
button.setTextOff(txt2);
button.setChecked(tf);
button.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
onCheckedChanged : function(toggle, onoff){
if(onoff==true){
func1();
}
else if(onoff==false){
func2();
}
}
}));
return button;
}

function makeExitButton(menu){
var button = new android.widget.Button(ctx);
button.setText("EXIT");
button.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(menu!=null){
menu.dismiss();
menu = null;
}
}
});
return button;
}

function makeDialog(title, layout, txt1, func1, txt2, func2){
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
dialog.setTitle(title);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setView(scroll);
if(func1==null)
dialog.setNegativeButton(txt1, null);
else
dialog.setNegativeButton(txt1, new android.content.DialogInterface.OnClickListener({
onClick: function(v){
func1();
}
}));
if(txt2!=null)
dialog.setPositiveButton(txt2, new android.content.DialogInterface.OnClickListener({
onClick: function(v){
func2();
}
}));
return dialog;
}

function makeRadioList(arr, tf){
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n in arr){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(arr[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
if(tf){
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
espN = checkedId;
}
}));
}
else{
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
playerTarget = arr[checkedId];
}
}));
}
return radios;
}

function makeESPName(txt){
var text = new android.widget.TextView(ctx);
text.setText(txt+"\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
return text;
}

function makeUserList(arr){
var user = new android.widget.TextView(ctx);
var userNames = new Array();
for(var n in arr)
userNames.push(" "+Player.getName(arr[n]));
user.setText("  User :"+userNames);
user.setTextSize(18);
return user;
}

function makeScroll(layout, menu){
var Layout = new android.widget.RelativeLayout(ctx);
var svParams = new android.widget.RelativeLayout.LayoutParams(android.widget.RelativeLayout.LayoutParams.FILL_PARENT, android.widget.RelativeLayout.LayoutParams.FILL_PARENT);
var scroll = new android.widget.ScrollView(ctx);
var pad = dip2px(ctx, 3);
scroll.setPadding(pad, pad, pad, pad);
scroll.setLayoutParams(svParams);
scroll.addView(layout);
Layout.addView(scroll);
menu.setWidth(ctx.getWindowManager().getDefaultDisplay().getWidth()*1/3);
menu.setHeight(ctx.getWindowManager().getDefaultDisplay().getHeight());
return Layout;
}


function dayNight(){
if(nightCheck()==false){
Level.setTime(14000);
ESP.toast("Time Night");
}
else if(nightCheck()==true){
Level.setTime(0);
ESP.toast("Time Day");
}

}


function otherESPManager(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
menu2 = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("E T C\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
text.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
adminPass();
}
});
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);

var mreset = makeButton("ESP Reset", function(){
ESP.reset();
ESP.toast("All ESP was reseted");
});
var mal = makeButton("Anti Lack Reset", function(){
anti = false;
anti2 = 0;
ESP.toast("Anti Lack was Reseted");
});
var mar = makeToggleButton("Auto Recovery", "Auto Recovery", 
function(){
auto = true;
ESP.toast("Auto Recovery on");
},
function(){
auto = false;
ESP.toast("Auto Recovery off");
},
auto);
var mrm = new android.widget.ToggleButton(ctx);
var mal2 = makeButton("Remove Dropped Items", function(){
for each(var e in Entity.getAll()){
if(Entity.getEntityTypeId(e)==64)
Entity.remove(e);
}
ESP.toast("Dropped Items were removed.");
});
var mal3 = makeButton("Remove All Entities", function(){
for each(var e in Entity.getAll()){
if(!(ESP.isPlayer(e)||Entity.getEntityTypeId(e)==83))
Entity.remove(e);
}
ESP.toast("플레이어와 그림을 제외한 모든 엔티티가 삭제되었습니다.");
});
var mrd = new android.widget.ToggleButton(ctx);
var mdtl = makeToggleButton("D.T. jr. Limiter", "D.T. jr. Limiter",
function(){
dtl = true;
dtla = 4500;
ESP.toast("Dark Tornado jr. Limiter Release");
},
function(){
dtl = false;
dtla = 0;
ESP.toast("Dark Tornado jr. Limiter Operate");
},
dtl);
var mamr = makeToggleButton("Auto Manual Recovery", "Auto Manual Recovery",
function(){
fill = true;
ESP.toast("Auto Filling&Deleting Mode on");
},
function(){
fill = false;
ESP.toast("Auto Filling&Deleting Mode off");
},
fill);
var mpass = makeToggleButton("Passive Skill on", "Passive Skill off", 
function(){
passOnoff = true;
},
function(){
passOnoff = false;
},
passOnoff);
var mkill = makeButton("Kill", function(){
Entity.setHealth(ad, 0);
adH = 0;
ESP.toast("You were killed.");
});
var mkill2 = makeButton("Kill Players", function(){
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)==0&&e!=ad)
Entity.setHealth(e, 0);
}
ESP.toast("Every Player without admin was killed.");
});
var mkill3 = makeButton("Kill All", function(){
for each(var e in Entity.getAll()){
if(Entity.getEntityTypeId(e)<40)
Entity.setHealth(e, 0);
}
adH = 0;
ESP.toast("Everyone was killed.");
});
var madd = makeButton("Add Item", function(){addItem();});
var mclock = makeButton("Clock Moving", function(){clockMoving();});
var mcompass = makeButton("Compass Type", function(){compassType();});
var minv = makeButton("Reset Inv.", function(){
for(var n=0;n<36;n++)
Player.clearInventorySlot(n);
ESP.toast("인벤토리가 리셋되었습니다.");
});
var mqtt = makeButton("QTT", function(){
ModPE.leaveGame();
ESP.toast("Quit to Title.");
});
var msend = makeButton("Return", function(){ESP.send(ad);});
var msb2 = makeButton("초능력자 대전+", function(){openESPManager2();});
var mwb = makeButton("마법사 대전", function(){wizardBattle();});
var mbe = makeButton("부르르 능력자", function(){openBHE();});
var mst = makeButton("S-Transfer", function(){sTransfer();});
var mff = makeButton("Flower Fairy", function(){flowerFairy();});
var mee = makeButton("모두의 능력자", function(){openEE();});
var msaint = makeButton("사신수 능력자", function(){openSaint();});
var msd = makeButton("The Operaters", function(){theOperaters();});
var mnox = makeButton("Nox Populus", function(){noxPopulus();});
var mduo = makeButton("초능력자 대전 Duo", function(){openDuo();});
var melse = makeButton("ELSE", function(){openElse();});
var mlocate = makeButton("버튼 위치 수정", function(){setButtonLocation();});
var mcolor = makeButton("버튼 색 수정", function(){
if(emcolor==0){
emcolor = 1;
ESP.toast("흰색(반투명)으로 설정되었습니다. 맵 밖으로 나갔다가 들어오시면 적용됩니다.");
}
else if(emcolor==1){
emcolor = 2;
ESP.toast("무색(투명)으로 설정되었습니다. 맵 밖으로 나갔다가 들어오시면 적용됩니다.");
}
else if(emcolor==2){
emcolor = 3;
ESP.toast("회색(불투명)으로 설정되었습니다. 맵 밖으로 나갔다가 들어오시면 적용됩니다.");
}
else{
emcolor = 0;
ESP.toast("검은색(반투명)으로 설정되었습니다. 맵 밖으로 나갔다가 들어오시면 적용됩니다.");
}
});
var minfo = makeButton("맵 정보", function(){mapData();});
var minfo2 = makeButton("스킬 정보", function(){skillInfoSelect();});
var minfo3 = makeButton("스크립트 정보", function(){scriptInfoDialog();});
var mcmd = makeButton("명령어 목록", function(){openCmdList();});
var mss = new android.widget.ToggleButton(ctx);
var minfo4 = makeButton("0.4.3+", function(){
ESP.skillInfo("초능력자 대전 0.4.3+", "0.4.3+는 구버전 초능력자 대전이라고 보면 됩니다. 각성블록들은 전용맵에 숨겨져 있습니다.\n능력 아이템들은 다음과 같으며, 각성블록을 터치하면 해당 능력의 능력 아이템들이 드롭됩니다.\n\nFire Master : 268(나무칼)-269(나무삽)-270(나무 곡괭이)-271(나무도끼)\nWater Controller : 272(돌칼)-273(돌삽)-274(돌곡괭이)-275(돌도끼)\nNature Guardian : 280(막대기)-281(그릇)-288(깃털)-289(화약)\nI am Creeper : 가죽세트(298~301)\nEarth Bander : 290(나무괭이)-291(돌괭이)-292(철괭이)-294(금괭이)\nThe Summoner : 금갑빠세트(314~317)\nThe Darkness : 레드스톤-눈덩이-가죽-점토벽돌(331, 332, 334, 336)\nThe Darkness : 석탄-다이아-철-금(263~266)\nThe Freezer : 부싯돌(318)-밀(296)-종이(339)-발광석 가루(348)\n");
});
var mqa = makeButton("Q & A", function(){qA();});
var mai = makeButton("A.I.S.", function(){aiESP();});
var mpm = new android.widget.ToggleButton(ctx);
var msc = makeToggleButton("Show Cool Time", "Show Cool Time", 
function(){
adsc = true;
},
function(){
adsc = false;
ModPE.showTipMessage("");
},
adsc);
var mbgm = makeToggleButton("BGM on", "BGM off", 
function(){
bgmPlayer(true);
},
function(){
bgmPlayer(false);
},
bgmOnoff);
var mtown = makeToggleButton("Town Protection on", "Town Protection off", 
function(){
town = true;
},
function(){
town = false;
},
town);
var mban = makeButton("Ban", function(){banMenu();});
var mesp = makeToggleButton("ESP-SB on", "ESP-SB off", 
function(){
espOnoff = true;
},
function(){
espOnoff = false;
},
espOnoff);
var mblog = makeButton("제작자 블로그", function(){blogDialog();});
var mcv = makeButton("최신버전 확인", function(){
ESP.toast("인터넷이 연결되어야 작동합니다.");
scriptVersionCheck();
});
var mmulti = makeButton("서버원 모드", function(){
multi = true;
ESP.toast("서버원 모드로 변경되었습니다.");
if(menu!=null){
menu.dismiss();
menu = null;
}
if(menu2!=null){
menu2.dismiss();
menu2 = null;
}
if(btnPlayer!=null){
btnPlayer.dismiss();
btnPlayer = null;
}
if(menuP!=null){
menuP.dismiss();
menuP = null;
}
if(btnTime!=null){
btnTime.dismiss();
btnTime = null;
}
if(menuH!=null){
menuH.dismiss();
menuH = null;
}
});
var mdt = makeButton("제작자 소환", function(){
if(dt.l==false){
showSummonDialog();
}
else if(dt.l==true){
ESP.toast("2명 이상 소환하실 수 없습니다.");
}
});
var mae = makeToggleButton("Admin Exp. Demage", "Admin Exp. Demage", 
function(){
exp.onoff = true;
},
function(){
exp.onoff = false;
},
exp.onoff);
var msl = makeToggleButton("Street Light", "Street Light", 
function(){
if(mp3==true&&mp==false){
if(nightCheck()){
slt = 2;
}
streetLight = true;
}
else{
ESP.toast("공식 전용맵에서만 사용이 가능합니다.");
msl.setChecked(false);
}
},
function(){
slt2 = true;
streetLight = false;
slt = 0;
},
streetLight);
var mdc = makeButton("Death Count", function(){showDeathCount();});
var mparty = makeButton("Party", function(){Party.openManager();});
var mrp = makeButton("Random Picking", function(){
if(ra.t3==0){
randomPicking(false);
ra.t3 = 11;
}
else if(ra.t3>0){
randomPicking(true);
}
});
mrm.setTextOn("Removing Mobs");
mrm.setTextOff("Removing Mobs");
mrd.setTextOn("RD on");
mrd.setTextOff("RD off");
mss.setTextOn("Screen Shot");
mss.setTextOff("Screen Shot");
mpm.setTextOn("Player Manager");
mpm.setTextOff("Player Manager");

if(anti3==0)
mrm.setChecked(false);
else
mrm.setChecked(true);
if(anti4==0)
mrd.setChecked(false);
else
mrd.setChecked(true);
if(btnSS!=null)
mss.setChecked(true);
else if(btnSS==null)
mss.setChecked(false);
if(btnPlayer!=null)
mpm.setChecked(true);
else if(btnPlayer==null)
mpm.setChecked(false);

mrm.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
onCheckedChanged : function(toggle, onoff){
if(onoff==true){
anti3 = 45;
ESP.toast("Removing Mob on");
}
else if(onoff==false){
anti3 = 0;
ESP.toast("Removing Mob off");
}
}
}));
mrd.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
onCheckedChanged : function(toggle, onoff){
if(onoff==true){
anti4 = 45;
ESP.toast("Removing Dropped Item on");
}
else if(onoff==false){
anti4 = 0;
ESP.toast("Removing Dropped Item off");
}
}
}));
mss.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
onCheckedChanged : function(toggle, onoff){
if(onoff==true){
makeScreenShotButton();
}
else if(onoff==false){
if(btnSS!=null){
btnSS.dismiss();
btnSS = null;
}
}
}
}));
mpm.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
onCheckedChanged : function(toggle, onoff){
if(onoff==true){
makePMButton();
}
else if(onoff==false){
if(btnPlayer!=null){
btnPlayer.dismiss();
btnPlayer = null;
}
}
}
}));
var down = makeButton("추가 파일 다운로드", function(){
makeDownloadDialog();
});
var file = new java.io.File(sdcard+"/darkTornado/ESP Script/onoff.txt");
var heall = makeToggleButton("철칼 - 회복", "철칼 - 회복", 
function(){
try{
var forder = new java.io.File(sdcard+"/darkTornado/");
var forder2 = new java.io.File(sdcard+"/darkTornado/ESP Script/");
forder.mkdir();
forder2.mkdir();
var file = new java.io.File(sdcard+"/darkTornado/ESP Script/onoff.txt");
var fos = new java.io.FileOutputStream(file);
var str = new java.lang.String("true");
fos.write(str.getBytes());
fos.close();
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
},
function(){
var file = new java.io.File(sdcard+"/darkTornado/ESP Script/onoff.txt");
if(file.exists()) file.delete();
},
file.exists());

layout.addView(mar);
layout.addView(mrm);
layout.addView(mrd);
layout.addView(mss);
layout.addView(mdtl);
layout.addView(mamr);
layout.addView(mpm);
layout.addView(msc);
layout.addView(mbgm);
layout.addView(mpass);
layout.addView(mtown);
layout.addView(mesp);
layout.addView(mae);
layout.addView(msl);
layout.addView(heall);
layout.addView(mreset);
layout.addView(mal);
layout.addView(mal2);
layout.addView(mal3);
layout.addView(mdc);
layout.addView(mparty);
layout.addView(mrp);
layout.addView(madd);
layout.addView(minv);
layout.addView(mclock);
layout.addView(mcompass);
layout.addView(mkill);
layout.addView(mkill2);
layout.addView(mkill3);
layout.addView(msend);
layout.addView(mban);
layout.addView(mqtt);
layout.addView(msb2);
layout.addView(mduo);
layout.addView(mwb);
layout.addView(mbe);
layout.addView(mst);
layout.addView(mff);
layout.addView(mee);
layout.addView(msaint);
layout.addView(msd);
layout.addView(mnox);
layout.addView(melse);
layout.addView(mai);
layout.addView(down);
layout.addView(mlocate);
layout.addView(mcolor);
layout.addView(minfo);
layout.addView(minfo2);
layout.addView(minfo3);
layout.addView(mcmd);
layout.addView(minfo4);
layout.addView(mqa);
layout.addView(mblog);
layout.addView(mcv);
layout.addView(mmulti);
layout.addView(mdt);
var exit = makeExitButton(menu2);
layout.addView(exit);
var scroll = makeScroll(layout,menu2);
menu2.setContentView(scroll);
menu2.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu2.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}


function openESPManager2(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
menu3 = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("초능력자 대전+\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);

var button = new Array();
var names = ["토르", "포세이돈", "카이지", "미사카 미코토", "엘사", "푸서", "에이스", "패스터", "록 리", "목둔", "아카이누", "슬로워", "가아라"];
for(var n in names){
button[n] = new android.widget.Button(ctx);
button[n].setText(names[n]);
button[n].setId(n);
button[n].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
SB2.espManage(v.getId());
}
});
layout.addView(button[n]);
}
var m3info = android.widget.Button(ctx);
m3info.setText("도움말");
m3info.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.infoDialog("초능력자 대전+", "\"초능력자 대전+\"는 \"초능력자 대전\"의 전용맵(0.9.0 이상용 말고)의 지하 1층에 있는 능력으로, 철괴와 금괴로 작동하는 능력이다. 쿨타임은 각각 20초와 30초이다.\n\n\n<스킬 설명>\n\n토르\n스킬1 : 터치한 곳에 벼락을 떨어뜨린다. 벼락이 떨어진 곳에는 불이 붙는다.\n스킬2 : 전기를 바라보는 방향으로 약간(?)날린다.\n\n포세이돈\n스킬1 : 물을 중심으로 흐르게 하여, 상대방을 가둔다(Water Controller의 워터 바인드와 유사).\n스킬2 : 물과 유리로 만든 감옥에 상대방을 가둔다(유리는 한겹으로 되어있다).\n\n카이지\n스킬1 : 상대방을 때릴 시, 둘 중 한명만 살아남거나 둘 다 죽는다. 확률은 모두 1/3이다.\n스킬2 : 자신의 체력을 랜덤으로 설정한다(범위는 11~20).\n\n미사카 미코토\n스킬1 : 바라보는 방향으로 레일건을 발사한다.\n스킬2 : 자신의 주변에 낙뢰를 떨어뜨린다.\n\n엘사\n스킬1 : 자신의 발밑을 얼려버린다.\n스킬2 : 얼음탑을 소환하여 상대방을 가둔 뒤, 그 얼음탑을 폭파시킨다.\n\n푸서\n스킬1 : 상대방을 밀친다.\n스킬2 : 벽을 밀고, 그 반작용으로 자신을 반대방향으로 밀친다(패스터의 스킬1에서 방향이 바뀐 것. 즉, 터치한곳의 반대방향으로 자기 자신을 밈). 쿨타임 10초\n\n에이스\n스킬1 : 불을 5×5-4개 소환한다.\n스킬2 : 자신의 주위에 불을 두른다. 한번 더 터치하면 더 나오고, 다시 터치하면 사라진다.\n\n패스터\n스킬1 : 터치한 뱡향으로 자기 자신을 민다(터치한 뱡향으로 일시적으로 빠르게 이동). 쿨타임 5초\n스킬2 : 터치한 뱡향으로 이동하면서, 자신이 지나간 곳을 터트린다(스킬1+폭발).\n\n록 리\n스킬1 : 상대방을 위로 날린다.\n스킬2 : 상대방 체력 5 감소&더 높이 던진다.\n\n목둔\n스킬1 : 터치한 곳에 가공된 나무로된 장벽을 소환한다.\n스킬2 : 상대방을 나무 속에 가둔다. 그 나무속에는 불이 붙어 있다.\n\n아카이누\n스킬1 : 흐르는 용암을 소환한다. 3×3으로 한칸정도 파이니, 넓게 흐르지는 않는다.\n스킬2 : 구멍을 뚫고, 그 위에 흐르는 용암을 하나 소환한다.\n\n슬로워\n스킬1 : 거미줄을 3×3+1로 소환한다.\n스킬2 : 바라보는 방향으로 거미줄을 발사한다.\n\n가아라\n스킬1 : 땅을 3×3으로 한칸 판 뒤, 모래를 3×3×3으로 소환한다.\n스킬2 : 자신의 주변을 모래로 바꾸고 자신의 주변부터 모래를 아래로 떨어뜨린다. 그 뒤에 자신이 지나갈 길을 위쪽에 만든다(?)\n", "2014 Dark Tornado\n(http:\/\/blog.naver.com\/dt3141592)");
}
});
layout.addView(m3info);
var exit = makeExitButton(menu3);
layout.addView(exit);
var scroll = makeScroll(layout,menu3);
menu3.setContentView(scroll);
menu3.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu3.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage("error : "+e);
}
}
}));
}


function wizardBattle(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
menu4 = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("마법사 대전\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);

var wizardNames = ["Fire", "Water", "Tree", "Air", "Burst", "Earth", "Light", "Dark", "Bind", "Lightning"];
var button = new Array();
for(var n in wizardNames){
button[n] = new android.widget.Button(ctx);
button[n].setText(wizardNames[n]+" Wizard");
button[n].setId(n);
button[n].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
WB.wizardManage(v.getId());
}
});
layout.addView(button[n]);
}
var m4info = new android.widget.Button(ctx);
m4info.setText("도움말");
m4info.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.infoDialog("마법사 대전", "\"마법사 대전\"은 The Mage의 집 지하에(0.9.0 이상용 맵은 따로 집이 있음) 각성블록들이 있는 능력이다. 철괴는 공격기, 금괴는 방어기, 다이아몬드는 궁극기의 능력아이템이며, 공격기와 방어기는 쿨타임이 20초, 궁극기는 1분이며, 궁극기 사용시의 체력회복은 없다.\n\n\nFire Wizard\n공격기 : 바라보는 방향으로 불을 발사한다.\n방어기 : 자신의 주위에 불을 붙인다.\n궁극기 : 자신의 주변이 터지고 불이 붙는다.\n\nWater Wizard\n공격기 : Water Controller의 워터 바인드가 생각나는 기술+TNT 1개\n방어기 : 자신의 주변에 물과 얼음을 두른다.\n궁극기 : 하늘로 부터 얼음 기둥을 소환, 폭파시킨다.\n\nTree Wizard\n공격기 : 상대방을 나무감옥 내부에 가둔다.\n방어기 : 나무로 된 벽을 소환한다.\n궁극기 : 자신의 주위에 기괴한 나무를 자라게 한 뒤, 터트린다.\n\nAir Wizard\n공격기 : 바라보는 방향으로 폭발이 나간다.\n방어기 : 공기의 장벽(유리벽)을 소환한다.\n궁극기 : 하늘로 부터 공기덩어리(유리)를 소환, 폭파시킨다.\n\nBurst Wizard\n공격기 : 터치한 곳이 터진다.\n방어기 : 자신의 주변이 터진다.\n궁극기 : 하늘로 부터 활성화된 TNT들을 떨어뜨린다.\n\nEarth Wizard\n공격기 : 불이 붙어있는 구멍을 소환한다.\n방어기 : 흙감옥을 소환한다.\n궁극기 : 자신의 주변에 용암을 소환한다.\n\nLight Wizard\n공격기 : 바라보는 방향으로 빛을 발사한다.\n방어기 : 빛의 장벽을 소환한다.\n궁극기 : 하늘로 부터 빛 기둥을 떨어뜨린다.\n\nDark Wizard\n공격기 : 바라보는 방향으로 어둠을 발사한다.\n방어기 : 어둠의 장벽을 소환한다.\n궁극기 : 땅으로 부터 어둠 기둥을 끌어올린다.\n\nBind Wizard\n공격기 : 거미줄 소환+폭발.\n방어기 : 거미줄 벽을 소환한다.\n궁극기 : 자신의 주변의 적에게 거미줄을 소환한다.\n", "2015 Dark Tornado\nhttp:\/\/blog.naver.com\/dt3141592");
}
});
layout.addView(m4info);
var exit = makeExitButton(menu4);
layout.addView(exit);
var scroll = makeScroll(layout,menu4);
menu4.setContentView(scroll);
menu4.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu4.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}catch(e){
clientMessage("error : "+e);
}
}
}));
}


function openBHE(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
menu5 = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("부르르 능력자\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);

var m5bh = android.widget.Button(ctx);
var m5dk = android.widget.Button(ctx);
var m5nb = android.widget.Button(ctx);
var m5gamble = android.widget.Button(ctx);
var m5thief = android.widget.Button(ctx);
var m5dual = android.widget.Button(ctx);
var m5cannon = android.widget.Button(ctx);
var m5info = android.widget.Button(ctx);

m5bh.setText("Bright Hurricane jr.");
m5dk.setText("Dark Knight");
m5nb.setText("Nature Breaker");
m5gamble.setText("Gambler");
m5thief.setText("Thief");
m5dual.setText("Dual Blade");
m5cannon.setText("Cannon Shooter");
m5info.setText("도움말");

m5bh.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
BHE.brightHurricaneJr();
}
});
m5dk.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
BHE.darkKnight();
}
});
m5nb.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
BHE.natureBreaker();
}
});
m5gamble.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
BHE.gambler();
}
});
m5thief.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
BHE.thief();
}
});
m5dual.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
BHE.dualBlade();
}
});
m5cannon.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
BHE.cannonShooter();
}
});
m5info.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.infoDialog("부르르 능력자", "\"부르르 능력자\"는 Bright Hurricane(부르르)가 아이디어를 내고, Dark Tornado가 제작한 능력자 스크립트 이며, 능력사용방식과 각성방식은 \"초능력자 대전\"과 동일합니다.\n\n\n\n<스킬설명>\n\n\nBright Hurricane jr.\n기본기 : 터치한 곳에 폭발+TNT를 소환한다.\n스킬1 : 바라보는 방향으로 라이트 버스터를 날린다\n스킬2 : 자신의 주위가 터진다.\n궁극기 : 하늘에서 빛의 힘을 떨어뜨린다.\n\nDark Knight\n기본기 : 보고있는 방향으로 검은 창을 휘두른다\n스킬1 : 검은 방패를 소환한다.\n스킬2 : 바라보는 곳을(?) 터트린다\n궁극기 : 자신의 주위에 옵시디언 벽을 생성, 자신의 발 밑은 제외한 바닥을 용암으로 변경한다.\n\nNature Breaker\n기본기 : 불타는 나무를 소환한다(폭발동반);\n스킬1 : 불타는 나뭇잎 감옥을 소환한다.\n스킬2 : 10초간 자신의 주위에 있는 나무를 지운다.\n궁극기 : 한번 터치하면 바닥에 나뭇잎이 깔리고, 한번 더 터치하면 폭발+불이 붙는다.\n\nGambler\n기본기 : 상대방 타격 시, 상대의 체력을 2, 4, 6, 8 중 하나로 내린다.\n스킬1 : 1/2확률로 자신의 체력을 4 올리거나 내린다.\n스킬2 : 1/2확률로 궁극기 쿨타임 10초 감소. 실패시 체력 5 감소\n궁극기 : 상대를 타겟 후, 땅 터치시 50%확률로 자신 또는 상대가 죽음\n\nThief\n기본기 : 터치한 부분을 터트림.\n스킬1 : 터치한 방향으로 텔레포트\n스킬2 : 상대방의 체력을 5 스틸\n궁극기 : 타 능력자의 궁극기 중 하나를 랜덤으로 사용\n\nDual Blade\n기본기 : 상대방의 체력 감소. 30%확률로 2 추가데미지\n스킬1 : 터치한 방향으로 순간이동\n스킬2 : 상대방이 10%확률로 즉사함\n궁극기 : 자신의 주위를 터트림\n\nCannon Shooter\n기본기 : 바라보는 방량으로 대포를 발사한다.\n스킬1 : 자신의 주변에 불구덩이를 두른다.\n스킬2 : 6가지 버프(?) 중 하나를 받는다.\n  1. 공격범위 증가\n  2. 폭발력 증가\n  3. 체력회복\n  4. 체력감소\n  5. 궁극기 쿨타임 10초 감소\n  6. 아무일도 안일어남\n궁극기 : \"노틸러스 호\"를 소환한다.\n", "2014 Bright Hurricane\n(http:\/\/gunhee3933.blog.me\/)\n& Dark Tornado\n(http:\/\/blog.naver.com\/dt3141592)");
}
});

layout.addView(m5bh);
layout.addView(m5dk);
layout.addView(m5nb);
layout.addView(m5gamble);
layout.addView(m5thief);
layout.addView(m5dual);
layout.addView(m5cannon);
layout.addView(m5info);
var exit = makeExitButton(menu5);
layout.addView(exit);
var scroll = makeScroll(layout,menu5);
menu5.setContentView(scroll);
menu5.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu5.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}catch(e){
clientMessage("error : "+e);
}
}}));

}


function sTransfer(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
menu6 = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("S-Transfer\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);

var m6junior = android.widget.Button(ctx);
var m6blood = android.widget.Button(ctx);
var m6electric = android.widget.Button(ctx);
var m6spear = android.widget.Button(ctx);
var m6teb = android.widget.Button(ctx);
var m6ice = android.widget.Button(ctx);
var m6dust = android.widget.Button(ctx);
var m6ground = android.widget.Button(ctx);
var m6flame = android.widget.Button(ctx);
var m6water = android.widget.Button(ctx);

m6junior.setText("S-Junior Transfer");
m6blood.setText("S-Blood Transfer");
m6electric.setText("S-Electric Transfer");
m6spear.setText("S-Sword Transfer");
m6teb.setText("S-T.E.B Transfer");
m6ice.setText("S-Ice Transfer");
m6dust.setText("S-Dust Transfer");
m6ground.setText("S-Ground Transfer");
m6flame.setText("S-Flame Transfer");
m6water.setText("S-Water Transfer");

m6junior.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ST.juniorTransfer();
}
});
m6blood.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ST.bloodTransfer();
}
});
m6electric.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ST.electricTransfer();
}
});
m6spear.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ST.spearTransfer();
}
});
m6teb.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ST.tebTransfer();
}
});
m6ice.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ST.iceTransfer();
}
});
m6dust.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ST.dustTransfer();
}
});
m6ground.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ST.groundTransfer();
}
});
m6flame.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ST.flameTransfer();
}
});
m6water.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ST.waterTransfer();
}
});

layout.addView(m6junior);
layout.addView(m6blood);
layout.addView(m6electric);
layout.addView(m6spear);
layout.addView(m6teb);
layout.addView(m6ice);
layout.addView(m6dust);
layout.addView(m6ground);
layout.addView(m6flame);
layout.addView(m6water);

var exit = makeExitButton(menu6);
layout.addView(exit);
var scroll = makeScroll(layout,menu6);
menu6.setContentView(scroll);
menu6.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu6.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage("error : "+e);
}
}
}));
}


function flowerFairy(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
menu6 = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Flower Fairy\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);

var m6rose = android.widget.Button(ctx);
var m6primula = android.widget.Button(ctx);
var m6ivy = android.widget.Button(ctx);
var m6daisy = android.widget.Button(ctx);
var m6rose2 = android.widget.Button(ctx);
var m6peony = android.widget.Button(ctx);
var m6orchid = android.widget.Button(ctx);
var m6violet = android.widget.Button(ctx);

m6rose.setText("Queen Rose");
m6primula.setText("Yellow Peimula");
m6ivy.setText("Green Ivy");
m6daisy.setText("While Daisy");
m6rose2.setText("Rose de Darkness");
m6peony.setText("Pink Peony");
m6orchid.setText("Blue Orchid");
m6violet.setText("Purple Violet");

m6rose.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
FF.queenRose();
}
});
m6primula.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
FF.yellowPrimula();
}
});
m6ivy.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
FF.greenIvy();
}
});
m6daisy.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
FF.whiteDaisy();
}
});
m6rose2.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
FF.roseDeDarkness();
}
});
m6peony.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
FF.pinkPeony();
}
});
m6orchid.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
FF.blueOrchid();
}
});
m6violet.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
FF.purpleViolet();
}
});

layout.addView(m6rose);
layout.addView(m6primula);
layout.addView(m6ivy);
layout.addView(m6daisy);
layout.addView(m6rose2);
layout.addView(m6peony);
layout.addView(m6orchid);
layout.addView(m6violet);

var exit = makeExitButton(menu6);
layout.addView(exit);
var scroll = makeScroll(layout,menu6);
menu6.setContentView(scroll);
menu6.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu6.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);

}catch(e){
clientMessage("error : "+e);
}
}}));

}


function openEE(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
menu7 = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("모두의 능력자\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
var button = new Array();
var names = ["Flame Master", "Soul Assaulter", "무인", "Grand Master", "Tornado Breaker", "The Fighter", "Solar Knight", "Earth Breaker", "Dragonian", "Amazing Fighter", "Sonic User", "Sonic Breaker", "악마계약자", "마더파더", "The Techenician TNT", "Space Man", "The Archone", "Launcher", "Blood Assaulter", "The Mom", "The Bomber", "Bounse Master", "Herobring", "Counter Attacker", "Legendary Slasher", "Priest", "Angel", "Devil", "Grim Reaper"];
for(var n in names){
button[n] = new android.widget.Button(ctx);
button[n].setText(names[n]);
}
button[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.flameMaster();
}
});
button[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.soulAssaulter();
}
});
button[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.muin();
}
});
button[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.grandMaster();
}
});
button[4].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.tornadoBreaker();
}
});
button[5].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.theFighter();
}
});
button[6].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.solarKnight();
}
});
button[7].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.earthBreaker();
}
});
button[8].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.dragonian();
}
});
button[9].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.amazingFighter();
}
});
button[10].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.sonicUser();
}
});
button[11].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.sonicBreaker();
}
});
button[12].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.devil();
}
});
button[13].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.motherFather();
}
});
button[14].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.theTechenicianTNT();
}
});
button[15].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.spaceMan();
}
});
button[16].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.theArchone();
}
});
button[17].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.launcher();
}
});
button[18].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.bloodAssaulter();
}
});
button[19].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.theMom();
}
});
button[20].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.theBomber();
}
});
button[21].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.bounseMaster();
}
});
button[22].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.herobring();
}
});
button[23].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.counterAttacker();
}
});
button[24].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.legendarySlasher();
}
});
button[25].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.priest();
}
});
button[26].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.angel();
}
});
button[27].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.Devil();
}
});
button[28].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
EE.grimReaper();
}
});
for(var n in names)
layout.addView(button[n]);

var exit = makeExitButton(menu7);
layout.addView(exit);
var scroll = makeScroll(layout,menu7);
menu7.setContentView(scroll);
menu7.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu7.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage("error : "+e+", "+e.lineNumber);
}
}
}));
}


function openElse(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
menu8 = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("ELSE\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);

var m8hyper = makeButton("Hyper", function(){Else.hyper();});
var m8bupper = makeButton("Buffer", function(){Else.bupper();});
var m8gc = makeButton("God's Controlling", function(){Else.godsControlling();});
var m8jbl = makeButton("지브릴", function(){Else.jibulil();});
var m8rb = makeButton("Rule Breaker", function(){Else.ruleBreaker();});
var m8joker = makeButton("Joker", function(){Else.joker();});
var m8shadow = makeButton("Shadow", function(){Else.shadow();});
var m8ninja = makeButton("The Ninja", function(){Else.theNinja();});

layout.addView(m8hyper);
layout.addView(m8bupper);
layout.addView(m8gc);
layout.addView(m8jbl);
layout.addView(m8rb);
layout.addView(m8joker);
layout.addView(m8shadow);
layout.addView(m8ninja);

var exit = makeExitButton(menu8);
layout.addView(exit);
var scroll = makeScroll(layout, menu8);
menu8.setContentView(scroll);
menu8.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu8.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage("error : "+e);
}
}
}));
}


function openSaint(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
menu9 = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("사신수 능력자\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);

var m9west = makeButton("풍백(백호)", function(){Saint.west();});
var m9east = makeButton("운사(청룡)", function(){Saint.east();});
var m9north = makeButton("우사(현무)", function(){Saint.north();});
var m9south = makeButton("화백(주작)", function(){Saint.south();});

layout.addView(m9west);
layout.addView(m9east);
layout.addView(m9north);
layout.addView(m9south);

var exit = makeExitButton(menu9);
layout.addView(exit);
var scroll = makeScroll(layout,menu9);
menu9.setContentView(scroll);
menu9.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu9.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage("error : "+e);
}
}
}));
}


function theOperaters(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
menu11 = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("The Operaters\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);

var button = new Array();
button[0] = makeButton("Fire Operater", function(){OP.fireOperater();});
button[1] = makeButton("Water Operater", function(){OP.waterOperater();});
button[2] = makeButton("Tree Operater", function(){OP.treeOperater();});
button[3] = makeButton("Soil Operater", function(){OP.soilOperater();});
button[4] = makeButton("Burst Operater", function(){OP.burstOperater();});
button[5] = makeButton("Air Operater", function(){OP.airOperater();});
button[6] = makeButton("Light Operater", function(){OP.lightOperater();});
button[7] = makeButton("Dark Operater", function(){OP.darkOperater();});
button[8] = makeButton("Blood Operater", function(){OP.bloodOperater();});
for(var n in button)
layout.addView(button[n]);

var m11info = makeButton("도움말", function(){
ESP.infoDialog("The Operaters", "\"The Operaters\"는 \"Dark Tornado\"의 또다른 자아인 \"Skill Drottinn(Skill Master)\"이 만든 능력자 스크립트로서, \"초능력자 대전\"과 능력아이템과 각성블록이 같으며, 패시브 스킬이 있습니다.\n\n\nSkill Master jr.\n기본기 : 터치한 곳으로 순간이동. 쿨타임 5초\n스킬1 : 바라보는 방향으로 라이트 버스터를 날린다.\n스킬2 : 자신의 주위를 터트린다+불붙이기\n궁극기 : 자신의 주위에 있는 적들을 조용히 조진다(?).\n패시브 : 공격력 1 증가\n\nFire Operater\n기본기 : 바라보는 방향으로 불을 발사한다.\n스킬1 : 자신의 주위의 상대에게 불을 붙인다.\n스킬2 : 터치한 곳에 폭발+불\n궁극기 : 자신의 주위에 불을 두르고, 자신의 주위의 상대에게 불을 붙인다.\n패시브 : 불안붙음\n\nWater Operater\n기본기 : 물을3×3으로 소환한다.\n스킬1 : 물이 흐르는 얼음벽을 소환한다\n스킬2 : TNT가 들어있는 물감옥을 소환한다.\n궁극기 : 30초간 수영장(?)을 만든다+상대방 타격시 1/2확률로 1추가 데미지.\n패시브 : 물속에서 공격력 1증가\n\nTree Operater\n기본기 : 나뭇잎 벽을 소환한다.\n스킬1 : 나뭇잎 감옥+TNT를 소환한다.\n스킬2 : 전나무를 소환한다.\n궁극기 : 정글 나무를 소환한다.\n패시브 : 상대방 타격시 1/2확률로 1추가 데미지\n\nBurst Operater\n기본기 : 터치한 곳이 터진다\n스킬1 : 바라보는 방향으로 폭발을 발사한다\n스킬2 : 하늘에서 약간의 TNT가 내린다.\n궁극기 : 자신의 주위가 터진다.\n패시브 : 상대방 타격시 1/2확률로 1추가 데미지\n\nSoil Operater\n기본기 : 터치한 곳에 흙벽이 생긴다.\n스킬1 : 바라보는 방향으로 땅이 갈라진다(?).\n스킬2 : 바라보는 방향으로 흙을 발사한다.\n궁극기 : 돌기둥들을 소환, 터트린다.\n패시브 : 상대방 타격시 1/2확률로 1추가 데미지\n\nAir Operater\n기본기 : 상대를 밀친다.\n스킬1 : 공기의 장벽(유리벽)을 소환한다.\n스킬2 : 상대를 약간 높이 던진다.\n궁극기 : 자신의 주위로 충격파를 날린다.\n패시브 - 상대방 타격시 1/2확률로 1추가 데미지\n\nLight Operater\n기본기 : 빛의 벽을 소환한다.\n스킬1 : 바라보는 방향으로 빛을 날린다.\n스킬2 : 상대와 자신의 체력을 4 회복한다.\n궁극기 : 하늘로부터 빛을 떨어뜨린다.\n패시브 - 낮에 공격력 1 증가\n\nDark Operater\n기본기 : 어둠의 벽을 소환한다.\n스킬1 : 바라보는 방향으로 어둠을 날린다.\n스킬2 : 상대의 체력을 4 흡수한다.\n궁극기 : 땅으로부터 어둠을 끌어올린다.\n패시브 - 밤에 공격력 1 증가\n\nBlood Operater\n기본기 : 땅으로 부터 체력 3을 흡수한다.\n스킬1 : 상대의 체력 5를 흡수한다.\n스킬2 : 상대의 체력 3 흡수+텔레포트.\n궁극기 : 자신의 주위에 있는 자들의 체력 10을 흡수한다\n패시브 - 상대방 타격시 1/2확률로 체력흡수\n", "2015 Skill Drottinn\n(http:\/\/blog.naver.com\/qncoehtk000)");
});
layout.addView(m11info);

var exit = makeExitButton(menu11);
layout.addView(exit);
var scroll = makeScroll(layout,menu11);
menu11.setContentView(scroll);
menu11.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu11.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage("error : "+e);
}
}
}));
}


function noxPopulus(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
menu13 = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Nox Populus\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);

var nox = new Array(24);
var names = ["Feoh", "Uruz", "Thurisaz", "Ansur", "Raidho", "Kenaz", "Geofu", "Hagall", "Winn", "Nyd", "Is", "Zera", "Yr", "Peroth", "Elho", "Sigal", "Tir", "Beroc", "Ehwaz", "Mannaz", "Laguz", "Ing", "Othel", "Daeg"];
for(var n=0;n<24;n++){
nox[n] = new android.widget.Button(ctx);
nox[n].setText(names[n]);
}
nox[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.feoh();
}
});
nox[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.uruz();
}
});
nox[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.thurisaz();
}
});
nox[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.ansur();
}
});
nox[4].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.raidho();
}
});
nox[5].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.kenaz();
}
});
nox[6].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.geofu();
}
});
nox[7].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.hagall();
}
});
nox[8].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.winn();
}
});
nox[9].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.nyd();
}
});
nox[10].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.is();
}
});
nox[11].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.zera();
}
});
nox[12].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.yr();
}
});
nox[13].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.peroth();
}
});
nox[14].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.elho();
}
});
nox[15].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.sigal();
}
});
nox[16].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.tir();
}
});
nox[17].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.beroc();
}
});
nox[18].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.ehwaz();
}
});
nox[19].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.mannaz();
}
});
nox[20].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.laguz();
}
});
nox[21].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.ing();
}
});
nox[22].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.othel();
}
});
nox[23].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
NP.daeg();
}
});
for(var n=0;n<24;n++)
layout.addView(nox[n]);

var exit = makeExitButton(menu13);
layout.addView(exit);
var scroll = makeScroll(layout,menu13);
menu13.setContentView(scroll);
menu13.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu13.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNimber);
}
}
}));
}


function setButtonLocation(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.setGravity(android.view.Gravity.CENTER);
var layout1 = new android.widget.LinearLayout(ctx);
layout1.setGravity(android.view.Gravity.CENTER);
layout1.setOrientation(0);
var loc1 = new android.widget.Button(ctx);
var loc2 = new android.widget.Button(ctx);
var loc3 = new android.widget.Button(ctx);
loc1.setText("↖");
loc2.setText("↑");
loc3.setText("↗");
loc1.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
locate = 0;
ESP.toast("수정되었습니다.");
}
});
loc2.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
locate = 2;
ESP.toast("수정되었습니다.");
}
});
loc3.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
locate = 3;
ESP.toast("수정되었습니다.");
}
});
layout1.addView(loc1);
layout1.addView(loc2);
layout1.addView(loc3);
var layout2 = new android.widget.LinearLayout(ctx);
layout2.setGravity(android.view.Gravity.CENTER);
layout2.setOrientation(0);
var loc4 = new android.widget.Button(ctx);
var loc5 = new android.widget.Button(ctx);
var loc6 = new android.widget.Button(ctx);
loc4.setText("←");
loc5.setText("○");
loc6.setText("→");
loc4.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
locate = 4;
ESP.toast("수정되었습니다.");
}
});
loc5.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
locate = 5;
ESP.toast("수정되었습니다.");
}
});
loc6.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
locate = 6;
ESP.toast("수정되었습니다.");
}
});
layout2.addView(loc4);
layout2.addView(loc5);
layout2.addView(loc6);
var layout3 = new android.widget.LinearLayout(ctx);
layout3.setGravity(android.view.Gravity.CENTER);
layout3.setOrientation(0);
var loc7 = new android.widget.Button(ctx);
var loc8 = new android.widget.Button(ctx);
var loc9 = new android.widget.Button(ctx);
loc7.setText("↙");
loc8.setText("↓ ");
loc9.setText("↘");
loc7.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
locate = 7;
ESP.toast("수정되었습니다.");
}
});
loc8.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
locate = 8;
ESP.toast("수정되었습니다.");
}
});
loc9.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
locate = 9;
ESP.toast("수정되었습니다.");
}
});
layout3.addView(loc7);
layout3.addView(loc8);
layout3.addView(loc9);
layout.addView(layout1);
layout.addView(layout2);
layout.addView(layout3);
dialog.setTitle("버튼 위치 수정");
dialog.setView(layout);
dialog.setNegativeButton("터치한 곳으로 설정", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
makeScreen();
ESP.save("locate", 10);
locate = 10;
ESP.toast("화면을 터치하여 주세요.");
}
}));
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.save("locate", locate);
if(btn!=null){
btn.dismiss();
btn = null;
}
ESP.addEMButton();
}
}));
dialog.show();
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}


function openDuo(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
menuD = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("초능력자 대전 Duo\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
var names = ["Melt Downer", "Flower Planter", "I am Chobits", "The Precipitater", "The Buffer", "The Debuffer", "Remain Constructer", "The Curer", "Blood Absrober", "Ice Maker", "Flame User", "Sand Controller", "Teleport Master", "The Exploder", "Lightning Striker", "Food Eater", "Tree Grower", "Monster Rider"];
var button = new Array();
for(var n in names){
button[n] = new android.widget.Button(ctx);
button[n].setText(names[n]);
button[n].setId(n);
button[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
SD.espManage(v.getId());
}
});
layout.addView(button[n]);
}
var exit = makeExitButton(menuD);
layout.addView(exit);
var scroll = makeScroll(layout,menuD);
menuD.setContentView(scroll);
menuD.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menuD.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e);
}
}}));
}


var SB = {
darkTornadoJr : function(){
if(dtj!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var dtjmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Dark Tornado jr.\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(dtj));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var dtjoff = makeButton("ESP off", function(){
dtj = null;
ESP.toast("Dark Tornado jr. off");
});
var dtjsend = makeButton("Send ESP", function(){
ESP.send(dtj);
ESP.toast("Dark Tornado jr. was sent");
});
var dtjkill = makeButton("Kill ESP", function(){
ESP.kill(dtj);
ESP.toast("Dark Tornado jr. was killed");
});
var dtjheal = makeButton("Heal ESP", function(){
ESP.heal(dtj);
ESP.toast("Dark Tornado jr. was healed");
});
var dtjcall = makeButton("Call ESP", function(){
teleport(dtj, Entity.getX(ad), Entity.getY(ad)+1, Entity.getZ(ad));
ESP.toast("Dark Tornado jr. was called.");
});

layout.addView(dtjoff);
layout.addView(dtjsend);
layout.addView(dtjkill);
layout.addView(dtjheal);
layout.addView(dtjcall);
var exit = makeExitButton(dtjmenu);
layout.addView(exit);
var scroll = makeScroll(layout,dtjmenu);
dtjmenu.setContentView(scroll);
dtjmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
dtjmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}
else if(dtj==null){
ESP.toast("서버장 전용 능력입니다.");
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e))
players.push(e);
}
var radios = makeRadioList(players);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var dialog = makeDialog("Dark Tornado jr. on", layout, "취소", null, "확인", function(){
ESP.toast("Dark Tornado jr. on.");
dtj = playerTarget;
});
dialog.show();
}
},
fireExpert : function(){
if(fe!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var femenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Fire Expert\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(fe));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var feoff = makeButton("ESP off", function(){
fe = null;
ESP.toast("Fire Expert off");
});
var fesend = makeButton("Send ESP", function(){
ESP.send(fe);
ESP.toast("Dark Tornado jr. was sent");
});
var fekill = makeButton("Kill ESP", function(){
ESP.kill(fe);
ESP.toast("Fire Expert was killed");
});
var feheal = makeButton("Heal ESP", function(){
ESP.heal(fe);
ESP.toast("Fire Expert was healed");
});
var fecall = makeButton("Call ESP", function(){
teleport(fe, Entity.getX(ad), Entity.getY(ad)+1, Entity.getZ(ad));
ESP.toast("Fire Expert was called.");
});
layout.addView(feoff);
layout.addView(fesend);
layout.addView(fekill);
layout.addView(feheal);
layout.addView(fecall);
var exit = makeExitButton(femenu);
layout.addView(exit);
var scroll = makeScroll(layout,femenu);
femenu.setContentView(scroll);
femenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
femenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}
else if(fe==null){
ESP.toast("서버장(정확히는 제작자) 전용 능력입니다.");
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e))
players.push(e);
}
var radios = makeRadioList(players);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var dialog = makeDialog("Fire Expert on", layout, "취소", null, "확인", function(){
ESP.toast("Fire Expert on.");
fe = playerTarget;
});
dialog.show();
}
},
espManage : function(type){
if(eval(espCodes[type])==null){
SB.espOnoff(type, true);
}
else{
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var menu = new android.widget.PopupWindow();
var text = makeESPName(ra.n[type]);
var user = makeUserList(eval(espCode[type]));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
if(srs.indexOf(type)!=-1){
var srb = new android.widget.ToggleButton(ctx);
srb.setTextOn("sr. on");
srb.setTextOff("sr. off");
if(type==1) srb.setChecked(water2);
if(type==11) srb.setChecked(air2);
if(type==15) srb.setChecked(bind2);
if(type==19) srb.setChecked(heal2);
srb.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
onCheckedChanged : function(toggle, onoff){
if(type==1) water2 = onoff;
if(type==11) air2 = onoff;
if(type==15) bind2 = onoff;
if(type==19) heal2 = onoff;
if(type==19){
if(onoff) ESP.toast("Dark Healer on");
else ESP.toast("Dark Healer off");
}
else{
if(onoff) ESP.toast(ra.n[type]+" sr. on");
else ESP.toast(ra.n[type]+" sr. off");
}
}
}));
layout.addView(srb);
}
var button = new Array();
button[0] = makeButton("ESP on", function(){SB.espOnoff(type, true);});
button[1] = makeButton("ESP off", function(){
if(eval(espCode[type]+"[1]")==null){
SB.espOff(type);
SB.removeUserData(type, -1);
ESP.toast(ra.n[type]+" off");
}
else{
SB.espOnoff(type, false);
}
});
button[2] = makeButton("Send ESP", function(){
if(eval(espCode[type]+"[1]")==null){
ESP.send(eval(espCodes[type]));
ESP.toast(ra.n[type]+" was sent");
}
else{
selectUser(eval(espCode[type]), 1, ra.n[type]);
}
});
button[3] = makeButton("Kill ESP", function(){
if(eval(espCode[type]+"[1]")==null){
ESP.kill(eval(espCodes[type]));
ESP.toast(ra.n[type]+" was killed");
}
else{
selectUser(eval(espCode[type]), 2, ra.n[type]);
}
});
button[4] = makeButton("Heal ESP", function(){
if(eval(espCode[type]+"[1]")==null){
ESP.heal(eval(espCodes[type]));
ESP.toast(ra.n[type]+" was healed");
}
else{
selectUser(eval(espCode[type]), 3, ra.n[type]);
}
});
button[5] = makeButton("Call ESP", function(){
if(eval(espCode[type]+"[1]")==null){
teleport(eval(espCodes[type]), Entity.getX(ad), Entity.getY(ad)+1, Entity.getZ(ad));
ESP.toast(ra.n[type]+" was called.");
}
else{
selectUser(eval(espCode[type]), 4, ra.n[type]);
}
});
for(var n in button)
layout.addView(button[n]);
var exit = makeExitButton(menu);
layout.addView(exit);
var scroll = makeScroll(layout, menu);
menu.setContentView(scroll);
menu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}
},
hyperAssassin : function(){
if(hass!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var hassmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Hyper Assassin\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(hass));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var hassoff = android.widget.Button(ctx);
var hasssend = android.widget.Button(ctx);
var hasskill = android.widget.Button(ctx);
var hassheal = android.widget.Button(ctx);
var hassexit = android.widget.Button(ctx);
hassoff.setText("ESP off");
hasssend.setText("Send ESP");
hasskill.setText("Kill ESP");
hassheal.setText("Heal ESP");
hassexit.setText("EXIT");
hassoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
hass = null;
ESP.toast("Hyper Assassin off");
}
});
hasssend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(hass);
ESP.toast("Hyper Assassin was sent");
}
});
hasskill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(hass);
ESP.toast("Hyper Assassin was killed");
}
});
hassheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(hass);
ESP.toast("Hyper Assassin was healed");
}
});
hassexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(hassmenu!=null){
hassmenu.dismiss();
hassmenu = null;
}
}
});
layout.addView(hassoff);
layout.addView(hasssend);
layout.addView(hasskill);
layout.addView(hassheal);
layout.addView(hassexit);

var scroll = makeScroll(layout,hassmenu);
hassmenu.setContentView(scroll);
hassmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
hassmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(hass==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Hyper Assassin on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Hyper Assassin on.");
hass = player;
}
}));
dialog.show();
}
},
silentKiller : function(){
if(sikill!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var sikillmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Silent Killer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(sikill));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var sikilloff = android.widget.Button(ctx);
var sikillsend = android.widget.Button(ctx);
var sikillkill = android.widget.Button(ctx);
var sikillheal = android.widget.Button(ctx);
var sikillexit = android.widget.Button(ctx);
sikilloff.setText("ESP off");
sikillsend.setText("Send ESP");
sikillkill.setText("Kill ESP");
sikillheal.setText("Heal ESP");
sikillexit.setText("EXIT");
sikilloff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
sikill = null;
ESP.toast("Silent Killer off");
}
});
sikillsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(sikill);
ESP.toast("Silent Killer was sent");
}
});
sikillkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(sikill);
ESP.toast("Silent Killer was killed");
}
});
sikillheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(sikill);
ESP.toast("Silent Killer was healed");
}
});
sikillexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(sikillmenu!=null){
sikillmenu.dismiss();
sikillmenu = null;
}
}
});
layout.addView(sikilloff);
layout.addView(sikillsend);
layout.addView(sikillkill);
layout.addView(sikillheal);
layout.addView(sikillexit);

var scroll = makeScroll(layout,sikillmenu);
sikillmenu.setContentView(scroll);
sikillmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
sikillmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(sikill==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Silent Killer on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Silent Killer on.");
sikill = player;
}
}));
dialog.show();
}
},
blackSlayer : function(){
if(black!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var blackmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Black Slayer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(black));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var blackoff = android.widget.Button(ctx);
var blacksend = android.widget.Button(ctx);
var blackkill = android.widget.Button(ctx);
var blackheal = android.widget.Button(ctx);
var blackexit = android.widget.Button(ctx);
blackoff.setText("ESP off");
blacksend.setText("Send ESP");
blackkill.setText("Kill ESP");
blackheal.setText("Heal ESP");
blackexit.setText("EXIT");
blackoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
black = null;
ESP.toast("Black Slayer off");
}
});
blacksend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(black);
ESP.toast("Black Slayer was sent");
}
});
blackkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(black);
ESP.toast("Black Slayer was killed");
}
});
blackheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(black);
ESP.toast("Black Slayer was healed");
}
});
blackexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(blackmenu!=null){
blackmenu.dismiss();
blackmenu = null;
}
}
});
layout.addView(blackoff);
layout.addView(blacksend);
layout.addView(blackkill);
layout.addView(blackheal);
layout.addView(blackexit);

var scroll = makeScroll(layout,blackmenu);
blackmenu.setContentView(scroll);
blackmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
blackmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(black==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Black Slayer on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Black Slayer on.");
black = player;
}
}));
dialog.show();
}
},
theSlasher : function(){
if(slash!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var slashmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("The Slasher\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(slash));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var slashoff = android.widget.Button(ctx);
var slashsend = android.widget.Button(ctx);
var slashkill = android.widget.Button(ctx);
var slashheal = android.widget.Button(ctx);
var slashexit = android.widget.Button(ctx);
slashoff.setText("ESP off");
slashsend.setText("Send ESP");
slashkill.setText("Kill ESP");
slashheal.setText("Heal ESP");
slashexit.setText("EXIT");
slashoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
slash = null;
ESP.toast("The Slasher off");
}
});
slashsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(slash);
ESP.toast("The Slasher was sent");
}
});
slashkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(slash);
ESP.toast("The Slasher was killed");
}
});
slashheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(slash);
ESP.toast("The Slasher was healed");
}
});
slashexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(slashmenu!=null){
slashmenu.dismiss();
slashmenu = null;
}
}
});
layout.addView(slashoff);
layout.addView(slashsend);
layout.addView(slashkill);
layout.addView(slashheal);
layout.addView(slashexit);

var scroll = makeScroll(layout,slashmenu);
slashmenu.setContentView(scroll);
slashmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
slashmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(slash==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("The Slasher on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("The Slasher on.");
slash = player;
}
}));
dialog.show();
}
},
nightWorker : function(){
if(night!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nightmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Night Worker\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(night));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var nightoff = android.widget.Button(ctx);
var nightsend = android.widget.Button(ctx);
var nightkill = android.widget.Button(ctx);
var nightheal = android.widget.Button(ctx);
var nightexit = android.widget.Button(ctx);
nightoff.setText("ESP off");
nightsend.setText("Send ESP");
nightkill.setText("Kill ESP");
nightheal.setText("Heal ESP");
nightexit.setText("EXIT");
nightoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
night = null;
ESP.toast("Night Worker off");
}
});
nightsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(night);
ESP.toast("Night Worker was sent");
}
});
nightkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(night);
ESP.toast("Night Worker was killed");
}
});
nightheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(night);
ESP.toast("Night Worker was healed");
}
});
nightexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nightmenu!=null){
nightmenu.dismiss();
nightmenu = null;
}
}
});
layout.addView(nightoff);
layout.addView(nightsend);
layout.addView(nightkill);
layout.addView(nightheal);
layout.addView(nightexit);

var scroll = makeScroll(layout,nightmenu);
nightmenu.setContentView(scroll);
nightmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nightmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(night==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Night Worker on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Night Worker on.");
night = player;
}
}));
dialog.show();
}
},
lightGemstone : function(){
if(gem!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var gemmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Light Gemstone\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(gem));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var gemoff = android.widget.Button(ctx);
var gemsend = android.widget.Button(ctx);
var gemkill = android.widget.Button(ctx);
var gemheal = android.widget.Button(ctx);
var gemexit = android.widget.Button(ctx);
gemoff.setText("ESP off");
gemsend.setText("Send ESP");
gemkill.setText("Kill ESP");
gemheal.setText("Heal ESP");
gemexit.setText("EXIT");
gemoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
gem = null;
ESP.toast("Light Gemstone off");
}
});
gemsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(gem);
ESP.toast("Light Gemstone was sent");
}
});
gemkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(gem);
ESP.toast("Light Gemstone was killed");
}
});
gemheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(gem);
ESP.toast("Light Gemstone was healed");
}
});
gemexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(gemmenu!=null){
gemmenu.dismiss();
gemmenu = null;
}
}
});
layout.addView(gemoff);
layout.addView(gemsend);
layout.addView(gemkill);
layout.addView(gemheal);
layout.addView(gemexit);

var scroll = makeScroll(layout,gemmenu);
gemmenu.setContentView(scroll);
gemmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
gemmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(gem==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Light Gemstone on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Light Gemstone on.");
gem = player;
}
}));
dialog.show();
}
},
theDracula : function(){
if(dra!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var dramenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("The Dracula\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(dra));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var draoff = android.widget.Button(ctx);
var drasend = android.widget.Button(ctx);
var drakill = android.widget.Button(ctx);
var draheal = android.widget.Button(ctx);
var draexit = android.widget.Button(ctx);
draoff.setText("ESP off");
drasend.setText("Send ESP");
drakill.setText("Kill ESP");
draheal.setText("Heal ESP");
draexit.setText("EXIT");
draoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
dra = null;
ESP.toast("The Dracula off");
}
});
drasend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(dra);
ESP.toast("The Dracula was sent");
}
});
drakill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(dra);
ESP.toast("The Dracula was killed");
}
});
draheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(dra);
ESP.toast("The Dracula was healed");
}
});
draexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(dramenu!=null){
dramenu.dismiss();
dramenu = null;
}
}
});
layout.addView(draoff);
layout.addView(drasend);
layout.addView(drakill);
layout.addView(draheal);
layout.addView(draexit);

var scroll = makeScroll(layout,dramenu);
dramenu.setContentView(scroll);
dramenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
dramenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(dra==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("The Dracula on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("The Dracula on.");
dra = player;
}
}));
dialog.show();
}
},
mushroomGrower : function(){
if(mush!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var mushmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Mushroom Grower\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(mush));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var mushoff = android.widget.Button(ctx);
var mushsend = android.widget.Button(ctx);
var mushkill = android.widget.Button(ctx);
var mushheal = android.widget.Button(ctx);
var mushexit = android.widget.Button(ctx);
mushoff.setText("ESP off");
mushsend.setText("Send ESP");
mushkill.setText("Kill ESP");
mushheal.setText("Heal ESP");
mushexit.setText("EXIT");
mushoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
mush = null;
ESP.toast("Mushroom Grower off");
}
});
mushsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(mush);
ESP.toast("Mushroom Grower was sent");
}
});
mushkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(mush);
ESP.toast("Mushroom Grower was killed");
}
});
mushheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(mush);
ESP.toast("Mushroom Grower was healed");
}
});
mushexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(mushmenu!=null){
mushmenu.dismiss();
mushmenu = null;
}
}
});
layout.addView(mushoff);
layout.addView(mushsend);
layout.addView(mushkill);
layout.addView(mushheal);
layout.addView(mushexit);

var scroll = makeScroll(layout,mushmenu);
mushmenu.setContentView(scroll);
mushmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
mushmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(mush==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Mushroom Grower on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Mushroom Grower on.");
mush = player;
}
}));
dialog.show();
}
},
enderGirl : function(){
if(ender!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var endermenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Ender Girl\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(ender));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var enderoff = android.widget.Button(ctx);
var endersend = android.widget.Button(ctx);
var enderkill = android.widget.Button(ctx);
var enderheal = android.widget.Button(ctx);
var enderexit = android.widget.Button(ctx);
enderoff.setText("ESP off");
endersend.setText("Send ESP");
enderkill.setText("Kill ESP");
enderheal.setText("Heal ESP");
enderexit.setText("EXIT");
enderoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ender = null;
ESP.toast("Ender Girl off");
}
});
endersend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(ender);
ESP.toast("Ender Girl was sent");
}
});
enderkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(ender);
ESP.toast("Ender Girl was killed");
}
});
enderheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(ender);
ESP.toast("Ender Girl was healed");
}
});
enderexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(endermenu!=null){
endermenu.dismiss();
endermenu = null;
}
}
});
layout.addView(enderoff);
layout.addView(endersend);
layout.addView(enderkill);
layout.addView(enderheal);
layout.addView(enderexit);

var scroll = makeScroll(layout,endermenu);
endermenu.setContentView(scroll);
endermenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
endermenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(ender==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Ender Girl on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Ender Girl on.");
ender = player;
}
}));
dialog.show();
}
},
taigaAppearer : function(){
if(taiga!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var taigamenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Taiga Appearer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(taiga));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var taigaoff = android.widget.Button(ctx);
var taigasend = android.widget.Button(ctx);
var taigakill = android.widget.Button(ctx);
var taigaheal = android.widget.Button(ctx);
var taigaexit = android.widget.Button(ctx);
taigaoff.setText("ESP off");
taigasend.setText("Send ESP");
taigakill.setText("Kill ESP");
taigaheal.setText("Heal ESP");
taigaexit.setText("EXIT");
taigaoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
taiga = null;
ESP.toast("Taiga Appearer off");
}
});
taigasend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(taiga);
ESP.toast("Taiga Appearer was sent");
}
});
taigakill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(taiga);
ESP.toast("Taiga Appearer was killed");
}
});
taigaheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(taiga);
ESP.toast("Taiga Appearer was healed");
}
});
taigaexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(taigamenu!=null){
taigamenu.dismiss();
taigamenu = null;
}
}
});
layout.addView(taigaoff);
layout.addView(taigasend);
layout.addView(taigakill);
layout.addView(taigaheal);
layout.addView(taigaexit);

var scroll = makeScroll(layout,taigamenu);
taigamenu.setContentView(scroll);
taigamenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
taigamenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(taiga==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Taiga Appearer on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Taiga Appearer on.");
taiga = player;
}
}));
dialog.show();
}
},
theRuiner : function(){
if(ruin!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var ruinmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("The Ruiner\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(ruin));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var ruinoff = android.widget.Button(ctx);
var ruinsend = android.widget.Button(ctx);
var ruinkill = android.widget.Button(ctx);
var ruinheal = android.widget.Button(ctx);
var ruinexit = android.widget.Button(ctx);
ruinoff.setText("ESP off");
ruinsend.setText("Send ESP");
ruinkill.setText("Kill ESP");
ruinheal.setText("Heal ESP");
ruinexit.setText("EXIT");
ruinoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ruin = null;
ESP.toast("The Ruiner off");
}
});
ruinsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(ruin);
ESP.toast("The Ruiner was sent");
}
});
ruinkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(ruin);
ESP.toast("The Ruiner was killed");
}
});
ruinheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(ruin);
ESP.toast("The Ruiner was healed");
}
});
ruinexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(ruinmenu!=null){
ruinmenu.dismiss();
ruinmenu = null;
}
}
});
layout.addView(ruinoff);
layout.addView(ruinsend);
layout.addView(ruinkill);
layout.addView(ruinheal);
layout.addView(ruinexit);

var scroll = makeScroll(layout,ruinmenu);
ruinmenu.setContentView(scroll);
ruinmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
ruinmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(ruin==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("The Ruiner on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("The Ruiner on.");
ruin = player;
}
}));
dialog.show();
}
},
swampGenerater : function(){
if(swamp!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var swampmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Swamp Generater\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(swamp));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var swampoff = android.widget.Button(ctx);
var swampsend = android.widget.Button(ctx);
var swampkill = android.widget.Button(ctx);
var swampheal = android.widget.Button(ctx);
var swampexit = android.widget.Button(ctx);
swampoff.setText("ESP off");
swampsend.setText("Send ESP");
swampkill.setText("Kill ESP");
swampheal.setText("Heal ESP");
swampexit.setText("EXIT");
swampoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
swamp = null;
ESP.toast("Swamp Generater off");
}
});
swampsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(swamp);
ESP.toast("Swamp Generater was sent");
}
});
swampkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(swamp);
ESP.toast("Swamp Generater was killed");
}
});
swampheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(swamp);
ESP.toast("Swamp Generater was healed");
}
});
swampexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(swampmenu!=null){
swampmenu.dismiss();
swampmenu = null;
}
}
});
layout.addView(swampoff);
layout.addView(swampsend);
layout.addView(swampkill);
layout.addView(swampheal);
layout.addView(swampexit);

var scroll = makeScroll(layout,swampmenu);
swampmenu.setContentView(scroll);
swampmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
swampmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(swamp==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Swamp Generater on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Swamp Generater on.");
swamp = player;
}
}));
dialog.show();
}
},
archSummoner : function(){
if(asum!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var asummenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Arch Summoner\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(asum));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var asumoff = android.widget.Button(ctx);
var asumsend = android.widget.Button(ctx);
var asumkill = android.widget.Button(ctx);
var asumheal = android.widget.Button(ctx);
var asumexit = android.widget.Button(ctx);
asumoff.setText("ESP off");
asumsend.setText("Send ESP");
asumkill.setText("Kill ESP");
asumheal.setText("Heal ESP");
asumexit.setText("EXIT");
asumoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
asum = null;
ESP.toast("Arch Summoner off");
}
});
asumsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(asum);
ESP.toast("Arch Summoner was sent");
}
});
asumkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(asum);
ESP.toast("Arch Summoner was killed");
}
});
asumheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(asum);
ESP.toast("Arch Summoner was healed");
}
});
asumexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(asummenu!=null){
asummenu.dismiss();
asummenu = null;
}
}
});
layout.addView(asumoff);
layout.addView(asumsend);
layout.addView(asumkill);
layout.addView(asumheal);
layout.addView(asumexit);

var scroll = makeScroll(layout,asummenu);
asummenu.setContentView(scroll);
asummenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
asummenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(asum==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Arch Summoner on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Arch Summoner on.");
asum = player;
}
}));
dialog.show();
}
},
archMage : function(){
if(amage!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var amagemenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Arch Mage\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(amage));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var amageoff = android.widget.Button(ctx);
var amagesend = android.widget.Button(ctx);
var amagekill = android.widget.Button(ctx);
var amageheal = android.widget.Button(ctx);
var amageexit = android.widget.Button(ctx);
amageoff.setText("ESP off");
amagesend.setText("Send ESP");
amagekill.setText("Kill ESP");
amageheal.setText("Heal ESP");
amageexit.setText("EXIT");
amageoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
amage = null;
ESP.toast("Arch Mage off");
}
});
amagesend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(amage);
ESP.toast("Arch Mage was sent");
}
});
amagekill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(amage);
ESP.toast("Arch Mage was killed");
}
});
amageheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(amage);
ESP.toast("Arch Mage was healed");
}
});
amageexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(amagemenu!=null){
amagemenu.dismiss();
amagemenu = null;
}
}
});
layout.addView(amageoff);
layout.addView(amagesend);
layout.addView(amagekill);
layout.addView(amageheal);
layout.addView(amageexit);

var scroll = makeScroll(layout,amagemenu);
amagemenu.setContentView(scroll);
amagemenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
amagemenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(amage==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Arch Mage on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Arch Mage on.");
amage = player;
}
}));
dialog.show();
}
},
puellaMagica : function(){
if(puella!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var puellamenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Puella Magica\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(puella));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var puellaoff = android.widget.Button(ctx);
var puellasend = android.widget.Button(ctx);
var puellakill = android.widget.Button(ctx);
var puellaheal = android.widget.Button(ctx);
var puellaexit = android.widget.Button(ctx);
puellaoff.setText("ESP off");
puellasend.setText("Send ESP");
puellakill.setText("Kill ESP");
puellaheal.setText("Heal ESP");
puellaexit.setText("EXIT");
puellaoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
puella = null;
ESP.toast("Puella Magica off");
}
});
puellasend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(puella);
ESP.toast("Puella Magica was sent");
}
});
puellakill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(puella);
ESP.toast("Puella Magica was killed");
}
});
puellaheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(puella);
ESP.toast("Puella Magica was healed");
}
});
puellaexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(puellamenu!=null){
puellamenu.dismiss();
puellamenu = null;
}
}
});
layout.addView(puellaoff);
layout.addView(puellasend);
layout.addView(puellakill);
layout.addView(puellaheal);
layout.addView(puellaexit);

var scroll = makeScroll(layout,puellamenu);
puellamenu.setContentView(scroll);
puellamenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
puellamenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(puella==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Puella Magica on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Puella Magica on.");
puella = player;
}
}));
dialog.show();
}
},
hyperBuilder : function(){
if(hbuild!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var hbuildmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Hyper Builder\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(hbuild));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var hbuildoff = android.widget.Button(ctx);
var hbuildsend = android.widget.Button(ctx);
var hbuildkill = android.widget.Button(ctx);
var hbuildheal = android.widget.Button(ctx);
var hbuildexit = android.widget.Button(ctx);
hbuildoff.setText("ESP off");
hbuildsend.setText("Send ESP");
hbuildkill.setText("Kill ESP");
hbuildheal.setText("Heal ESP");
hbuildexit.setText("EXIT");
hbuildoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
hbuild = null;
ESP.toast("Hyper Builder off");
}
});
hbuildsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(hbuild);
ESP.toast("Hyper Builder was sent");
}
});
hbuildkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(hbuild);
ESP.toast("Hyper Builder was killed");
}
});
hbuildheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(hbuild);
ESP.toast("Hyper Builder was healed");
}
});
hbuildexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(hbuildmenu!=null){
hbuildmenu.dismiss();
hbuildmenu = null;
}
}
});
layout.addView(hbuildoff);
layout.addView(hbuildsend);
layout.addView(hbuildkill);
layout.addView(hbuildheal);
layout.addView(hbuildexit);

var scroll = makeScroll(layout,hbuildmenu);
hbuildmenu.setContentView(scroll);
hbuildmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
hbuildmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(hbuild==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Hyper Builder on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Hyper Builder on.");
hbuild = player;
}
}));
dialog.show();
}
},
scalarIncreaser : function(){
if(scalar!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var scalarmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Scalar Increaser\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(scalar));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var scalaroff = android.widget.Button(ctx);
var scalarsend = android.widget.Button(ctx);
var scalarkill = android.widget.Button(ctx);
var scalarheal = android.widget.Button(ctx);
var scalarexit = android.widget.Button(ctx);
scalaroff.setText("ESP off");
scalarsend.setText("Send ESP");
scalarkill.setText("Kill ESP");
scalarheal.setText("Heal ESP");
scalarexit.setText("EXIT");
scalaroff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
scalar = null;
ESP.toast("Scalar Increaser off");
}
});
scalarsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(scalar);
ESP.toast("Scalar Increaser was sent");
}
});
scalarkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(scalar);
ESP.toast("Scalar Increaser was killed");
}
});
scalarheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(scalar);
ESP.toast("Scalar Increaser was healed");
}
});
scalarexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(scalarmenu!=null){
scalarmenu.dismiss();
scalarmenu = null;
}
}
});
layout.addView(scalaroff);
layout.addView(scalarsend);
layout.addView(scalarkill);
layout.addView(scalarheal);
layout.addView(scalarexit);

var scroll = makeScroll(layout,scalarmenu);
scalarmenu.setContentView(scroll);
scalarmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
scalarmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(scalar==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Scalar Increaser on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Scalar Increaser on.");
scalar = player;
}
}));
dialog.show();
}
},
vectorReflacter : function(){
if(vector!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var vectormenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Vector Reflacter\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(vector));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var vectoroff = android.widget.Button(ctx);
var vectorsend = android.widget.Button(ctx);
var vectorkill = android.widget.Button(ctx);
var vectorheal = android.widget.Button(ctx);
var vectorexit = android.widget.Button(ctx);
vectoroff.setText("ESP off");
vectorsend.setText("Send ESP");
vectorkill.setText("Kill ESP");
vectorheal.setText("Heal ESP");
vectorexit.setText("EXIT");
vectoroff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
vector = null;
ESP.toast("Vector Reflacter off");
}
});
vectorsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(vector);
ESP.toast("Vector Reflacter was sent");
}
});
vectorkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(vector);
ESP.toast("Vector Reflacter was killed");
}
});
vectorheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(vector);
ESP.toast("Vector Reflacter was healed");
}
});
vectorexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(vectormenu!=null){
vectormenu.dismiss();
vectormenu = null;
}
}
});
layout.addView(vectoroff);
layout.addView(vectorsend);
layout.addView(vectorkill);
layout.addView(vectorheal);
layout.addView(vectorexit);

var scroll = makeScroll(layout,vectormenu);
vectormenu.setContentView(scroll);
vectormenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
vectormenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(vector==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Vector Reflacter on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Vector Reflacter on.");
vector = player;
}
}));
dialog.show();
}
},
tensorVeerer : function(){
if(tensor!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var tensormenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Tensor Veerer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(tensor));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var tensoroff = android.widget.Button(ctx);
var tensorsend = android.widget.Button(ctx);
var tensorkill = android.widget.Button(ctx);
var tensorheal = android.widget.Button(ctx);
var tensorexit = android.widget.Button(ctx);
tensoroff.setText("ESP off");
tensorsend.setText("Send ESP");
tensorkill.setText("Kill ESP");
tensorheal.setText("Heal ESP");
tensorexit.setText("EXIT");
tensoroff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
tensor = null;
ESP.toast("Tensor Veerer off");
}
});
tensorsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(tensor);
ESP.toast("Tensor Veerer was sent");
}
});
tensorkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(tensor);
ESP.toast("Tensor Veerer was killed");
}
});
tensorheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(tensor);
ESP.toast("Tensor Veerer was healed");
}
});
tensorexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(tensormenu!=null){
tensormenu.dismiss();
tensormenu = null;
}
}
});
layout.addView(tensoroff);
layout.addView(tensorsend);
layout.addView(tensorkill);
layout.addView(tensorheal);
layout.addView(tensorexit);

var scroll = makeScroll(layout,tensormenu);
tensormenu.setContentView(scroll);
tensormenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
tensormenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(tensor==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Tensor Veerer on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Tensor Veerer on.");
tensor = player;
}
}));
dialog.show();
}
},
archMechanic : function(){
if(ameca!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var amecamenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Arch Mechanic\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(ameca));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var amecaoff = android.widget.Button(ctx);
var amecasend = android.widget.Button(ctx);
var amecakill = android.widget.Button(ctx);
var amecaheal = android.widget.Button(ctx);
var amecaexit = android.widget.Button(ctx);
amecaoff.setText("ESP off");
amecasend.setText("Send ESP");
amecakill.setText("Kill ESP");
amecaheal.setText("Heal ESP");
amecaexit.setText("EXIT");
amecaoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ameca = null;
ESP.toast("Arch Mechanic off");
}
});
amecasend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(ameca);
ESP.toast("Arch Mechanic was sent");
}
});
amecakill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(ameca);
ESP.toast("Arch Mechanic was killed");
}
});
amecaheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(ameca);
ESP.toast("Arch Mechanic was healed");
}
});
amecaexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(amecamenu!=null){
amecamenu.dismiss();
amecamenu = null;
}
}
});
layout.addView(amecaoff);
layout.addView(amecasend);
layout.addView(amecakill);
layout.addView(amecaheal);
layout.addView(amecaexit);

var scroll = makeScroll(layout,amecamenu);
amecamenu.setContentView(scroll);
amecamenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
amecamenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(ameca==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Arch Mechanic on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Arch Mechanic on.");
ameca = player;
}
}));
dialog.show();
}
},
theSealer : function(){
if(seal!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var sealmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("The Sealer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(seal));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var sealoff = android.widget.Button(ctx);
var sealsend = android.widget.Button(ctx);
var sealkill = android.widget.Button(ctx);
var sealheal = android.widget.Button(ctx);
var sealexit = android.widget.Button(ctx);
sealoff.setText("ESP off");
sealsend.setText("Send ESP");
sealkill.setText("Kill ESP");
sealheal.setText("Heal ESP");
sealexit.setText("EXIT");
sealoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
seal = null;
ESP.toast("The Sealer off");
}
});
sealsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(seal);
ESP.toast("The Sealer was sent");
}
});
sealkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(seal);
ESP.toast("The Sealer was killed");
}
});
sealheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(seal);
ESP.toast("The Sealer was healed");
}
});
sealexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(sealmenu!=null){
sealmenu.dismiss();
sealmenu = null;
}
}
});
layout.addView(sealoff);
layout.addView(sealsend);
layout.addView(sealkill);
layout.addView(sealheal);
layout.addView(sealexit);

var scroll = makeScroll(layout,sealmenu);
sealmenu.setContentView(scroll);
sealmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
sealmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(seal==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("The Sealer on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("The Sealer on.");
seal = player;
}
}));
dialog.show();
}
},
theArchangel : function(){
if(angel!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var angelmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("The Archangel\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(angel));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var angeloff = android.widget.Button(ctx);
var angelsend = android.widget.Button(ctx);
var angelkill = android.widget.Button(ctx);
var angelheal = android.widget.Button(ctx);
var angelexit = android.widget.Button(ctx);
angeloff.setText("ESP off");
angelsend.setText("Send ESP");
angelkill.setText("Kill ESP");
angelheal.setText("Heal ESP");
angelexit.setText("EXIT");
angeloff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
angel = null;
ESP.toast("The Archangel off");
}
});
angelsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(angel);
ESP.toast("The Archangel was sent");
}
});
angelkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(angel);
ESP.toast("The Archangel was killed");
}
});
angelheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(angel);
ESP.toast("The Archangel was healed");
}
});
angelexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(angelmenu!=null){
angelmenu.dismiss();
angelmenu = null;
}
}
});
layout.addView(angeloff);
layout.addView(angelsend);
layout.addView(angelkill);
layout.addView(angelheal);
layout.addView(angelexit);

var scroll = makeScroll(layout,angelmenu);
angelmenu.setContentView(scroll);
angelmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
angelmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(angel==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("The Archangel on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("The Archangel on.");
angel = player;
}
}));
dialog.show();
}
},
whiteEye : function(){
if(white!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var whitemenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("White Eye\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(white));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var whiteoff = android.widget.Button(ctx);
var whitesend = android.widget.Button(ctx);
var whitekill = android.widget.Button(ctx);
var whiteheal = android.widget.Button(ctx);
var whiteexit = android.widget.Button(ctx);
whiteoff.setText("ESP off");
whitesend.setText("Send ESP");
whitekill.setText("Kill ESP");
whiteheal.setText("Heal ESP");
whiteexit.setText("EXIT");
whiteoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
white = null;
ESP.toast("White Eye off");
}
});
whitesend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(white);
ESP.toast("White Eye was sent");
}
});
whitekill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(white);
ESP.toast("White Eye was killed");
}
});
whiteheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(white);
ESP.toast("White Eye was healed");
}
});
whiteexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(whitemenu!=null){
whitemenu.dismiss();
whitemenu = null;
}
}
});
layout.addView(whiteoff);
layout.addView(whitesend);
layout.addView(whitekill);
layout.addView(whiteheal);
layout.addView(whiteexit);

var scroll = makeScroll(layout,whitemenu);
whitemenu.setContentView(scroll);
whitemenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
whitemenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(white==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("White Eye on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("White Eye on.");
white = player;
}
}));
dialog.show();
}
},
mentalOut : function(){
if(mental!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var mentalmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Mental Out\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(mental));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var mentaloff = android.widget.Button(ctx);
var mentalsend = android.widget.Button(ctx);
var mentalkill = android.widget.Button(ctx);
var mentalheal = android.widget.Button(ctx);
var mentalexit = android.widget.Button(ctx);
mentaloff.setText("ESP off");
mentalsend.setText("Send ESP");
mentalkill.setText("Kill ESP");
mentalheal.setText("Heal ESP");
mentalexit.setText("EXIT");
mentaloff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
mental = null;
ESP.toast("Mental Out off");
}
});
mentalsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(mental);
ESP.toast("Mental Out was sent");
}
});
mentalkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(mental);
ESP.toast("Mental Out was killed");
}
});
mentalheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(mental);
ESP.toast("Mental Out was healed");
}
});
mentalexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(mentalmenu!=null){
mentalmenu.dismiss();
mentalmenu = null;
}
}
});
layout.addView(mentaloff);
layout.addView(mentalsend);
layout.addView(mentalkill);
layout.addView(mentalheal);
layout.addView(mentalexit);

var scroll = makeScroll(layout,mentalmenu);
mentalmenu.setContentView(scroll);
mentalmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
mentalmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(mental==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Mental Out on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Mental Out on.");
mental = player;
}
}));
dialog.show();
}
},
worldEditor : function(){
if(world!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var worldmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("World Editor\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(world));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var worldoff = android.widget.Button(ctx);
var worldsend = android.widget.Button(ctx);
var worldkill = android.widget.Button(ctx);
var worldheal = android.widget.Button(ctx);
var worldexit = android.widget.Button(ctx);
worldoff.setText("ESP off");
worldsend.setText("Send ESP");
worldkill.setText("Kill ESP");
worldheal.setText("Heal ESP");
worldexit.setText("EXIT");
worldoff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
world = null;
ESP.toast("World Editor off");
}
});
worldsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(world);
ESP.toast("World Editor was sent");
}
});
worldkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(world);
ESP.toast("World Editor was killed");
}
});
worldheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(world);
ESP.toast("World Editor was healed");
}
});
worldexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(worldmenu!=null){
worldmenu.dismiss();
worldmenu = null;
}
}
});
layout.addView(worldoff);
layout.addView(worldsend);
layout.addView(worldkill);
layout.addView(worldheal);
layout.addView(worldexit);

var scroll = makeScroll(layout,worldmenu);
worldmenu.setContentView(scroll);
worldmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
worldmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(world==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("World Editor on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("World Editor on.");
world = player;
}
}));
dialog.show();
}
},
hiddenAbility : function(){
if(h.rrr!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var rrrmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Hidden Ability\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(h.rrr));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var rrroff = android.widget.Button(ctx);
var rrrsend = android.widget.Button(ctx);
var rrrkill = android.widget.Button(ctx);
var rrrheal = android.widget.Button(ctx);
var rrrexit = android.widget.Button(ctx);
rrroff.setText("ESP off");
rrrsend.setText("Send ESP");
rrrkill.setText("Kill ESP");
rrrheal.setText("Heal ESP");
rrrexit.setText("EXIT");
rrroff.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
h.rrr = null;
ESP.toast("Hidden Ability off");
}
});
rrrsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(h.rrr);
ESP.toast("Hidden Ability was sent");
}
});
rrrkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(h.rrr);
ESP.toast("Hidden Ability was killed");
}
});
rrrheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(h.rrr);
ESP.toast("Hidden Ability was healed");
}
});
rrrexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(rrrmenu!=null){
rrrmenu.dismiss();
rrrmenu = null;
}
}
});
layout.addView(rrroff);
layout.addView(rrrsend);
layout.addView(rrrkill);
layout.addView(rrrheal);
layout.addView(rrrexit);

var scroll = makeScroll(layout,rrrmenu);
rrrmenu.setContentView(scroll);
rrrmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
rrrmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(h.rrr==null){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Hidden Ability on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Hidden Ability on.");
h.rrr = player;
}
}));
dialog.show();
}
},
espOnoff : function(type, tf){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
if(tf==true){
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e))
players.push(e);
}
var radios = makeRadioList(players);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var dialog = makeDialog(ra.n[type]+" on", layout, "취소", null, "확인", function(){
if(eval(espCodes[type])==null){
SB.espOn(type);
}
else{
eval(espCode[type]).push(playerTarget);
}
ESP.toast(ra.n[type]+" on.");
});
}
else if(tf==false){
var radios = makeRadioList(eval(espCode[type]), true);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var dialog = makeDialog(ra.n[type]+" off", layout, "취소", null, "확인", function(){
eval(espCode[type]).splice(espN, 1);
SB.removeUserData(type, espN);
ESP.toast(ra.n[type]+" off.");
});
}
dialog.show();
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
},
espOn : function(n){
if(n==0) fire[0] = playerTarget;
if(n==1) water[0] = playerTarget;
if(n==2) tree[0] = playerTarget;
if(n==3) creeper[0] = playerTarget;
if(n==4) soil[0] = playerTarget;
if(n==5) summon[0] = playerTarget;
if(n==6) light[0] = playerTarget;
if(n==7) dark[0] = playerTarget;
if(n==8) ice[0] = playerTarget;
if(n==9) sand[0] = playerTarget;
if(n==10) blood[0] = playerTarget;
if(n==11) air[0] = playerTarget;
if(n==12) elsa[0] = playerTarget;
if(n==13) titan[0] = playerTarget;
if(n==14) thunder[0] = playerTarget;
if(n==15) bind[0] = playerTarget;
if(n==16) meca[0] = playerTarget;
if(n==17) tnt[0] = playerTarget;
if(n==18) trap[0] = playerTarget;
if(n==19) heal[0] = playerTarget;
if(n==20) nether[0] = playerTarget;
if(n==21) cloud[0] = playerTarget;
if(n==22) assassin[0] = playerTarget;
if(n==23) arrow[0] = playerTarget;
if(n==24) mage[0] = playerTarget;
if(n==25) defense[0] = playerTarget;
if(n==26) poison[0] = playerTarget;
if(n==27) melt[0] = playerTarget;
if(n==28) hfreeze[0] = playerTarget;
if(n==29) builder[0] = playerTarget;
if(n==30) soldier[0] = playerTarget;
if(n==31) assault[0] = playerTarget;
if(n==32) burst[0] = playerTarget;
if(n==33) warrior[0] = playerTarget;
if(n==34) ore[0] = playerTarget;
if(n==35) rich[0] = playerTarget;
if(n==36) tp[0] = playerTarget;
if(n==37) space[0] = playerTarget;
if(n==38) sattack[0] = playerTarget;
if(n==39) force[0] = playerTarget;
if(n==40) rein[0] = playerTarget;
if(n==41) magnet[0] = playerTarget;
if(n==42) steve[0] = playerTarget;
if(n==43) hero[0] = playerTarget;
if(n==44) hermit[0] = playerTarget;
if(n==45) clay[0] = playerTarget;
if(n==46) kirito[0] = playerTarget;
if(n==47) jungle[0] = playerTarget;
if(n==48) kanade[0] = playerTarget;
if(n==49) time[0] = playerTarget;
if(n==50) snipe[0] = playerTarget;
if(n==51) zombie[0] = playerTarget;
if(n==52) necro[0] = playerTarget;
if(n==53) asuna[0] = playerTarget;
if(n==54) holy[0] = playerTarget;
if(n==55) solar[0] = playerTarget;
if(n==56) lunar[0] = playerTarget;
if(n==57) has[0] = playerTarget;
if(n==58) random[0] = playerTarget;
if(n==59) zwei[0] = playerTarget;
if(n==60) deco[0] = playerTarget;
if(n==61) hsum[0] = playerTarget;
if(n==62) climate[0] = playerTarget;
if(n==63) raid[0] = playerTarget;
if(n==64) wind[0] = playerTarget;
if(n==65) energy[0] = playerTarget;
if(n==66) geno[0] = playerTarget;
if(n==67) server[0] = playerTarget;
if(n==68) out[0] = playerTarget;
if(n==69) rgun[0] = playerTarget;
if(n==70) copy[0] = playerTarget;
if(n==71) dragon[0] = playerTarget;
if(n==72) hawk[0] = playerTarget;
if(n==73) solid[0] = playerTarget;
if(n==74) gravity[0] = playerTarget;
if(n==75) sikill = playerTarget;
if(n==76) hass = playerTarget;
if(n==77) black = playerTarget;
if(n==78) slash = playerTarget;
if(n==79) night = playerTarget;
if(n==80) gem = playerTarget;
if(n==81) dra = playerTarget;
if(n==82) mush = playerTarget;
if(n==83) ender = playerTarget;
if(n==84) taiga = playerTarget;
if(n==85) ruin = playerTarget;
if(n==86) swamp = playerTarget;
if(n==87) asum = playerTarget;
if(n==88) amage = playerTarget;
if(n==89) puella = playerTarget;
if(n==90) hbuild = playerTarget;
if(n==91) scalar = playerTarget;
if(n==92) vector = playerTarget;
if(n==93) tensor = playerTarget;
if(n==94) ameca = playerTarget;
if(n==95) seal = playerTarget;
if(n==96) angel = playerTarget;
if(n==97) white = playerTarget;
if(n==98) mental = playerTarget;
if(n==99) world = playerTarget;
},
espOff : function(n){
if(n==0) fire = [];
if(n==1) water = [];
if(n==2) tree = [];
if(n==3) creeper = [];
if(n==4) soil = [];
if(n==5) summon = [];
if(n==6) light = [];
if(n==7) dark = [];
if(n==8) ice = [];
if(n==9) sand = [];
if(n==10) blood = [];
if(n==11) air = [];
if(n==12) elsa = [];
if(n==13) titan = [];
if(n==14) thunder = [];
if(n==15) bind = [];
if(n==16) meca = [];
if(n==17) tnt = [];
if(n==18) trap = [];
if(n==19) heal = [];
if(n==20) nether = [];
if(n==21) cloud = [];
if(n==22) assassin = [];
if(n==23) arrow = [];
if(n==24) mage = [];
if(n==25) defense = [];
if(n==26) poison = [];
if(n==27) melt = [];
if(n==28) hfreeze = [];
if(n==29) builder = [];
if(n==30) soldier = [];
if(n==31) assault = [];
if(n==32) burst = [];
if(n==33) warrior = [];
if(n==34) ore = [];
if(n==35) rich = [];
if(n==36) tp = [];
if(n==37) space = [];
if(n==38) sattack = [];
if(n==39) force = [];
if(n==40) rein = [];
if(n==41) magnet = [];
if(n==42) steve = [];
if(n==43) hero = [];
if(n==44) hermit = [];
if(n==45) clay = [];
if(n==46) kirito = [];
if(n==47) jungle = [];
if(n==48) kanade = [];
if(n==49) time = [];
if(n==50) snipe = [];
if(n==51) zombie = [];
if(n==52) necro = [];
if(n==53) asuna = [];
if(n==54) holy = [];
if(n==55) solar = [];
if(n==56) lunar = [];
if(n==57) has = [];
if(n==58) random = [];
if(n==59) zwei = [];
if(n==60) deco = [];
if(n==61) hsum = [];
if(n==62) climate = [];
if(n==63) raid = [];
if(n==64) wind = [];
if(n==65) energy = [];
if(n==66) geno = [];
if(n==67) server = [];
if(n==68) out = [];
if(n==69) rgun = [];
if(n==70) copy = [];
if(n==71) dragon = [];
if(n==72) hawk = [];
if(n==73) solid = [];
if(n==74) gravity = [];
if(n==75) sikill = null;
if(n==76) hass = null;
if(n==77) black = null;
if(n==78) slash = null;
if(n==79) night = null;
if(n==80) gem = null;
if(n==81) dra = null;
if(n==82) mush = null;
if(n==83) ender = null;
if(n==84) taiga = null;
if(n==85) ruin = null;
if(n==86) swamp = null;
if(n==87) asum = null;
if(n==88) amage = null;
if(n==89) puella = null;
if(n==90) hbuild = null;
if(n==91) scalar = null;
if(n==92) vector = null;
if(n==93) tensor = null;
if(n==94) ameca = null;
if(n==95) seal = null;
if(n==96) angel = null;
if(n==97) white = null;
if(n==98) mental = null;
if(n==99) world = null;
},
removeUserData : function(type, n){
if(type==0){
if(n==-1){
f1 = new Array();
f2 = new Array();
f2x = new Array();
f2y = new Array();
f2z = new Array();
f3 = new Array();
f4 = new Array();
f1a = new Array();
f2a = new Array();
f3a = new Array();
f4a = new Array();
f4b = new Array();
f4c = new Array();
f4d = new Array();
fx = new Array();
fy = new Array();
fz = new Array();
f0 = new Array();
}
else{
f1.splice(n, 1);
f2.splice(n, 1);
f2x.splice(n, 1);
f2y.splice(n, 1);
f2z.splice(n, 1);
f3.splice(n, 1);
f4.splice(n, 1);
f1a.splice(n, 1);
f2a.splice(n, 1);
f3a.splice(n, 1);
f4a.splice(n, 1);
f4b.splice(n, 1);
f4c.splice(n, 1);
f4d.splice(n, 1);
fx.splice(n, 1);
fy.splice(n, 1);
fz.splice(n, 1);
f0.splice(n, 1);
}
}
else if(type==1){
if(n==-1){
w1 = new Array();
w2 = new Array();
w3 = new Array();
w4 = new Array();
w1a = new Array();
w2a = new Array();
w3a = new Array();
w4a = new Array();
w1b = new Array();
w1c = new Array();
wx = new Array();
wy = new Array();
wz = new Array();
w4b = new Array();
w4c = new Array();
wxa = new Array();
wya = new Array();
wza = new Array();
w3b = new Array();
w3c = new Array();
wxb = new Array();
wyb = new Array();
wzb = new Array();
w2x = new Array();
w2y = new Array();
w2z = new Array();
water2 = false;
w1aa = 0;
w1x, w1y, w1z = null;
w2aa = 0;
w3aa = 0;
w3ab = false;
w3x, w3y, w3z = null;
w4aa = false;
w5 = -1;
w5a = 0;
}
else{
w1.splice(n, 1);
w2.splice(n, 1);
w3.splice(n, 1);
w4.splice(n, 1);
w1a.splice(n, 1);
w2a.splice(n, 1);
w3a.splice(n, 1);
w4a.splice(n, 1);
w1b.splice(n, 1);
w1c.splice(n, 1);
wx.splice(n, 1);
wy.splice(n, 1);
wz.splice(n, 1);
w4b.splice(n, 1);
w4c.splice(n, 1);
wxa.splice(n, 1);
wya.splice(n, 1);
wza.splice(n, 1);
w3b.splice(n, 1);
w3c.splice(n, 1);
wxb.splice(n, 1);
wyb.splice(n, 1);
wzb.splice(n, 1);
w2x.splice(n, 1);
w2y.splice(n, 1);
w2z.splice(n, 1);
if(n==0){
water2 = false;
w1aa = 0;
w1x, w1y, w1z = null;
w2aa = 0;
w3aa = 0;
w3ab = false;
w3x, w3y, w3z = null;
w4aa = false;
w5 = -1;
w5a = 0;
}
}
}
else if(type==2){
if(n==-1){
t1 = new Array();
t2 = new Array();
t3 = new Array();
t4 = new Array();
t1a = new Array();
t2a = new Array();
t3a = new Array();
t3b = new Array();
t4a = new Array();
t4b = new Array();
tx = new Array();
ty = new Array();
tz = new Array();
}
else{
t1.splice(n, 1);
t2.splice(n, 1);
t3.splice(n, 1);
t4.splice(n, 1);
t1a.splice(n, 1);
t2a.splice(n, 1);
t3a.splice(n, 1);
t3b.splice(n, 1);
t4a.splice(n, 1);
t4b.splice(n, 1);
tx.splice(n, 1);
ty.splice(n, 1);
tz.splice(n, 1);
}
}
else if(type==3){
if(n==-1){
c1 = new Array();
c2 = new Array();
c3 = new Array();
c4 = new Array();
c1a = new Array();
c2a = new Array();
c2x = new Array();
c2y = new Array();
c2z = new Array();
c3a = new Array();
c4a = new Array();
c1b = new Array();
c1c = new Array();
c1d = new Array();
cx = new Array();
cy = new Array();
cz = new Array();
c1e = new Array();
c1f = new Array();
cx1 = new Array();
cy1 = new Array();
cz1 = new Array();
cx2 = new Array();
cy2 = new Array();
cz2 = new Array();
cx3 = new Array();
cy3 = new Array();
cz3 = new Array();
}
else{
c1.splice(n, 1);
c2.splice(n, 1);
c3.splice(n, 1);
c4.splice(n, 1);
c1a.splice(n, 1);
c2a.splice(n, 1);
c2x.splice(n, 1);
c2y.splice(n, 1);
c2z.splice(n, 1);
c3a.splice(n, 1);
c4a.splice(n, 1);
c1b.splice(n, 1);
c1c.splice(n, 1);
c1d.splice(n, 1);
cx.splice(n, 1);
cy.splice(n, 1);
cz.splice(n, 1);
c1e.splice(n, 1);
c1f.splice(n, 1);
cx1.splice(n, 1);
cy1.splice(n, 1);
cz1.splice(n, 1);
cx2.splice(n, 1);
cy2.splice(n, 1);
cz2.splice(n, 1);
cx3.splice(n, 1);
cy3.splice(n, 1);
cz3.splice(n, 1);
}
}
else if(type==4){
if(n==-1){
s1 = new Array();
s2 = new Array();
s3 = new Array();
s4 = new Array();
s1a = new Array();
s2a = new Array();
s2x = new Array();
s2y = new Array();
s2z = new Array();
s3a = new Array();
s4a = new Array();
sx = new Array();
sy = new Array();
sz = new Array();
}
else{
s1.splice(n, 1);
s2.splice(n, 1);
s3.splice(n, 1);
s4.splice(n, 1);
s1a.splice(n, 1);
s2a.splice(n, 1);
s2x.splice(n, 1);
s2y.splice(n, 1);
s2z.splice(n, 1);
s3a.splice(n, 1);
s4a.splice(n, 1);
sx.splice(n, 1);
sy.splice(n, 1);
sz.splice(n, 1);
}
}
else if(type==5){
if(n==-1){
ss1 = new Array();
ss2 = new Array();
ss3 = new Array();
ss4 = new Array();
ss1a = new Array();
ss2a = new Array();
ss3a = new Array();
ss4a = new Array();
}
else{
ss1.splice(n, 1);
ss2.splice(n, 1);
ss3.splice(n, 1);
ss4.splice(n, 1);
ss1a.splice(n, 1);
ss2a.splice(n, 1);
ss3a.splice(n, 1);
ss4a.splice(n, 1);
}
}
else if(type==6){
if(n==-1){
l1 = new Array();
l2 = new Array();
l3 = new Array();
l4 = new Array();
l1a = new Array();
l2a = new Array();
l3a = new Array();
l4a = new Array();
l3b = new Array();
l3c = new Array();
lx = new Array();
ly = new Array();
lz = new Array();
lxa = new Array();
lya = new Array();
lza = new Array();
}
else{
l1.splice(n, 1);
l2.splice(n, 1);
l3.splice(n, 1);
l4.splice(n, 1);
l1a.splice(n, 1);
l2a.splice(n, 1);
l3a.splice(n, 1);
l4a.splice(n, 1);
l3b.splice(n, 1);
l3c.splice(n, 1);
lx.splice(n, 1);
ly.splice(n, 1);
lz.splice(n, 1);
lxa.splice(n, 1);
lya.splice(n, 1);
lza.splice(n, 1);
}
}
else if(type==7){
if(n==-1){
d1 = new Array();
d2 = new Array();
d3 = new Array();
d4 = new Array();
d1a = new Array();
d2a = new Array();
d3a = new Array();
d4a = new Array();
dx = new Array();
dy = new Array();
dz = new Array();
d3b = new Array();
d3c = new Array();
dxa = new Array();
dya = new Array();
dza = new Array();
d1b = new Array();
d1c = new Array();
dxb = new Array();
dyb = new Array();
dzb = new Array();
}
else{
d1.splice(n, 1);
d2.splice(n, 1);
d3.splice(n, 1);
d4.splice(n, 1);
d1a.splice(n, 1);
d2a.splice(n, 1);
d3a.splice(n, 1);
d4a.splice(n, 1);
dx.splice(n, 1);
dy.splice(n, 1);
dz.splice(n, 1);
d3b.splice(n, 1);
d3c.splice(n, 1);
dxa.splice(n, 1);
dya.splice(n, 1);
dza.splice(n, 1);
d1b.splice(n, 1);
d1c.splice(n, 1);
dxb.splice(n, 1);
dyb.splice(n, 1);
dzb.splice(n, 1);
}
}
else if(type==8){
if(n==-1){
i1 = new Array();
i2 = new Array();
i3 = new Array();
i4 = new Array();
i1a = new Array();
i2a = new Array();
i3a = new Array();
i4a = new Array();
i1b = new Array();
i1c = new Array();
ix = new Array();
iy = new Array();
iz = new Array();
i3b = new Array();
i3c = new Array();
ixa = new Array();
iya = new Array();
iza = new Array();
ixb = new Array();
izb = new Array();
ixc = new Array();
iyc = new Array();
izc = new Array();
}
else{
i1.splice(n, 1);
i2.splice(n, 1);
i3.splice(n, 1);
i4.splice(n, 1);
i1a.splice(n, 1);
i2a.splice(n, 1);
i3a.splice(n, 1);
i4a.splice(n, 1);
i1b.splice(n, 1);
i1c.splice(n, 1);
ix.splice(n, 1);
iy.splice(n, 1);
iz.splice(n, 1);
i3b.splice(n, 1);
i3c.splice(n, 1);
ixa.splice(n, 1);
iya.splice(n, 1);
iza.splice(n, 1);
ixb.splice(n, 1);
izb.splice(n, 1);
ixc.splice(n, 1);
iyc.splice(n, 1);
izc.splice(n, 1);
}
}
else if(type==9){
if(n==-1){
m1 = new Array();
m2 = new Array();
m3 = new Array();
m4 = new Array();
m1a = new Array();
m2a = new Array();
m3a = new Array();
m3x  = new Array();
m3y = new Array();
m3z = new Array();
m4a = new Array();
m4x = new Array();
m4y = new Array();
m4z = new Array();
}
else{
m1.splice(n, 1);
m2.splice(n, 1);
m3.splice(n, 1);
m4.splice(n, 1);
m1a.splice(n, 1);
m2a.splice(n, 1);
m3a.splice(n, 1);
m3x .splice(n, 1);
m3y.splice(n, 1);
m3z.splice(n, 1);
m4a.splice(n, 1);
m4x.splice(n, 1);
m4y.splice(n, 1);
m4z.splice(n, 1);
}
}
else if(type==10){
if(n==-1){
b1 = new Array();
b2 = new Array();
b3 = new Array();
b4 = new Array();
b1a = new Array();
b2a = new Array();
b3a = new Array();
b4a = new Array();
b4b = new Array();
}
else{
b1.splice(n, 1);
b2.splice(n, 1);
b3.splice(n, 1);
b4.splice(n, 1);
b1a.splice(n, 1);
b2a.splice(n, 1);
b3a.splice(n, 1);
b4a.splice(n, 1);
b4b.splice(n, 1);
}
}
else if(type==11){
if(n==-1){
a1 = new Array();
a2 = new Array();
a3 = new Array();
a4 = new Array();
a1a = new Array();
a2a = new Array();
a2b = new Array();
a2x = new Array();
a2y = new Array();
a2z = new Array();
a3a = new Array();
a4a = new Array();
air2 = false;
a1aa = 0;
a1x, a1y, a1z = null;
a2aa = 0;
a3aa = 0;
a3x, a3y, a3z = null;
a4aa = false;
a4ab = 0;
ax, ay, az = null;
a5 = -1;
a5a = 0;
}
else{
a1.splice(n, 1);
a2.splice(n, 1);
a3.splice(n, 1);
a4.splice(n, 1);
a1a.splice(n, 1);
a2a.splice(n, 1);
a2b.splice(n, 1);
a2x.splice(n, 1);
a2y.splice(n, 1);
a2z.splice(n, 1);
a3a.splice(n, 1);
a4a.splice(n, 1);
if(n==0){
air2 = false;
a1aa = 0;
a1x, a1y, a1z = null;
a2aa = 0;
a3aa = 0;
a3x, a3y, a3z = null;
a4aa = false;
a4ab = 0;
ax, ay, az = null;
a5 = -1;
a5a = 0;
}
}
}
else if(type==12){
if(n==-1){
e1 = new Array();
e2 = new Array();
e3 = new Array();
e4 = new Array();
e1a = new Array();
e2a = new Array();
e3a = new Array();
e3b = new Array();
e3c = new Array();
ex = new Array();
ey = new Array();
ez = new Array();
e4a = new Array();
ex4 = new Array();
ey4 = new Array();
ez4 = new Array();
}
else{
e1.splice(n, 1);
e2.splice(n, 1);
e3.splice(n, 1);
e4.splice(n, 1);
e1a.splice(n, 1);
e2a.splice(n, 1);
e3a.splice(n, 1);
e3b.splice(n, 1);
e3c.splice(n, 1);
ex.splice(n, 1);
ey.splice(n, 1);
ez.splice(n, 1);
e4a.splice(n, 1);
ex4.splice(n, 1);
ey4.splice(n, 1);
ez4.splice(n, 1);
}
}
else if(type==13){
if(n==-1){
th1 = new Array();
th2 = new Array();
th3 = new Array();
th4 = new Array();
th1a = new Array();
th1b = null;
th1c = new Array();
th2a = new Array();
th3a = new Array();
th3b = new Array();
th4a = new Array();
thx = new Array();
thy = new Array();
thz = new Array();
thxa = new Array();
thya = new Array();
thza = new Array();
thxb = new Array();
thyb = new Array();
thzb = new Array();
}
else{
th1.splice(n, 1);
th2.splice(n, 1);
th3.splice(n, 1);
th4.splice(n, 1);
th1a.splice(n, 1);
th1b = null;
th1c.splice(n, 1);
th2a.splice(n, 1);
th3a.splice(n, 1);
th3b.splice(n, 1);
th4a.splice(n, 1);
thx.splice(n, 1);
thy.splice(n, 1);
thz.splice(n, 1);
thxa.splice(n, 1);
thya.splice(n, 1);
thza.splice(n, 1);
thxb.splice(n, 1);
thyb.splice(n, 1);
thzb.splice(n, 1);
}
}
else if(type==14){
if(n==-1){
tt1 = new Array();
tt2 = new Array();
tt3 = new Array();
tt4 = new Array();
tt1a = new Array();
tt2a = new Array();
tt3a = new Array();
tt4a = new Array();
tt4b = new Array();
tt4c = new Array();
ttx = new Array();
tty = new Array();
ttz = new Array();
tt2b = new Array();
ttxa = new Array();
ttya = new Array();
ttza = new Array();
ttxb = new Array();
ttyb = new Array();
ttzb = new Array();
}
else{
tt1.splice(n, 1);
tt2.splice(n, 1);
tt3.splice(n, 1);
tt4.splice(n, 1);
tt1a.splice(n, 1);
tt2a.splice(n, 1);
tt3a.splice(n, 1);
tt4a.splice(n, 1);
tt4b.splice(n, 1);
tt4c.splice(n, 1);
ttx.splice(n, 1);
tty.splice(n, 1);
ttz.splice(n, 1);
tt2b.splice(n, 1);
ttxa.splice(n, 1);
ttya.splice(n, 1);
ttza.splice(n, 1);
ttxb.splice(n, 1);
ttyb.splice(n, 1);
ttzb.splice(n, 1);
}
}
else if(type==15){
if(n==-1){
bb1 = new Array();
bb2 = new Array();
bb3 = new Array();
bb4 = new Array();
bb1a = new Array();
bb2a = new Array();
bb3a = new Array();
bb4a = new Array();
bb4b = new Array();
bb4c = new Array();
bbx = new Array();
bby = new Array();
bbz = new Array();
bind2 = false;
b1aa = 0;
b2aa = 0;
b3aa = 0;
b3ab = false;
b3x, b3y, b3z = null;
b4aa = false;
bx, by, bz = null;
b5 = -1;
b5a = 0;
}
else{
bb1.splice(n, 1);
bb2.splice(n, 1);
bb3.splice(n, 1);
bb4.splice(n, 1);
bb1a.splice(n, 1);
bb2a.splice(n, 1);
bb3a.splice(n, 1);
bb4a.splice(n, 1);
bb4b.splice(n, 1);
bb4c.splice(n, 1);
bbx.splice(n, 1);
bby.splice(n, 1);
bbz.splice(n, 1);
if(n==0){
bind2 = false;
b1aa = 0;
b2aa = 0;
b3aa = 0;
b3ab = false;
b3x, b3y, b3z = null;
b4aa = false;
bx, by, bz = null;
b5 = -1;
b5a = 0;
}
}
}
else if(type==16){
if(n==-1){
mm1 = new Array();
mm2 = new Array();
mm3 = new Array();
mm4 = new Array();
mm1a = new Array();
mmx1 = new Array();
mmy1 = new Array();
mmz1 = new Array();
mmx2a = new Array();
mmy2a = new Array();
mmz2a = new Array();
mm2a = new Array();
mm3a = new Array();
mm3b = new Array();
mmx = new Array();
mmy = new Array();
mmz = new Array();
mmx2 = new Array();
mmy2 = new Array();
mmz2 = new Array();
mm4a = new Array();
mmx4 = new Array();
mmy4 = new Array();
mmz4 = new Array();
}
else{
mm1.splice(n, 1);
mm2.splice(n, 1);
mm3.splice(n, 1);
mm4.splice(n, 1);
mm1a.splice(n, 1);
mmx1.splice(n, 1);
mmy1.splice(n, 1);
mmz1.splice(n, 1);
mmx2a.splice(n, 1);
mmy2a.splice(n, 1);
mmz2a.splice(n, 1);
mm2a.splice(n, 1);
mm3a.splice(n, 1);
mm3b.splice(n, 1);
mmx.splice(n, 1);
mmy.splice(n, 1);
mmz.splice(n, 1);
mmx2.splice(n, 1);
mmy2.splice(n, 1);
mmz2.splice(n, 1);
mm4a.splice(n, 1);
mmx4.splice(n, 1);
mmy4.splice(n, 1);
mmz4.splice(n, 1);
}
}
else if(type==17){
if(n==-1){
tn1 = new Array();
tn2 = new Array();
tn3 = new Array();
tn4 = new Array();
tn1a = new Array();
tn1x = new Array();
tn1y = new Array();
tn1z = new Array();
tn2a = new Array();
tnx = new Array();
tny = new Array();
tnz = new Array();
tn3a = new Array();
tnx3 = new Array();
tny3 = new Array();
tnz3 = new Array();
tn4a = new Array();
tnx2 = new Array();
tny2 = new Array();
tnz2 = new Array();
}
else{
tn1.splice(n, 1);
tn2.splice(n, 1);
tn3.splice(n, 1);
tn4.splice(n, 1);
tn1a.splice(n, 1);
tn1x.splice(n, 1);
tn1y.splice(n, 1);
tn1z.splice(n, 1);
tn2a.splice(n, 1);
tnx.splice(n, 1);
tny.splice(n, 1);
tnz.splice(n, 1);
tn3a.splice(n, 1);
tnx3.splice(n, 1);
tny3.splice(n, 1);
tnz3.splice(n, 1);
tn4a.splice(n, 1);
tnx2.splice(n, 1);
tny2.splice(n, 1);
tnz2.splice(n, 1);
}
}
else if(type==18){
if(n==-1){
tr1 = new Array();
tr2 = new Array();
tr3 = new Array();
tr4 = new Array();
tr1a = new Array();
tr1b = new Array();
trx1 = new Array();
try1 = new Array();
trz1 = new Array();
tr2a = new Array();
tr2b = new Array();
trx2 = new Array();
try2 = new Array();
trz2 = new Array();
tr3a = new Array();
tr3b = new Array();
trx3 = new Array();
try3 = new Array();
trz3 = new Array();
tr4a = new Array();
tr4b = new Array();
trx4 = new Array();
try4 = new Array();
trz4 = new Array();
}
else{
tr1.splice(n, 1);
tr2.splice(n, 1);
tr3.splice(n, 1);
tr4.splice(n, 1);
tr1a.splice(n, 1);
tr1b.splice(n, 1);
trx1.splice(n, 1);
try1.splice(n, 1);
trz1.splice(n, 1);
tr2a.splice(n, 1);
tr2b.splice(n, 1);
trx2.splice(n, 1);
try2.splice(n, 1);
trz2.splice(n, 1);
tr3a.splice(n, 1);
tr3b.splice(n, 1);
trx3.splice(n, 1);
try3.splice(n, 1);
trz3.splice(n, 1);
tr4a.splice(n, 1);
tr4b.splice(n, 1);
trx4.splice(n, 1);
try4.splice(n, 1);
trz4.splice(n, 1);
}
}
else if(type==19){
if(n==-1){
h1 = new Array();
h2 = new Array();
h3 = new Array();
h4 = new Array();
h1a = new Array();
h2a = new Array();
h3a = new Array();
h4a = new Array();
hx = new Array()
hy = new Array();
hz = new Array();
heal2 = false;
h1aa = 0;
h2aa = 0;
h3aa = 0;
h3ab;
h4aa = false;
h5 = -1;
h5a;
}
else{
h1.splice(n, 1);
h2.splice(n, 1);
h3.splice(n, 1);
h4.splice(n, 1);
h1a.splice(n, 1);
h2a.splice(n, 1);
h3a.splice(n, 1);
h4a.splice(n, 1);
hx.splice(n, 1)
hy.splice(n, 1);
hz.splice(n, 1);
if(n==0){
heal2 = false;
h1aa = 0;
h2aa = 0;
h3aa = 0;
h3ab;
h4aa = false;
h5 = -1;
h5a;
}
}
}
else if(type==20){
if(n==-1){
n1 = new Array();
n2 = new Array();
n3 = new Array();
n4 = new Array();
n1a = new Array();
n2a = new Array();
n2x = new Array();
n2y = new Array();
n2z = new Array();
n3a = new Array();
n4a = new Array();
nx = new Array();
ny = new Array();
nz = new Array();
}
else{
n1.splice(n, 1);
n2.splice(n, 1);
n3.splice(n, 1);
n4.splice(n, 1);
n1a.splice(n, 1);
n2a.splice(n, 1);
n2x.splice(n, 1);
n2y.splice(n, 1);
n2z.splice(n, 1);
n3a.splice(n, 1);
n4a.splice(n, 1);
nx.splice(n, 1);
ny.splice(n, 1);
nz.splice(n, 1);
}
}
else if(type==21){
if(n==-1){
cc1 = new Array();
cc2 = new Array();
cc3 = new Array();
cc4 = new Array();
cc1a = new Array();
cc2a = new Array();
cc2b = new Array();
cc3a = new Array();
cc3b = new Array();
cc3c = new Array();
cc3d = new Array();
cc4a = new Array();
ccx = new Array();
ccy = new Array();
ccz = new Array();
ccx1 = new Array();
ccy1 = new Array();
ccz1 = new Array();
ccx2 = new Array();
ccy2 = new Array();
ccz2 = new Array();
mmxc = new Array();
mmyc = new Array();
mmzc = new Array();
}
else{
cc1.splice(n, 1);
cc2.splice(n, 1);
cc3.splice(n, 1);
cc4.splice(n, 1);
cc1a.splice(n, 1);
cc2a.splice(n, 1);
cc2b.splice(n, 1);
cc3a.splice(n, 1);
cc3b.splice(n, 1);
cc3c.splice(n, 1);
cc3d.splice(n, 1);
cc4a.splice(n, 1);
ccx.splice(n, 1);
ccy.splice(n, 1);
ccz.splice(n, 1);
ccx1.splice(n, 1);
ccy1.splice(n, 1);
ccz1.splice(n, 1);
ccx2.splice(n, 1);
ccy2.splice(n, 1);
ccz2.splice(n, 1);
mmxc.splice(n, 1);
mmyc.splice(n, 1);
mmzc.splice(n, 1);
}
}
else if(type==22){
if(n==-1){
as1 = new Array();
as2 = new Array();
as3 = new Array();
as4 = new Array();
as1a = new Array();
as2a = new Array();
as3a = new Array();
as4a = new Array();
}
else{
as1.splice(n, 1);
as2.splice(n, 1);
as3.splice(n, 1);
as4.splice(n, 1);
as1a.splice(n, 1);
as2a.splice(n, 1);
as3a.splice(n, 1);
as4a.splice(n, 1);
}
}
else if(type==23){
if(n==-1){
ar1 = new Array();
ar2 = new Array();
ar3 = new Array();
ar4 = new Array();
ar1a = new Array();
ar1x = new Array();
ar1y = new Array();
ar1z = new Array();
ar2a = new Array();
arx2 = new Array();
ary2 = new Array();
arz2 = new Array();
ar3a = new Array();
ar4a = new Array();
arx = new Array();
ary = new Array();
arz = new Array();
}
else{
ar1.splice(n, 1);
ar2.splice(n, 1);
ar3.splice(n, 1);
ar4.splice(n, 1);
ar1a.splice(n, 1);
ar1x.splice(n, 1);
ar1y.splice(n, 1);
ar1z.splice(n, 1);
ar2a.splice(n, 1);
arx2.splice(n, 1);
ary2.splice(n, 1);
arz2.splice(n, 1);
ar3a.splice(n, 1);
ar4a.splice(n, 1);
arx.splice(n, 1);
ary.splice(n, 1);
arz.splice(n, 1);
}
}
else if(type==24){
if(n==-1){
ma1 = new Array();
ma2 = new Array();
ma3 = new Array();
ma4 = new Array();
ma1a = new Array();
ma2a = new Array();
ma2b = new Array();
max2 = new Array();
may2 = new Array();
maz2 = new Array();
ma3a = new Array();
ma4a = new Array();
max = new Array();
may = new Array();
maz = new Array();
}
else{
ma1.splice(n, 1);
ma2.splice(n, 1);
ma3.splice(n, 1);
ma4.splice(n, 1);
ma1a.splice(n, 1);
ma2a.splice(n, 1);
ma2b.splice(n, 1);
max2.splice(n, 1);
may2.splice(n, 1);
maz2.splice(n, 1);
ma3a.splice(n, 1);
ma4a.splice(n, 1);
max.splice(n, 1);
may.splice(n, 1);
maz.splice(n, 1);
}
}
else if(type==25){
if(n==-1){
de1 = new Array();
de2 = new Array();
de3 = new Array();
de4 = new Array();
de1a = new Array();
de2a = new Array();
de3a = new Array();
de3b = new Array();
dex3 = new Array();
dey3 = new Array();
dez4 = new Array();
de4a = new Array();
de4b = new Array();
dex = new Array();
dey = new Array();
dez = new Array();
}
else{
de1.splice(n, 1);
de2.splice(n, 1);
de3.splice(n, 1);
de4.splice(n, 1);
de1a.splice(n, 1);
de2a.splice(n, 1);
de3a.splice(n, 1);
de3b.splice(n, 1);
dex3.splice(n, 1);
dey3.splice(n, 1);
dez4.splice(n, 1);
de4a.splice(n, 1);
de4b.splice(n, 1);
dex.splice(n, 1);
dey.splice(n, 1);
dez.splice(n, 1);
}
}
else if(type==26){
if(n==-1){
p1 = new Array();
p2 = new Array();
p3 = new Array();
p4 = new Array();
p1a = new Array();
p1b = new Array();
p2a = new Array();
p2xa = new Array();
p2ya = new Array();
p2za = new Array();
p3a = new Array();
p3b = new Array();
p4a = new Array();
p4x = new Array();
p4y = new Array();
p4z = new Array();
}
else{
p1.splice(n, 1);
p2.splice(n, 1);
p3.splice(n, 1);
p4.splice(n, 1);
p1a.splice(n, 1);
p1b.splice(n, 1);
p2a.splice(n, 1);
p2xa.splice(n, 1);
p2ya.splice(n, 1);
p2za.splice(n, 1);
p3a.splice(n, 1);
p3b.splice(n, 1);
p4a.splice(n, 1);
p4x.splice(n, 1);
p4y.splice(n, 1);
p4z.splice(n, 1);
}
}
else if(type==27){
if(n==-1){
me1 = new Array();
me2 = new Array();
me3 = new Array();
me4 = new Array();
me1a = new Array();
me1x = new Array();
me1y = new Array();
me1z = new Array();
me2a = new Array();
me2x = new Array();
me2y = new Array();
me2z = new Array();
mexa = new Array();
meza = new Array();
me3a = new Array();
me4a = new Array();
mex = new Array();
mey = new Array();
mez = new Array();
}
else{
me1.splice(n, 1);
me2.splice(n, 1);
me3.splice(n, 1);
me4.splice(n, 1);
me1a.splice(n, 1);
me1x.splice(n, 1);
me1y.splice(n, 1);
me1z.splice(n, 1);
me2a.splice(n, 1);
me2x.splice(n, 1);
me2y.splice(n, 1);
me2z.splice(n, 1);
mexa.splice(n, 1);
meza.splice(n, 1);
me3a.splice(n, 1);
me4a.splice(n, 1);
mex.splice(n, 1);
mey.splice(n, 1);
mez.splice(n, 1);
}
}
else if(type==28){
if(n==-1){
hf1 = new Array();
hf2 = new Array();
hf3 = new Array();
hf4 = new Array();
hf1a = new Array();
hfx1 = new Array();
hf1y = new Array();
hf1z = new Array();
hf2a = new Array();
hf2x = new Array();
hf2y = new Array();
hf2z = new Array();
hf3a = new Array();
hf3b = new Array();
hf3c = new Array();
hf3x = new Array();
hf3y = new Array();
hf3z = new Array();
hf4a = new Array();
hfx = new Array();
hfy = new Array();
hfz = new Array();
}
else{
hf1.splice(n, 1);
hf2.splice(n, 1);
hf3.splice(n, 1);
hf4.splice(n, 1);
hf1a.splice(n, 1);
hfx1.splice(n, 1);
hf1y.splice(n, 1);
hf1z.splice(n, 1);
hf2a.splice(n, 1);
hf2x.splice(n, 1);
hf2y.splice(n, 1);
hf2z.splice(n, 1);
hf3a.splice(n, 1);
hf3b.splice(n, 1);
hf3c.splice(n, 1);
hf3x.splice(n, 1);
hf3y.splice(n, 1);
hf3z.splice(n, 1);
hf4a.splice(n, 1);
hfx.splice(n, 1);
hfy.splice(n, 1);
hfz.splice(n, 1);
}
}
else if(type==29){
if(n==-1){
bu1 = new Array();
bu2 = new Array();
bu3 = new Array();
bu4 = new Array();
bu1a = new Array();
bu2a = new Array();
bu2b = new Array();
bu2x = new Array();
bu2y = new Array();
bu2z = new Array();
bu3a = new Array();
bu3b = new Array();
bu3x = new Array();
bu3y = new Array();
bu3z = new Array();
bu4a = new Array();
bu4b = new Array();
bux = new Array();
buy = new Array();
buz = new Array();
}
else{
bu1.splice(n, 1);
bu2.splice(n, 1);
bu3.splice(n, 1);
bu4.splice(n, 1);
bu1a.splice(n, 1);
bu2a.splice(n, 1);
bu2b.splice(n, 1);
bu2x.splice(n, 1);
bu2y.splice(n, 1);
bu2z.splice(n, 1);
bu3a.splice(n, 1);
bu3b.splice(n, 1);
bu3x.splice(n, 1);
bu3y.splice(n, 1);
bu3z.splice(n, 1);
bu4a.splice(n, 1);
bu4b.splice(n, 1);
bux.splice(n, 1);
buy.splice(n, 1);
buz.splice(n, 1);
}
}
else if(type==30){
if(n==-1){
so1 = new Array();
so2 = new Array();
so3 = new Array();
so4 = new Array();
so1a = new Array();
so2a = new Array();
so2b = new Array();
so2x = new Array();
so2y = new Array();
so2z = new Array();
so3a = new Array();
so4a = new Array();
so4b = new Array();
so4c = new Array();
sox = new Array();
soy = new Array();
soz = new Array();
}
else{
so1.splice(n, 1);
so2.splice(n, 1);
so3.splice(n, 1);
so4.splice(n, 1);
so1a.splice(n, 1);
so2a.splice(n, 1);
so2b.splice(n, 1);
so2x.splice(n, 1);
so2y.splice(n, 1);
so2z.splice(n, 1);
so3a.splice(n, 1);
so4a.splice(n, 1);
so4b.splice(n, 1);
so4c.splice(n, 1);
sox.splice(n, 1);
soy.splice(n, 1);
soz.splice(n, 1);
}
}
else if(type==31){
if(n==-1){
asu1 = new Array();
asu2 = new Array();
asu3 = new Array();
asu4 = new Array();
asu1a = new Array();
asu2a = new Array();
asu2x = new Array();
asu2y = new Array();
asu2z = new Array();
asu3a = new Array();
asu4a = new Array();
}
else{
asu1.splice(n, 1);
asu2.splice(n, 1);
asu3.splice(n, 1);
asu4.splice(n, 1);
asu1a.splice(n, 1);
asu2a.splice(n, 1);
asu2x.splice(n, 1);
asu2y.splice(n, 1);
asu2z.splice(n, 1);
asu3a.splice(n, 1);
asu4a.splice(n, 1);
}
}
else if(type==32){
if(n==-1){
bus1 = new Array();
bus2 = new Array();
bus3 = new Array();
bus4 = new Array();
bus1a = new Array();
bus1b = new Array();
bus1c = new Array();
bus1x = new Array();
bus1y = new Array();
bus1z = new Array();
bus2a = new Array();
bus3a = new Array();
bus4a = new Array();
busx = new Array();
busy = new Array();
busz = new Array();
}
else{
bus1.splice(n, 1);
bus2.splice(n, 1);
bus3.splice(n, 1);
bus4.splice(n, 1);
bus1a.splice(n, 1);
bus1b.splice(n, 1);
bus1c.splice(n, 1);
bus1x.splice(n, 1);
bus1y.splice(n, 1);
bus1z.splice(n, 1);
bus2a.splice(n, 1);
bus3a.splice(n, 1);
bus4a.splice(n, 1);
busx.splice(n, 1);
busy.splice(n, 1);
busz.splice(n, 1);
}
}
else if(type==33){
if(n==-1){
wa1 = new Array();
wa2 = new Array();
wa3 = new Array();
wa4 = new Array();
wa1a = new Array();
wa1x = new Array();
wa1y = new Array();
wa1z = new Array();
waxa = new Array();
waza = new Array();
wa2a = new Array();
wa3a = new Array();
wa4a = new Array();
wax = new Array();
way = new Array();
waz = new Array();
}
else{
wa1.splice(n, 1);
wa2.splice(n, 1);
wa3.splice(n, 1);
wa4.splice(n, 1);
wa1a.splice(n, 1);
wa1x.splice(n, 1);
wa1y.splice(n, 1);
wa1z.splice(n, 1);
waxa.splice(n, 1);
waza.splice(n, 1);
wa2a.splice(n, 1);
wa3a.splice(n, 1);
wa4a.splice(n, 1);
wax.splice(n, 1);
way.splice(n, 1);
waz.splice(n, 1);
}
}
else if(type==34){
if(n==-1){
o1 = [];
o2 = [];
o3 = [];
o4 = [];
o1a = [];
o2a = [];
o3a = [];
o3x = [];
o3y = [];
o3z = [];
o4a = [];
o4b = [];
o4c = [];
o4d = [];
ox = [];
oy = [];
oz = [];
}
else{
o1.splice(n, 1);
o2.splice(n, 1);
o3.splice(n, 1);
o4.splice(n, 1);
o1a.splice(n, 1);
o2a.splice(n, 1);
o3a.splice(n, 1);
o3x.splice(n, 1);
o3y.splice(n, 1);
o3z.splice(n, 1);
o4a.splice(n, 1);
o4b.splice(n, 1);
o4c.splice(n, 1);
o4d.splice(n, 1);
ox.splice(n, 1);
oy.splice(n, 1);
oz.splice(n, 1);
}
}
else if(type==35){
if(n==-1){
r1 = [];
r2 = [];
r3 = [];
r4 = [];
r1a = [];
r1x = [];
r1y = [];
r1z = [];
r2a = [];
r3a = [];
r4a = [];
rx = [];
ry = [];
rz = [];
}
else{
r1.splice(n, 1);
r2.splice(n, 1);
r3.splice(n, 1);
r4.splice(n, 1);
r1a.splice(n, 1);
r1x.splice(n, 1);
r1y.splice(n, 1);
r1z.splice(n, 1);
r2a.splice(n, 1);
r3a.splice(n, 1);
r4a.splice(n, 1);
rx.splice(n, 1);
ry.splice(n, 1);
rz.splice(n, 1);
}
}
else if(type==36){
if(n==-1){
tp1 = [];
tp2 = [];
tp3 = [];
tp4 = [];
tp1a = [];
tp2a = [];
tp3a = [];
tp4a = [];
tp4b = [];
tpx = []
tpy = []
tpz = [];
}
else{
tp1.splice(n, 1);
tp2.splice(n, 1);
tp3.splice(n, 1);
tp4.splice(n, 1);
tp1a.splice(n, 1);
tp2a.splice(n, 1);
tp3a.splice(n, 1);
tp4a.splice(n, 1);
tp4b.splice(n, 1);
tpx.splice(n, 1)
tpy.splice(n, 1)
tpz.splice(n, 1);
}
}
else if(type==37){
if(n==-1){
sp1 = [];
sp2 = [];
sp3 = [];
sp4 = [];
sp1a = [];
sp2a = [];
sp2x = [];
sp2y = [];
sp2z = [];
spxa = [];
spza = [];
sp3a = [];
sp3x = [];
sp3y = [];
sp3z = [];
sp4a = [];
sp4b = [];
spx = [];
spy = [];
spz = [];
}
else{
sp1.splice(n, 1);
sp2.splice(n, 1);
sp3.splice(n, 1);
sp4.splice(n, 1);
sp1a.splice(n, 1);
sp2a.splice(n, 1);
sp2x.splice(n, 1);
sp2y.splice(n, 1);
sp2z.splice(n, 1);
spxa.splice(n, 1);
spza.splice(n, 1);
sp3a.splice(n, 1);
sp3x.splice(n, 1);
sp3y.splice(n, 1);
sp3z.splice(n, 1);
sp4a.splice(n, 1);
sp4b.splice(n, 1);
spx.splice(n, 1);
spy.splice(n, 1);
spz.splice(n, 1);
}
}
else if(type==38){
if(n==-1){
sa1 = [];
sa2 = [];
sa3 = [];
sa4 = [];
sa1a = [];
sa1x = [];
sa1y = [];
sa1z = [];
sa2a = [];
sa2x = [];
sa2y = [];
sa2z = [];
sa3a = [];
sa3x = [];
sa3y = [];
sa3z = [];
sa4a = [];
sa4b = [];
sax = [];
say = [];
saz = [];
}
else{
sa1.splice(n, 1);
sa2.splice(n, 1);
sa3.splice(n, 1);
sa4.splice(n, 1);
sa1a.splice(n, 1);
sa1x.splice(n, 1);
sa1y.splice(n, 1);
sa1z.splice(n, 1);
sa2a.splice(n, 1);
sa2x.splice(n, 1);
sa2y.splice(n, 1);
sa2z.splice(n, 1);
sa3a.splice(n, 1);
sa3x.splice(n, 1);
sa3y.splice(n, 1);
sa3z.splice(n, 1);
sa4a.splice(n, 1);
sa4b.splice(n, 1);
sax.splice(n, 1);
say.splice(n, 1);
saz.splice(n, 1);
}
}
if(type==39){
if(n==-1){
fo1 = [];
fo2 = [];
fo3 = [];
fo4 = [];
fo1a = [];
fo1x = [];
fo1y = [];
fo1z = [];
fo2a = [];
fo2x = [];
fo2y = [];
fo2z = [];
foxa = [];
foza = [];
fo3a = [];
fo4a = [];
fox = [];
foy = [];
foz = [];
}
else{
fo1.splice(n, 1);
fo2.splice(n, 1);
fo3.splice(n, 1);
fo4.splice(n, 1);
fo1a.splice(n, 1);
fo1x.splice(n, 1);
fo1y.splice(n, 1);
fo1z.splice(n, 1);
fo2a.splice(n, 1);
fo2x.splice(n, 1);
fo2y.splice(n, 1);
fo2z.splice(n, 1);
foxa.splice(n, 1);
foza.splice(n, 1);
fo3a.splice(n, 1);
fo4a.splice(n, 1);
fox.splice(n, 1);
foy.splice(n, 1);
foz.splice(n, 1);
}
}
if(type==40){
if(n==-1){
re1 = [];
re2 = [];
re3 = [];
re4 = [];
re1a = [];
re1x = [];
re1y = [];
re1z = [];
re2a = [];
re2x = [];
re2z = [];
re3a = [];
re2x = [];
re2y = [];
re2z = [];
re4a = [];
rex = [];
rey = [];
rez = [];
}
else{
re1.splice(n, 1);
re2.splice(n, 1);
re3.splice(n, 1);
re4.splice(n, 1);
re1a.splice(n, 1);
re1x.splice(n, 1);
re1y.splice(n, 1);
re1z.splice(n, 1);
re2a.splice(n, 1);
re2x.splice(n, 1);
re2z.splice(n, 1);
re3a.splice(n, 1);
re2x.splice(n, 1);
re2y.splice(n, 1);
re2z.splice(n, 1);
re4a.splice(n, 1);
rex.splice(n, 1);
rey.splice(n, 1);
rez.splice(n, 1);
}
}
if(type==41){
if(n==-1){
mag1 = [];
mag2 = [];
mag3 = [];
mag4 = [];
mag1a = [];
mag2a = [];
mag3a = [];
mag3x = [];
mag3y = [];
mag3z = [];
mag4a = [];
mag4b = [];
magx = [];
magy = [];
magz = [];
}
else{
mag1.splice(n, 1);
mag2.splice(n, 1);
mag3.splice(n, 1);
mag4.splice(n, 1);
mag1a.splice(n, 1);
mag2a.splice(n, 1);
mag3a.splice(n, 1);
mag3x.splice(n, 1);
mag3y.splice(n, 1);
mag3z.splice(n, 1);
mag4a.splice(n, 1);
mag4b.splice(n, 1);
magx.splice(n, 1);
magy.splice(n, 1);
magz.splice(n, 1);
}
}
if(type==42){
if(n==-1){
st1 = [];
st2 = [];
st3 = [];
st4 = [];
st1a = [];
st2a = [];
st2b = [];
st2x = [];
st2y = [];
st2z = [];
st2c = [];
st3a = [];
st4a = [];
stx = [];
sty = [];
stz = [];
}
else{
st1.splice(n, 1);
st2.splice(n, 1);
st3.splice(n, 1);
st4.splice(n, 1);
st1a.splice(n, 1);
st2a.splice(n, 1);
st2b.splice(n, 1);
st2x.splice(n, 1);
st2y.splice(n, 1);
st2z.splice(n, 1);
st2c.splice(n, 1);
st3a.splice(n, 1);
st4a.splice(n, 1);
stx.splice(n, 1);
sty.splice(n, 1);
stz.splice(n, 1);
}
}
if(type==43){
if(n==-1){
he1 = [];
he2 = [];
he3 = [];
he4 = [];
he1a = [];
he1b = [];
he1x = [];
he1y = [];
he1z = [];
he1c = [];
he1d = [];
he2a = [];
he2b = [];
he2x = [];
he2y = [];
he2z = [];
he3a = [];
he3x = [];
he3y = [];
he3z = [];
he4a = [];
hex = [];
hey = [];
hez = [];
}
else{
he1.splice(n, 1);
he2.splice(n, 1);
he3.splice(n, 1);
he4.splice(n, 1);
he1a.splice(n, 1);
he1b.splice(n, 1);
he1x.splice(n, 1);
he1y.splice(n, 1);
he1z.splice(n, 1);
he1c.splice(n, 1);
he1d.splice(n, 1);
he2a.splice(n, 1);
he2b.splice(n, 1);
he2x.splice(n, 1);
he2y.splice(n, 1);
he2z.splice(n, 1);
he3a.splice(n, 1);
he3x.splice(n, 1);
he3y.splice(n, 1);
he3z.splice(n, 1);
he4a.splice(n, 1);
hex.splice(n, 1);
hey.splice(n, 1);
hez.splice(n, 1);
}
}
if(type==44){
if(n==-1){
her1 = [];
her2 = [];
her3 = [];
her4 = [];
her1a = [];
her2a = [];
her2b = [];
her2x = [];
her2y = [];
her2z = [];
her3a = [];
her3b = [];
her3x = [];
her3y = [];
her3z = [];
her4a = [];
herx = [];
hery = [];
herz = [];
}
else{
her1.splice(n, 1);
her2.splice(n, 1);
her3.splice(n, 1);
her4.splice(n, 1);
her1a.splice(n, 1);
her2a.splice(n, 1);
her2b.splice(n, 1);
her2x.splice(n, 1);
her2y.splice(n, 1);
her2z.splice(n, 1);
her3a.splice(n, 1);
her3b.splice(n, 1);
her3x.splice(n, 1);
her3y.splice(n, 1);
her3z.splice(n, 1);
her4a.splice(n, 1);
herx.splice(n, 1);
hery.splice(n, 1);
herz.splice(n, 1);
}
}
if(type==45){
if(n==-1){
cl1 = [];
cl2 = [];
cl3 = [];
cl4 = [];
cl1a = [];
cl2a = [];
cl2x = [];
cl2y = [];
cl2z = [];
cl3a = [];
cl3x = [];
cl3y = [];
cl3z = [];
cl4a = [];
clx = [];
cly = [];
clz = [];
}
else{
cl1.splice(n, 1);
cl2.splice(n, 1);
cl3.splice(n, 1);
cl4.splice(n, 1);
cl1a.splice(n, 1);
cl2a.splice(n, 1);
cl2x.splice(n, 1);
cl2y.splice(n, 1);
cl2z.splice(n, 1);
cl3a.splice(n, 1);
cl3x.splice(n, 1);
cl3y.splice(n, 1);
cl3z.splice(n, 1);
cl4a.splice(n, 1);
clx.splice(n, 1);
cly.splice(n, 1);
clz.splice(n, 1);
}
}
if(type==46){
if(n==-1){
k1 = [];
k2 = [];
k3 = [];
k4 = [];
k1a = [];
kxa = [];
kza = [];
k2a = [];
k2x = [];
k2y = [];
k2z = [];
k3a = [];
k4a = [];
k4b = [];
kx = [];
ky = [];
kz = [];
}
else{
k1.splice(n, 1);
k2.splice(n, 1);
k3.splice(n, 1);
k4.splice(n, 1);
k1a.splice(n, 1);
kxa.splice(n, 1);
kza.splice(n, 1);
k2a.splice(n, 1);
k2x.splice(n, 1);
k2y.splice(n, 1);
k2z.splice(n, 1);
k3a.splice(n, 1);
k4a.splice(n, 1);
k4b.splice(n, 1);
kx.splice(n, 1);
ky.splice(n, 1);
kz.splice(n, 1);
}
}
if(type==47){
if(n==-1){
j1 = [];
j2 = [];
j3 = [];
j4 = [];
j1a = [];
j2a = [];
jxa = [];
jza = [];
j3a = [];
j3b = [];
j3x = [];
j3y = [];
j3z = [];
j4a = [];
j4b = [];
jx = [];
jy = [];
jz = [];
}
else{
j1.splice(n, 1);
j2.splice(n, 1);
j3.splice(n, 1);
j4.splice(n, 1);
j1a.splice(n, 1);
j2a.splice(n, 1);
jxa.splice(n, 1);
jza.splice(n, 1);
j3a.splice(n, 1);
j3b.splice(n, 1);
j3x.splice(n, 1);
j3y.splice(n, 1);
j3z.splice(n, 1);
j4a.splice(n, 1);
j4b.splice(n, 1);
jx.splice(n, 1);
jy.splice(n, 1);
jz.splice(n, 1);
}
}
if(type==48){
if(n==-1){
ka1 = [];
ka2 = [];
ka3 = [];
ka4 = [];
ka1a = [];
ka2a = [];
ka3a = [];
ka3b = [];
ka3x = [];
ka3y = [];
ka3z = [];
ka4a = [];
kax = [];
kay = [];
kaz = [];
}
else{
ka1.splice(n, 1);
ka2.splice(n, 1);
ka3.splice(n, 1);
ka4.splice(n, 1);
ka1a.splice(n, 1);
ka2a.splice(n, 1);
ka3a.splice(n, 1);
ka3b.splice(n, 1);
ka3x.splice(n, 1);
ka3y.splice(n, 1);
ka3z.splice(n, 1);
ka4a.splice(n, 1);
kax.splice(n, 1);
kay.splice(n, 1);
kaz.splice(n, 1);
}
}
if(type==49){
if(n==-1){
ti1 = [];
ti2 = [];
ti3 = [];
ti4 = [];
ti1a = [];
ti2a = [];
ti3a = [];
ti3b = [];
ti3x = [];
ti3y = [];
ti3z = [];
ti4a = [];
ti4b = [];
tix = [];
tiy = [];
tiz = [];
}
else{
ti1.splice(n, 1);
ti2.splice(n, 1);
ti3.splice(n, 1);
ti4.splice(n, 1);
ti1a.splice(n, 1);
ti2a.splice(n, 1);
ti3a.splice(n, 1);
ti3b.splice(n, 1);
ti3x.splice(n, 1);
ti3y.splice(n, 1);
ti3z.splice(n, 1);
ti4a.splice(n, 1);
ti4b.splice(n, 1);
tix.splice(n, 1);
tiy.splice(n, 1);
tiz.splice(n, 1);
}
}
if(type==50){
if(n==-1){
sn1 = [];
sn2 = [];
sn3 = [];
sn4 = [];
sn1a = [];
sn2a = [];
sn3a = [];
sn4a = [];
sn4b = [];
sn4c = [];
sn4d = [];
snx = [];
sny = [];
snz = [];
sn4x = [];
sn4y = [];
sn4z = [];
}
else{
sn1.splice(n, 1);
sn2.splice(n, 1);
sn3.splice(n, 1);
sn4.splice(n, 1);
sn1a.splice(n, 1);
sn2a.splice(n, 1);
sn3a.splice(n, 1);
sn4a.splice(n, 1);
sn4b.splice(n, 1);
sn4c.splice(n, 1);
sn4d.splice(n, 1);
snx.splice(n, 1);
sny.splice(n, 1);
snz.splice(n, 1);
sn4x.splice(n, 1);
sn4y.splice(n, 1);
sn4z.splice(n, 1);
}
}
if(type==51){
if(n==-1){
z1 = [];
z2 = [];
z3 = [];
z4 = [];
z1a = [];
z2a = [];
z2b = [];
z3a = [];
z3b = [];
z3x = [];
z3y = [];
z3z = [];
z4a = [];
}
else{
z1.splice(n, 1);
z2.splice(n, 1);
z3.splice(n, 1);
z4.splice(n, 1);
z1a.splice(n, 1);
z2a.splice(n, 1);
z2b.splice(n, 1);
z3a.splice(n, 1);
z3b.splice(n, 1);
z3x.splice(n, 1);
z3y.splice(n, 1);
z3z.splice(n, 1);
z4a.splice(n, 1);
}
}
if(type==52){
if(n==-1){
ne1 = [];
ne2 = [];
ne3 = [];
ne4 = [];
ne1a = [];
ne2a = [];
ne3a = [];
ne4a = [];
ne4b = [];
ne4c = [];
nex = [];
ney = [];
nez = [];
}
else{
ne1.splice(n, 1);
ne2.splice(n, 1);
ne3.splice(n, 1);
ne4.splice(n, 1);
ne1a.splice(n, 1);
ne2a.splice(n, 1);
ne3a.splice(n, 1);
ne4a.splice(n, 1);
ne4b.splice(n, 1);
ne4c.splice(n, 1);
nex.splice(n, 1);
ney.splice(n, 1);
nez.splice(n, 1);
}
}
if(type==53){
if(n==-1){
asn1 = [];
asn2 = [];
asn3 = [];
asn4 = [];
asn1a = [];
asn2a = [];
asnx = [];
asny = [];
asnz = [];
asn3a = [];
asn3b = [];
asn4a = [];
}
else{
asn1.splice(n, 1);
asn2.splice(n, 1);
asn3.splice(n, 1);
asn4.splice(n, 1);
asn1a.splice(n, 1);
asn2a.splice(n, 1);
asnx.splice(n, 1);
asny.splice(n, 1);
asnz.splice(n, 1);
asn3a.splice(n, 1);
asn3b.splice(n, 1);
asn4a.splice(n, 1);
}
}
if(type==54){
if(n==-1){
ho1 = [];
ho2 = [];
ho3 = [];
ho4 = [];
ho1a = [];
ho2a = [];
ho3a = [];
ho4a = [];
hox = [];
hoy = [];
hoz = [];
}
else{
ho1.splice(n, 1);
ho2.splice(n, 1);
ho3.splice(n, 1);
ho4.splice(n, 1);
ho1a.splice(n, 1);
ho2a.splice(n, 1);
ho3a.splice(n, 1);
ho4a.splice(n, 1);
hox.splice(n, 1);
hoy.splice(n, 1);
hoz.splice(n, 1);
}
}
if(type==55){
if(n==-1){
sol1 = [];
sol2 = [];
sol3 = [];
sol4 = [];
sol1a = [];
sol2a = [];
sol3a = [];
sol4a = [];
solx = [];
soly = [];
solz = [];
}
else{
sol1.splice(n, 1);
sol2.splice(n, 1);
sol3.splice(n, 1);
sol4.splice(n, 1);
sol1a.splice(n, 1);
sol2a.splice(n, 1);
sol3a.splice(n, 1);
sol4a.splice(n, 1);
solx.splice(n, 1);
soly.splice(n, 1);
solz.splice(n, 1);
}
}
if(type==56){
if(n==-1){
lu1 = [];
lu2 = [];
lu3 = [];
lu4 = [];
lu1a = [];
lu2a = [];
lu3a = [];
lu4a = [];
lux = [];
luy = [];
luz = [];
}
else{
lu1.splice(n, 1);
lu2.splice(n, 1);
lu3.splice(n, 1);
lu4.splice(n, 1);
lu1a.splice(n, 1);
lu2a.splice(n, 1);
lu3a.splice(n, 1);
lu4a.splice(n, 1);
lux.splice(n, 1);
luy.splice(n, 1);
luz.splice(n, 1);
}
}
if(type==57){
if(n==-1){
ha1 = [];
ha2 = [];
ha3 = [];
ha4 = [];
ha1a = [];
ha2a = [];
ha2x = [];
ha2y = [];
ha2z = [];
ha3a = [];
ha4a = [];
}
else{
ha1.splice(n, 1);
ha2.splice(n, 1);
ha3.splice(n, 1);
ha4.splice(n, 1);
ha1a.splice(n, 1);
ha2a.splice(n, 1);
ha2x.splice(n, 1);
ha2y.splice(n, 1);
ha2z.splice(n, 1);
ha3a.splice(n, 1);
ha4a.splice(n, 1);
}
}
if(type==58){
if(n==-1){
ra1 = [];
ra2 = [];
ra3 = [];
ra4 = [];
ra1a = [];
ra1b = [];
ra2a = [];
ra2b = [];
ra3a = [];
ra3b = [];
ra4a = [];
ra4b = [];
rax = [];
ray = [];
raz = [];
}
else{
ra1.splice(n, 1);
ra2.splice(n, 1);
ra3.splice(n, 1);
ra4.splice(n, 1);
ra1a.splice(n, 1);
ra1b.splice(n, 1);
ra2a.splice(n, 1);
ra2b.splice(n, 1);
ra3a.splice(n, 1);
ra3b.splice(n, 1);
ra4a.splice(n, 1);
ra4b.splice(n, 1);
rax.splice(n, 1);
ray.splice(n, 1);
raz.splice(n, 1);
}
}
if(type==59){
if(n==-1){
zw1 = [];
zw2 = [];
zw3 = [];
zw4 = [];
zw1a = [];
zw2a = [];
zw2x = [];
zw2y = [];
zw2z = [];
zw3a = [];
zw3b = [];
zw3x = [];
zw3y = [];
zw3z = [];
zw4a = [];
zw4b = [];
zwx = [];
zwy = [];
zwz = [];
}
else{
zw1.splice(n, 1);
zw2.splice(n, 1);
zw3.splice(n, 1);
zw4.splice(n, 1);
zw1a.splice(n, 1);
zw2a.splice(n, 1);
zw2x.splice(n, 1);
zw2y.splice(n, 1);
zw2z.splice(n, 1);
zw3a.splice(n, 1);
zw3b.splice(n, 1);
zw3x.splice(n, 1);
zw3y.splice(n, 1);
zw3z.splice(n, 1);
zw4a.splice(n, 1);
zw4b.splice(n, 1);
zwx.splice(n, 1);
zwy.splice(n, 1);
zwz.splice(n, 1);
}
}
if(type==60){
if(n==-1){
dec1 = [];
dec2 = [];
dec3 = [];
dec4 = [];
dec1a = [];
dec2a = [];
dec3a = [];
dec3x = [];
dec3y = [];
dec3z = [];
dec4a = [];
dec4c = [];
decx = [];
decy = [];
decz = [];
}
else{
dec1.splice(n, 1);
dec2.splice(n, 1);
dec3.splice(n, 1);
dec4.splice(n, 1);
dec1a.splice(n, 1);
dec2a.splice(n, 1);
dec3a.splice(n, 1);
dec3x.splice(n, 1);
dec3y.splice(n, 1);
dec3z.splice(n, 1);
dec4a.splice(n, 1);
dec4c.splice(n, 1);
decx.splice(n, 1);
decy.splice(n, 1);
decz.splice(n, 1);
}
}
if(type==61){
if(n==-1){
hs1 = [];
hs2 = [];
hs3 = [];
hs4 = [];
hs1a = [];
hs2a = [];
hs3a = [];
hs4a = [];
}
else{
hs1.splice(n, 1);
hs2.splice(n, 1);
hs3.splice(n, 1);
hs4.splice(n, 1);
hs1a.splice(n, 1);
hs2a.splice(n, 1);
hs3a.splice(n, 1);
hs4a.splice(n, 1);
}
}
if(type==62){
if(n==-1){
cli1 = [];
cli2 = [];
cli3 = [];
cli4 = [];
cli1a = [];
cli1b = [];
cli2a = [];
cli3a = [];
cli4a = [];
clix = [];
cliy = [];
cliz = [];
}
else{
cli1.splice(n, 1);
cli2.splice(n, 1);
cli3.splice(n, 1);
cli4.splice(n, 1);
cli1a.splice(n, 1);
cli1b.splice(n, 1);
cli2a.splice(n, 1);
cli3a.splice(n, 1);
cli4a.splice(n, 1);
clix.splice(n, 1);
cliy.splice(n, 1);
cliz.splice(n, 1);
}
}
if(type==63){
if(n==-1){
rr1 = [];
rr2 = [];
rr3 = [];
rr4 = [];
rr1a = [];
rr2a = [];
rr3a = [];
rr4a = [];
rr0 = [];
}
else{
rr1.splice(n, 1);
rr2.splice(n, 1);
rr3.splice(n, 1);
rr4.splice(n, 1);
rr1a.splice(n, 1);
rr2a.splice(n, 1);
rr3a.splice(n, 1);
rr4a.splice(n, 1);
rr0.splice(n, 1);
}
}
if(type==64){
if(n==-1){
wi1 = [];
wi2 = [];
wi3 = [];
wi4 = [];
wi1a = [];
wi2a = [];
wi3a = [];
wi4a = [];
wi4b = [];
wix = [];
wiy = [];
wiz = [];
}
else{
wi1.splice(n, 1);
wi2.splice(n, 1);
wi3.splice(n, 1);
wi4.splice(n, 1);
wi1a.splice(n, 1);
wi2a.splice(n, 1);
wi3a.splice(n, 1);
wi4a.splice(n, 1);
wi4b.splice(n, 1);
wix.splice(n, 1);
wiy.splice(n, 1);
wiz.splice(n, 1);
}
}
if(type==65){
if(n==-1){
en1 = [];
en2 = [];
en3 = [];
en4 = [];
en1a = [];
en1x = [];
en1y = [];
en1z = [];
en2a = [];
en3a = [];
en3x = [];
en3y = [];
en3z = [];
en4a = [];
en4b = [];
}
else{
en1.splice(n, 1);
en2.splice(n, 1);
en3.splice(n, 1);
en4.splice(n, 1);
en1a.splice(n, 1);
en1x.splice(n, 1);
en1y.splice(n, 1);
en1z.splice(n, 1);
en2a.splice(n, 1);
en3a.splice(n, 1);
en3x.splice(n, 1);
en3y.splice(n, 1);
en3z.splice(n, 1);
en4a.splice(n, 1);
en4b.splice(n, 1);
}
}
if(type==66){
if(n==-1){
g1 = [];
g2 = [];
g3 = [];
g4 = [];
g1a = [];
g2a = [];
g2x = [];
g2y = [];
g2z = [];
g3a = [];
g3x = [];
g3y = [];
g3z = [];
g4a = [];
g4b = [];
gx = [];
gy = [];
gz = [];
}
else{
g1.splice(n, 1);
g2.splice(n, 1);
g3.splice(n, 1);
g4.splice(n, 1);
g1a.splice(n, 1);
g2a.splice(n, 1);
g2x.splice(n, 1);
g2y.splice(n, 1);
g2z.splice(n, 1);
g3a.splice(n, 1);
g3x.splice(n, 1);
g3y.splice(n, 1);
g3z.splice(n, 1);
g4a.splice(n, 1);
g4b.splice(n, 1);
gx.splice(n, 1);
gy.splice(n, 1);
gz.splice(n, 1);
}
}
if(type==67){
if(n==-1){
se1 = [];
se2 = [];
se3 = [];
se4 = [];
se1a = [];
se2a = [];
se3a = [];
se4a = [];
se4b = [];
se4c = [];
sex = [];
sey = [];
sez = [];
}
else{
se1.splice(n, 1);
se2.splice(n, 1);
se3.splice(n, 1);
se4.splice(n, 1);
se1a.splice(n, 1);
se2a.splice(n, 1);
se3a.splice(n, 1);
se4a.splice(n, 1);
se4b.splice(n, 1);
se4c.splice(n, 1);
sex.splice(n, 1);
sey.splice(n, 1);
sez.splice(n, 1);
}
}
if(type==68){
if(n==-1){
ou1 = [];
ou2 = [];
ou3 = [];
ou4 = [];
ou1a = [];
ou2a = [];
ou3a = [];
ou4a = [];
oux = [];
ouy = [];
ouz = [];
}
else{
ou1.splice(n, 1);
ou2.splice(n, 1);
ou3.splice(n, 1);
ou4.splice(n, 1);
ou1a.splice(n, 1);
ou2a.splice(n, 1);
ou3a.splice(n, 1);
ou4a.splice(n, 1);
oux.splice(n, 1);
ouy.splice(n, 1);
ouz.splice(n, 1);
}
}
if(type==69){
if(n==-1){
rg1 = [];
rg2 = [];
rg3 = [];
rg4 = [];
rg1a = [];
rg2a = [];
rg3a = [];
rg3x = [];
rg3y = [];
rg3z = [];
rg4a = [];
rg4x = [];
rg4y = [];
rg4z = [];
}
else{
rg1.splice(n, 1);
rg2.splice(n, 1);
rg3.splice(n, 1);
rg4.splice(n, 1);
rg1a.splice(n, 1);
rg2a.splice(n, 1);
rg3a.splice(n, 1);
rg3x.splice(n, 1);
rg3y.splice(n, 1);
rg3z.splice(n, 1);
rg4a.splice(n, 1);
rg4x.splice(n, 1);
rg4y.splice(n, 1);
rg4z.splice(n, 1);
}
}
if(type==70){
if(n==-1){
co1 = [];
co2 = [];
co3 = [];
co4 = [];
co1a = [];
co1x = [];
co1y = [];
co1z = [];
co2a = [];
co2x = [];
co2y = [];
co2z = [];
co3a = [];
co3b = [];
co3x = [];
co3y = [];
co3z = [];
co4a = [];
cox = [];
coy = [];
coz = [];
}
else{
co1.splice(n, 1);
co2.splice(n, 1);
co3.splice(n, 1);
co4.splice(n, 1);
co1a.splice(n, 1);
co1x.splice(n, 1);
co1y.splice(n, 1);
co1z.splice(n, 1);
co2a.splice(n, 1);
co2x.splice(n, 1);
co2y.splice(n, 1);
co2z.splice(n, 1);
co3a.splice(n, 1);
co3b.splice(n, 1);
co3x.splice(n, 1);
co3y.splice(n, 1);
co3z.splice(n, 1);
co4a.splice(n, 1);
cox.splice(n, 1);
coy.splice(n, 1);
coz.splice(n, 1);
}
}
if(type==71){
if(n==-1){
dr1 = [];
dr2 = [];
dr3 = [];
dr4 = [];
dr1a = [];
dr2a = [];
dr3a = [];
dr4a = [];
drx = [];
dry = [];
drz = [];
}
else{
dr1.splice(n, 1);
dr2.splice(n, 1);
dr3.splice(n, 1);
dr4.splice(n, 1);
dr1a.splice(n, 1);
dr2a.splice(n, 1);
dr3a.splice(n, 1);
dr4a.splice(n, 1);
drx.splice(n, 1);
dry.splice(n, 1);
drz.splice(n, 1);
}
}
if(type==72){
if(n==-1){
hw1 = [];
hw2 = [];
hw3 = [];
hw4 = [];
hw1a = [];
hw1x = [];
hw1y = [];
hw1z = [];
hw2a = [];
hwxa = [];
hwya = [];
hwza = [];
hw2x = [];
hw2y = [];
hw2z = [];
hw3a = [];
hw4a = [];
hwx = [];
hwy = [];
hwz = [];
}
else{
hw1.splice(n, 1);
hw2.splice(n, 1);
hw3.splice(n, 1);
hw4.splice(n, 1);
hw1a.splice(n, 1);
hw1x.splice(n, 1);
hw1y.splice(n, 1);
hw1z.splice(n, 1);
hw2a.splice(n, 1);
hwxa.splice(n, 1);
hwya.splice(n, 1);
hwza.splice(n, 1);
hw2x.splice(n, 1);
hw2y.splice(n, 1);
hw2z.splice(n, 1);
hw3a.splice(n, 1);
hw4a.splice(n, 1);
hwx.splice(n, 1);
hwy.splice(n, 1);
hwz.splice(n, 1);
}
}
if(type==73){
if(n==-1){
sd1 = [];
sd2 = [];
sd3 = [];
sd4 = [];
sd1a = [];
sd2a = [];
sd3a = [];
sd4a = [];
sd4x = [];
sd4y = [];
sd4z = [];
sdx = [];
sdy = [];
sdz = [];
}
else{
sd1.splice(n, 1);
sd2.splice(n, 1);
sd3.splice(n, 1);
sd4.splice(n, 1);
sd1a.splice(n, 1);
sd2a.splice(n, 1);
sd3a.splice(n, 1);
sd4a.splice(n, 1);
sd4x.splice(n, 1);
sd4y.splice(n, 1);
sd4z.splice(n, 1);
sdx.splice(n, 1);
sdy.splice(n, 1);
sdz.splice(n, 1);
}
}
if(type==74){
if(n==-1){
gr1 = [];
gr2 = [];
gr3 = [];
gr4 = [];
gr1a = [];
gr1b = [];
gr1c = [];
gr1x = [];
gr1y = [];
gr1z = [];
gr2a = [];
gr3a = [];
gr3x = [];
gr3y = [];
gr3z = [];
gr4a = [];
grx = [];
gry = [];
grz = [];
}
else{
gr1.splice(n, 1);
gr2.splice(n, 1);
gr3.splice(n, 1);
gr4.splice(n, 1);
gr1a.splice(n, 1);
gr1b.splice(n, 1);
gr1c.splice(n, 1);
gr1x.splice(n, 1);
gr1y.splice(n, 1);
gr1z.splice(n, 1);
gr2a.splice(n, 1);
gr3a.splice(n, 1);
gr3x.splice(n, 1);
gr3y.splice(n, 1);
gr3z.splice(n, 1);
gr4a.splice(n, 1);
grx.splice(n, 1);
gry.splice(n, 1);
grz.splice(n, 1);
}
}



}




};


var SB2 = {
espManage : function(type){
var names = ["토르", "포세이돈", "카이지", "미사카 미코토", "엘사", "푸서", "에이스", "패스터", "록 리", "목둔", "아카이누", "슬로워", "가아라"];
if(SB2.isOff(type)){
ESP.toast(names[type]+"(을)를 사용하는 플래이어가 없습니다.");
}
else{
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var menu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText(names[type]+"\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(eval(sb2Code[type])));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var btns = new Array();
var menus = ["Send ESP", "Kill ESP", "Heal ESP"];
for(var n in menus){
btns[n] = android.widget.Button(ctx);
btns[n].setText(menus[n]);
}
btns[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(eval(sb2Code[type]));
ESP.toast(names[n]+"(이)가 전송되었습니다");
}
});
btns[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(eval(sb2Code[type]));
ESP.toast(names[n]+"(을)를 사살하였습니다");
}
});
btns[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(eval(sb2Code[type]));
ESP.toast(names[n]+"(을)를 회복시켰습니다");
}
});
for(var n in menus)
layout.addView(btns[n]);
var exit = makeExitButton(menu);
layout.addView(exit);
var scroll = makeScroll(layout, menu);
menu.setContentView(scroll);
menu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}
},
isOff : function(type){
if(type==0&&t2hor==null) return true;
if(type==1&&w2ater==null) return true;
if(type==2&&k2ill==null) return true;
if(type==3&&m2isaka==null) return true;
if(type==4&&e2lsa==null) return true;
if(type==5&&p2ush==null) return true;
if(type==6&&f2ire==null) return true;
if(type==7&&f2aster==null) return true;
if(type==8&&k2ick==null) return true;
if(type==9&&t2ree==null) return true;
if(type==10&&l2ava==null) return true;
if(type==11&&b2ind==null) return true;
if(type==12&&s2and==null) return true;
else return false;
}


};


var WB = {
wizardManage : function(type){
var names = ["Fire", "Water", "Tree", "Air", "Burst", "Earth", "Light", "Dark", "Bind", "Lightning"];
if(WB.isOff(type)){
ESP.toast("No one is using "+names[type]+" Wizard.");
}
else{
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var menu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText(names[type]+" Wizard\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(eval(wizardCode[type])));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var btns = new Array();
var menus = ["Send ESP", "Kill ESP", "Heal ESP"];
for(var n in menus){
btns[n] = android.widget.Button(ctx);
btns[n].setText(menus[n]);
}
btns[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(eval(wizardCode[type]));
ESP.toast(names[type]+" Wizard was sent");
}
});
btns[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(eval(wizardCode[type]));
ESP.toast(names[type]+" Wizard was killed");
}
});
btns[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(eval(wizardCode[type]));
ESP.toast(names[type]+" Wizard was healed");
}
});
for(var n in menus)
layout.addView(btns[n]);
var exit = makeExitButton(menu);
layout.addView(exit);
var scroll = makeScroll(layout,menu);
menu.setContentView(scroll);
menu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}
},
isOff : function(type){
if(type==0&&wfire==null) return true;
if(type==1&&wwater==null) return true;
if(type==2&&wtree==null) return true;
if(type==3&&wair==null) return true;
if(type==4&&wburst==null) return true;
if(type==5&&wearth==null) return true;
if(type==6&&wlight==null) return true;
if(type==7&&wdark==null) return true;
if(type==8&&wbind==null) return true;
if(type==9&&wlightn==null) return true;
else return false;
}


};


var BHE = {
brightHurricaneJr : function(){
if(bbh!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var bhmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Bright Hurricane jr.\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(bbh));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var bhsend = android.widget.Button(ctx);
var bhkill = android.widget.Button(ctx);
var bhheal = android.widget.Button(ctx);
var bhexit = android.widget.Button(ctx);
bhsend.setText("Send ESP");
bhkill.setText("Kill ESP");
bhheal.setText("Heal ESP");
bhexit.setText("EXIT");
bhsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(bbh);
ESP.toast("Bright Hurricane jr. was sent");
}
});
bhkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(bbh);
ESP.toast("Bright Hurricane jr. was killed");
}
});
bhheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(bbh);
ESP.toast("Bright Hurricane jr. was healed");
}
});
bhexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(bhmenu!=null){
bhmenu.dismiss();
bhmenu = null;
}
}
});
layout.addView(bhsend);
layout.addView(bhkill);
layout.addView(bhheal);
layout.addView(bhexit);

var scroll = makeScroll(layout,bhmenu);
bhmenu.setContentView(scroll);
bhmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
bhmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(bbh==null){
ESP.toast("No one is using Bright Hurricane jr..");
}
},
darkKnight : function(){
if(bdk!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var dkmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Dark Knight\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(bdk));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var dksend = android.widget.Button(ctx);
var dkkill = android.widget.Button(ctx);
var dkheal = android.widget.Button(ctx);
var dkexit = android.widget.Button(ctx);
dksend.setText("Send ESP");
dkkill.setText("Kill ESP");
dkheal.setText("Heal ESP");
dkexit.setText("EXIT");
dksend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(bdk);
ESP.toast("Dark Knight was sent");
}
});
dkkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(bdk);
ESP.toast("Dark Knight was killed");
}
});
dkheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(bdk);
ESP.toast("Dark Knight was healed");
}
});
dkexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(dkmenu!=null){
dkmenu.dismiss();
dkmenu = null;
}
}
});
layout.addView(dksend);
layout.addView(dkkill);
layout.addView(dkheal);
layout.addView(dkexit);

var scroll = makeScroll(layout,dkmenu);
dkmenu.setContentView(scroll);
dkmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
dkmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(bdk==null){
ESP.toast("No one is using Dark Knight.");
}
},
natureBreaker : function(){
if(bnb!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nbmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Nature Breaker\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(bnb));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var nbsend = android.widget.Button(ctx);
var nbkill = android.widget.Button(ctx);
var nbheal = android.widget.Button(ctx);
var nbexit = android.widget.Button(ctx);
nbsend.setText("Send ESP");
nbkill.setText("Kill ESP");
nbheal.setText("Heal ESP");
nbexit.setText("EXIT");
nbsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(bnb);
ESP.toast("Nature Breaker was sent");
}
});
nbkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(bnb);
ESP.toast("Nature Breaker was killed");
}
});
nbheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(bnb);
ESP.toast("Nature Breaker was healed");
}
});
nbexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nbmenu!=null){
nbmenu.dismiss();
nbmenu = null;
}
}
});
layout.addView(nbsend);
layout.addView(nbkill);
layout.addView(nbheal);
layout.addView(nbexit);

var scroll = makeScroll(layout,nbmenu);
nbmenu.setContentView(scroll);
nbmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nbmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(bnb==null){
ESP.toast("No one is using Nature Breaker.");
}
},
gambler : function(){
if(bgamble!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var gamblemenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Gambler\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(bgamble));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var gamblesend = android.widget.Button(ctx);
var gamblekill = android.widget.Button(ctx);
var gambleheal = android.widget.Button(ctx);
var gambleexit = android.widget.Button(ctx);
gamblesend.setText("Send ESP");
gamblekill.setText("Kill ESP");
gambleheal.setText("Heal ESP");
gambleexit.setText("EXIT");
gamblesend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(bgamble);
ESP.toast("Gambler was sent");
}
});
gamblekill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(bgamble);
ESP.toast("Gambler was killed");
}
});
gambleheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(bgamble);
ESP.toast("Gambler was healed");
}
});
gambleexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(gamblemenu!=null){
gamblemenu.dismiss();
gamblemenu = null;
}
}
});
layout.addView(gamblesend);
layout.addView(gamblekill);
layout.addView(gambleheal);
layout.addView(gambleexit);

var scroll = makeScroll(layout,gamblemenu);
gamblemenu.setContentView(scroll);
gamblemenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
gamblemenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(bgamble==null){
ESP.toast("No one is using Gambler.");
}
},
thief : function(){
if(bthief!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var thiefmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Thief\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(bthief));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var thiefsend = android.widget.Button(ctx);
var thiefkill = android.widget.Button(ctx);
var thiefheal = android.widget.Button(ctx);
var thiefexit = android.widget.Button(ctx);
thiefsend.setText("Send ESP");
thiefkill.setText("Kill ESP");
thiefheal.setText("Heal ESP");
thiefexit.setText("EXIT");
thiefsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(bthief);
ESP.toast("Thief was sent");
}
});
thiefkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(bthief);
ESP.toast("Thief was killed");
}
});
thiefheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(bthief);
ESP.toast("Thief was healed");
}
});
thiefexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(thiefmenu!=null){
thiefmenu.dismiss();
thiefmenu = null;
}
}
});
layout.addView(thiefsend);
layout.addView(thiefkill);
layout.addView(thiefheal);
layout.addView(thiefexit);

var scroll = makeScroll(layout,thiefmenu);
thiefmenu.setContentView(scroll);
thiefmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
thiefmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(bthief==null){
ESP.toast("No one is using Thief.");
}
},
dualBlade : function(){
if(bdual!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var dualmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Dual Blade\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(bdual));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var dualsend = android.widget.Button(ctx);
var dualkill = android.widget.Button(ctx);
var dualheal = android.widget.Button(ctx);
var dualexit = android.widget.Button(ctx);
dualsend.setText("Send ESP");
dualkill.setText("Kill ESP");
dualheal.setText("Heal ESP");
dualexit.setText("EXIT");
dualsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(bdual);
ESP.toast("Dual Blade was sent");
}
});
dualkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(bdual);
ESP.toast("Dual Blade was killed");
}
});
dualheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(bdual);
ESP.toast("Dual Blade was healed");
}
});
dualexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(dualmenu!=null){
dualmenu.dismiss();
dualmenu = null;
}
}
});
layout.addView(dualoff);
layout.addView(dualsend);
layout.addView(dualkill);
layout.addView(dualheal);
layout.addView(dualexit);

var scroll = makeScroll(layout,dualmenu);
dualmenu.setContentView(scroll);
dualmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
dualmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(bdual==null){
ESP.toast("No one is using Dual Blade.");
}
},
cannonShooter : function(){
if(bcannon!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var cannonmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Cannon Shooter\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(bcannon));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var cannonsend = android.widget.Button(ctx);
var cannonkill = android.widget.Button(ctx);
var cannonheal = android.widget.Button(ctx);
var cannonexit = android.widget.Button(ctx);
cannonsend.setText("Send ESP");
cannonkill.setText("Kill ESP");
cannonheal.setText("Heal ESP");
cannonexit.setText("EXIT");
cannonsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(bcannon);
ESP.toast("Cannon Shooter was sent");
}
});
cannonkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(bcannon);
ESP.toast("Cannon Shooter was killed");
}
});
cannonheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(bcannon);
ESP.toast("Cannon Shooter was healed");
}
});
cannonexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(cannonmenu!=null){
cannonmenu.dismiss();
cannonmenu = null;
}
}
});
layout.addView(cannonsend);
layout.addView(cannonkill);
layout.addView(cannonheal);
layout.addView(cannonexit);

var scroll = makeScroll(layout,cannonmenu);
cannonmenu.setContentView(scroll);
cannonmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
cannonmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(bcannon==null){
ESP.toast("No one is using Cannon Shooter.");
}
}


};


var ST = {
juniorTransfer : function(){
if(tjunior!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var tjuniormenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("S-Junior Transfer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(tjunior));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var tjuniorsend = android.widget.Button(ctx);
var tjuniorkill = android.widget.Button(ctx);
var tjuniorheal = android.widget.Button(ctx);
var tjuniorexit = android.widget.Button(ctx);
tjuniorsend.setText("Send ESP");
tjuniorkill.setText("Kill ESP");
tjuniorheal.setText("Heal ESP");
tjuniorexit.setText("EXIT");
tjuniorsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(tjunior);
ESP.toast("S-Junior Transfer was sent");
}
});
tjuniorkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(tjunior);
ESP.toast("S-Junior Transfer was killed");
}
});
tjuniorheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(tjunior);
ESP.toast("S-Junior Transfer was healed");
}
});
tjuniorexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(tjuniormenu!=null){
tjuniormenu.dismiss();
tjuniormenu = null;
}
}
});
layout.addView(tjuniorsend);
layout.addView(tjuniorkill);
layout.addView(tjuniorheal);
layout.addView(tjuniorexit);

var scroll = makeScroll(layout,tjuniormenu);
tjuniormenu.setContentView(scroll);
tjuniormenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
tjuniormenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(tjunior==null){
ESP.toast("No one is using S-Junior Transfer.");
}
},
bloodTransfer : function(){
if(tblood!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var tbloodmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("S-Blood Transfer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(tblood));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var tbloodsend = android.widget.Button(ctx);
var tbloodkill = android.widget.Button(ctx);
var tbloodheal = android.widget.Button(ctx);
var tbloodexit = android.widget.Button(ctx);
tbloodsend.setText("Send ESP");
tbloodkill.setText("Kill ESP");
tbloodheal.setText("Heal ESP");
tbloodexit.setText("EXIT");
tbloodsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(tblood);
ESP.toast("S-Blood Transfer was sent");
}
});
tbloodkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(tblood);
ESP.toast("S-Blood Transfer was killed");
}
});
tbloodheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(tblood);
ESP.toast("S-Blood Transfer was healed");
}
});
tbloodexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(tbloodmenu!=null){
tbloodmenu.dismiss();
tbloodmenu = null;
}
}
});
layout.addView(tbloodsend);
layout.addView(tbloodkill);
layout.addView(tbloodheal);
layout.addView(tbloodexit);

var scroll = makeScroll(layout,tbloodmenu);
tbloodmenu.setContentView(scroll);
tbloodmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
tbloodmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(tblood==null){
ESP.toast("No one is using S-Blood Transfer.");
}
},
electricTransfer : function(){
if(telectric!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var telectricmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("S-Electric Transfer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(telectric));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var telectricsend = android.widget.Button(ctx);
var telectrickill = android.widget.Button(ctx);
var telectricheal = android.widget.Button(ctx);
var telectricexit = android.widget.Button(ctx);
telectricsend.setText("Send ESP");
telectrickill.setText("Kill ESP");
telectricheal.setText("Heal ESP");
telectricexit.setText("EXIT");
telectricsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(telectric);
ESP.toast("S-Electric Transfer was sent");
}
});
telectrickill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(telectric);
ESP.toast("S-Electric Transfer was killed");
}
});
telectricheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(telectric);
ESP.toast("S-Electric Transfer was healed");
}
});
telectricexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(telectricmenu!=null){
telectricmenu.dismiss();
telectricmenu = null;
}
}
});
layout.addView(telectricsend);
layout.addView(telectrickill);
layout.addView(telectricheal);
layout.addView(telectricexit);

var scroll = makeScroll(layout,telectricmenu);
telectricmenu.setContentView(scroll);
telectricmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
telectricmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(telectric==null){
ESP.toast("No one is using S-Electric Transfer.");
}
},
spearTransfer : function(){
if(tspear!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var tspearmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("S-Sword Transfer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(tspear));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var tspearsend = android.widget.Button(ctx);
var tspearkill = android.widget.Button(ctx);
var tspearheal = android.widget.Button(ctx);
var tspearexit = android.widget.Button(ctx);
tspearsend.setText("Send ESP");
tspearkill.setText("Kill ESP");
tspearheal.setText("Heal ESP");
tspearexit.setText("EXIT");
tspearsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(tspear);
ESP.toast("S-Sword Transfer was sent");
}
});
tspearkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(tspear);
ESP.toast("S-Sword Transfer was killed");
}
});
tspearheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(tspear);
ESP.toast("S-Sword Transfer was healed");
}
});
tspearexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(tspearmenu!=null){
tspearmenu.dismiss();
tspearmenu = null;
}
}
});
layout.addView(tspearsend);
layout.addView(tspearkill);
layout.addView(tspearheal);
layout.addView(tspearexit);

var scroll = makeScroll(layout,tspearmenu);
tspearmenu.setContentView(scroll);
tspearmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
tspearmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(tspear==null){
ESP.toast("No one is using S-Sword Transfer.");
}
},
tebTransfer : function(){
if(tteb!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var ttebmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("S-T.E.B Transfer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(tteb));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var ttebsend = android.widget.Button(ctx);
var ttebkill = android.widget.Button(ctx);
var ttebheal = android.widget.Button(ctx);
var ttebexit = android.widget.Button(ctx);
ttebsend.setText("Send ESP");
ttebkill.setText("Kill ESP");
ttebheal.setText("Heal ESP");
ttebexit.setText("EXIT");
ttebsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(tteb);
ESP.toast("S-T.E.B Transfer was sent");
}
});
ttebkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(tteb);
ESP.toast("S-T.E.B Transfer was killed");
}
});
ttebheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(tteb);
ESP.toast("S-T.E.B Transfer was healed");
}
});
ttebexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(ttebmenu!=null){
ttebmenu.dismiss();
ttebmenu = null;
}
}
});
layout.addView(ttebsend);
layout.addView(ttebkill);
layout.addView(ttebheal);
layout.addView(ttebexit);

var scroll = makeScroll(layout,ttebmenu);
ttebmenu.setContentView(scroll);
ttebmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
ttebmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(tteb==null){
ESP.toast("No one is using S-T.E.B Transfer.");
}
},
iceTransfer : function(){
if(tice!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var ticemenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("S-Ice Transfer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(tice));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var ticesend = android.widget.Button(ctx);
var ticekill = android.widget.Button(ctx);
var ticeheal = android.widget.Button(ctx);
var ticeexit = android.widget.Button(ctx);
ticesend.setText("Send ESP");
ticekill.setText("Kill ESP");
ticeheal.setText("Heal ESP");
ticeexit.setText("EXIT");
ticesend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(tice);
ESP.toast("S-Ice Transfer was sent");
}
});
ticekill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(tice);
ESP.toast("S-Ice Transfer was killed");
}
});
ticeheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(tice);
ESP.toast("S-Ice Transfer was healed");
}
});
ticeexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(ticemenu!=null){
ticemenu.dismiss();
ticemenu = null;
}
}
});
layout.addView(ticesend);
layout.addView(ticekill);
layout.addView(ticeheal);
layout.addView(ticeexit);

var scroll = makeScroll(layout,ticemenu);
ticemenu.setContentView(scroll);
ticemenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
ticemenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(tice==null){
ESP.toast("No one is using S-Ice Transfer.");
}
},
dustTransfer : function(){
if(tdust!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var tdustmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("S-Dust Transfer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(tdust));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var tdustsend = android.widget.Button(ctx);
var tdustkill = android.widget.Button(ctx);
var tdustheal = android.widget.Button(ctx);
var tdustexit = android.widget.Button(ctx);
tdustsend.setText("Send ESP");
tdustkill.setText("Kill ESP");
tdustheal.setText("Heal ESP");
tdustexit.setText("EXIT");
tdustsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(tdust);
ESP.toast("S-Dust Transfer was sent");
}
});
tdustkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(tdust);
ESP.toast("S-Dust Transfer was killed");
}
});
tdustheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(tdust);
ESP.toast("S-Dust Transfer was healed");
}
});
tdustexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(tdustmenu!=null){
tdustmenu.dismiss();
tdustmenu = null;
}
}
});
layout.addView(tdustsend);
layout.addView(tdustkill);
layout.addView(tdustheal);
layout.addView(tdustexit);

var scroll = makeScroll(layout,tdustmenu);
tdustmenu.setContentView(scroll);
tdustmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
tdustmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(tdust==null){
ESP.toast("No one is using S-Dust Transfer.");
}
},
groundTransfer : function(){
if(tground!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var tgroundmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("S-Ground Transfer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(tground));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var tgroundsend = android.widget.Button(ctx);
var tgroundkill = android.widget.Button(ctx);
var tgroundheal = android.widget.Button(ctx);
var tgroundexit = android.widget.Button(ctx);
tgroundsend.setText("Send ESP");
tgroundkill.setText("Kill ESP");
tgroundheal.setText("Heal ESP");
tgroundexit.setText("EXIT");
tgroundsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(tground);
ESP.toast("S-Ground Transfer was sent");
}
});
tgroundkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(tground);
ESP.toast("S-Ground Transfer was killed");
}
});
tgroundheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(tground);
ESP.toast("S-Ground Transfer was healed");
}
});
tgroundexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(tgroundmenu!=null){
tgroundmenu.dismiss();
tgroundmenu = null;
}
}
});
layout.addView(tgroundsend);
layout.addView(tgroundkill);
layout.addView(tgroundheal);
layout.addView(tgroundexit);

var scroll = makeScroll(layout,tgroundmenu);
tgroundmenu.setContentView(scroll);
tgroundmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
tgroundmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(tground==null){
ESP.toast("No one is using S-Ground Transfer.");
}
},
flameTransfer : function(){
if(tflame!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var tflamemenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("S-Flame Transfer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(tflame));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var tflamesend = android.widget.Button(ctx);
var tflamekill = android.widget.Button(ctx);
var tflameheal = android.widget.Button(ctx);
var tflameexit = android.widget.Button(ctx);
tflamesend.setText("Send ESP");
tflamekill.setText("Kill ESP");
tflameheal.setText("Heal ESP");
tflameexit.setText("EXIT");
tflamesend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(tflame);
ESP.toast("S-Flame Transfer was sent");
}
});
tflamekill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(tflame);
ESP.toast("S-Flame Transfer was killed");
}
});
tflameheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(tflame);
ESP.toast("S-Flame Transfer was healed");
}
});
tflameexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(tflamemenu!=null){
tflamemenu.dismiss();
tflamemenu = null;
}
}
});
layout.addView(tflamesend);
layout.addView(tflamekill);
layout.addView(tflameheal);
layout.addView(tflameexit);

var scroll = makeScroll(layout,tflamemenu);
tflamemenu.setContentView(scroll);
tflamemenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
tflamemenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(tflame==null){
ESP.toast("No one is using S-Flame Transfer.");
}
},
waterTransfer : function(){
if(twater!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var twatermenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("S-Water Transfer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(twater));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var twatersend = android.widget.Button(ctx);
var twaterkill = android.widget.Button(ctx);
var twaterheal = android.widget.Button(ctx);
var twaterexit = android.widget.Button(ctx);
twatersend.setText("Send ESP");
twaterkill.setText("Kill ESP");
twaterheal.setText("Heal ESP");
twaterexit.setText("EXIT");
twatersend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(twater);
ESP.toast("S-Water Transfer was sent");
}
});
twaterkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(twater);
ESP.toast("S-Water Transfer was killed");
}
});
twaterheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(twater);
ESP.toast("S-Water Transfer was healed");
}
});
twaterexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(twatermenu!=null){
twatermenu.dismiss();
twatermenu = null;
}
}
});
layout.addView(twatersend);
layout.addView(twaterkill);
layout.addView(twaterheal);
layout.addView(twaterexit);

var scroll = makeScroll(layout,twatermenu);
twatermenu.setContentView(scroll);
twatermenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
twatermenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(twater==null){
ESP.toast("No one is using S-Water Transfer.");
}
}


};


var FF = {
queenRose : function(){
if(frose!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var frosemenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Queen Rose\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(frose));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var frosesend = android.widget.Button(ctx);
var frosekill = android.widget.Button(ctx);
var froseheal = android.widget.Button(ctx);
var froseexit = android.widget.Button(ctx);
frosesend.setText("Send ESP");
frosekill.setText("Kill ESP");
froseheal.setText("Heal ESP");
froseexit.setText("EXIT");
frosesend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(frose);
ESP.toast("Queen Rose was sent");
}
});
frosekill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(frose);
ESP.toast("Queen Rose was killed");
}
});
froseheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(frose);
ESP.toast("Queen Rose was healed");
}
});
froseexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(frosemenu!=null){
frosemenu.dismiss();
frosemenu = null;
}
}
});
layout.addView(frosesend);
layout.addView(frosekill);
layout.addView(froseheal);
layout.addView(froseexit);

var scroll = makeScroll(layout,frosemenu);
frosemenu.setContentView(scroll);
frosemenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
frosemenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(frose==null){
ESP.toast("No one is using Queen Rose.");
}
},
yellowPrimula : function(){
if(fprimula!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var fprimulamenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Yellow Primula\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(fprimula));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var fprimulasend = android.widget.Button(ctx);
var fprimulakill = android.widget.Button(ctx);
var fprimulaheal = android.widget.Button(ctx);
var fprimulaexit = android.widget.Button(ctx);
fprimulasend.setText("Send ESP");
fprimulakill.setText("Kill ESP");
fprimulaheal.setText("Heal ESP");
fprimulaexit.setText("EXIT");
fprimulasend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(fprimula);
ESP.toast("Yellow Primula was sent");
}
});
fprimulakill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(fprimula);
ESP.toast("Yellow Primula was killed");
}
});
fprimulaheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(fprimula);
ESP.toast("Yellow Primula was healed");
}
});
fprimulaexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(fprimulamenu!=null){
fprimulamenu.dismiss();
fprimulamenu = null;
}
}
});
layout.addView(fprimulasend);
layout.addView(fprimulakill);
layout.addView(fprimulaheal);
layout.addView(fprimulaexit);

var scroll = makeScroll(layout,fprimulamenu);
fprimulamenu.setContentView(scroll);
fprimulamenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
fprimulamenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(fprimula==null){
ESP.toast("No one is using Yellow Primula.");
}
},
greenIvy : function(){
if(fivy!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var fivymenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Green Ivy\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(fivy));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var fivysend = android.widget.Button(ctx);
var fivykill = android.widget.Button(ctx);
var fivyheal = android.widget.Button(ctx);
var fivyexit = android.widget.Button(ctx);
fivysend.setText("Send ESP");
fivykill.setText("Kill ESP");
fivyheal.setText("Heal ESP");
fivyexit.setText("EXIT");
fivysend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(fivy);
ESP.toast("Green Ivy was sent");
}
});
fivykill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(fivy);
ESP.toast("Green Ivy was killed");
}
});
fivyheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(fivy);
ESP.toast("Green Ivy was healed");
}
});
fivyexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(fivymenu!=null){
fivymenu.dismiss();
fivymenu = null;
}
}
});
layout.addView(fivysend);
layout.addView(fivykill);
layout.addView(fivyheal);
layout.addView(fivyexit);

var scroll = makeScroll(layout,fivymenu);
fivymenu.setContentView(scroll);
fivymenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
fivymenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(fivy==null){
ESP.toast("No one is using Green Ivy.");
}
},
whiteDaisy : function(){
if(fdaisy!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var fdaisymenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("White Daisy\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(fdaisy));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var fdaisysend = android.widget.Button(ctx);
var fdaisykill = android.widget.Button(ctx);
var fdaisyheal = android.widget.Button(ctx);
var fdaisyexit = android.widget.Button(ctx);
fdaisysend.setText("Send ESP");
fdaisykill.setText("Kill ESP");
fdaisyheal.setText("Heal ESP");
fdaisyexit.setText("EXIT");
fdaisysend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(fdaisy);
ESP.toast("White Daisy was sent");
}
});
fdaisykill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(fdaisy);
ESP.toast("White Daisy was killed");
}
});
fdaisyheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(fdaisy);
ESP.toast("White Daisy was healed");
}
});
fdaisyexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(fdaisymenu!=null){
fdaisymenu.dismiss();
fdaisymenu = null;
}
}
});
layout.addView(fdaisysend);
layout.addView(fdaisykill);
layout.addView(fdaisyheal);
layout.addView(fdaisyexit);

var scroll = makeScroll(layout,fdaisymenu);
fdaisymenu.setContentView(scroll);
fdaisymenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
fdaisymenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(fdaisy==null){
ESP.toast("No one is using White Daisy.");
}
},
roseDeDarkness : function(){
if(frose2!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var frose2menu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Rose de Darkness\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(frose2));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var frose2send = android.widget.Button(ctx);
var frose2kill = android.widget.Button(ctx);
var frose2heal = android.widget.Button(ctx);
var frose2exit = android.widget.Button(ctx);
frose2send.setText("Send ESP");
frose2kill.setText("Kill ESP");
frose2heal.setText("Heal ESP");
frose2exit.setText("EXIT");
frose2send.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(frose2);
ESP.toast("Rose de Darkness was sent");
}
});
frose2kill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(frose2);
ESP.toast("Rose de Darkness was killed");
}
});
frose2heal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(frose2);
ESP.toast("Rose de Darkness was healed");
}
});
frose2exit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(frose2menu!=null){
frose2menu.dismiss();
frose2menu = null;
}
}
});
layout.addView(frose2send);
layout.addView(frose2kill);
layout.addView(frose2heal);
layout.addView(frose2exit);

var scroll = makeScroll(layout,frose2menu);
frose2menu.setContentView(scroll);
frose2menu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
frose2menu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(frose2==null){
ESP.toast("No one is using Rose de Darkness.");
}
},
pinkPeony : function(){
if(fpeony!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var fpeonymenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Pink Peony\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(fpeony));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var fpeonysend = android.widget.Button(ctx);
var fpeonykill = android.widget.Button(ctx);
var fpeonyheal = android.widget.Button(ctx);
var fpeonyexit = android.widget.Button(ctx);
fpeonysend.setText("Send ESP");
fpeonykill.setText("Kill ESP");
fpeonyheal.setText("Heal ESP");
fpeonyexit.setText("EXIT");
fpeonysend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(fpeony);
ESP.toast("Pink Peony was sent");
}
});
fpeonykill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(fpeony);
ESP.toast("Pink Peony was killed");
}
});
fpeonyheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(fpeony);
ESP.toast("Pink Peony was healed");
}
});
fpeonyexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(fpeonymenu!=null){
fpeonymenu.dismiss();
fpeonymenu = null;
}
}
});
layout.addView(fpeonysend);
layout.addView(fpeonykill);
layout.addView(fpeonyheal);
layout.addView(fpeonyexit);

var scroll = makeScroll(layout,fpeonymenu);
fpeonymenu.setContentView(scroll);
fpeonymenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
fpeonymenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(fpeony==null){
ESP.toast("No one is using Pink Peony.");
}
},
blueOrchid : function(){
if(forchid!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var forchidmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Blue Orchid\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(forchid));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var forchidsend = android.widget.Button(ctx);
var forchidkill = android.widget.Button(ctx);
var forchidheal = android.widget.Button(ctx);
var forchidexit = android.widget.Button(ctx);
forchidsend.setText("Send ESP");
forchidkill.setText("Kill ESP");
forchidheal.setText("Heal ESP");
forchidexit.setText("EXIT");
forchidsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(forchid);
ESP.toast("Blue Orchid was sent");
}
});
forchidkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(forchid);
ESP.toast("Blue Orchid was killed");
}
});
forchidheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(forchid);
ESP.toast("Blue Orchid was healed");
}
});
forchidexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(forchidmenu!=null){
forchidmenu.dismiss();
forchidmenu = null;
}
}
});
layout.addView(forchidsend);
layout.addView(forchidkill);
layout.addView(forchidheal);
layout.addView(forchidexit);

var scroll = makeScroll(layout,forchidmenu);
forchidmenu.setContentView(scroll);
forchidmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
forchidmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(forchid==null){
ESP.toast("No one is using Blue Orchid.");
}
},
purpleViolet : function(){
if(fviolet!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var fvioletmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Purple violet\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(fviolet));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var fvioletsend = android.widget.Button(ctx);
var fvioletkill = android.widget.Button(ctx);
var fvioletheal = android.widget.Button(ctx);
var fvioletexit = android.widget.Button(ctx);
fvioletsend.setText("Send ESP");
fvioletkill.setText("Kill ESP");
fvioletheal.setText("Heal ESP");
fvioletexit.setText("EXIT");
fvioletsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(fviolet);
ESP.toast("Purple violet was sent");
}
});
fvioletkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(fviolet);
ESP.toast("Purple violet was killed");
}
});
fvioletheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(fviolet);
ESP.toast("Purple violet was healed");
}
});
fvioletexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(fvioletmenu!=null){
fvioletmenu.dismiss();
fvioletmenu = null;
}
}
});
layout.addView(fvioletsend);
layout.addView(fvioletkill);
layout.addView(fvioletheal);
layout.addView(fvioletexit);

var scroll = makeScroll(layout,fvioletmenu);
fvioletmenu.setContentView(scroll);
fvioletmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
fvioletmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(fviolet==null){
ESP.toast("No one is using Purple violet.");
}
}


};


var EE = {
flameMaster : function(){
if(efm!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var efmmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Flame Master\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(efm));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var efmsend = android.widget.Button(ctx);
var efmkill = android.widget.Button(ctx);
var efmheal = android.widget.Button(ctx);
var efmexit = android.widget.Button(ctx);
efmsend.setText("Send ESP");
efmkill.setText("Kill ESP");
efmheal.setText("Heal ESP");
efmexit.setText("EXIT");
efmsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(efm);
ESP.toast("Flame Master was sent");
}
});
efmkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(efm);
ESP.toast("Flame Master was killed");
}
});
efmheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(efm);
ESP.toast("Flame Master was healed");
}
});
efmexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(efmmenu!=null){
efmmenu.dismiss();
efmmenu = null;
}
}
});
layout.addView(efmsend);
layout.addView(efmkill);
layout.addView(efmheal);
layout.addView(efmexit);

var scroll = makeScroll(layout,efmmenu);
efmmenu.setContentView(scroll);
efmmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
efmmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(efm==null){
ESP.toast("No one is using Flame Master.");
}
},
soulAssaulter : function(){
if(esa!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var esamenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Soul Assaulter\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(esa));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var esasend = android.widget.Button(ctx);
var esakill = android.widget.Button(ctx);
var esaheal = android.widget.Button(ctx);
var esaexit = android.widget.Button(ctx);
esasend.setText("Send ESP");
esakill.setText("Kill ESP");
esaheal.setText("Heal ESP");
esaexit.setText("EXIT");
esasend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(esa);
ESP.toast("Soul Assaulter was sent");
}
});
esakill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(esa);
ESP.toast("Soul Assaulter was killed");
}
});
esaheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(esa);
ESP.toast("Soul Assaulter was healed");
}
});
esaexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(esamenu!=null){
esamenu.dismiss();
esamenu = null;
}
}
});
layout.addView(esasend);
layout.addView(esakill);
layout.addView(esaheal);
layout.addView(esaexit);

var scroll = makeScroll(layout,esamenu);
esamenu.setContentView(scroll);
esamenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
esamenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(esa==null){
ESP.toast("No one is using Soul Assaulter.");
}
},
muin : function(){
if(emuin!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var emuinmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("무인\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(emuin));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var emuinsend = android.widget.Button(ctx);
var emuinkill = android.widget.Button(ctx);
var emuinheal = android.widget.Button(ctx);
var emuinexit = android.widget.Button(ctx);
emuinsend.setText("Send ESP");
emuinkill.setText("Kill ESP");
emuinheal.setText("Heal ESP");
emuinexit.setText("EXIT");
emuinsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(emuin);
ESP.toast("무인이 전송되었습니다.");
}
});
emuinkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(emuin);
ESP.toast("무인이 사살되었습니다.");
}
});
emuinheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(emuin);
ESP.toast("무인이 회복되었습니다.");
}
});
emuinexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(emuinmenu!=null){
emuinmenu.dismiss();
emuinmenu = null;
}
}
});
layout.addView(emuinsend);
layout.addView(emuinkill);
layout.addView(emuinheal);
layout.addView(emuinexit);

var scroll = makeScroll(layout,emuinmenu);
emuinmenu.setContentView(scroll);
emuinmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
emuinmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(emuin==null){
ESP.toast("무인을 사용하는 플래이어가 없습니다.");
}
},
grandMaster : function(){
if(egm!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var egmmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Grand Master\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(egm));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var egmsend = android.widget.Button(ctx);
var egmkill = android.widget.Button(ctx);
var egmheal = android.widget.Button(ctx);
var egmexit = android.widget.Button(ctx);
egmsend.setText("Send ESP");
egmkill.setText("Kill ESP");
egmheal.setText("Heal ESP");
egmexit.setText("EXIT");
egmsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(egm);
ESP.toast("Grand Master was sent");
}
});
egmkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(egm);
ESP.toast("Grand Master was killed");
}
});
egmheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(egm);
ESP.toast("Grand Master was healed");
}
});
egmexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(egmmenu!=null){
egmmenu.dismiss();
egmmenu = null;
}
}
});
layout.addView(egmsend);
layout.addView(egmkill);
layout.addView(egmheal);
layout.addView(egmexit);

var scroll = makeScroll(layout,egmmenu);
egmmenu.setContentView(scroll);
egmmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
egmmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(egm==null){
ESP.toast("No one is using Grand Master.");
}
},
tornadoBreaker : function(){
if(etb!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var etbmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Tornado Breaker\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(etb));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var etbsend = android.widget.Button(ctx);
var etbkill = android.widget.Button(ctx);
var etbheal = android.widget.Button(ctx);
var etbexit = android.widget.Button(ctx);
etbsend.setText("Send ESP");
etbkill.setText("Kill ESP");
etbheal.setText("Heal ESP");
etbexit.setText("EXIT");
etbsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(etb);
ESP.toast("Tornado Breaker was sent");
}
});
etbkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(etb);
ESP.toast("Tornado Breaker was killed");
}
});
etbheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(etb);
ESP.toast("Tornado Breaker was healed");
}
});
etbexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(etbmenu!=null){
etbmenu.dismiss();
etbmenu = null;
}
}
});
layout.addView(etbsend);
layout.addView(etbkill);
layout.addView(etbheal);
layout.addView(etbexit);

var scroll = makeScroll(layout,etbmenu);
etbmenu.setContentView(scroll);
etbmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
etbmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(etb==null){
ESP.toast("No one is using Tornado Breaker.");
}
},
theFighter : function(){
if(efight!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var efightmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("The Fighter\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(efight));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var efightsend = android.widget.Button(ctx);
var efightkill = android.widget.Button(ctx);
var efightheal = android.widget.Button(ctx);
var efightexit = android.widget.Button(ctx);
efightsend.setText("Send ESP");
efightkill.setText("Kill ESP");
efightheal.setText("Heal ESP");
efightexit.setText("EXIT");
efightsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(efight);
ESP.toast("The Fighter was sent");
}
});
efightkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(efight);
ESP.toast("The Fighter was killed");
}
});
efightheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(efight);
ESP.toast("The Fighter was healed");
}
});
efightexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(efightmenu!=null){
efightmenu.dismiss();
efightmenu = null;
}
}
});
layout.addView(efightsend);
layout.addView(efightkill);
layout.addView(efightheal);
layout.addView(efightexit);

var scroll = makeScroll(layout,efightmenu);
efightmenu.setContentView(scroll);
efightmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
efightmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(efight==null){
ESP.toast("No one is using The Fighter.");
}
},
solarKnight : function(){
if(esk!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var eskmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Solar Knight\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(esk));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var esksend = android.widget.Button(ctx);
var eskkill = android.widget.Button(ctx);
var eskheal = android.widget.Button(ctx);
var eskexit = android.widget.Button(ctx);
esksend.setText("Send ESP");
eskkill.setText("Kill ESP");
eskheal.setText("Heal ESP");
eskexit.setText("EXIT");
esksend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(esk);
ESP.toast("Solar Knight was sent");
}
});
eskkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(esk);
ESP.toast("Solar Knight was killed");
}
});
eskheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(esk);
ESP.toast("Solar Knight was healed");
}
});
eskexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(eskmenu!=null){
eskmenu.dismiss();
eskmenu = null;
}
}
});
layout.addView(esksend);
layout.addView(eskkill);
layout.addView(eskheal);
layout.addView(eskexit);

var scroll = makeScroll(layout,eskmenu);
eskmenu.setContentView(scroll);
eskmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
eskmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(esk==null){
ESP.toast("No one is using Solar Knight.");
}
},
earthBreaker : function(){
if(eeb!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var eebmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Earth Breaker\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(eeb));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var eebsend = android.widget.Button(ctx);
var eebkill = android.widget.Button(ctx);
var eebheal = android.widget.Button(ctx);
var eebexit = android.widget.Button(ctx);
eebsend.setText("Send ESP");
eebkill.setText("Kill ESP");
eebheal.setText("Heal ESP");
eebexit.setText("EXIT");
eebsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(eeb);
ESP.toast("Earth Breaker was sent");
}
});
eebkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(eeb);
ESP.toast("Earth Breaker was killed");
}
});
eebheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(eeb);
ESP.toast("Earth Breaker was healed");
}
});
eebexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(eebmenu!=null){
eebmenu.dismiss();
eebmenu = null;
}
}
});
layout.addView(eebsend);
layout.addView(eebkill);
layout.addView(eebheal);
layout.addView(eebexit);

var scroll = makeScroll(layout,eebmenu);
eebmenu.setContentView(scroll);
eebmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
eebmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(eeb==null){
ESP.toast("No one is using Earth Breaker.");
}
},
dragonian : function(){
if(edragon!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var edragonmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Dragonian\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(edragon));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var edragonsend = android.widget.Button(ctx);
var edragonkill = android.widget.Button(ctx);
var edragonheal = android.widget.Button(ctx);
var edragonexit = android.widget.Button(ctx);
edragonsend.setText("Send ESP");
edragonkill.setText("Kill ESP");
edragonheal.setText("Heal ESP");
edragonexit.setText("EXIT");
edragonsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(edragon);
ESP.toast("Dragonian was sent");
}
});
edragonkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(edragon);
ESP.toast("Dragonian was killed");
}
});
edragonheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(edragon);
ESP.toast("Dragonian was healed");
}
});
edragonexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(edragonmenu!=null){
edragonmenu.dismiss();
edragonmenu = null;
}
}
});
layout.addView(edragonsend);
layout.addView(edragonkill);
layout.addView(edragonheal);
layout.addView(edragonexit);

var scroll = makeScroll(layout,edragonmenu);
edragonmenu.setContentView(scroll);
edragonmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
edragonmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(edragon==null){
ESP.toast("No one is using Dragonian.");
}
},
amazingFighter : function(){
if(eaf!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var eafmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Amazing Fighter\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(eaf));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var eafsend = android.widget.Button(ctx);
var eafkill = android.widget.Button(ctx);
var eafheal = android.widget.Button(ctx);
var eafexit = android.widget.Button(ctx);
eafsend.setText("Send ESP");
eafkill.setText("Kill ESP");
eafheal.setText("Heal ESP");
eafexit.setText("EXIT");
eafsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(eaf);
ESP.toast("Amazing Fighter was sent");
}
});
eafkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(eaf);
ESP.toast("Amazing Fighter was killed");
}
});
eafheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(eaf);
ESP.toast("Amazing Fighter was healed");
}
});
eafexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(eafmenu!=null){
eafmenu.dismiss();
eafmenu = null;
}
}
});
layout.addView(eafsend);
layout.addView(eafkill);
layout.addView(eafheal);
layout.addView(eafexit);

var scroll = makeScroll(layout,eafmenu);
eafmenu.setContentView(scroll);
eafmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
eafmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(eaf==null){
ESP.toast("No one is using Amazing Fighter.");
}
},
sonicUser : function(){
if(esu!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var esumenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Sonic User\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(esu));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var esusend = android.widget.Button(ctx);
var esukill = android.widget.Button(ctx);
var esuheal = android.widget.Button(ctx);
var esuexit = android.widget.Button(ctx);
esusend.setText("Send ESP");
esukill.setText("Kill ESP");
esuheal.setText("Heal ESP");
esuexit.setText("EXIT");
esusend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(esu);
ESP.toast("Sonic User was sent");
}
});
esukill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(esu);
ESP.toast("Sonic User was killed");
}
});
esuheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(esu);
ESP.toast("Sonic User was healed");
}
});
esuexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(esumenu!=null){
esumenu.dismiss();
esumenu = null;
}
}
});
layout.addView(esusend);
layout.addView(esukill);
layout.addView(esuheal);
layout.addView(esuexit);

var scroll = makeScroll(layout,esumenu);
esumenu.setContentView(scroll);
esumenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
esumenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(esu==null){
ESP.toast("No one is using Sonic User.");
}
},
sonicBreaker : function(){
if(esb!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var esbmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Sonic Breaker\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(esb));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var esbsend = android.widget.Button(ctx);
var esbkill = android.widget.Button(ctx);
var esbheal = android.widget.Button(ctx);
var esbexit = android.widget.Button(ctx);
esbsend.setText("Send ESP");
esbkill.setText("Kill ESP");
esbheal.setText("Heal ESP");
esbexit.setText("EXIT");
esbsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(esb);
ESP.toast("Sonic Breaker was sent");
}
});
esbkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(esb);
ESP.toast("Sonic Breaker was killed");
}
});
esbheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(esb);
ESP.toast("Sonic Breaker was healed");
}
});
esbexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(esbmenu!=null){
esbmenu.dismiss();
esbmenu = null;
}
}
});
layout.addView(esbsend);
layout.addView(esbkill);
layout.addView(esbheal);
layout.addView(esbexit);

var scroll = makeScroll(layout,esbmenu);
esbmenu.setContentView(scroll);
esbmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
esbmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(esb==null){
ESP.toast("No one is using Sonic Breaker.");
}
},
devil : function(){
if(edevil!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var edevilmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("악마계약자\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(edevil));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var edevilsend = android.widget.Button(ctx);
var edevilkill = android.widget.Button(ctx);
var edevilheal = android.widget.Button(ctx);
var edevilexit = android.widget.Button(ctx);
edevilsend.setText("Send ESP");
edevilkill.setText("Kill ESP");
edevilheal.setText("Heal ESP");
edevilexit.setText("EXIT");
edevilsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(edevil);
ESP.toast("악마계약자가 전송되었습니다.");
}
});
edevilkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(edevil);
ESP.toast("악마계약자가 사살되었습니다.");
}
});
edevilheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(edevil);
ESP.toast("악마계약자가 회복되었습니다.");
}
});
edevilexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(edevilmenu!=null){
edevilmenu.dismiss();
edevilmenu = null;
}
}
});
layout.addView(edevilsend);
layout.addView(edevilkill);
layout.addView(edevilheal);
layout.addView(edevilexit);

var scroll = makeScroll(layout,edevilmenu);
edevilmenu.setContentView(scroll);
edevilmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
edevilmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(edevil==null){
ESP.toast("악마계약자를 사용하는 플래이어가 없습니다.");
}
},
motherFather : function(){
if(emf!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var emfmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("마더파더\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(emf));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var emfsend = android.widget.Button(ctx);
var emfkill = android.widget.Button(ctx);
var emfheal = android.widget.Button(ctx);
var emfexit = android.widget.Button(ctx);
emfsend.setText("Send ESP");
emfkill.setText("Kill ESP");
emfheal.setText("Heal ESP");
emfexit.setText("EXIT");
emfsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(emf);
ESP.toast("마더파더가 전송되었습니다.");
}
});
emfkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(emf);
ESP.toast("마더파더가 사살되었습니다.");
}
});
emfheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(emf);
ESP.toast("마더파더가 회복되었습니다.");
}
});
emfexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(emfmenu!=null){
emfmenu.dismiss();
emfmenu = null;
}
}
});
layout.addView(emfsend);
layout.addView(emfkill);
layout.addView(emfheal);
layout.addView(emfexit);

var scroll = makeScroll(layout,emfmenu);
emfmenu.setContentView(scroll);
emfmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
emfmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(emf==null){
ESP.toast("마더파더를 사용하는 플래이어가 없습니다.");
}
},
theTechenicianTNT : function(){
if(emt!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var emtmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("The Techenician TNT\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(emt));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var emtsend = android.widget.Button(ctx);
var emtkill = android.widget.Button(ctx);
var emtheal = android.widget.Button(ctx);
var emtexit = android.widget.Button(ctx);
emtsend.setText("Send ESP");
emtkill.setText("Kill ESP");
emtheal.setText("Heal ESP");
emtexit.setText("EXIT");
emtsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(emt);
ESP.toast("The Techenician TNT was sent");
}
});
emtkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(emt);
ESP.toast("The Techenician TNT was killed");
}
});
emtheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(emt);
ESP.toast("The Techenician TNT was healed");
}
});
emtexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(emtmenu!=null){
emtmenu.dismiss();
emtmenu = null;
}
}
});
layout.addView(emtsend);
layout.addView(emtkill);
layout.addView(emtheal);
layout.addView(emtexit);

var scroll = makeScroll(layout,emtmenu);
emtmenu.setContentView(scroll);
emtmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
emtmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(emt==null){
ESP.toast("No one is using The Techenician TNT.");
}
},
spaceMan : function(){
if(esm!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var esmmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Space Man\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(esm));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var esmsend = android.widget.Button(ctx);
var esmkill = android.widget.Button(ctx);
var esmheal = android.widget.Button(ctx);
var esmexit = android.widget.Button(ctx);
esmsend.setText("Send ESP");
esmkill.setText("Kill ESP");
esmheal.setText("Heal ESP");
esmexit.setText("EXIT");
esmsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(esm);
ESP.toast("Space Man was sent");
}
});
esmkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(esm);
ESP.toast("Space Man was killed");
}
});
esmheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(esm);
ESP.toast("Space Man was healed");
}
});
esmexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(esmmenu!=null){
esmmenu.dismiss();
esmmenu = null;
}
}
});
layout.addView(esmsend);
layout.addView(esmkill);
layout.addView(esmheal);
layout.addView(esmexit);

var scroll = makeScroll(layout,esmmenu);
esmmenu.setContentView(scroll);
esmmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
esmmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(esm==null){
ESP.toast("No one is using Space Man.");
}
},
theArchone : function(){
if(eta!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var etamenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("The Archone\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(eta));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var etasend = android.widget.Button(ctx);
var etakill = android.widget.Button(ctx);
var etaheal = android.widget.Button(ctx);
var etaexit = android.widget.Button(ctx);
etasend.setText("Send ESP");
etakill.setText("Kill ESP");
etaheal.setText("Heal ESP");
etaexit.setText("EXIT");
etasend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(eta);
ESP.toast("The Archone was sent");
}
});
etakill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(eta);
ESP.toast("The Archone was killed");
}
});
etaheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(eta);
ESP.toast("The Archone was healed");
}
});
etaexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(etamenu!=null){
etamenu.dismiss();
etamenu = null;
}
}
});
layout.addView(etasend);
layout.addView(etakill);
layout.addView(etaheal);
layout.addView(etaexit);

var scroll = makeScroll(layout,etamenu);
etamenu.setContentView(scroll);
etamenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
etamenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(eta==null){
ESP.toast("No one is using The Archone.");
}
},
launcher : function(){
if(elaunch!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var elaunchmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Launcher\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(elaunch));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var elaunchsend = android.widget.Button(ctx);
var elaunchkill = android.widget.Button(ctx);
var elaunchheal = android.widget.Button(ctx);
var elaunchexit = android.widget.Button(ctx);
elaunchsend.setText("Send ESP");
elaunchkill.setText("Kill ESP");
elaunchheal.setText("Heal ESP");
elaunchexit.setText("EXIT");
elaunchsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(elaunch);
ESP.toast("Launcher was sent");
}
});
elaunchkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(elaunch);
ESP.toast("Launcher was killed");
}
});
elaunchheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(elaunch);
ESP.toast("Launcher was healed");
}
});
elaunchexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(elaunchmenu!=null){
elaunchmenu.dismiss();
elaunchmenu = null;
}
}
});
layout.addView(elaunchsend);
layout.addView(elaunchkill);
layout.addView(elaunchheal);
layout.addView(elaunchexit);

var scroll = makeScroll(layout,elaunchmenu);
elaunchmenu.setContentView(scroll);
elaunchmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
elaunchmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(elaunch==null){
ESP.toast("No one is using Launcher.");
}
},
bloodAssaulter : function(){
if(eba!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var ebamenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Blood Assaulter\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(eba));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var ebasend = android.widget.Button(ctx);
var ebakill = android.widget.Button(ctx);
var ebaheal = android.widget.Button(ctx);
var ebaexit = android.widget.Button(ctx);
ebasend.setText("Send ESP");
ebakill.setText("Kill ESP");
ebaheal.setText("Heal ESP");
ebaexit.setText("EXIT");
ebasend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(eba);
ESP.toast("Blood Assaulter was sent");
}
});
ebakill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(eba);
ESP.toast("Blood Assaulter was killed");
}
});
ebaheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(eba);
ESP.toast("Blood Assaulter was healed");
}
});
ebaexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(ebamenu!=null){
ebamenu.dismiss();
ebamenu = null;
}
}
});
layout.addView(ebasend);
layout.addView(ebakill);
layout.addView(ebaheal);
layout.addView(ebaexit);

var scroll = makeScroll(layout,ebamenu);
ebamenu.setContentView(scroll);
ebamenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
ebamenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(eba==null){
ESP.toast("No one is using Blood Assaulter.");
}
},
theMom : function(){
if(etm!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var etmmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("The Mom\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(etm));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var etmsend = android.widget.Button(ctx);
var etmkill = android.widget.Button(ctx);
var etmheal = android.widget.Button(ctx);
var etmexit = android.widget.Button(ctx);
etmsend.setText("Send ESP");
etmkill.setText("Kill ESP");
etmheal.setText("Heal ESP");
etmexit.setText("EXIT");
etmsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(etm);
ESP.toast("The Mom was sent");
}
});
etmkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(etm);
ESP.toast("The Mom was killed");
}
});
etmheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(etm);
ESP.toast("The Mom was healed");
}
});
etmexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(etmmenu!=null){
etmmenu.dismiss();
etmmenu = null;
}
}
});
layout.addView(etmsend);
layout.addView(etmkill);
layout.addView(etmheal);
layout.addView(etmexit);

var scroll = makeScroll(layout,etmmenu);
etmmenu.setContentView(scroll);
etmmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
etmmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(etm==null){
ESP.toast("No one is using The Mom.");
}
},
theBomber : function(){
if(etb!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var etbmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("The Bomber\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(etb));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var etbsend = android.widget.Button(ctx);
var etbkill = android.widget.Button(ctx);
var etbheal = android.widget.Button(ctx);
var etbexit = android.widget.Button(ctx);
etbsend.setText("Send ESP");
etbkill.setText("Kill ESP");
etbheal.setText("Heal ESP");
etbexit.setText("EXIT");
etbsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(etb);
ESP.toast("The Bomber was sent");
}
});
etbkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(etb);
ESP.toast("The Bomber was killed");
}
});
etbheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(etb);
ESP.toast("The Bomber was healed");
}
});
etbexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(etbmenu!=null){
etbmenu.dismiss();
etbmenu = null;
}
}
});
layout.addView(etbsend);
layout.addView(etbkill);
layout.addView(etbheal);
layout.addView(etbexit);

var scroll = makeScroll(layout,etbmenu);
etbmenu.setContentView(scroll);
etbmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
etbmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(etb==null){
ESP.toast("No one is using The Bomber.");
}
},
bounseMaster : function(){
if(ebm!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var ebmmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Bounse Master\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(ebm));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var ebmsend = android.widget.Button(ctx);
var ebmkill = android.widget.Button(ctx);
var ebmheal = android.widget.Button(ctx);
var ebmexit = android.widget.Button(ctx);
ebmsend.setText("Send ESP");
ebmkill.setText("Kill ESP");
ebmheal.setText("Heal ESP");
ebmexit.setText("EXIT");
ebmsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(ebm);
ESP.toast("Bounse Master was sent");
}
});
ebmkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(ebm);
ESP.toast("Bounse Master was killed");
}
});
ebmheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(ebm);
ESP.toast("Bounse Master was healed");
}
});
ebmexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(ebmmenu!=null){
ebmmenu.dismiss();
ebmmenu = null;
}
}
});
layout.addView(ebmsend);
layout.addView(ebmkill);
layout.addView(ebmheal);
layout.addView(ebmexit);

var scroll = makeScroll(layout,ebmmenu);
ebmmenu.setContentView(scroll);
ebmmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
ebmmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(ebm==null){
ESP.toast("No one is using Bounse Master.");
}
},
herobring : function(){
if(ehero!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var eheromenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Herobring\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(ehero));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var eherosend = android.widget.Button(ctx);
var eherokill = android.widget.Button(ctx);
var eheroheal = android.widget.Button(ctx);
var eheroexit = android.widget.Button(ctx);
eherosend.setText("Send ESP");
eherokill.setText("Kill ESP");
eheroheal.setText("Heal ESP");
eheroexit.setText("EXIT");
eherosend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(ehero);
ESP.toast("Herobring was sent");
}
});
eherokill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(ehero);
ESP.toast("Herobring was killed");
}
});
eheroheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(ehero);
ESP.toast("Herobring was healed");
}
});
eheroexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(eheromenu!=null){
eheromenu.dismiss();
eheromenu = null;
}
}
});
layout.addView(eherosend);
layout.addView(eherokill);
layout.addView(eheroheal);
layout.addView(eheroexit);

var scroll = makeScroll(layout,eheromenu);
eheromenu.setContentView(scroll);
eheromenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
eheromenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(ehero==null){
ESP.toast("No one is using Herobring.");
}
},
counterAttacker : function(){
if(eca!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var ecamenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Counter Attacker\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(eca));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var ecasend = android.widget.Button(ctx);
var ecakill = android.widget.Button(ctx);
var ecaheal = android.widget.Button(ctx);
var ecaexit = android.widget.Button(ctx);
ecasend.setText("Send ESP");
ecakill.setText("Kill ESP");
ecaheal.setText("Heal ESP");
ecaexit.setText("EXIT");
ecasend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(eca);
ESP.toast("Counter Attacker was sent");
}
});
ecakill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(eca);
ESP.toast("Counter Attacker was killed");
}
});
ecaheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(eca);
ESP.toast("Counter Attacker was healed");
}
});
ecaexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(ecamenu!=null){
ecamenu.dismiss();
ecamenu = null;
}
}
});
layout.addView(ecasend);
layout.addView(ecakill);
layout.addView(ecaheal);
layout.addView(ecaexit);

var scroll = makeScroll(layout,ecamenu);
ecamenu.setContentView(scroll);
ecamenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
ecamenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(eca==null){
ESP.toast("No one is using Counter Attacker.");
}
},
legendarySlasher : function(){
if(els!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var elsmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Legendary Slasher\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(els));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var elssend = android.widget.Button(ctx);
var elskill = android.widget.Button(ctx);
var elsheal = android.widget.Button(ctx);
elssend.setText("Send ESP");
elskill.setText("Kill ESP");
elsheal.setText("Heal ESP");
elssend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(els);
ESP.toast("Legendary Slasher was sent");
}
});
elskill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(els);
ESP.toast("Legendary Slasher was killed");
}
});
elsheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(els);
ESP.toast("Legendary Slasher was healed");
}
});

layout.addView(elssend);
layout.addView(elskill);
layout.addView(elsheal);

var exit = makeExitButton(epriestmenu);
layout.addView(exit);

var scroll = makeScroll(layout,elsmenu);
elsmenu.setContentView(scroll);
elsmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
elsmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(els==null){
ESP.toast("No one is using Legendary Slasher.");
}
},
priest : function(){
if(epriest!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var epriestmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Priest\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(epriest));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var epriestsend = makeButton("Send ESP", function(){
ESP.send(epriest);
ESP.toast("Priest was sent");
});
var epriestkill = makeButton("Send ESP", function(){
ESP.kill(epriest);
ESP.toast("Priest was killed");
});
var epriestheal = makeButton("Send ESP", function(){
ESP.heal(epriest);
ESP.toast("Priest was healed");
});
layout.addView(epriestsend);
layout.addView(epriestkill);
layout.addView(epriestheal);
var exit = makeExitButton(epriestmenu);
layout.addView(exit);
var scroll = makeScroll(layout,epriestmenu);
epriestmenu.setContentView(scroll);
epriestmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
epriestmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(epriest==null){
ESP.toast("No one is using Priest.");
}
},
angel : function(){
if(eangel!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var eangelmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Angel\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(eangel));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var eangelsend = makeButton("Send ESP", function(){
ESP.send(eangel);
ESP.toast("Angel was sent");
});
var eangelkill = makeButton("Send ESP", function(){
ESP.kill(eangel);
ESP.toast("Angel was killed");
});
var eangelheal = makeButton("Send ESP", function(){
ESP.heal(eangel);
ESP.toast("Angel was healed");
});
layout.addView(eangelsend);
layout.addView(eangelkill);
layout.addView(eangelheal);
var exit = makeExitButton(eangelmenu);
layout.addView(exit);
var scroll = makeScroll(layout,eangelmenu);
eangelmenu.setContentView(scroll);
eangelmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
eangelmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(eangel==null){
ESP.toast("No one is using Angel.");
}
},
Devil : function(){
if(eDevil!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var eDevilmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Devil\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(eangel));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var eDevilsend = makeButton("Send ESP", function(){
ESP.send(eDevil);
ESP.toast("Devil was sent");
});
var eDevilkill = makeButton("Send ESP", function(){
ESP.kill(eDevil);
ESP.toast("Devil was killed");
});
var eDevilheal = makeButton("Send ESP", function(){
ESP.heal(eDevil);
ESP.toast("Devil was healed");
});
layout.addView(eDevilsend);
layout.addView(eDevilkill);
layout.addView(eDevilheal);
var exit = makeExitButton(eDevilmenu);
layout.addView(exit);
var scroll = makeScroll(layout,eDevilmenu);
eDevilmenu.setContentView(scroll);
eDevilmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
eDevilmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(eDevil==null){
ESP.toast("No one is using Devil.");
}
},
grimReaper : function(){
if(egr!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var egrmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Grim Reaper\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(egr));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var egrsend = makeButton("Send ESP", function(){
ESP.send(egr);
ESP.toast("Grim Reaper was sent");
});
var egrkill = makeButton("Send ESP", function(){
ESP.kill(egr);
ESP.toast("Grim Reaper was killed");
});
var egrheal = makeButton("Send ESP", function(){
ESP.heal(egr);
ESP.toast("Grim Reaper was healed");
});
layout.addView(egrsend);
layout.addView(egrkill);
layout.addView(egrheal);
var exit = makeExitButton(egrmenu);
layout.addView(exit);
var scroll = makeScroll(layout,egrmenu);
egrmenu.setContentView(scroll);
egrmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
egrmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(egr==null){
ESP.toast("No one is using Grim Reaper.");
}
}




};


var Else = {
hyper : function(){
if(elhyper!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var elhypermenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Hyper\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(elhyper));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var elhypersend = android.widget.Button(ctx);
var elhyperkill = android.widget.Button(ctx);
var elhyperheal = android.widget.Button(ctx);
var elhyperexit = android.widget.Button(ctx);
elhypersend.setText("Send ESP");
elhyperkill.setText("Kill ESP");
elhyperheal.setText("Heal ESP");
elhyperexit.setText("EXIT");
elhypersend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(elhyper);
ESP.toast("Hyper was sent");
}
});
elhyperkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(elhyper);
ESP.toast("Hyper was killed");
}
});
elhyperheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(elhyper);
ESP.toast("Hyper was healed");
}
});
elhyperexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(elhypermenu!=null){
elhypermenu.dismiss();
elhypermenu = null;
}
}
});
layout.addView(elhypersend);
layout.addView(elhyperkill);
layout.addView(elhyperheal);
layout.addView(elhyperexit);

var scroll = makeScroll(layout,elhypermenu);
elhypermenu.setContentView(scroll);
elhypermenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
elhypermenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(elhyper==null){
ESP.toast("No one is using Hyper.");
}
},
bupper : function(){
if(elbupper!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var elbuppermenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Buffer\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(elbupper));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var elbuppersend = android.widget.Button(ctx);
var elbupperkill = android.widget.Button(ctx);
var elbupperheal = android.widget.Button(ctx);
var elbupperexit = android.widget.Button(ctx);
elbuppersend.setText("Send ESP");
elbupperkill.setText("Kill ESP");
elbupperheal.setText("Heal ESP");
elbupperexit.setText("EXIT");
elbuppersend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(elbupper);
ESP.toast("Buffer was sent");
}
});
elbupperkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(elbupper);
ESP.toast("Buffer was killed");
}
});
elbupperheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(elbupper);
ESP.toast("Buffer was healed");
}
});
elbupperexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(elbuppermenu!=null){
elbuppermenu.dismiss();
elbuppermenu = null;
}
}
});
layout.addView(elbuppersend);
layout.addView(elbupperkill);
layout.addView(elbupperheal);
layout.addView(elbupperexit);

var scroll = makeScroll(layout,elbuppermenu);
elbuppermenu.setContentView(scroll);
elbuppermenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
elbuppermenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(elbupper==null){
ESP.toast("No one is using Bupper.");
}
},
godsControlling : function(){
if(elgc!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var elgcmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("God's Controlling\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(elgc));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var elgcsend = android.widget.Button(ctx);
var elgckill = android.widget.Button(ctx);
var elgcheal = android.widget.Button(ctx);
var elgcexit = android.widget.Button(ctx);
elgcsend.setText("Send ESP");
elgckill.setText("Kill ESP");
elgcheal.setText("Heal ESP");
elgcexit.setText("EXIT");
elgcsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(elgc);
ESP.toast("God's Controlling was sent");
}
});
elgckill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(elgc);
ESP.toast("God's Controlling was killed");
}
});
elgcheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(elgc);
ESP.toast("God's Controlling was healed");
}
});
elgcexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(elgcmenu!=null){
elgcmenu.dismiss();
elgcmenu = null;
}
}
});
layout.addView(elgcsend);
layout.addView(elgckill);
layout.addView(elgcheal);
layout.addView(elgcexit);

var scroll = makeScroll(layout,elgcmenu);
elgcmenu.setContentView(scroll);
elgcmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
elgcmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(elgc==null){
ESP.toast("No one is using God's Controlling.");
}
},
jibulil : function(){
if(eljbl!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var eljblmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("지브릴\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(eljbl));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var eljblsend = android.widget.Button(ctx);
var eljblkill = android.widget.Button(ctx);
var eljblheal = android.widget.Button(ctx);
var eljblexit = android.widget.Button(ctx);
eljblsend.setText("Send ESP");
eljblkill.setText("Kill ESP");
eljblheal.setText("Heal ESP");
eljblexit.setText("EXIT");
eljblsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(eljbl);
ESP.toast("지브릴이 전송되었습니다.");
}
});
eljblkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(eljbl);
ESP.toast("지브릴이 사살되었습니다.");
}
});
eljblheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(eljbl);
ESP.toast("지브릴이 회복되었습니다.");
}
});
eljblexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(eljblmenu!=null){
eljblmenu.dismiss();
eljblmenu = null;
}
}
});
layout.addView(eljblsend);
layout.addView(eljblkill);
layout.addView(eljblheal);
layout.addView(eljblexit);

var scroll = makeScroll(layout,eljblmenu);
eljblmenu.setContentView(scroll);
eljblmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
eljblmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(eljbl==null){
ESP.toast("지브릴을 사용하는 플래이어가 없습니다.");
}
},
ruleBreaker : function(){
if(elrb!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var elrbmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Rule Breaker\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(elrb));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var elrbsend = android.widget.Button(ctx);
var elrbkill = android.widget.Button(ctx);
var elrbheal = android.widget.Button(ctx);
var elrbexit = android.widget.Button(ctx);
elrbsend.setText("Send ESP");
elrbkill.setText("Kill ESP");
elrbheal.setText("Heal ESP");
elrbexit.setText("EXIT");
elrbsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(elrb);
ESP.toast("Rule Breaker was sent");
}
});
elrbkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(elrb);
ESP.toast("Rule Breaker was killed");
}
});
elrbheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(elrb);
ESP.toast("Rule Breaker was healed");
}
});
elrbexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(elrbmenu!=null){
elrbmenu.dismiss();
elrbmenu = null;
}
}
});
layout.addView(elrbsend);
layout.addView(elrbkill);
layout.addView(elrbheal);
layout.addView(elrbexit);

var scroll = makeScroll(layout,elrbmenu);
elrbmenu.setContentView(scroll);
elrbmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
elrbmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(elrb==null){
ESP.toast("No one is using Rule Breaker.");
}
},
joker : function(){
if(eljoker!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var eljokermenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Joker\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(eljoker));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var eljokersend = android.widget.Button(ctx);
var eljokerkill = android.widget.Button(ctx);
var eljokerheal = android.widget.Button(ctx);
var eljokerexit = android.widget.Button(ctx);
eljokersend.setText("Send ESP");
eljokerkill.setText("Kill ESP");
eljokerheal.setText("Heal ESP");
eljokerexit.setText("EXIT");
eljokersend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(eljoker);
ESP.toast("Joker was sent");
}
});
eljokerkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(eljoker);
ESP.toast("Joker was killed");
}
});
eljokerheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(eljoker);
ESP.toast("Joker was healed");
}
});
eljokerexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(eljokermenu!=null){
eljokermenu.dismiss();
eljokermenu = null;
}
}
});
layout.addView(eljokersend);
layout.addView(eljokerkill);
layout.addView(eljokerheal);
layout.addView(eljokerexit);

var scroll = makeScroll(layout,eljokermenu);
eljokermenu.setContentView(scroll);
eljokermenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
eljokermenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(eljoker==null){
ESP.toast("No one is using Joker.");
}
},
shadow : function(){
if(elshadow!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var elshadowmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Shadow\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(elshadow));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var elshadowsend = android.widget.Button(ctx);
var elshadowkill = android.widget.Button(ctx);
var elshadowheal = android.widget.Button(ctx);
var elshadowexit = android.widget.Button(ctx);
elshadowsend.setText("Send ESP");
elshadowkill.setText("Kill ESP");
elshadowheal.setText("Heal ESP");
elshadowexit.setText("EXIT");
elshadowsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(elshadow);
ESP.toast("Shadow was sent");
}
});
elshadowkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(elshadow);
ESP.toast("Shadow was killed");
}
});
elshadowheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(elshadow);
ESP.toast("Shadow was healed");
}
});
elshadowexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(elshadowmenu!=null){
elshadowmenu.dismiss();
elshadowmenu = null;
}
}
});
layout.addView(elshadowsend);
layout.addView(elshadowkill);
layout.addView(elshadowheal);
layout.addView(elshadowexit);

var scroll = makeScroll(layout,elshadowmenu);
elshadowmenu.setContentView(scroll);
elshadowmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
elshadowmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(elshadow==null){
ESP.toast("No one is using Shadow.");
}
},
theNinja : function(){
if(elninja!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var elninjamenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("The Ninja\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(elninja));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var elninjasend = android.widget.Button(ctx);
var elninjakill = android.widget.Button(ctx);
var elninjaheal = android.widget.Button(ctx);
var elninjaexit = android.widget.Button(ctx);
elninjasend.setText("Send ESP");
elninjakill.setText("Kill ESP");
elninjaheal.setText("Heal ESP");
elninjaexit.setText("EXIT");
elninjasend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(elninja);
ESP.toast("The Ninja was sent");
}
});
elninjakill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(elninja);
ESP.toast("The Ninja was killed");
}
});
elninjaheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(elninja);
ESP.toast("The Ninja was healed");
}
});
elninjaexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(elninjamenu!=null){
elninjamenu.dismiss();
elninjamenu = null;
}
}
});
layout.addView(elninjasend);
layout.addView(elninjakill);
layout.addView(elninjaheal);
layout.addView(elninjaexit);

var scroll = makeScroll(layout,elninjamenu);
elninjamenu.setContentView(scroll);
elninjamenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
elninjamenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(elninja==null){
ESP.toast("No one is using The Ninja.");
}
}


};


var Saint = {
east : function(){
if(seast!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var seastmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("운사(청룡)\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(seast));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var seastsend = android.widget.Button(ctx);
var seastkill = android.widget.Button(ctx);
var seastheal = android.widget.Button(ctx);
var seastexit = android.widget.Button(ctx);
seastsend.setText("Send ESP");
seastkill.setText("Kill ESP");
seastheal.setText("Heal ESP");
seastexit.setText("EXIT");
seastsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(seast);
ESP.toast("운사(청룡)가 전송되었습니다");
}
});
seastkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(seast);
ESP.toast("운사(청룡)가 운명하셨습니다");
}
});
seastheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(seast);
ESP.toast("운사(청룡)가 회복되었습니다");
}
});
seastexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(seastmenu!=null){
seastmenu.dismiss();
seastmenu = null;
}
}
});
layout.addView(seastsend);
layout.addView(seastkill);
layout.addView(seastheal);
layout.addView(seastexit);

var scroll = makeScroll(layout,seastmenu);
seastmenu.setContentView(scroll);
seastmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
seastmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(seast==null){
ESP.toast("운사(청룡)의 힘을 사용하는 플래이어가 없습니다.");
}
},
west : function(){
if(swest!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var swestmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("풍백(백호)\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(swest));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var swestsend = android.widget.Button(ctx);
var swestkill = android.widget.Button(ctx);
var swestheal = android.widget.Button(ctx);
var swestexit = android.widget.Button(ctx);
swestsend.setText("Send ESP");
swestkill.setText("Kill ESP");
swestheal.setText("Heal ESP");
swestexit.setText("EXIT");
swestsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(swest);
ESP.toast("풍백(백호)이 전송되었습니다");
}
});
swestkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(swest);
ESP.toast("풍백(백호)이 운명하셨습니다");
}
});
swestheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(swest);
ESP.toast("풍백(백호)이 회복되었습니다");
}
});
swestexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(swestmenu!=null){
swestmenu.dismiss();
swestmenu = null;
}
}
});
layout.addView(swestsend);
layout.addView(swestkill);
layout.addView(swestheal);
layout.addView(swestexit);

var scroll = makeScroll(layout,swestmenu);
swestmenu.setContentView(scroll);
swestmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
swestmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(swest==null){
ESP.toast("풍백(백호)의 힘을 사용하는 플래이어가 없습니다.");
}
},
south : function(){
if(ssouth!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var ssouthmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("화백(주작)\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(ssouth));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var ssouthsend = android.widget.Button(ctx);
var ssouthkill = android.widget.Button(ctx);
var ssouthheal = android.widget.Button(ctx);
var ssouthexit = android.widget.Button(ctx);
ssouthsend.setText("Send ESP");
ssouthkill.setText("Kill ESP");
ssouthheal.setText("Heal ESP");
ssouthexit.setText("EXIT");
ssouthsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(ssouth);
ESP.toast("화백(주작)이 전송되었습니다");
}
});
ssouthkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(ssouth);
ESP.toast("화백(주작)이 운명하셨습니다");
}
});
ssouthheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(ssouth);
ESP.toast("화백(주작)이 회복되었습니다");
}
});
ssouthexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(ssouthmenu!=null){
ssouthmenu.dismiss();
ssouthmenu = null;
}
}
});
layout.addView(ssouthsend);
layout.addView(ssouthkill);
layout.addView(ssouthheal);
layout.addView(ssouthexit);

var scroll = makeScroll(layout,ssouthmenu);
ssouthmenu.setContentView(scroll);
ssouthmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
ssouthmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(ssouth==null){
ESP.toast("화백(주작)의 힘을 사용하는 플래이어가 없습니다.");
}
},
north : function(){
if(snorth!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var snorthmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("우사(현무)\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(snorth));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var snorthsend = android.widget.Button(ctx);
var snorthkill = android.widget.Button(ctx);
var snorthheal = android.widget.Button(ctx);
var snorthexit = android.widget.Button(ctx);
snorthsend.setText("Send ESP");
snorthkill.setText("Kill ESP");
snorthheal.setText("Heal ESP");
snorthexit.setText("EXIT");
snorthsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(snorth);
ESP.toast("우사(현무)가 전송되었습니다");
}
});
snorthkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(snorth);
ESP.toast("우사(현무)가 운명하셨습니다");
}
});
snorthheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(snorth);
ESP.toast("우사(현무)가 회복되었습니다");
}
});
snorthexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(snorthmenu!=null){
snorthmenu.dismiss();
snorthmenu = null;
}
}
});
layout.addView(snorthsend);
layout.addView(snorthkill);
layout.addView(snorthheal);
layout.addView(snorthexit);

var scroll = makeScroll(layout,snorthmenu);
snorthmenu.setContentView(scroll);
snorthmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
snorthmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(snorth==null){
ESP.toast("우사(현무)의 힘을 사용하는 플래이어가 없습니다.");
}
},
getType : function(){
if(Level.getData(espch[0], espch[1]-1, espch[2])==13){
seast = ESP.getUser();
}
if(Level.getData(espch[0], espch[1]-1, espch[2])==0){
swest = ESP.getUser();
}
if(Level.getData(espch[0], espch[1]-1, espch[2])==14){
ssouth = ESP.getUser();
}
if(Level.getData(espch[0], espch[1]-1, espch[2])==15){
snorth = ESP.getUser();
}
},
resetType : function(){
if(Level.getData(espch[0], espch[1]-1, espch[2])==13){
seast = null;
}
if(Level.getData(espch[0], espch[1]-1, espch[2])==0){
swest = null;
}
if(Level.getData(espch[0], espch[1]-1, espch[2])==14){
ssouth = null;
}
if(Level.getData(espch[0], espch[1]-1, espch[2])==15){
snorth = null;
}
}




};


var OP = {
fireOperater : function(){
if(sfire!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var sfiremenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Fire Operater\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(sfire));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var sfiresend = android.widget.Button(ctx);
var sfirekill = android.widget.Button(ctx);
var sfireheal = android.widget.Button(ctx);
var sfireexit = android.widget.Button(ctx);
sfiresend.setText("Send ESP");
sfirekill.setText("Kill ESP");
sfireheal.setText("Heal ESP");
sfireexit.setText("EXIT");
sfiresend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(sfire);
ESP.toast("Fire Operater was sent");
}
});
sfirekill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(sfire);
ESP.toast("Fire Operater was killed");
}
});
sfireheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(sfire);
ESP.toast("Fire Operater was healed");
}
});
sfireexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(sfiremenu!=null){
sfiremenu.dismiss();
sfiremenu = null;
}
}
});
layout.addView(sfiresend);
layout.addView(sfirekill);
layout.addView(sfireheal);
layout.addView(sfireexit);

var scroll = makeScroll(layout,sfiremenu);
sfiremenu.setContentView(scroll);
sfiremenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
sfiremenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(sfire==null){
ESP.toast("No one is using Fire Operater.");
}
},
waterOperater : function(){
if(swater!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var swatermenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("water Operater\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(swater));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var swatersend = android.widget.Button(ctx);
var swaterkill = android.widget.Button(ctx);
var swaterheal = android.widget.Button(ctx);
var swaterexit = android.widget.Button(ctx);
swatersend.setText("Send ESP");
swaterkill.setText("Kill ESP");
swaterheal.setText("Heal ESP");
swaterexit.setText("EXIT");
swatersend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(swater);
ESP.toast("Water Operater was sent");
}
});
swaterkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(swater);
ESP.toast("Water Operater was killed");
}
});
swaterheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(swater);
ESP.toast("Water Operater was healed");
}
});
swaterexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(swatermenu!=null){
swatermenu.dismiss();
swatermenu = null;
}
}
});
layout.addView(swatersend);
layout.addView(swaterkill);
layout.addView(swaterheal);
layout.addView(swaterexit);

var scroll = makeScroll(layout,swatermenu);
swatermenu.setContentView(scroll);
swatermenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
swatermenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(swater==null){
ESP.toast("No one is using Water Operater.");
}
},
treeOperater : function(){
if(stree!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var streemenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Tree Operater\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(stree));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var streesend = android.widget.Button(ctx);
var streekill = android.widget.Button(ctx);
var streeheal = android.widget.Button(ctx);
var streeexit = android.widget.Button(ctx);
streesend.setText("Send ESP");
streekill.setText("Kill ESP");
streeheal.setText("Heal ESP");
streeexit.setText("EXIT");
streesend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(stree);
ESP.toast("Tree Operater was sent");
}
});
streekill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(stree);
ESP.toast("Tree Operater was killed");
}
});
streeheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(stree);
ESP.toast("Tree Operater was healed");
}
});
streeexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(streemenu!=null){
streemenu.dismiss();
streemenu = null;
}
}
});
layout.addView(streesend);
layout.addView(streekill);
layout.addView(streeheal);
layout.addView(streeexit);

var scroll = makeScroll(layout,streemenu);
streemenu.setContentView(scroll);
streemenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
streemenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(stree==null){
ESP.toast("No one is using Tree Operater.");
}
},
soilOperater : function(){
if(ssoil!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var ssoilmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("air Operater\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(ssoil));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var ssoilsend = android.widget.Button(ctx);
var ssoilkill = android.widget.Button(ctx);
var ssoilheal = android.widget.Button(ctx);
var ssoilexit = android.widget.Button(ctx);
ssoilsend.setText("Send ESP");
ssoilkill.setText("Kill ESP");
ssoilheal.setText("Heal ESP");
ssoilexit.setText("EXIT");
ssoilsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(ssoil);
ESP.toast("Soil Operater was sent");
}
});
ssoilkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(ssoil);
ESP.toast("Soil Operater was killed");
}
});
ssoilheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(ssoil);
ESP.toast("Soil Operater was healed");
}
});
ssoilexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(ssoilmenu!=null){
ssoilmenu.dismiss();
ssoilmenu = null;
}
}
});
layout.addView(ssoilsend);
layout.addView(ssoilkill);
layout.addView(ssoilheal);
layout.addView(ssoilexit);

var scroll = makeScroll(layout,ssoilmenu);
ssoilmenu.setContentView(scroll);
ssoilmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
ssoilmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(ssoil==null){
ESP.toast("No one is using Soil Operater.");
}
},
burstOperater : function(){
if(sburst!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var sburstmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("burst Operater\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(sburst));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var sburstsend = android.widget.Button(ctx);
var sburstkill = android.widget.Button(ctx);
var sburstheal = android.widget.Button(ctx);
var sburstexit = android.widget.Button(ctx);
sburstsend.setText("Send ESP");
sburstkill.setText("Kill ESP");
sburstheal.setText("Heal ESP");
sburstexit.setText("EXIT");
sburstsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(sburst);
ESP.toast("Burst Operater was sent");
}
});
sburstkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(sburst);
ESP.toast("Burst Operater was killed");
}
});
sburstheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(sburst);
ESP.toast("Burst Operater was healed");
}
});
sburstexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(sburstmenu!=null){
sburstmenu.dismiss();
sburstmenu = null;
}
}
});
layout.addView(sburstsend);
layout.addView(sburstkill);
layout.addView(sburstheal);
layout.addView(sburstexit);

var scroll = makeScroll(layout,sburstmenu);
sburstmenu.setContentView(scroll);
sburstmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
sburstmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(sburst==null){
ESP.toast("No one is using Burst Operater.");
}
},
airOperater : function(){
if(sair!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var sairmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Air Operater\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(sair));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var sairsend = android.widget.Button(ctx);
var sairkill = android.widget.Button(ctx);
var sairheal = android.widget.Button(ctx);
var sairexit = android.widget.Button(ctx);
sairsend.setText("Send ESP");
sairkill.setText("Kill ESP");
sairheal.setText("Heal ESP");
sairexit.setText("EXIT");
sairsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(sair);
ESP.toast("Air Operater was sent");
}
});
sairkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(sair);
ESP.toast("Air Operater was killed");
}
});
sairheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(sair);
ESP.toast("Air Operater was healed");
}
});
sairexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(sairmenu!=null){
sairmenu.dismiss();
sairmenu = null;
}
}
});
layout.addView(sairsend);
layout.addView(sairkill);
layout.addView(sairheal);
layout.addView(sairexit);

var scroll = makeScroll(layout,sairmenu);
sairmenu.setContentView(scroll);
sairmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
sairmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(sair==null){
ESP.toast("No one is using Air Operater.");
}
},
lightOperater : function(){
if(slight!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var slightmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Light Operater\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(slight));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var slightsend = android.widget.Button(ctx);
var slightkill = android.widget.Button(ctx);
var slightheal = android.widget.Button(ctx);
var slightexit = android.widget.Button(ctx);
slightsend.setText("Send ESP");
slightkill.setText("Kill ESP");
slightheal.setText("Heal ESP");
slightexit.setText("EXIT");
slightsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(slight);
ESP.toast("Light Operater was sent");
}
});
slightkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(slight);
ESP.toast("Light Operater was killed");
}
});
slightheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(slight);
ESP.toast("Light Operater was healed");
}
});
slightexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(slightmenu!=null){
slightmenu.dismiss();
slightmenu = null;
}
}
});
layout.addView(slightsend);
layout.addView(slightkill);
layout.addView(slightheal);
layout.addView(slightexit);

var scroll = makeScroll(layout,slightmenu);
slightmenu.setContentView(scroll);
slightmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
slightmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(slight==null){
ESP.toast("No one is using Light Operater.");
}
},
darkOperater : function(){
if(sdark!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var sdarkmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Dark Operater\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(sdark));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var sdarksend = android.widget.Button(ctx);
var sdarkkill = android.widget.Button(ctx);
var sdarkheal = android.widget.Button(ctx);
var sdarkexit = android.widget.Button(ctx);
sdarksend.setText("Send ESP");
sdarkkill.setText("Kill ESP");
sdarkheal.setText("Heal ESP");
sdarkexit.setText("EXIT");
sdarksend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(sdark);
ESP.toast("Dark Operater was sent");
}
});
sdarkkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(sdark);
ESP.toast("Dark Operater was killed");
}
});
sdarkheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(sdark);
ESP.toast("Dark Operater was healed");
}
});
sdarkexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(sdarkmenu!=null){
sdarkmenu.dismiss();
sdarkmenu = null;
}
}
});
layout.addView(sdarksend);
layout.addView(sdarkkill);
layout.addView(sdarkheal);
layout.addView(sdarkexit);

var scroll = makeScroll(layout,sdarkmenu);
sdarkmenu.setContentView(scroll);
sdarkmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
sdarkmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(sdark==null){
ESP.toast("No one is using Dark Operater.");
}
},
bloodOperater : function(){
if(sblood!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var sbloodmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Blood Operater\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(sblood));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var sbloodsend = android.widget.Button(ctx);
var sbloodkill = android.widget.Button(ctx);
var sbloodheal = android.widget.Button(ctx);
var sbloodexit = android.widget.Button(ctx);
sbloodsend.setText("Send ESP");
sbloodkill.setText("Kill ESP");
sbloodheal.setText("Heal ESP");
sbloodexit.setText("EXIT");
sbloodsend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(sblood);
ESP.toast("Blood Operater was sent");
}
});
sbloodkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(sblood);
ESP.toast("Blood Operater was killed");
}
});
sbloodheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(sblood);
ESP.toast("Blood Operater was healed");
}
});
sbloodexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(sbloodmenu!=null){
sbloodmenu.dismiss();
sbloodmenu = null;
}
}
});
layout.addView(sbloodsend);
layout.addView(sbloodkill);
layout.addView(sbloodheal);
layout.addView(sbloodexit);

var scroll = makeScroll(layout,sbloodmenu);
sbloodmenu.setContentView(scroll);
sbloodmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
sbloodmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(sblood==null){
ESP.toast("No one is using Blood Operater.");
}
}



};


var NP = {
feoh : function(){
if(np.feoh!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nfeohmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Feoh\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.feoh));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.feoh);
ESP.toast("Feoh was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.feoh);
ESP.toast("Feoh was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.feoh);
ESP.toast("Feoh was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nfeohmenu!=null){
nfeohmenu.dismiss();
nfeohmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nfeohmenu);
nfeohmenu.setContentView(scroll);
nfeohmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nfeohmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.feoh==null){
ESP.toast("No one is using Foeh.");
}
},
uruz : function(){
if(np.uruz!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nuruzmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Uruz\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.uruz));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.uruz);
ESP.toast("Uruz was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.uruz);
ESP.toast("Uruz was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.uruz);
ESP.toast("Uruz was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nuruzmenu!=null){
nuruzmenu.dismiss();
nuruzmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nuruzmenu);
nuruzmenu.setContentView(scroll);
nuruzmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nuruzmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.feoh==null){
ESP.toast("No one is using Uruz.");
}
},
thurisaz : function(){
if(np.thurisaz!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nthurisazmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Thurisaz\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.thurisaz));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.thurisaz);
ESP.toast("Thurisaz was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.thurisaz);
ESP.toast("Thurisaz was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.thurisaz);
ESP.toast("Thurisaz was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nthurisazmenu!=null){
nthurisazmenu.dismiss();
nthurisazmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nthurisazmenu);
nthurisazmenu.setContentView(scroll);
nthurisazmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nthurisazmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.thurisaz==null){
ESP.toast("No one  is using Thurisaz.");
}
},
ansur : function(){
if(np.ansur!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nansurmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Ansur\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.ansur));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.ansur);
ESP.toast("Ansur was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.ansur);
ESP.toast("Ansur was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.ansur);
ESP.toast("Ansur was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nansurmenu!=null){
nansurmenu.dismiss();
nansurmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nansurmenu);
nansurmenu.setContentView(scroll);
nansurmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nansurmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.ansur==null){
ESP.toast("No one is using Ansur.");
}
},
raidho : function(){
if(np.raidho!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nraidhomenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Raidho\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.raidho));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.raidho);
ESP.toast("Raidho was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.raidho);
ESP.toast("Raidho was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.raidho);
ESP.toast("Raidho was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nraidhomenu!=null){
nraidhomenu.dismiss();
nraidhomenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nraidhomenu);
nraidhomenu.setContentView(scroll);
nraidhomenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nraidhomenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.raidho==null){
ESP.toast("No one is using Raidho.");
}
},
kenaz : function(){
if(np.kenaz!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nkenazmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Kenaz\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.kenaz));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.kenaz);
ESP.toast("Kenaz was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.kenaz);
ESP.toast("Kenaz was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.kenaz);
ESP.toast("Kenaz was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nkenazmenu!=null){
nkenazmenu.dismiss();
nkenazmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nkenazmenu);
nkenazmenu.setContentView(scroll);
nkenazmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nkenazmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.kenaz==null){
ESP.toast("No one is using Kenaz.");
}
},
geofu : function(){
if(np.geofu!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var ngeofumenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Geofu\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.geofu));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.geofu);
ESP.toast("Geofu was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.geofu);
ESP.toast("Geofu was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.geofu);
ESP.toast("Geofu was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(ngeofumenu!=null){
ngeofumenu.dismiss();
ngeofumenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,ngeofumenu);
ngeofumenu.setContentView(scroll);
ngeofumenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
ngeofumenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.geofu==null){
ESP.toast("No one is using Geofu.");
}
},
hagall : function(){
if(np.hagall!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nhagallmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Hagall\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.hagall));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.hagall);
ESP.toast("Hagall was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.hagall);
ESP.toast("Hagall was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.hagall);
ESP.toast("Hagall was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nhagallmenu!=null){
nhagallmenu.dismiss();
nhagallmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nhagallmenu);
nhagallmenu.setContentView(scroll);
nhagallmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nhagallmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.hagall==null){
ESP.toast("No one is using Hagall.");
}
},
winn : function(){
if(np.winn!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nwinnmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Winn\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.winn));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.winn);
ESP.toast("Winn was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.winn);
ESP.toast("Winn was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.winn);
ESP.toast("Winn was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nwinnmenu!=null){
nwinnmenu.dismiss();
nwinnmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nwinnmenu);
nwinnmenu.setContentView(scroll);
nwinnmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nwinnmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.winn==null){
ESP.toast("No one is using Winn.");
}
},
winn : function(){
if(np.winn!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nwinnmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Winn\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.winn));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.winn);
ESP.toast("Winn was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.winn);
ESP.toast("Winn was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.winn);
ESP.toast("Winn was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nwinnmenu!=null){
nwinnmenu.dismiss();
nwinnmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nwinnmenu);
nwinnmenu.setContentView(scroll);
nwinnmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nwinnmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.winn==null){
ESP.toast("No one is using Winn.");
}
},
nyd : function(){
if(np.nyd!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nnydmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Nyd\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.nyd));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.nyd);
ESP.toast("Nyd was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.nyd);
ESP.toast("Nyd was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.nyd);
ESP.toast("Nyd was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nnydmenu!=null){
nnydmenu.dismiss();
nnydmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nnydmenu);
nnydmenu.setContentView(scroll);
nnydmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nnydmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.nyd==null){
ESP.toast("No one is using Nyd.");
}
},
is : function(){
if(np.is!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nismenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Is\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.is));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.is);
ESP.toast("Is was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.is);
ESP.toast("Is was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.is);
ESP.toast("Is was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nismenu!=null){
nismenu.dismiss();
nismenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nismenu);
nismenu.setContentView(scroll);
nismenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nismenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.is==null){
ESP.toast("No one is using Is.");
}
},
zera : function(){
if(np.zera!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nzeramenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Zera\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.zera));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.zera);
ESP.toast("Zera was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.zera);
ESP.toast("Zera was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.zera);
ESP.toast("Zera was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nzeramenu!=null){
nzeramenu.dismiss();
nzeramenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nzeramenu);
nzeramenu.setContentView(scroll);
nzeramenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nzeramenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.zera==null){
ESP.toast("No one is using Zera.");
}
},
yr : function(){
if(np.yr!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nyrmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Yr\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.yr));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.yr);
ESP.toast("Yr was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.yr);
ESP.toast("Yr was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.yr);
ESP.toast("Yr was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nyrmenu!=null){
nyrmenu.dismiss();
nyrmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nyrmenu);
nyrmenu.setContentView(scroll);
nyrmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nyrmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.yr==null){
ESP.toast("No one is using Yr.");
}
},
peroth : function(){
if(np.peroth!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nperothmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Peroth\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.peroth));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.peroth);
ESP.toast("Peroth was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.peroth);
ESP.toast("Peroth was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.peroth);
ESP.toast("Peroth was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nperothmenu!=null){
nperothmenu.dismiss();
nperothmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nperothmenu);
nperothmenu.setContentView(scroll);
nperothmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nperothmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.peroth==null){
ESP.toast("No one is using Peroth.");
}
},
elho : function(){
if(np.elho!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nelhomenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Elho\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.elho));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.elho);
ESP.toast("Elho was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.elho);
ESP.toast("Elho was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.elho);
ESP.toast("Elho was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nelhomenu!=null){
nelhomenu.dismiss();
nelhomenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nelhomenu);
nelhomenu.setContentView(scroll);
nelhomenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nelhomenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.elho==null){
ESP.toast("No one is using Elho.");
}
},
sigal : function(){
if(np.sigal!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nsigalmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Sigal\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.sigal));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.sigal);
ESP.toast("Sigal was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.sigal);
ESP.toast("Sigal was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.sigal);
ESP.toast("Sigal was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nsigalmenu!=null){
nsigalmenu.dismiss();
nsigalmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nsigalmenu);
nsigalmenu.setContentView(scroll);
nsigalmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nsigalmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.sigal==null){
ESP.toast("No one is using Sigal.");
}
},
tir : function(){
if(np.tir!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var ntirmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Tir\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.tir));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.tir);
ESP.toast("Tir was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.tir);
ESP.toast("Tir was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.tir);
ESP.toast("Tir was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(ntirmenu!=null){
ntirmenu.dismiss();
ntirmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,ntirmenu);
ntirmenu.setContentView(scroll);
ntirmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
ntirmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.tir==null){
ESP.toast("No one is using Tir.");
}
},
beroc : function(){
if(np.beroc!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nberocmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Beroc\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.beroc));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.beroc);
ESP.toast("Beroc was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.beroc);
ESP.toast("Beroc was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.beroc);
ESP.toast("Beroc was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nberocmenu!=null){
nberocmenu.dismiss();
nberocmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nberocmenu);
nberocmenu.setContentView(scroll);
nberocmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nberocmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.beroc==null){
ESP.toast("No one is using Beroc.");
}
},
ehwaz : function(){
if(np.ehwaz!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nehwazmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Ehwaz\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.ehwaz));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.ehwaz);
ESP.toast("Ehwaz was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.ehwaz);
ESP.toast("Ehwaz was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.ehwaz);
ESP.toast("Ehwaz was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nehwazmenu!=null){
nehwazmenu.dismiss();
nehwazmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nehwazmenu);
nehwazmenu.setContentView(scroll);
nehwazmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nehwazmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.ehwaz==null){
ESP.toast("No one is using Ehwaz.");
}
},
mannaz : function(){
if(np.mannaz!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nmannazmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Mannaz\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.mannaz));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.mannaz);
ESP.toast("Mannaz was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.mannaz);
ESP.toast("Mannaz was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.mannaz);
ESP.toast("Mannaz was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nmannazmenu!=null){
nmannazmenu.dismiss();
nmannazmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nmannazmenu);
nmannazmenu.setContentView(scroll);
nmannazmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nmannazmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.mannaz==null){
ESP.toast("No one is using Mannaz.");
}
},
laguz : function(){
if(np.laguz!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nlaguzmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Laguz\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.laguz));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.laguz);
ESP.toast("Laguz was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.laguz);
ESP.toast("Laguz was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.laguz);
ESP.toast("Laguz was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nlaguzmenu!=null){
nlaguzmenu.dismiss();
nlaguzmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nlaguzmenu);
nlaguzmenu.setContentView(scroll);
nlaguzmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nlaguzmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.laguz==null){
ESP.toast("No one is using Laguz.");
}
},
ing : function(){
if(np.ing!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var ningmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Ing\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.ing));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.ing);
ESP.toast("Ing was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.ing);
ESP.toast("Ing was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.ing);
ESP.toast("Ing was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(ningmenu!=null){
ningmenu.dismiss();
ningmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,ningmenu);
ningmenu.setContentView(scroll);
ningmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
ningmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.ing==null){
ESP.toast("No one is using Ing.");
}
},
othel : function(){
if(np.othel!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var nothelmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Othel\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.othel));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.othel);
ESP.toast("Othel was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.othel);
ESP.toast("Othel was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.othel);
ESP.toast("Othel was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(nothelmenu!=null){
nothelmenu.dismiss();
nothelmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,nothelmenu);
nothelmenu.setContentView(scroll);
nothelmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
nothelmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.othel==null){
ESP.toast("No one is using Othel.");
}
},
daeg : function(){
if(np.daeg!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var ndaegmenu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Daeg\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(np.daeg));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array(4);
for(var n=0;n<4;n++){
menus[n] = android.widget.Button(ctx);
menus[n].setText(np.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(np.daeg);
ESP.toast("Daeg was sent");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(np.daeg);
ESP.toast("Daeg was killed");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(np.daeg);
ESP.toast("Daeg was healed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(ndaegmenu!=null){
ndaegmenu.dismiss();
ndaegmenu = null;
}
}
});
for(var n=0;n<4;n++)
layout.addView(menus[n]);

var scroll = makeScroll(layout,ndaegmenu);
ndaegmenu.setContentView(scroll);
ndaegmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
ndaegmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(np.daeg==null){
ESP.toast("No one is using Daeg.");
}
}


};


var SD = {
espManage : function(){
var names = ["Melt Downer", "Flower Planter", "I am Chobits", "The Precipitater", "The Buffer", "The Debuffer", "Remain Constructer", "The Curer", "Blood Absrober", "Ice Maker", "Flame User", "Sand Controller", "Teleport Master", "The Exploder", "Lightning Striker", "Food Eater", "Tree Grower", "Monster Rider"];
if(SD.isOff(type)){
ESP.toast("No one is using "+names[type]);
}
else{
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var menu = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText(names[type]+"\n");
text.setTextSize(20);
text.setGravity(android.view.Gravity.CENTER);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(eval(sd.code[type])));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var btns = new Array();
var menus = ["Send ESP", "Kill ESP", "Heal ESP"];
for(var n in menus){
btns[n] = android.widget.Button(ctx);
btns[n].setText(menus[n]);
}
btns[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(eval(sd.code[type]));
ESP.toast(names[type]+" was sent");
}
});
btns[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(eval(sd.code[type]));
ESP.toast(names[type]+" was killed");
}
});
btns[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(eval(sd.code[type]));
ESP.toast(names[type]+" was healed");
}
});
for(var n in menus)
layout.addView(btns[n]);
var exit = makeExitButton(menu);
layout.addView(exit);
var scroll = makeScroll(layout, menu);
menu.setContentView(scroll);
menu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}
},
isOff : function(type){
if(type==0&&melt==null) return true;
if(type==1&&flower==null) return true;
if(type==2&&cho==null) return true;
if(type==3&&pre==null) return true;
if(type==4&&buf==null) return true;
if(type==5&&dbuf==null) return true;
if(type==6&&remain==null) return true;
if(type==7&&cure==null) return true;
if(type==8&&blood==null) return true;
if(type==9&&ice==null) return true;
if(type==10&&flame==null) return true;
if(type==11&&sand==null) return true;
if(type==12&&tp==null) return true;
if(type==13&&exp==null) return true;
if(type==14&&lighn==null) return true;
if(type==15&&food==null) return true;
if(type==16&&tree==null) return true;
if(type==17&&mons==null) return true;
else return false;
}



};


var SBh = {
electricCurrent : function(){
if(he.elect!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var helectmenu = new android.widget.PopupWindow();
var text = makeESPName("Electric Current");
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(he.elect));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array();
for(var n in he.menus){
menus[n] = android.widget.Button(ctx);
menus[n].setText(he.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
he.elect = null;
ESP.toast("Electric Current off");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(he.elect);
ESP.toast("Electric Current was sent");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(he.elect);
ESP.toast("Electric Current was killed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(he.elect);
ESP.toast("Electric Current was healed");
}
});
for(var n in he.menus)
layout.addView(menus[n]);
var exit = makeExitButton(helectmenu);
layout.addView(exit);
var scroll = makeScroll(layout,helectmenu);
helectmenu.setContentView(scroll);
helectmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
helectmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(he.elect==null){
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e))
players.push(e);
}
var radios = makeRadioList(players);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var dialog = makeDialog("Electric Current on", layout, "취소", null, "확인", function(){
ESP.toast("Electric Current on.");
he.elect = playerTarget;
});
dialog.show();
}
},
theShade : function(){
if(he.shade!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var hshademenu = new android.widget.PopupWindow();
var text = makeESPName("The Shader");
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(he.shade));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array();
for(var n in he.menus){
menus[n] = android.widget.Button(ctx);
menus[n].setText(he.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
he.shade = null;
ESP.toast("The Shader off");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(he.shade);
ESP.toast("The Shader was sent");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(he.shade);
ESP.toast("The Shader was killed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(he.shade);
ESP.toast("The Shader was healed");
}
});
for(var n in he.menus)
layout.addView(menus[n]);
var exit = makeExitButton(hshademenu);
layout.addView(exit);
var scroll = makeScroll(layout,hshademenu);
hshademenu.setContentView(scroll);
hshademenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
hshademenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(he.shade==null){
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e))
players.push(e);
}
var radios = makeRadioList(players);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var dialog = makeDialog("The Shader on", layout, "취소", null, "확인", function(){
ESP.toast("The Shader on.");
he.shade = playerTarget;
});
dialog.show();
}
},
tornadoStriker : function(){
if(he.torn!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var htornmenu = new android.widget.PopupWindow();
var text = makeESPName("Tornado Striker");
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(he.torn));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array();
for(var n in he.menus){
menus[n] = android.widget.Button(ctx);
menus[n].setText(he.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
he.torn = null;
ESP.toast("Tornado Striker off");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(he.torn);
ESP.toast("Tornado Striker was sent");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(he.torn);
ESP.toast("Tornado Striker was killed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(he.torn);
ESP.toast("Tornado Striker was healed");
}
});
for(var n in he.menus)
layout.addView(menus[n]);
var exit = makeExitButton(htornmenu);
layout.addView(exit);
var scroll = makeScroll(layout,htornmenu);
htornmenu.setContentView(scroll);
htornmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
htornmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(he.torn==null){
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e))
players.push(e);
}
var radios = makeRadioList(players);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var dialog = makeDialog("Tornado Striker on", layout, "취소", null, "확인", function(){
ESP.toast("Tornado Striker on.");
he.torn = playerTarget;
});
dialog.show();
}
},
bufExerter : function(){
if(he.buf!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var hbufmenu = new android.widget.PopupWindow();
var text = makeESPName("Buf Exerter");
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(he.buf));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array();
for(var n in he.menus){
menus[n] = android.widget.Button(ctx);
menus[n].setText(he.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
he.buf = null;
ESP.toast("Buf Exerter off");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(he.buf);
ESP.toast("Buf Exerter was sent");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(he.buf);
ESP.toast("Buf Exerter was killed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(he.buf);
ESP.toast("Buf Exerter was healed");
}
});
for(var n in he.menus)
layout.addView(menus[n]);
var exit = makeExitButton(hbufmenu);
layout.addView(exit);
var scroll = makeScroll(layout,hbufmenu);
hbufmenu.setContentView(scroll);
hbufmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
hbufmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(he.buf==null){
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e))
players.push(e);
}
var radios = makeRadioList(players);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var dialog = makeDialog("Buf Exerter on", layout, "취소", null, "확인", function(){
ESP.toast("Buf Exerter on.");
he.buf = playerTarget;
});
dialog.show();
}
},
theX : function(){
if(he.x!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var hxmenu = new android.widget.PopupWindow();
var text = makeESPName("The X");
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(he.x));
user.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(user);
var menus = new Array();
for(var n in he.menus){
menus[n] = android.widget.Button(ctx);
menus[n].setText(he.menus[n]);
}
menus[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
he.x = null;
ESP.toast("The X off");
}
});
menus[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(he.x);
ESP.toast("The X was sent");
}
});
menus[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(he.x);
ESP.toast("The X was killed");
}
});
menus[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(he.x);
ESP.toast("The X was healed");
}
});
for(var n in he.menus)
layout.addView(menus[n]);
var exit = makeExitButton(hxmenu);
layout.addView(exit);
var scroll = makeScroll(layout,hxmenu);
hxmenu.setContentView(scroll);
hxmenu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
hxmenu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}
else if(he.x==null){
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e))
players.push(e);
}
var radios = makeRadioList(players);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var dialog = makeDialog("The X on", layout, "취소", null, "확인", function(){
ESP.toast("The X on.");
he.x = playerTarget;
});
dialog.show();
}
}


};


function mapData(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function(){
try{
menu10 = new android.widget.PopupWindow();
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var text = new android.widget.TextView(ctx);
text.setText("맵 정보\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
if(mp3==true){
var map = new android.widget.LinearLayout(ctx);
var map2 = Level.getWorldName().split("§b");
var map3 = new android.widget.TextView(ctx);
var map4 = new android.widget.TextView(ctx);
map.setOrientation(0);
map3.setTextColor(android.graphics.Color.CYAN);
map3.setText(map2[1]);
map3.setTextSize(18);
map4.setText(" 맵이름 : ");
map4.setTextSize(18);
map.addView(map4);
map.addView(map3);
}
else{
var map = new android.widget.TextView(ctx);
map.setText(" 맵이름 : "+Level.getWorldName());
map.setTextSize(18);
}
var admin = new android.widget.TextView(ctx);
admin.setText(" 서버장 : "+Player.getName(ad));
admin.setTextSize(18);
var playerNames = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)&&e!=ad){
playerNames.push(" "+Player.getName(e));
}
}
var member = new android.widget.TextView(ctx);
member.setText(" 서버원 :"+playerNames);
member.setTextSize(18);
var adh = new android.widget.TextView(ctx);
adh.setText(" 내 체력 : "+Entity.getHealth(ad));
adh.setTextSize(18);
var night = new android.widget.TextView(ctx);
if(nightCheck()){
adh.setText(" 낮/밤 : 밤");
}
else{
adh.setText(" 낮/밤 : 낮");
}
night.setTextSize(18);
var mdexit = android.widget.Button(ctx);
mdexit.setText("EXIT");
mdexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(menu10!=null){
menu10.dismiss();
menu10 = null;
}
}
});
var mdplayers = android.widget.Button(ctx);
mdplayers.setText("플래이어 관리");
mdplayers.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
playerSelect();
}
});
var mgm = android.widget.Button(ctx);
mgm.setText("게임모드 변경");
mgm.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(Level.getGameMode()==0){
Level.setGameMode(1);
ESP.toast("크리에이티브로 변경되었습니다.");
}
else if(Level.getGameMode()==1){
Level.setGameMode(0);
ESP.toast("서바이벌로 변경되었습니다.");
}
}
});
var mterr = android.widget.Button(ctx);
mterr.setText("지형 수정");
mterr.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
worldEdit();
}
});

layout.addView(text);
layout.addView(map);
layout.addView(admin);
layout.addView(member);
layout.addView(night);
layout.addView(adh);
if(mp2==false){
var txt = new android.widget.TextView(ctx);
txt.setText("맵과 스크립트의 버전이 다릅니다.");
txt.setTextSize(18);
layout.addView(txt);
}
layout.addView(mdplayers);
layout.addView(mgm);
layout.addView(mterr);
layout.addView(mdexit);

var scroll = makeScroll(layout,menu10);
menu10.setContentView(scroll);
menu10.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu10.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}


function addItem(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var dialog = new android.app.AlertDialog.Builder(ctx,android.app.AlertDialog.THEME_HOLO_DARK);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.setGravity(android.view.Gravity.CENTER);

var layout1 = new android.widget.LinearLayout(ctx);
layout1.setGravity(android.view.Gravity.CENTER);
layout1.setOrientation(0);
var loc1 = new android.widget.TextView(ctx);
var loc2 = new android.widget.EditText(ctx);
loc1.setText("ID : ");
loc1.setTextSize(18);
loc2.setHint("Item Id");
loc2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
layout1.addView(loc1);
layout1.addView(loc2);

var layout2 = new android.widget.LinearLayout(ctx);
layout2.setGravity(android.view.Gravity.CENTER);
layout2.setOrientation(0);
var loc3 = new android.widget.TextView(ctx);
var loc4 = new android.widget.EditText(ctx);
loc3.setText("Amount : ");
loc3.setTextSize(18);
loc4.setHint("Item Amount");
loc4.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
layout2.addView(loc3);
layout2.addView(loc4);

var layout3 = new android.widget.LinearLayout(ctx);
layout3.setGravity(android.view.Gravity.CENTER);
layout3.setOrientation(0);
var loc5 = new android.widget.TextView(ctx);
var loc6 = new android.widget.EditText(ctx);
loc5.setText("Demage : ");
loc5.setTextSize(18);
loc6.setHint("Item Demage");
loc6.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
layout3.addView(loc5);
layout3.addView(loc6);

layout.addView(layout1);
layout.addView(layout2);
layout.addView(layout3);

dialog.setTitle("Adding Items");
dialog.setView(layout);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
addid = loc2.getText();
addamount = loc4.getText();
adddemage = loc6.getText();
adding = true;
ESP.toast("땅을 터치하시면 아이템이 지급됩니다.");
}
}));
dialog.show();
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));

}


function skillInfoSelect(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var dialog = new android.app.AlertDialog.Builder(ctx,android.app.AlertDialog.THEME_HOLO_DARK);
var layout = new android.widget.LinearLayout(ctx);
layout.setGravity(android.view.Gravity.CENTER);
layout.setOrientation(1);

var layout1 = new android.widget.LinearLayout(ctx);
layout1.setGravity(android.view.Gravity.CENTER);
layout1.setOrientation(0);
var ifire = new android.widget.Button(ctx);
var iwater = new android.widget.Button(ctx);
ifire.setText("  Fire User  ");
iwater.setText("  Water Contoller  ");
ifire.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Fire User", "파이어 서먼 - 불을 3×3+4로 소환한다.\n플레임 홀 - 3×3의 구멍을 소환하며, 그 구멍의 바닥에 불을 붙인다.\n파이어 샷 - 바라보는 방향으로 불이 나간다\n버닝 애어리아 - 자신의 주변에 불이 붙은 네더랙 울타리를 만들고, 불을 소환한다. 상당히 많이 나오며, 용암도 매우 약간 나온다.\n패시브 - 불속에서 체력고정&몸에 불 안붙음.");
}
});
iwater.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Water Controller", "워터 서먼 - 흐르는 물을 소환한다.\n워터 바인드 - 중심 방향으로 흐르는 물을 소환한다. 물살 때문에 뻐져나가기가 힘들다.\n워터 배리어 - 자신의 주변에 밖으로 흐르는 물을 소환하고, 자신의 주위에는 얼음을 둘러, 자신에게는 물이 오지 않게 한다.\n하늘에서 물이 내린다.\n패시브 - 물속에서 체력고정&공격력 1 증가");
}
});

layout1.addView(ifire);
layout1.addView(iwater);

var layout2 = new android.widget.LinearLayout(ctx);
layout2.setGravity(android.view.Gravity.CENTER);
layout2.setOrientation(0);
var itree = new android.widget.Button(ctx);
var icreeper = new android.widget.Button(ctx);
itree.setText("  Nature Guardian  ");
icreeper.setText("  I am Creeper  ");
itree.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Nature Guardian", "모노트리 - 나무를 한 구루 소환한다.\n우드 프리즌 - 나무로 만든 감옥에 상대를 가둔다. 중심에 불이있다.\n우드 무브 - 자신이 지나가는 곳을 따라서 나무가 자란다.\n라바리프 - 한번터치하면 나뭇잎이 깔리고 한번 더 터치하면 나무가 중앙에서 자라고 나뭇잎 울타리가 생기며, 나뭇잎의 어래쪽에 용암이 깔린다. 용암 때문에 순간적으로 불이 붙게 된다.\n패시브 - 자신의 주위에 나무가 있으면, 체력이 25 이하라면 5초마다 체력 2회복");
}
});
icreeper.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("I am Creeper", "버스트 - 터진다. 자동수복 중에도 사용이 가능한 유일한 스킬\n트리플 범 - TNT 2개와 활성화된 TNT 하나를 소환한다\n와이드 익스플로션 - 자신의 주변을 폭파시킨다.\n메테오 - 폭발과 다수의 활성화된 TNT들을 떨어뜨린다.\n패시브 - 상대방을 때릴 시 20%확률로 상대방의 위치 폭발");
}
});
layout2.addView(itree);
layout2.addView(icreeper);

var layout3 = new android.widget.LinearLayout(ctx);
layout3.setGravity(android.view.Gravity.CENTER);
layout3.setOrientation(0);
var isoil = new android.widget.Button(ctx);
var isummon = new android.widget.Button(ctx);
isoil.setText("  Soil Master  ");
isummon.setText("  The Summoner  ");
isoil.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Soil Master", "언더그라운드 - 3×3으로 땅을 함몰시키고, 그 위를 자갈로 덮는다.\n라바 홀 - 3×3으로 구멍을 뚫는다. 중심에는 (멈춘)용암이 있다.\n스톤 프리즌 - 돌(사암)내부에 사람을 가둔다, 중심에는 (멈춘)용암이 있다.\n싱크홀 - 자신의 주변에 큰 구멍을 만들고, 그 속에 약간의 용암을 넣는다.\n패시브 - 돌, 흙, 잔디가 난 흙, 모래, 자갈, 사암, 조약돌로 생매장 데미지를 줄 수 없음.");
}
});
isummon.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Summoner", "좀비 서먼 - 좀비와 좀비 피그맨들을 소환한다.\n스위사이더 - 크리퍼들을 소환한다\n아처스 - 스켈레톤과 스파이더 조키를 소환한다.단, 스파이더 조키는 서버원들에게 정상적으로 보이지 않는다.\n마스터 서먼 - 모든 종류의 몹을 소환한다. 단, 푸드 파인더(돼지를 탄 좀비피그맨)는 서버원들에게 정상적으로 보이지 않는다.\n패시브 - 모자로 때리면 때린 엔티티 탑승. 윗옷으로 때리면 때린 엔티티를 자신이게 태움.");
}
});
layout3.addView(isoil);
layout3.addView(isummon);

var layout4 = new android.widget.LinearLayout(ctx);
layout4.setGravity(android.view.Gravity.CENTER);
layout4.setOrientation(0);
var ilight = new android.widget.Button(ctx);
var idark = new android.widget.Button(ctx);
ilight.setText("  The Luminous  ");
idark.setText("  The Darkness  ");
ilight.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Luminous", "홀리블록 - 신성한 블록(?)을 소환한다.\n라이트 바인드 - 중앙에 불이 있는 것으로, 상대를 구속한다. 위에서 TNT가 한 떨어진다.\n루미너스 바인드 - 라이트 바인드에서 용암대신에 물이 흘러, 외부와의 접촉을 차단한다, 중간에 물이 사라지며, 바인드가 풀린다.\n홀리 애로우 스트라이크 - 하늘에서 많은 양의 화살이 떨어지고, 발광석이 내려와 폭발한다.\n패시브 - 낮에 공격력 1 증가");
}
});
idark.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Darkness", "다크 블록 - 옵시디언과 용암을 소환한다.\n다크니스 트리 - 검은 나무를 소환한다.\n다크니스 바인드 - 상대를 구속한다. 용암이 너무 강하기 때문에 바인드가 빨리 폴린다.\n디아볼릭 이미션 - 순수마력공격. 검은 구체(옵시디언)이 점점 커지며, 범위내에있는 모든 존재에게 순수마력공격을 한다고는 하지만, 사실상 생매장.\n패시브 - 밤에 공격력 1 증가");
}
});
layout4.addView(ilight);
layout4.addView(idark);

var layout5 = new android.widget.LinearLayout(ctx);
layout5.setGravity(android.view.Gravity.CENTER);
layout5.setOrientation(0);
var iice = new android.widget.Button(ctx);
var isand = new android.widget.Button(ctx);
iice.setText("  The Freezer  ");
isand.setText("  Desert Maker  ");
iice.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Freezer", "아이스 홀 - 구멍을 둟고, 얼음으로 그 위를 덮는다.\n윈터 바인드 - 눈사람과 얼음이 있는 바인드로 상대방을 구속한다.\n아이스 익스플로션 - 상대방늘 얼음 내부에 가둔 뒤, 터트린다.\n이글루 - 이글루 같지는 않지만, 얼음으로 된 집을 소환한다.\n패시브 - 자신의 주위에 눈이나 얼음이 있으면, 체력이 25 이하라면 5초마다 체력 2회복");
}
});
isand.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Desert Maker", "버닝바디 - 상대의 몸에 불을 붙인다.\n카투스 홀 - 선인장이 있는 구덩이를 소환한다.\n샌드 익스플로션 - 상대방을 모래 속에 가두고 폭발시킨다.\n데저트 서먼 - 사막의 일부를 소환한다.\n패시브 - 자신의 발밑에 모래나 사암이 있으면, 체력이 25 이하라면 5초마다 체력 2회복");
}
});
layout5.addView(iice);
layout5.addView(isand);

var layout6 = new android.widget.LinearLayout(ctx);
layout6.setGravity(android.view.Gravity.CENTER);
layout6.setOrientation(0);
var iblood = new android.widget.Button(ctx);
var iair = new android.widget.Button(ctx);
iblood.setText("  The Vampire  ");
iair.setText("  Air Bander  ");
iblood.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Vampire", "딜리트 - 상대의 체력 6을 지운다.\n앱솔션 - 상대의 체력 5를 흡수한다.\n텔레포트 - 터치한 방향으로 순간이동\n나이트메어 - 한번 터치하면 밤이되고(+체력 15증가), 그 상태에서 상대방을 때리면 상대방의 체력이 20 이하이면 1로만들고, 초과면 20을 지운다(+체력 15 증가).\n패시브 - 상대반 타격 시, 체력 1 흡수. 밤에 상대방을 때릴 시, 1/2확률로 상대방의 체력 1 추가 흡수");
}
});
iair.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Air Bander", "윈드워크 - 터치한 방향으로 빠르게 이동한다. 쿨타임 5초\n애어 돔 - 유리(공기의 장벽?)로 상대방을 가두거나, 자신을 감싼다.\n푸시 - 상대방을 밀친다.\n하이퍼 스로우 - 상대방을 상당히 높이 던진다.\n패시브 - 상대방을 때릴 시, 1/5확률로 넉백");
}
});
layout6.addView(iblood);
layout6.addView(iair);

var layout7 = new android.widget.LinearLayout(ctx);
layout7.setGravity(android.view.Gravity.CENTER);
layout7.setOrientation(0);
var ielsa = new android.widget.Button(ctx);
var ititan = new android.widget.Button(ctx);
ielsa.setText("  I am Elsa  ");
ititan.setText("  Mass Titan  ");
ielsa.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("I am Elsa", "아이스 샷 - 바라보는 방향으로 바닥이 얼음이 깔린다(폭발동반).\n프로즌 플레이트 - 바닥을 얼음으로 깐다(폭발동반).\n상대를 얼음 탑 내부에 가둔 뒤, 폭파시킨다.\n아이스 팔래스 - 허접한 얼음궁전이 나온다.\n패시브 - 얼음 위에 있을 시, 체력이 25 이하라면 5초마다 체력 2 회복");
}
});
ititan.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Mass Titan", "이팅타임 - 많은 양의 케이크롤 소환한다. 약간의 구운 돼지고기도 소환된다.\n푸드 익스폴로션 - 터치하면 케이크기가 나오고, 한번 더 터치하면 캐이크가 폭발한다.\n스토머크 - 위장를 소환해 상대방을 가둔다. 위장 내부에는 오늘 아침에 먹은 케이크 4개가 있고, 위에서 위액(용암)이 내려온다.\n아이엠 타이탄 - 상대의 체력 15를 소모하여 질량거인을 소환한다. 소환된 질량거인은 점프를 하여 주의를 폭파시키며, 땅을 터치하기 전 능력아이템으로 미리  상대방을 한대 때려놓으면, 그 맞은 사람의 체력이 15 내려간다. 타케팅(?)을 하지 않으면, 자신의 체력을 소모한다. 쿨타임 2분 30초\n패시브 - 케이크 섭취시 체력이 25 이하라면 체력 1 추가회복");
}
});
layout7.addView(ielsa);
layout7.addView(ititan);

var layout8 = new android.widget.LinearLayout(ctx);
layout8.setGravity(android.view.Gravity.CENTER);
layout8.setOrientation(0);
var ithunder = new android.widget.Button(ctx);
var ibind = new android.widget.Button(ctx);
ithunder.setText("  Thunder Breaker  ");
ibind.setText("  The Binder  ");
ithunder.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Thunder Breaker", "일렉트로 샷 – 바라보는 방향으로 번개(=발광석+폭발)를 발사한다.\n선더볼트 – 자신의 주변에 약한 낙뢰를 떨어트린다.\n라이트닝 볼트 – 한번 터치하면 그 장소가 기억되고, 한번 더 터치하면 그 장소에 낙뢰가 떨어진다.\n선더폴 – 자신의 주위에 전기 울타리를 형성한 후 낙뢰들을 떨어트린다. 이펙트만 화려하고 그렇게 많이 아프지는 않다.\n패시브 - 상대방을 때릴 시, 1/5확률로 감전(?)");
}
});
ibind.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Binder", "바인드 - 거미줄 5개를 소환한다.\n바인드 샷 - 바라보는 방향으로 거미줄을 발사한다.\n바인드 범 - 거미줄과 폭탄을 소환한다.\n쉐도우 웹 - 거미줄이 30초간 상대방을 따라다닌다.\n패시브 - 거미줄 터치시 거미줄 파괴");
}
});
layout8.addView(ithunder);
layout8.addView(ibind);

var layout9 = new android.widget.LinearLayout(ctx);
layout9.setGravity(android.view.Gravity.CENTER);
layout9.setOrientation(0);
var imeca = new android.widget.Button(ctx);
var itnt = new android.widget.Button(ctx);
imeca.setText("  The Mechanic  ");
itnt.setText("  TNT Expert  ");
imeca.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Mechanic", "건 샷 – 바라보는 방향으로 큰 총(?)을 발사한다.\n크로스 버스트 – 자신의 주위에 TNT를 설치한 후 터트린다.\n센딩 – 한번 터치하면 그 위쪽에 수신기가 설치되고, 한번 더 터치하면 그 수신기로 TNT가 전송된다.\n라운드 머신 – 자신의 주위에 네더코어들을 소환하여, 위에서 무언가를 발사한다. \n패시브 - 5초마다 자신의 체력을 확인, 20 미만이면 1을 회복한다.");
}
});
itnt.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("TNT Expert", "범 서먼 - 한개의 활성화된 TNT를 소환한다.\n트리블 익스블로시브 - 3개의 TNT를 소환한다. 0.25초 정도 뒤에 저절로 활성화가 된다(∵작은 폭발, 원래는 9개였으나, 하향됨)\n언더 범 - TNT 8개를 땅속에 넣는다. 거의 아프지 않다.\n언더그라운드 버스트 - 땅속에 TNT를 +모양으로 설치, 폭파시킨다. 사용시 최대한 먼 곳을 터치한 뒤 뒤로 빠지면서 사용하는 것을 추천한다.\n패시브 - 상대방 타격 시 10%화률로 상대방을 TNT위에 놓음");
}
});
layout9.addView(imeca);
layout9.addView(itnt);

var layout10 = new android.widget.LinearLayout(ctx);
layout10.setGravity(android.view.Gravity.CENTER);
layout10.setOrientation(0);
var itrap = new android.widget.Button(ctx);
var iheal = new android.widget.Button(ctx);
itrap.setText("  Trap Creater  ");
iheal.setText("  The Healer  ");
itrap.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Trap Creater", "버스트 트랩 - 땅속에 폭탄을 설치, 폭파시킨다.\n파이어 트랩 - 땅속에 함정을 설치, 소규모 불구덩이(3×3×2)를 만든다.\n버닝 트랩 - 땅에 함정을 설치, 하나의 용암과 4개의 불을 소환한다. 불은 용암이 흐르면서 꺼진다.\n트랩 오브 헬 - 땅에 함정을 설치, 상대방을 베드락 내부에 가두고 족친다(?).\n패시브 - 상대방 타격 시, 20%화률로 상대방의 발밑이 한칸 파임");
}
});
iheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Healer", "쿠어 - 자신의 체력 6을 회복한다.\n힐 - 자신의 체력 5, 타인의 체력 4를 회복한다.\n바인드 - 거미줄을 3×3으로 소환한다(도주용).\n이모탈리티 - 30초간 체력 고정\n패시브 - 5초마다 체력 2 회복");
}
});
layout10.addView(itrap);
layout10.addView(iheal);

var layout11 = new android.widget.LinearLayout(ctx);
layout11.setGravity(android.view.Gravity.CENTER);
layout11.setOrientation(0);
var inether = new android.widget.Button(ctx);
var icloud = new android.widget.Button(ctx);
inether.setText("  Nether Man  ");
icloud.setText("  Cloud Manager  ");
inether.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Nether Man", "네더랙즈 - 네더랙과 불을 소환한다.\n라바 서먼 - 흐르는 용암 하나를 소환한다.\n네더 바인드 - 네더랙으로 상대방을 구속한다. 바인드 내부에서는 좀비피그맨 1명이 대기하고 있다.\n네더 서먼 - 네더월드의 일부를 소환한다.\n패시브 - 네더랙 위에 있을 시 체력이 25 이하라면 5초마다 체력 2 회복");
}
});
icloud.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Cloud Manager", "클라우드 서먼 - 상대를 작은 구름(3×3)에 가둔다(폭발동반).\n선더 클라우드 - 낙은 뇌운을 소환한다. 한본 더 터치하면 벼락(?)이 떨어진다.\n클라우드 라이딩 - 10초 간 근두은 탑승.패시브 - 구름(흰 양털)위에서 체력이 25 이하라면 2회복");
}
});
layout11.addView(inether);
layout11.addView(icloud);

var layout12 = new android.widget.LinearLayout(ctx);
layout12.setGravity(android.view.Gravity.CENTER);
layout12.setOrientation(0);
var iass = new android.widget.Button(ctx);
var iarrow = new android.widget.Button(ctx);
iass.setText("  The Assassin  ");
iarrow.setText("  Arrow Shooter  ");
iass.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Assassin", "플래시 점프 - 터치한 방향으로 포물선 모양으로 점프한다(서버원은 잘 안될 수 있음).\n어썰터 - 터치항 방향으로 빠르게 이동하며 터치한 곳이 폭발한다.\n비하인드 버스트 - 자신의 뒤를 폭파시킨다.\n어쌔시네이선 - 상대방의 체력을 0~3사이의 정수로 설정한다.\n패시브 - 공격력 1 증가");
}
});
iarrow.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Arrow Shooter", "파이어 애로우 - 불화살을 소환한다.\n애로우 버스트 - 터치항 곳 위에서 화살이 하나 떨어진다. 화사리 떨어진 자리는 폭발한다.\n아처 샷 - 바라보는 방향으로 스켈레톤을 한마리 날린다.\n애로우 레인 버스트 - 밑에 폭반을 설치하도, 불화살을 떨어뜨려 폭파시킨다+화살비.\n패시브 - 일반공격시 20%확률로 상대방의 위에서 화살이 떨어진다.");
}
});
layout12.addView(iass);
layout12.addView(iarrow);

var layout13 = new android.widget.LinearLayout(ctx);
layout13.setGravity(android.view.Gravity.CENTER);
layout13.setOrientation(0);
var image = new android.widget.Button(ctx);
var idefense = new android.widget.Button(ctx);
image.setText("  The Mage  ");
idefense.setText("  The Defenser  ");
image.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Mage", "파이어 샷 - 바라보는 방햔으로 불을 발사한다.\n워터 프로텍션 - 물로 자신을 방어한다.\n우드 베리어 - 나무로 된 벽을 소환한다.\n서라운드 악스플로션 - 자신의 주변을 터트린다.\n패시브 - 피격 시 50%확률로 공격무시(플래이어에게만 적용).");
}
});
idefense.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Defenser", "베이직 베리어 - 흙으로 된 작은 벽을 소환한다.\n바인드 베리어 - 거마줄로 된 벽을 소환한다.\n버스트 실드 - 유리로 된 벽을 소환한다. 한번 더 터차하면 터진다,\n하이퍼 프로택션 어택 - 자신의 주변을 베드락으로 막고, 주변을 터트린다.\n패시브 - 방어력 2 증가");
}
});
layout13.addView(image);
layout13.addView(idefense);

var layout14 = new android.widget.LinearLayout(ctx);
layout14.setGravity(android.view.Gravity.CENTER);
layout14.setOrientation(0);
var ipoison = new android.widget.Button(ctx);
var imelt = new android.widget.Button(ctx);
ipoison.setText("  Poison Maven  ");
imelt.setText("  Ground Melter  ");
ipoison.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Poison Maven", "더블어택 - 상대방을 2번 때린다(뒤에 한대는 독 때문에 맞은거).\n포이즌 버틀 - 독이 담긴 병을 소환한다. 이 병은 터진다.\n에딕션 - 상대방을 독이 중독사켜, 지속적으로 체력이 낮아지도록 만든다.\n포이즌 미스트 이럽션 - 자신의 주변에 독안대를 소환, 폭파시킨다.\n패시브 - 공격력 1 증가.");
}
});
imelt.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Ground Melter", "펜타 라바 - 용암 5개를 소환한다.\n라바 실드 - 용암 방패를 소환한다(첸타 라바 새워놓은 거).\n멜팅라인 - 1자로 땅을 녹인다.\n라바 커튼 - 용음으로 된 커튼을 소환한다.\n패시브 - 용암 속에서 체력 고정");
}
});
layout14.addView(ipoison);
layout14.addView(imelt);

var layout15 = new android.widget.LinearLayout(ctx);
layout15.setGravity(android.view.Gravity.CENTER);
layout15.setOrientation(0);
var ihfreeze = new android.widget.Button(ctx);
var ibuilder = new android.widget.Button(ctx);
ihfreeze.setText("  Hyper Freezer  ");
ibuilder.setText("  The Builder  ");
ihfreeze.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Hyper Freezer", "콜드 빔 - 얼음을 소환, 터트린다.\n아이스 바인드 - 상대방을 얼음안에 가둔다.\n츠로즌 플래이트 - 얼음판이 자신을 따라온다.\n블리자드 - 하늘에서 얼음이 떨어진다.\n패시브 - 얼음 위에서 체력 고정")
}
});
ibuilder.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Builder", "펜스 - 울타리를 소환한다.\n우드 하우스 - 작은 나무집을 소환힌다. 한번 더 터치하면 집안에 불이 붙는다.\n스톤 하우스 - 작은 돌집을 소환힌다. 한번 더 터치하면 폭발한다.\n빌딩 - 상대적으로 고층인 건물을 소환한다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
layout15.addView(ihfreeze);
layout15.addView(ibuilder);

var layout16 = new android.widget.LinearLayout(ctx);
layout16.setGravity(android.view.Gravity.CENTER);
layout16.setOrientation(0);
var isoldier = new android.widget.Button(ctx);
var ias = new android.widget.Button(ctx);
isoldier.setText("  The Soldier  ");
ias.setText("  The Assaulter  ");
isoldier.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Soldier", "볼릿 - 바라보는 방향으로 총알(?)을 발사한다.\n마인 - 지뢰를 설치, 폭파시킨다.\n버스터 - 바라보는 방향으로 폭발을 발사한다(?).\n벙커 - The Mechanic의 것보다는 덜 허접한 벙커를 소환한다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
ias.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Assaulter", "어택 - 상대방을 공격한다.\n파이어 스로우 - 바라보는 방향에 화염병(?)을 떨군다.\n테트라 바인드 - 거미줄 4개를 소환한다.\n파이널 어택 - 상대방의 체력을 15~19, 주변에 있는 자들의 채력을 10 날려버린다.\n패시브 - 공격력 1 증가(궁극기 제외).");
}
});
layout16.addView(isoldier);
layout16.addView(ias);

var layout17 = new android.widget.LinearLayout(ctx);
layout17.setGravity(android.view.Gravity.CENTER);
layout17.setOrientation(0);
var iburst = new android.widget.Button(ctx);
var iwarrior = new android.widget.Button(ctx);
iburst.setText("  The Burster  ");
iwarrior.setText("  The Warrior  ");
iburst.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Burster", "마인 버스트 - 땅속에 폭탄을 설치, 폭파시킨다.\n버스트 히트 - 맞은 상대방이 터진다.\n버스트 샷 - 바라보는 방향으로 터진다.\nC3+ - 자신의 주변을 세게 터트린다.\n패시브 - 타격시 상대방이 20%확률로 터짐");
}
});
iwarrior.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Warrior", "그라운드 스메쉬 - 터치한 방향으로 세번 터트린다.\n소드 스윙 - 거대한(?) 칼을 휘두른다.\n소드 스팅 - 거대한(?) 칼로 찌른다.\n웨폰 차지 - 거대한(?) 칼들을 땅에 꽂는다.\n패시브 - 공격력 1 증가");
}
});
layout17.addView(iburst);
layout17.addView(iwarrior);

var layout18 = new android.widget.LinearLayout(ctx);
layout18.setGravity(android.view.Gravity.CENTER);
layout18.setOrientation(0);
var iore = new android.widget.Button(ctx);
var irich = new android.widget.Button(ctx);
iore.setText("  Ore Collecter  ");
irich.setText("  The Rich  ");
iore.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Ore Collecter", "버닝 코얼 - 불이 붙은 석탄블록을 소환한다.\n아이언 오얼 샷 - 바라보는 방향으로 철광석을 발사한다.\n레드스톤 버스트 - 땅속으로부터 레드스톤을 끌어와 폭파시킨다.\n어밴던드 마인 - 폐광을 소환한다. 한번 더 터치하면 폭발한다.\n패시브 - 돌, 조약돌, 사암 터치시, 캐짐.");
}
});
irich.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Rich", "골드 버스트 - 금을 소환, 터트린다.\n골드스킬 버스트 - 금과 철을 발사한다.\n라피스 라쥴리 베리어 - 청금석 벽을 소환한다.\n다이아몬드 하우스 - 다이아몬드로 된 집을 소환한다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
layout18.addView(iore);
layout18.addView(irich);

var layout19 = new android.widget.LinearLayout(ctx);
layout19.setGravity(android.view.Gravity.CENTER);
layout19.setOrientation(0);
var itp = new android.widget.Button(ctx);
var ispace = new android.widget.Button(ctx);
itp.setText("  The Teleporter  ");
ispace.setText("  Space Warrper  ");
itp.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Teleporter", "텔레포트 터치한 곳으로 순간이동한다.\n킬 포인트 - 상대방의 시선 뒤로 순간이동한다.\n오버 텔레포트 - 나 또는 생대방을 위로 순간이동 시킨다.\n하이퍼 센딩 - 불구더이를 소환하고, 30초간 때리는 모든 엔티티를 불구덩이 솓으로 전송한다,\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
ispace.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Space Warrper", "텔레포트 - 터치한 방향으로 순간이동한다.\n트렌스페런트 베리어 - 보이지 않는 벽을 소환한다.\n언더그라운드 버스트 - 상대방을 땅록의 공간으로 보낸다\n블랙홀 - 베드락까지 구멍을 뚫는다. 물살 때문에 빨려들어간다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
layout19.addView(itp);
layout19.addView(ispace);

var layout20 = new android.widget.LinearLayout(ctx);
layout20.setGravity(android.view.Gravity.CENTER);
layout20.setOrientation(0);
var isattack = new android.widget.Button(ctx);
var iforce = new android.widget.Button(ctx);
isattack.setText("  Surround Attacker  ");
iforce.setText("  Force Shifter  ");
isattack.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Surround Attacker", "파이어 서라운드 - 자신의 주변에 불을 소환한다.\n홀 범 - 자신의 주변에 구멍을 뚫고 폭파시킨다.\n서라운드 버스트 - 자신의 주변을 폭파시킨다.\n멜팅 에어리아 - 자신의 주변을 녹인다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
iforce.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Force Shifter", "일렉트로 스로우 - 바라보는 방향으로 전기에너지를 던진다.\n버스트 웨이브 - 터치한 방향으로 연쇄적인 폭발이 일어난다.\n크랙 - 바라보는 방향으로 따이 갈라진다(?).\n포스 릴리징 - 자신의 주변으로 에너지를 방출한다.\n패시브 - 피격시 50%확률로 공격반사(플래이어이게만 적용)");
}
});
layout20.addView(isattack);
layout20.addView(iforce);

var layout21 = new android.widget.LinearLayout(ctx);
layout21.setGravity(android.view.Gravity.CENTER);
layout21.setOrientation(0);
var irein = new android.widget.Button(ctx);
var imagnet = new android.widget.Button(ctx);
irein.setText("  I am Reinforce  ");
imagnet.setText("  Magnetism Distorter  ");
irein.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("I am Reinforce", "헤임달 - 얼음덩어리릉 떨어뜨린다.\n라그라뢰크 - 3개의 점으로부터 바라보는 방향으로 마력을 발사한다.\n블러디 대거 - 자신의 주변에 블러디 대거를 날린다.\n미스텔테인 - 하늘로부터 석화의 창, \"미스텔테인\"을 떨어뜨린다.\n패시브 - 공격력 1 증가");
}
});
imagnet.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Magnetism Distorter", "마그네틱 스로우 - 상대방을 마인카트에 탑승시킨 후, 자기장으로 마인카트를 위로 올린다.\n백 메탈 - 자기장으로 자신의 뒤이 철광석을 끌어올린다.\n아이언 익스플로션 - 자기장으로 주변에 철광석을 끌어올려 폭파시킨다.\n마그네틱 필드 - TNT가 실려있는 마인카트들을 날린다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
layout21.addView(irein);
layout21.addView(imagnet);

var layout22 = new android.widget.LinearLayout(ctx);
layout22.setGravity(android.view.Gravity.CENTER);
layout22.setOrientation(0);
var isteve = new android.widget.Button(ctx);
var ihero = new android.widget.Button(ctx);
isteve.setText("  I am Steve  ");
ihero.setText("  I am Herobrine  ");
isteve.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("I am Steve", "마인 - 블록들을 캔다.\n다이아몬드 픽엑스 - 다이아몬드 곡괭이를 소환한다. 한번 더 터치하면 터진다.\n으든 베리어 - 나무로 만든 벽을 소환한다.\n굿 바이 월드 - 다량의 TNT들을 설치, 폭파시킨다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
ihero.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("I am Herobrine", "아크 텔레포트 - 한번 터치하면, 그 장소가 기억되고, 한번 더 터치하면 그 장소로 순간이동한다.\n네임E - 발광석으로 E자를 만든다. 한번 더 터치라면 터진다.\n테트아 범 - 폭탄 4개를 소환, 터트린다.\n히로빈스 리턴 - 밤이되고, 폭발, 용암, 거미가나온다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
layout22.addView(isteve);
layout22.addView(ihero);

var layout23 = new android.widget.LinearLayout(ctx);
layout23.setGravity(android.view.Gravity.CENTER);
layout23.setOrientation(0);
var ihermit = new android.widget.Button(ctx);
var iclay = new android.widget.Button(ctx);
ihermit.setText("  The Hermit  ");
iclay.setText("  Clay Gatherer  ");
ihermit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Hermit", "리프 버스터 - 바라보는 방향으로 나뭇잎을 발사한다.\n하이드아웃 - 나무위에 있는 집을 소환한다. 한번 더 터치하면 자신이, 상대방을 타치하면 상대방이 집안으로 이동한다.\n리프 라이딩 - 10초간 나뭇잎 탑승\n더 포레스트 - 숲을 소환한다.\n패시브 - 자신의 주위에 나무가 있다면, 체력 25 이하일 시 5초마다 체력 2 회복");
}
});
iclay.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Clay Gatherer", "글레이 베리어 - 점토 벽을 소환한다.\n클래이 버스트 - 점토 덩어리릉 소환한다. 3초 뒤, 폭발한다.\n클라이 하우스 - 점토로 지은 집을 소환한다. 안에는 TNT가 하니 있다.\n글래이 풀링 - 점토 기둥들을 끌어올려 터트린다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
layout23.addView(ihermit);
layout23.addView(iclay);

var layout24 = new android.widget.LinearLayout(ctx);
layout24.setGravity(android.view.Gravity.CENTER);
layout24.setOrientation(0);
var ikirito = new android.widget.Button(ctx);
var ijungle = new android.widget.Button(ctx);
ikirito.setText("  I am Kirito  ");
ijungle.setText("  Jungle Former  ");
ikirito.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("I am Kirito", "소닉 리프 - 앞으로 돌진한다.\n호리젠털 스퀘어 - 사각형 모양으로 상대방을 공격한다(?).\n하울링 옥타브 - 불로 상대방을 찌른다.\n스타버스트 스크림 - 맞은 상대를 27번 터트린다.\n패시브 - 공격력 1 증가");
}
});
ijungle.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Jungle Former", "모노 트리 - 정글 나무를 소환한다.\n정글 트리 - 큰 정글나무를 소환한다.\n모스스톤 프리즌 - 모스스톤으로 된 감옥을 소환한다. 감옥안에는 좀비가 있으며, 일정 시간이 지나면 터진다.\n언더 정글 트리 - 광범위한 곳을 물로 채우고, 위를 정글나무로 덮는다. 물속에는 좀비들이 있다.\n패시브 - 자신의 주위에 나무가 있다면, 체력 25 이하일 시 5초마다 체력 1 회복");
}
});
layout24.addView(ikirito);
layout24.addView(ijungle);

var layout25 = new android.widget.LinearLayout(ctx);
layout25.setGravity(android.view.Gravity.CENTER);
layout25.setOrientation(0);
var ikanade = new android.widget.Button(ctx);
var itime = new android.widget.Button(ctx);
ikanade.setText("  I am Kanade  ");
itime.setText("  Time Traveler  ");
ikanade.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("I am Kanade", "딜레이 - 터치한 방향으러 순간이동한다.\n헨드 소닉 - 헨드 소닉으로 상대방을 찔러, 데미지 7을 준다.\n디스토션 - 10초간 깨지지 않는 유리로 자신을 보호한다.\n하울링 - 자신의 주변을 순차저으로 터트린다.\n패시브 - 공격력 1 증가(핸드소닉 제외).");
}
});
itime.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Time Traveler", "텔레포트 - 터치한 방량으로 이동한다(시간을 멈추고 움직였다는 설정).\n타임 스탑 어택 - 상대의 체력 10을 날려버린다(시간을 멈추고 때렸다는 설정).\n타임 바인드 - 상대방이 10초간 못움직인다.\n타임 스탑 - 30초간 맵 전체의 플래이어&몹&늑대의 움직임이 멈춘다.\n패시브 - 사망 시 부활, 20초간 생존. 생존 중 공격력 +3&터치한 곳으로 순간이동");
}
});
layout25.addView(ikanade);
layout25.addView(itime);

var layout26 = new android.widget.LinearLayout(ctx);
layout26.setGravity(android.view.Gravity.CENTER);
layout26.setOrientation(0);
var isnipe = new android.widget.Button(ctx);
var izombie = new android.widget.Button(ctx);
isnipe.setText("  The Sniper  ");
izombie.setText("  Zombie Employer  ");
isnipe.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Sniper", "리모트 샷 - 바라보는 곳이 터진다.\n버닝 샷 - 바라보는 곳에 불이 붙는다.\n텔레포트 샷 - 바라보는 곳으로 순간이동한다.\n하이퍼 스나이프 - 하늘로 올라간 뒤, 30초간 자유사격&시정거리 2배로 증기\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
izombie.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Zombie Employer", "펜타 좀비 - 좀비 5마리를 소환한다.\n파이어 좀비 - 불능력을 사용하는 좀비를 10초 간 소환한다.\n워터 좀비 - 물능력을 사용하는 좀비를 10초 간 소환한다.\n좀비 알미 - 체력이 25인 좀비 군단을 소환한다.\n패시브 - 모자로 좀비 타격시, 좀비 탑승");
}
});
layout26.addView(isnipe);
layout26.addView(izombie);

var layout27 = new android.widget.LinearLayout(ctx);
layout27.setGravity(android.view.Gravity.CENTER);
layout27.setOrientation(0);
var inecro = new android.widget.Button(ctx);
var iasuna = new android.widget.Button(ctx);
inecro.setText("  The Necromancer  ");
iasuna.setText("  I am Asuna  ");
inecro.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Necromancer", "언데드 서먼 - 언데드 몹 5마리를 소환한다.\n스파이더 범 - 폭탄을 싣고있는 거미들을 소환한다.\n좀비 피그멘 - 좀비 피그맨들을 소환한다.\n좀비 피그맨 ESP - 능력을 사용하는 좀비 피그맨을 소환한다.\n패시브 - 모자로 언대드 몹 타격시, 탑승");
}
});
iasuna.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("I am Asuna", "리니어 - 상대방 타격시, 상대방의 체력 6을 지운다.\n슈팅스타 - 앞으로 돌진한다.\n스타 스플래시 - 맞은 상대를 8번 터트린다.\n플래싱 페너트레이터 - 터치한 방향으로 순간이동+터치한 곳을 기준으로 30칸 내에 있는 엔티티의 체력을 15~17 감소시킴.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
layout27.addView(inecro);
layout27.addView(iasuna);

var layout28 = new android.widget.LinearLayout(ctx);
layout28.setGravity(android.view.Gravity.CENTER);
layout28.setOrientation(0);
var iholy = new android.widget.Button(ctx);
var isolar = new android.widget.Button(ctx);
iholy.setText("  Holy Knight  ");
isolar.setText("  Solar Paladin  ");
iholy.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Holy Knight", "라이트 러쉬 - 바라보는 방향으로 돌진한다.\n라이트 스윙 - 빛을 휘두른다.\n라이트 버스터 - 바라보는 방향으로 빛의 힘을 날린다.\n홀리 소드 - 신성한 검을 휘두른다.\n패시브 - 공격력 1 증가");
}
});
isolar.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Solar Paladin", "파이어 서라운드 - 터치한 곳을 불로 감싼다.\n썬라이트 버스터 - 바라보는 방향으로 태양빛을 날린다.\n버닝 바디즈 - 자신의 주위에 있는 적들에게 불을 붙인다.\n소드 오브 썬 - 터치한 곳에 검을 꽂고, 자신을 중심으로 반경 50칸 안에 있는 적들의 체력-15&불을 붙인다.\n패시브 - 낮에 공격력 1 증가");
}
});
layout28.addView(iholy);
layout28.addView(isolar);

var layout29 = new android.widget.LinearLayout(ctx);
layout29.setGravity(android.view.Gravity.CENTER);
layout29.setOrientation(0);
var ilunar = new android.widget.Button(ctx);
var ihas = new android.widget.Button(ctx);
ilunar.setText("  Lunar Wizard  ");
ihas.setText("  Hyper Assaulter  ");
ilunar.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Lunar Wizard", "텔레포트 - 터치항 방향으로 순간이동.\n문라이트 버스터 - 바라보는 방향으로 달빛을 날린다.\n루나 베리어 - 달빛으로 만든 벽을 소환한다.\n스태프 오브 문 - 터치한 곳에 지팡이을 꽂고, 자신을 중심으로 반경 50칸 안에 있는 적들의 체력-17&거미줄.\n패시브 - 밤에 공격력 1 증가");
}
});
ihas.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Hyper Assaulter", "어라운드 딜리트 - 자신을 중심으로 반경 10칸 내에 있는 상대방의 체력 5을 지운다.\n파이어 버스트 - 자신의 앞에 폭발+불을 붙인다.\n킬 포인트 어택 - The Teleporter의 킬 포인트+체력 6 감소.\n어라운드 어썰트 - 자신의 주위에 있는 엔티티들의 체력 감소. 자신과 가까울 수록 데미지를 더 받음.\n패시브 - 공격력 1 증가");
}
});
layout29.addView(ilunar);
layout29.addView(ihas);

var layout30 = new android.widget.LinearLayout(ctx);
layout30.setGravity(android.view.Gravity.CENTER);
layout30.setOrientation(0);
var irandom = new android.widget.Button(ctx);
var izwei = new android.widget.Button(ctx);
irandom.setText("  Random Ability  ");
izwei.setText("  Reinforce Zwei  ");
irandom.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Random Ability", "버스트파이어 - 터치한에 폭발이 일어나거나 불이 소환된다.\n랜덤 스킬 - 터치한 곳에 돌벽 또는 거미줄이 소환된거나, 터치한 방향으로 순간이동\n랜덤 어썰트 - 상대방의 체력 8감소 또는 10초간 불을 붙임 또는 위로 던짐.\n랜덤 어택 - 자신을 중심으로 반경 50칸 내에 있는 적들에게 불을 붙이거나, 큰 불구덩이를 소환하거나 크리퍼들을 소환하거나 메테오.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
izwei.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Reinforce Zwei", " 아이스 버스터 - 바라보는 방향으로 아이스 버스터를 발사한다.\n프리렌펫세른 - 상대방을 얼음속에 가둔다.\n매직카펫 - 10초간 매직카펫 탑승\n프리지드 대거 - 자신을 기준으로 50칸 내에 있는 엔티티의 체력을 5 감소시킴+프리지드 대거 발사.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
layout30.addView(irandom);
layout30.addView(izwei);

var layout31 = new android.widget.LinearLayout(ctx);
layout31.setGravity(android.view.Gravity.CENTER);
layout31.setOrientation(0);
var ideco = new android.widget.Button(ctx);
var ihsum = new android.widget.Button(ctx);
ideco.setText("  The Decorater  ");
ihsum.setText("  Hyper Summoner  ");
ideco.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Decorater", "트리즈 - 작은 나무들을 소환한다.\n칼라풀 월 - 화려한(?) 벽을 소환한다.\n미들 핑거즈 - 자신의 주변에 凸모양의 구조물을 설치, 터트린다.\n다크 데스 데코레이션 - 옵시디언 벽을 소환, 그 안에서 TNT로 구조물을 만든다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
ihsum.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Hyper Summoner", "스파이더즈 - 거미들을 소환한다.\n오버 언데드 - 오버월드의 언데드 몹들을 소환한다.\n네더 언데드 - 네더월드의 언데드 몹들을 소환한다.\n버스터즈 - 폭탄을 싣고있는 거미들과 크리퍼들을 소환한다.\n패시브 - The Summoner와 동일");
}
});
layout31.addView(ideco);
layout31.addView(ihsum);

var layout32 = new android.widget.LinearLayout(ctx);
layout32.setGravity(android.view.Gravity.CENTER);
layout32.setOrientation(0);
var iclimate = new android.widget.Button(ctx);
var iraid = new android.widget.Button(ctx);
iclimate.setText("  Climate Changer  ");
iraid.setText("  Remote Raider  ");
iclimate.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Climate Changer", "플랜츠 - 작은 나무와 식물들을 소환한다.\n데저트 - 작은 사막을 소환한다.\n미니 네더 - 작은 네더월드을 소환한다.\n이테널 코핀 - 광역동결마법. 자신의 주위를 얼린다+해당 범위 내에 있는 몹들의 체력 -15.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
iraid.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Remote Raider", "버스트 - 자신의 10칸정도 앞이 터진다.\n리모트 딜리트 - 타겟의 체력을 5 깍는다.\n리모트 버닝 바인드 - 타겟에게 10초간 불을 붙이고, 거미줄을 설치한다.\n서먼 타겟 - 타겟의 위치를 터트린 뒤, 내 앞으로 소환한다. 스킬 사용 후, 30초가 지나면 타겟의 체력이 10 감소한다.\n패시브 - 타격 시 50%확률로 1 추가 데미지\n\n\"타겟\"은 때리면 등록(?)됩니다.");
}
});
layout32.addView(iclimate);
layout32.addView(iraid);

var layout33 = new android.widget.LinearLayout(ctx);
layout33.setGravity(android.view.Gravity.CENTER);
layout33.setOrientation(0);
var iwind = new android.widget.Button(ctx);
var ienergy = new android.widget.Button(ctx);
iwind.setText("  Wind Operater  ");
ienergy.setText("  Energy Transfer  ");
iwind.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Wind Operater", "윈드 버스트 - 바라보는 방향으로 세번 터진다.\n애어 베리어 - 공기의 장벽(유리벽)을 소환한다.\n스로우 - 상대방을 위로 던진다(+체력-3).\n소닉 웨이브 - 주위에 있는 적들의 체력을 지속적으로 감소시킨다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
ienergy.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Energy Transfer", "버스트 - 터진다.\n히트 업 - 주위의 온도를 높여, 상대방의 몸에 불을 붙인다.\n선더볼트 – 자신의 주변에 약한 낙뢰를 떨어트린다\n리모트 에너지 제너래이션 - 주위에 있는 적들의 위치를 폭파시킨다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
layout33.addView(iwind);
layout33.addView(ienergy);

var layout34 = new android.widget.LinearLayout(ctx);
layout34.setGravity(android.view.Gravity.CENTER);
layout34.setOrientation(0);
var igeno = new android.widget.Button(ctx);
var iserver = new android.widget.Button(ctx);
igeno.setText("  The Genocider  ");
iserver.setText("  Server Dominator  ");
igeno.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Genocider", "범 라이드 - 상대방을 폭탄위에 올려놓는다\n버스트 프리즌 - 폭탄이 들어가있는 감옥 내부에 가둔다.\n어라운드 어택 - 자신의 주위에 있는 적들의 체력-5 + 5초간 불붙임\n더 제노사이드 - 자신의 주위에 있는 적들의 위에 활성화된 TNT를 소환한다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
iserver.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Server Dominator", "무브 - 자신이 아닌 플레이어의 위치 중 하나로 이동한다.\n서먼 - 자신이 아닌 플레이어 중 한명을 소환한다.\n디크리즈 - 자신의 주변에 있는 적들의 체력을 깎는다.\n밴 - 맞은 상대방을 30초간 밴시킨다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
layout34.addView(igeno);
layout34.addView(iserver);

var layout35 = new android.widget.LinearLayout(ctx);
layout35.setGravity(android.view.Gravity.CENTER);
layout35.setOrientation(0);
var iout = new android.widget.Button(ctx);
var irgun = new android.widget.Button(ctx);
iout.setText("  The Outsider  ");
irgun.setText("  I am Railgun  ");
iout.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Outsider", "러쉬 - 앞으로 돌진한다. 자신이 있던 곳은 터진다.\n버스트 다운 - 터치한곳이 터진다+주변 엔티티 체력-7.\n어라운드 스로우 - 자신의 주위에 있는 적들의 체력을 3 내리고, 위로 던진다.\nTNT 센딩 - 자신의 주위에 있는 적들을 구속하고, 그의 위에 활성화된 TNT를 소환한다+체력-5.\n패시브 - 공격력 1 증가");
}
});
irgun.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("I am Railgun", "일렉트로 스로우 - 바리보는 방향으로 전류를 던진다.\n아이언 샌드 - 사철을 휘두른다.\n서라운드 라이트닝 - 자신의 주위에 전격을 날린다.\n온리 마이 레일건 - 바라보는 방향으로 레일건 발사.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
layout35.addView(iout);
layout35.addView(irgun);

var layout36 = new android.widget.LinearLayout(ctx);
layout36.setGravity(android.view.Gravity.CENTER);
layout36.setOrientation(0);
var icopy = new android.widget.Button(ctx);
var idragon = new android.widget.Button(ctx);
icopy.setText("  Copying Eye  ");
idragon.setText("  Dragon Trainer  ");
icopy.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Copying Eye", "파이어서먼 - 불을 소환한다.\n아마테라스 - 10초간 바라보는 곳에 불이 붙는다.\n카무이 - 상대방을 잠시동안 아공간속에 넣는다.\n스사노오 - 스사노오를 소환한다.\n패시브 - 불안붙음");
}
});
idragon.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Dragon Trainer", "브레스 - 바라보는 방향으로 불을 발사한다.\n아이스 브레스 - 바라보는 방향으로 얼음을 발사한다.\n파이어 브레스 - 바라보는 방향으로 불+폭발을 발사한다.\n다크 포그 - 자신의 위에 검은 안개를 생성, 낙뢰를 떨어뜨린다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
layout36.addView(icopy);
layout36.addView(idragon);

var layout37 = new android.widget.LinearLayout(ctx);
layout37.setGravity(android.view.Gravity.CENTER);
layout37.setOrientation(0);
var ihawk = new android.widget.Button(ctx);
var isolid = new android.widget.Button(ctx);
ihawk.setText("  Hawk Eye  ");
isolid.setText("  The Solidifier  ");
ihawk.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Hawk Eye", "위터서먼 - 물을 소환한다.\n아니쿼터스 - 10초간 바라보는 곳에 물이 생성된다.\n소레스 - 터치한 방향으로 순간이동. 카무이를 당했을 시, 카무이 탈출.\n다로트 - 다로트를 소환한다.\n패시브 - 공격력, 방어력 1증가");
}
});
isolid.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Solidifier", "스톤 베리어 - 돌벽을 소환한다.\n프리즈 - 터치한 곳 주위의 물을 얼리고, 용암을 응고시킨다.\n스토닝 - 터치한 곳 주위를 석화시킨다.\n리모트 솔리디파이 - 자신 주위에 있는 자들에게 석화를 건다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
layout37.addView(ihawk);
layout37.addView(isolid);

var layout38 = new android.widget.LinearLayout(ctx);
layout38.setGravity(android.view.Gravity.CENTER);
layout38.setOrientation(0);
var igravity = new android.widget.Button(ctx);
var ihass = new android.widget.Button(ctx);
igravity.setText("  Gravity Twister  ");
ihass.setText("  Hyper Assassin  ");
igravity.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Gravity Twister", "블록 업 - 터치한 블록을 들어올린다.\n업사이드 - 상대방을 위로 들어올린다.\n어라운드 스로우 - 자신의 주위에 있는 적들을 위로 순간이동시킨다.+폭발\n그래비티 워프 - 주위의 중력을 왜곡시킨다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
ihass.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Hyper Assassin", "어썰터 - 터치항 방향으로 빠르게 이동하며 터치한 곳이 폭발한다.\n아크 텔레포트 어택 - 아크 텔레포트 - 한번 터치하면, 그 장소가 기억되고, 한번 더 터치하면 그 장소로 순간이동하며 주위의 적들의 체력을 감소시킨다.\n리모트 버스트- 바지로 상대방을 때리면 그 상대방이 기억되고, 땅을 터치하면 그 상대방의 위치가 터진다.\n하이퍼 어쌔시네이션 - 주위의 적들의 체력을 두번 10감소시킨다(30초 뒤 5 추가 감소).\n패시브 - 공격력 1 증가");
}
});
layout38.addView(igravity);
layout38.addView(ihass);

var layout39 = new android.widget.LinearLayout(ctx);
layout39.setGravity(android.view.Gravity.CENTER);
layout39.setOrientation(0);
var isikill = new android.widget.Button(ctx);
var iblack = new android.widget.Button(ctx);
isikill.setText("  Silent Killer  ");
iblack.setText("  Black Slayer  ");
isikill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Silent Killer", "텔레포트 - 터치한 방향으로 순간이동.\n더블 스텝 - 상대방을 두번 때린다.\n사이드 버스트 - 자신의 옆을 터트린다.\n서라운드 어썰트 - 주위의 적들의 체력을 15 깎는다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
iblack.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Black Slayer", "다크 스윙 - 어둠을 휘두른다.\n다크 버스터 - 앞으로 어둠을 발사한다.\n사이드 다크 버스터 - 옆으로 어둠을 발사한다.\n다크니스 릴리징 - 주위로 어둠을 방출한다.\n패시브 - 밤에 공격력 1 증가");
}
});
layout39.addView(isikill);
layout39.addView(iblack);

var layout40 = new android.widget.LinearLayout(ctx);
layout40.setGravity(android.view.Gravity.CENTER);
layout40.setOrientation(0);
var islash = new android.widget.Button(ctx);
var inight = new android.widget.Button(ctx);
islash.setText("  The Slasher  ");
inight.setText("  Night Worker  ");
islash.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Slasher", "텔레포트 - 터치한 방향으로 순간이동.\n트리플 슬레시 - 상대방을 세번 때린다.\n슬레시 버스트 - 상대방을 터트린다.\n서라운드 슬래쉬 - 주위를 터트린다+체력 10 감소.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
inight.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Night Worker", "어라운드 다운 - 주위 적들의 체력을 내린다.\n다크 데쉬 버스터 - 앞으로 돌진한다.\n앱솔브 - 상대의 체력을 5 감소시키고, 자신의 체력을 2 회복한다.\n더 나이트 - 밤으로 바꾼다.+30초간 공격력 2 증가\n패시브 - 밤에 공격력 1 증가");
}
});
layout40.addView(islash);
layout40.addView(inight);

var layout41 = new android.widget.LinearLayout(ctx);
layout41.setGravity(android.view.Gravity.CENTER);
layout41.setOrientation(0);
var igem = new android.widget.Button(ctx);
var idra = new android.widget.Button(ctx);
igem.setText("  Light Gemstone  ");
idra.setText("  The Dracula  ");
igem.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Light  Gemstone", "쿠어 - 체력 5 회복.\n사이드 라이트 버스터 - 앙쪽으로 라이트 버스터를 날린다.\n라이트 바인드 - 빛으로 상대방을 구속한다.\n더 데이 - 낮으로 바꾼다.+적들의 체력-17.\n패시브 - 낮에 공격력 1 증가");
}
});
idra.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Dracula", "앱솔브 - 상대의 체력 7 흡수.\n어라운드 앱솔브 - 주위의 적들의 체력 7 감소, 본인은 7 회복.\n텔레포트 - 터치한 방향으로 순간이동+체력 1 회복\n하이퍼 나이트메어 - 낮으로 바꾼다.+적들의 체력-17. 특정 대상 터치 시 주위 적들의 체력 10 감소. 특정 대상의 체력 순차적으로 감소.\n패시브 - The Vampire와 동일");
}
});
layout41.addView(igem);
layout41.addView(idra);

var layout42 = new android.widget.LinearLayout(ctx);
layout42.setGravity(android.view.Gravity.CENTER);
layout42.setOrientation(0);
var imush = new android.widget.Button(ctx);
var iender = new android.widget.Button(ctx);
imush.setText("  Mushroom Grower  ");
iender.setText("  Ender Girl  ");
imush.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Mushroom Grower", "퀴드 머쉬룸 - 버섯 4개 소환\n브라운 머쉬룸 - 갈색 버섯 소환.\n레드 머쉬룸 - 빨간색 버섯 소환.\n머쉬룸 아일랜드 - 버섯섬을 소환한다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
iender.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Ender Girl", "엔더 베리어 - 엔더스톤 벽을 소환한다.\n엔더 브릭스 프리즌 - 석제 블록안에 상대방을 가둔다.\n엔더멘 - 엔더맨들을 소환한다.\n엔더 서먼 - 엔더월드의 일부를 소환한다.\n패시브 - 엔더스톤 위에 있을 시 체력이 25 이하라면 5초마다 체력 2 회복");
}
});
layout42.addView(imush);
layout42.addView(iender);

var layout43 = new android.widget.LinearLayout(ctx);
layout43.setGravity(android.view.Gravity.CENTER);
layout43.setOrientation(0);
var itaiga = new android.widget.Button(ctx);
var iruin = new android.widget.Button(ctx);
itaiga.setText("  Taiga Appearer  ");
iruin.setText("  The Ruiner  ");
itaiga.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Taiga Appearer", "모노트리 - 전나무를 한 그루 소환한다.\n타이가 트리 - 큰 전나무를 한 그루 소환한다.\n스몰 타이가 - 메가 타이가의 일부를 소환한다.\n메가 타이가 - 메가 타이가를 소환한다.\n패시브 - Jungle Former와 동일");
}
});
iruin.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Ruiner", "버스트- 터진다.\n버스트 샷 - 바라보는 방향으로 터진다.\n와이드 익스플로션 - 자신의 주변을 폭파시킨다.\n더 루이닝 - 폭탄으로 주변을 파괴한다.\n패시브 - 타격 시 50% 확률로 1 추가 데미지");
}
});
layout43.addView(itaiga);
layout43.addView(iruin);

var layout44 = new android.widget.LinearLayout(ctx);
layout44.setGravity(android.view.Gravity.CENTER);
layout44.setOrientation(0);
var iswamp = new android.widget.Button(ctx);
var iasum = new android.widget.Button(ctx);
iswamp.setText("  Swamp Generater  ");
iasum.setText("  Arch Summoner  ");
iswamp.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Swamp Generater", "타이니 스웜프 - 작은 연못 소환\n모노트리 - 나무 한 그루 소환.\n슬라임즈 - 슬라임들 소환.\n데드 스웜프 - 죽음의 늪을 소환한다.\n패시브 - 타격 시 50% 확률로 1 추가 데미지");
}
});
iasum.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Arch Summoner", "언데드 서먼 - 좀비들과 스켈레톤들을 소환한다.\n엔더네더 몹 서먼 - 엔더맨들과 좀비 피그맨들을 소환한다.\n타이니 서먼 - 슬라임들과 좀벌레들을 소환한다.\n하이퍼 서먼 - 많은 몹들을 소환한다.\n패시브 - The Summoner와 동일");
}
});
layout44.addView(iswamp);
layout44.addView(iasum);

var layout45 = new android.widget.LinearLayout(ctx);
layout45.setGravity(android.view.Gravity.CENTER);
layout45.setOrientation(0);
var iamage = new android.widget.Button(ctx);
var ipuella = new android.widget.Button(ctx);
iamage.setText("  Arch Mage  ");
ipuella.setText("  Puella Magica  ");
iamage.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Arch Mage", "텔레포트 - 터치한 방향으로 순간이동\n아이스 파이어 - 바라보는 방향으로 불&얼음 발사.\n쿼드 범 - TNT 4개 소환.\n그라운드 다운 - 땅을 아래로 깎는다.\n패시브 - The Mage와 동일");
}
});
ipuella.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Puella Magica", "텔레포트 - 터치한 방향으로 순간이동\n힐 - 체력 7 회복\n매직 카펫 - 10초 간 매직 카펫 탑승\n메지컬 하트 - 분홍색 하트를 소환한다.\n패시브 - 타격 시 50% 확률로 1 추가 데미지");
}
});
layout45.addView(iamage);
layout45.addView(ipuella);

var layout46 = new android.widget.LinearLayout(ctx);
layout46.setGravity(android.view.Gravity.CENTER);
layout46.setOrientation(0);
var ihbuild = new android.widget.Button(ctx);
var iscalar = new android.widget.Button(ctx);
ihbuild.setText("  Hyper Builder  ");
iscalar.setText("  Scalar Increaser  ");
ihbuild.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Hyper Builder", "스트릿 라이트 - 가로등 소환\n스톤 하우스 - 돌 집 소환.\n로드 - 바라보는 방향으로 도로 소환.\n더 스트럭터 - 고층(?) 빌딩 소환.\n패시브 - 타격 시 50% 확률로 1 추가 데미지");
}
});
iscalar.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Scalar Increaser", "버스트 - 터치한 곳에 에너지를 발생시켜서 터트린다.\n히트 개더 - 자신 주변에 있는 적들의 주위의 열에너지를 적들에게 보낸다.\n파이어 라인 - 자신의 뒤에 불이 지속적으로 생긴다.\n히트 익스플로션 - 주위의 적들 주변의 열에너지를 조작한다.\n패시브 - 공격력 1 증가");
}
});
layout46.addView(ihbuild);
layout46.addView(iscalar);

var layout47 = new android.widget.LinearLayout(ctx);
layout47.setGravity(android.view.Gravity.CENTER);
layout47.setOrientation(0);
var ivector = new android.widget.Button(ctx);
var itensor = new android.widget.Button(ctx);
ivector.setText("  Vector Reflacter  ");
itensor.setText("  Tensor Verrer  ");
ivector.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Vector Reflacter", "그라운드 스메쉬 - 바라보는 방향으로 세번 터진다.\n어라운드 스로우 - 주위의 적들을 위로 던진다.\n그라운드 쇼크 - 바라보는 방향으로 연속적으로 땅을 든다(?).\n쇼크 - 자신의 주변으로 충격파를 날린다.\n패시브 - Force Shifter와 동일");
}
});
itensor.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Tensor Veerer", "텔레포트 - 3초동안 터치한 곳으로 텔레포트\n라운드 버스트 - 자신의 주위를 순차적으로 터트린다..\n히트 - 피격당한 적 체력-12, 주변의 적 체력 -7.\n텐서 디스토션 - 주변의 텐서를 제어한다.\n패시브 - Force Shifter와 동일");
}
});
layout47.addView(ivector);
layout47.addView(itensor);

var layout48 = new android.widget.LinearLayout(ctx);
layout48.setGravity(android.view.Gravity.CENTER);
layout48.setOrientation(0);
var iameca = new android.widget.Button(ctx);
var iseal = new android.widget.Button(ctx);
iameca.setText("  Arch Mechanic  ");
iseal.setText("  The Sealer  ");
iameca.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Arch Mechanic", "캐논 샷 - 앞으로 폭발을 발사한다.\n범 버스트 - 폭탄들 소환.\n플라잉 머신 - 10초간 비행 기계 탑승.\n리모트 버스트 어택 - 주위의 적들 위에 폭파 기계를 소환한다.\n패시브 - 타격 시 50% 확률로 1 추가 데미지");
}
});
iseal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Sealer", "글래스 바인드 - 유리로 상대방을 구속한다.\n소일 프리즌 - 흙감옥 소환.\n버스트 프리즌 - 돌 감옥 소환. 한번 더 터치시 폭파.\n씰링 - 상대방을 30초간 봉인한다.\n패시브 - 타격 시 50% 확률로 1 추가 데미지");
}
});
layout48.addView(iameca);
layout48.addView(iseal);

var layout49 = new android.widget.LinearLayout(ctx);
layout49.setGravity(android.view.Gravity.CENTER);
layout49.setOrientation(0);
var iangel = new android.widget.Button(ctx);
var iwhite = new android.widget.Button(ctx);
iangel.setText("  The Archangel  ");
iwhite.setText("  White Eye  ");
iangel.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("The Archangel", "라이트 버스터 - 바라보는 방향으로 빛을 발사한다.\n매직 카펫 - 10초간 매직 카펫 탑승.\n사이드 라이트 버스터 - 양쪽으로 라이트 버스터를 날린다.\n제네시스 - 하늘로부터 빛기둥을 떨어뜨린다.\n패시브 - 타격 시 50% 확률로 1 추가 데미지");
}
});
iwhite.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("White Eye", "텔레포트 - 터치한 방향으로 순간이동\n버스트즈 - 10초간 바라보는 곳 폭발.\n트리플 히트 - 적를 3번 때린다.\n휴먼 에너지 - 인간 형태로 기를 모은다.\n패시브 - 공격력 1 증가");
}
});
layout49.addView(iangel);
layout49.addView(iwhite);

var layout50 = new android.widget.LinearLayout(ctx);
layout50.setGravity(android.view.Gravity.CENTER);
layout50.setOrientation(0);
var imental = new android.widget.Button(ctx);
var iworld = new android.widget.Button(ctx);
imental.setText("  Mental Out  ");
iworld.setText("  World Edtior  ");
imental.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Mental Out", "멘탈 바인드 - 상대방을 5초간 움직이지 못하게 한다.\n포스드 점프 - 상대방을 위로 보낸다(정신적으로 공격해서 점프하게 만드는 것).\n히트 - 상대방을 때린다.\n멘탈 아웃 - 상대방의 정신을 혼미하게 한다.+범위공격.\n패시브 - 타격 시 50% 확률로 1 추가 데미지");
}
});
iworld.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("World Edtior", "텔레포트 - 터치한 방향으로 순간이동\n셋타일 - 10초간 블록을 설치한다.\n워 서먼 - 벽을 소환한다. 한번 더 터치하면 폭탄이 터진다.\n월드에딧 : /set - 채우기. 신발로 지점 1, 2를 터치하고, 원하는 블록을 터치하면 됨. 배드락 제외, 거리제한 50칸.\n패시브 - 타격 시 50% 확률로 1 추가 데미지");
}
});
layout50.addView(imental);
layout50.addView(iworld);

var text = new android.widget.TextView(ctx);
text.setText(null);
text.setTextSize(10);

var layout0 = new android.widget.LinearLayout(ctx);
layout0.setGravity(android.view.Gravity.CENTER);
layout0.setOrientation(0);
var idtj = new android.widget.Button(ctx);
var ife = new android.widget.Button(ctx);
idtj.setText("  Dark Tornado jr.  ");
ife.setText("  Fire Expert  ");
idtj.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Dark Tornado jr.", "파이어 버스트 - 터치한 곳을 폭파시키고, 그 속에 불을 붙인다.\n아이스 버스터 - 바라보는 방향으로 아이스 버스터를 날린다.\n버닝 앱솔션 - 상댜의 에력을 흡수한 뒤, 불을 붙인다.\n엘리멘탈 어썰트 - 거의 모든 속성을 합친 듯 한 미친 공격(?)을 퍼붓는다.\n패시브 - 타격 시 50%확률로 1 추가 데미지");
}
});
ife.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Fire Expert", "버닝 베리어 - 불타는 벽을 소환한다.\n파이어 홀즈 - 바라보는 방향으로 불구멍(?)을 발사한다.\n버닝 바디 - 상대방의 몸에 불을 붙인다.\n멜팅 에어리아 - 자신의 주위에 불과 용암을 두른다.\n패시브 - 타격 시 상대에게 3초간 불이 붙음&자신은 불이 붙지 않음");
}
});
layout0.addView(idtj);
layout0.addView(ife);

layout.addView(layout1);
layout.addView(layout2);
layout.addView(layout3);
layout.addView(layout4);
layout.addView(layout5);
layout.addView(layout6);
layout.addView(layout7);
layout.addView(layout8);
layout.addView(layout9);
layout.addView(layout10);
layout.addView(layout11);
layout.addView(layout12);
layout.addView(layout13);
layout.addView(layout14);
layout.addView(layout15);
layout.addView(layout16);
layout.addView(layout17);
layout.addView(layout18);
layout.addView(layout19);
layout.addView(layout20);
layout.addView(layout21);
layout.addView(layout22);
layout.addView(layout23);
layout.addView(layout24);
layout.addView(layout25);
layout.addView(layout26);
layout.addView(layout27);
layout.addView(layout28);
layout.addView(layout29);
layout.addView(layout30);
layout.addView(layout31);
layout.addView(layout32);
layout.addView(layout33);
layout.addView(layout34);
layout.addView(layout35);
layout.addView(layout36);
layout.addView(layout37);
layout.addView(layout38);
layout.addView(layout39);
layout.addView(layout40);
layout.addView(layout41);
layout.addView(layout42);
layout.addView(layout43);
layout.addView(layout44);
layout.addView(layout45);
layout.addView(layout46);
layout.addView(layout47);
layout.addView(layout48);
layout.addView(layout49);
layout.addView(layout50);
layout.addView(text);
layout.addView(layout0);

var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("스킬 정보");
dialog.setView(scroll);
dialog.setNegativeButton("닫기",null);
dialog.show();
}catch(e){
ESP.sbm(e+", "+e.lineNumber);
}
}}));

}


function makeScreenShotButton(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
btnSS = new android.widget.PopupWindow();
var layout = new android.widget.RelativeLayout(ctx);
var button = new android.widget.Button(ctx);
button.setText("SS");
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(v){
ModPE.takeScreenshot("SB-Capture");
ESP.toast("Screen was captured.");
}
}));
if(emcolor==0){
button.setBackgroundColor(android.graphics.Color.argb(70, 0, 0, 0));
}
else if(emcolor==1){
button.setBackgroundColor(android.graphics.Color.argb(70, 255, 255, 255));
}
else if(emcolor==2){
button.setBackgroundColor(android.graphics.Color.argb(0, 0, 0, 0));
}
layout.addView(button);
btnSS.setContentView(layout);
btnSS.setWidth(dip2px(ctx, 50));
btnSS.setHeight(dip2px(ctx, 48));
btnSS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
btnSS.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 2, 210);
}catch(e){
ESP.toast(e+", "+e.lineNumber);
}
}}));
}


function clockMoving(){
ctx.runOnUiThread(new java.lang.Runnable({
run : function(){
try{
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio1 = new android.widget.RadioButton(ctx);
var radio2 = new android.widget.RadioButton(ctx);
var radio3 = new android.widget.RadioButton(ctx);
var radio4 = new android.widget.RadioButton(ctx);
var radio5 = new android.widget.RadioButton(ctx);
radio1.setText("move1(teleport)");
radio2.setText("move2(faster)");
radio3.setText("move3(flash jump)");
radio4.setText("move4(super jump)");
radio5.setText("move off");
radio1.setId(1);
radio2.setId(2);
radio3.setId(3);
radio4.setId(4);
radio5.setId(5);
radios.addView(radio1);
radios.addView(radio2);
radios.addView(radio3);
radios.addView(radio4);
radios.addView(radio5);
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
if(checkedId==1){
admin2 = 0;
ESP.toast("Teleportation Mode");
}
if(checkedId==2){
admin2 = 1;
ESP.toast("Faster Mode");
}
if(checkedId==3){
admin2 = 2;
ESP.toast("Flash Jump Mode");
}
if(checkedId==4){
admin2 = 3;
ESP.toast("Super Jump Mode");
}
if(checkedId==5){
admin2 = 5;
ESP.toast("Clock Moving Mode off");
}
}
}));

var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Clock Moving Mode");
dialog.setView(scroll);
dialog.setNegativeButton("확인",null);
dialog.show();
}
catch(e) 
{
clientMessage("error"+e+", "+e.lineNumber);
}}}));
}


function compassType(){
ctx.runOnUiThread(new java.lang.Runnable({
run : function(){
try{
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio1 = new android.widget.RadioButton(ctx);
var radio2 = new android.widget.RadioButton(ctx);
var radio3 = new android.widget.RadioButton(ctx);
var radio4 = new android.widget.RadioButton(ctx);
var radio5 = new android.widget.RadioButton(ctx);
var radio6 = new android.widget.RadioButton(ctx);
var radio7 = new android.widget.RadioButton(ctx);
var radio8 = new android.widget.RadioButton(ctx);
radio1.setText("Filling Mode");
radio2.setText("Deleting Mode");
radio3.setText("Filling&Deleting Mode");
radio4.setText("Rail Gun Mode");
radio5.setText("Wide Filling&Deleting Mode");
radio6.setText("Healing Mode");
radio7.setText("Killing Mode");
radio8.setText("Sending Mode");
radio1.setId(1);
radio2.setId(2);
radio3.setId(3);
radio4.setId(4);
radio5.setId(5);
radio6.setId(6);
radio7.setId(7);
radio8.setId(8);
radios.addView(radio1);
radios.addView(radio2);
radios.addView(radio3);
radios.addView(radio4);
radios.addView(radio5);
radios.addView(radio6);
radios.addView(radio7);
radios.addView(radio8);
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
if(checkedId==1){
admin = 0;
ESP.toast("Filling Mode");
}
if(checkedId==2){
admin = 1;
ESP.toast("Deleting Mode");
}
if(checkedId==3){
admin = 2;
ESP.toast("Filling&Deleting Mode");
}
if(checkedId==4){
admin = 3;
ESP.toast("Rail Gun Mode");
}
if(checkedId==5){
admin = 4;
ESP.toast("Wide Filling&Deleting Mode");
}
if(checkedId==6){
admin = 5;
ESP.toast("Healing Mode");
}
if(checkedId==7){
admin = 6;
ESP.toast("Killing Mode");
}
if(checkedId==8){
admin = 8;
ESP.toast("Sending Mode");
}
}
}));

var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Compass Function Type");
dialog.setView(scroll);
dialog.setNegativeButton("확인",null);
dialog.show();
}
catch(e) 
{
clientMessage("error"+e+", "+e.lineNumber);
}}}));
}


function playerSelect(){
ctx.runOnUiThread(new java.lang.Runnable({
run : function(){
try{
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
playerTarget = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("플래이어 관리");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Player was selected.");
playerManager();
}
}));
dialog.show();
}
catch(e) 
{
clientMessage("error"+e+", "+e.lineNumber);
}}}));
}


function playerManager(){
ctx.runOnUiThread(new java.lang.Runnable({
run : function(){
try{
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var psend = new android.widget.Button(ctx);
var pcall = new android.widget.Button(ctx);
var pgo = new android.widget.Button(ctx);
var pkill = new android.widget.Button(ctx);
var pheal = new android.widget.Button(ctx);
var pheal2 = new android.widget.Button(ctx);
var pgive =  new android.widget.Button(ctx);
var psup = new android.widget.Button(ctx);
psend.setText("Send Player");
pcall.setText("Call Player");
pgo.setText("Go to the Player");
pkill.setText("Kill Player");
pheal.setText("Heal Player(20)");
pheal2.setText("Heal Player(30)");
pgive.setText("Give  Item");
psup.setText("Give Support Items");
psend.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(playerTarget);
ESP.toast(Player.getName(playerTarget)+" was sent");
}
});
pcall.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
teleport(playerTarget, Entity.getX(ad), Entity.getY(ad)+1, Entity.getZ(ad));
ESP.toast(Player.getName(playerTarget)+" was called");
}
});
pgo.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
teleport(ad, Entity.getX(playerTarget), Entity.getY(playerTarget)+1, Entity.getZ(playerTarget));
ESP.toast("Teleported to "+Player.getName(playerTarget));
}
});
pkill.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.kill(playerTarget);
ESP.toast(Player.getName(playerTarget)+" was killed");
}
});
pheal.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
Entity.setHealth(playerTarget, 20);
ESP.toast(Player.getName(playerTarget)+" was healed");
}
});
pheal2.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.heal(playerTarget);
ESP.toast(Player.getName(playerTarget)+" was healed");
}
});
pgive.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
giveItem();
}
});
psup.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 302, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 303, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 304, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 305, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 267, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 354, 30, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 320, 30, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 306, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 307, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 308, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 309, 1, 0);
if(mcpev4){
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 373, 30, 28);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 373, 15, 30);
}
ESP.toast("아이템이 지급되었습니다.");
}
});
layout.addView(psend);
layout.addView(pcall);
layout.addView(pgo);
layout.addView(pkill);
layout.addView(pheal);
layout.addView(pheal2);
layout.addView(pgive);
layout.addView(psup);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("플래이어 관리 : "+Player.getName(playerTarget));
dialog.setView(scroll);
dialog.setPositiveButton("닫기", null);
dialog.show();
}
catch(e) 
{
clientMessage("error"+e+", "+e.lineNumber);
}}}));
}


function scriptInfoDialog(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var text = new android.widget.TextView(ctx);
text.setText("버전 : "+version+"\n능력자 : "+espn+"명\n제작자 : Dark Tornado\n제작자 블로그 : http:\/\/blog.naver.com\/dt3141592\n제작자 홈페이지 : http:\/\/darktornado.dothome.co.kr\n안티 랙 : 작동중");
text.setTextSize(18);
var txt = new android.widget.TextView(ctx);
txt.setText("능력자 수는 ESP-0에 속하는 Dark Tornado jr.와 Fire Expert, Hidden Ability를 제외한 수입니다.\nDark Tornado's Book 한권으로 사슬갑옷세트, 옵시디언, 빛나는 옵시디언, 구운 돼지고기, 스폰지, 잉크(검은염료)가 조합이 가능하며, Dark Tornado's Book의 조합법은 책 한권입니다. 책은 책장을 터치하면 나옵니다.\n능력아이템은 사슬갑옷 세트이며, 모자 - 웃옷 - 바지 - 신발 순서대로 기본기 - 스킬1 - 스킬2 - 궁극기입니다.\n쿨타임은 10초(Air Bander, The Teleporter는 5초) - 20초 - 20초 - 2분(Mass Titan은 2분 30초)입니다.\n능력 활성화/비활성화는 능력 이름이 쓰여있는 표지판의 아랫쪽에 있는 옵시디언을 터치하시면, 빛나는 옵시디언으로 바뀌며 활성화되고, 다시 터치하시면 비활성화 됩니다. 맵을 나갔다 오거나, 블록런처를 껐다가 킨 경우, 빛나는 옵시디언 상태여도 능력은 비활성화 된 상태이며, 이 때는 능력을 껐다가 키시면 됩니다.\n능력자들의 스킬은 \"스킬 정보\"를 참고해 주세요.이 스크립트 경우, 15틱을 1초라고 가정하고 만들었습니다.따라서, 지속시간이나 쿨타임이 전체적으로 3/4로 줄어들어 있습니다.\nDark Tornado jr.은 서버장만 사용해 주시길 바랍니다.\n레벨이 2 이하인 초능력자들은 철칼로 때릴 때, 체력을 1씩 더 떨어뜨립니다. Water Controller, Air Bander, The Binder는 2차각성이 있고, The Healer는 흑화가 있습니다. 2차각성과 흑화는 능력 활성화 시점으로부터 1분뒤이며, 쿨타임이 5분입니다. 2차각성은 체력 10, 흑화는 15을 소모합니다.\n인공지능 능력자(A.I.S.)는 멀티 지원이 되지 않습니다. 정확히는 서버원들에게는 거미로 보입니다.\nFire Expert가 제작자 전용 능력인 이유는 설정상의 이유입니다.\n0.9.0~0.9.5에서는 일부 기능이 작동하지 않습니다.");
txt.setTextSize(18);
var ar = new android.widget.TextView(ctx);
if(auto==false){
ar.setText("자동수복 : 비활성화");
}
else if(auto==true){
ar.setText("자동수복 : 활성화");
}
ar.setTextSize(18);
var rm = new android.widget.TextView(ctx);
if(anti3==0){
rm.setText("몹 삭제 : 비활성화");
}
else{
rm.setText("몹 삭제 : 활성화");
}
rm.setTextSize(18);
var rd = new android.widget.TextView(ctx);
if(anti4==0){
rd.setText("드롭된 아이템 삭제 : 비활성화");
}
else{
rd.setText("드롭된 아이템 삭제 : 활성화");
}
rd.setTextSize(18);
var ps = new android.widget.TextView(ctx);
if(passOnoff==false){
ps.setText("패시브 스킬 : 비활성화");
}
else if(passOnoff==true){
ps.setText("패시브 스킬 : 활성화");
}
ps.setTextSize(18);
var espo = new android.widget.TextView(ctx);
if(espOnoff==false){
espo.setText("초능력 : 비활성화");
}
else if(espOnoff==true){
espo.setText("초능력 : 활성화");
}
espo.setTextSize(18);
var tp = new android.widget.TextView(ctx);
if(town==false){
tp.setText("마을보호 : 비활성화");
}
else if(town==true){
tp.setText("마을보호 : 활성화");
}
tp.setTextSize(18);
var bgm = new android.widget.TextView(ctx);
if(bgmOnoff==false){
bgm.setText("배경음악 : 비활성화");
}
else if(bgmOnoff==true){
bgm.setText("배경음악 : 활성화");
}
bgm.setTextSize(18);
var ct = new android.widget.TextView(ctx);
if(adsc==false){
ct.setText("쿨타임 표시 : 비활성화");
}
else if(adsc==true){
ct.setText("쿨타임 표시 : 활성화");
}
ct.setTextSize(18);
var maker = new android.widget.TextView(ctx);
maker.setText("\n© 2014 Dark Tornado\n(http:\/\/blog.naver.com\/dt3141592)\n");
maker.setGravity(android.view.Gravity.CENTER);
maker.setTextSize(15);
var button = new android.widget.Button(ctx);
button.setText("초능력자 레벨");
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg){
ESP.skillInfo("초능력자 레벨(1~5)", "Fire User - 3.5\nWater Controller - 2\nNature Guardian- 3\nI am Creeper - 5\nSoil Master - 4\nThe Summoner - 2\nThe Luminous - 2.5\nThe Darkness - 4\nThe Freezer - 2\nDesert Maker - 2.5\nThe Vampire - 5\nAir Bander - 2.5\nI am Elsa - 3\nMass Titan - 3.5\nThunder Breaker - 5\nThe Binder - 2\nThe Mechanic - 4\nTNT Expert - 5\nTrap Creater - 4\nThe Healer - 2.5\nNether Man - 3\nCloud Manager - 3.5\nThe Assassin - 4\nArrow Shooter - 2\nThe Mage - 3\nThe Defenser - 2.5\nPoison Maven - 3.5\nGround Melter - 4.5\nHyper Freezer - 3.5\nThe Builder - 3\nThe Soldier - 3.5\nThe Assaulter - 4\nThe Burster - 5\nThe Warrior - 4\nOre Collecter - 3.5\nThe Rich - 3\nThe Teleporter - 3.5\nSpace Warpper - 3\nSurround Attacker - 4\nForce Shifter - 4.5\nI am ReinForce - 5\nMagnetism Distorter - 3\nI am Steve - 3.5\nI am Herobrine - 5\nThe Hermit - 3\nClay Gatherer - 3.5\nI am Kirito - 5\nJungle Former - 3.5\nI am Kanade - 5\nTime Traveler - 5\nThe Sniper - 4.5\nZombie Employer - 3\nThe Necromancer - 4\nI am Asuna - 4.5\nHoly Knight - 4\nSolar Paladin - 4\nLunar Wizard - 4\nHyper Ass5aulter - 5\nRandom Ability - 3.5\nReinforce Zwei - 4\nThe Decorater - 3.5\nHyper Summoner - 3\nClimate Changer - 3.5\nRemote Raider - 4\nWind Operater - 3.5\nEnergy Transfer - 3.5\nThe Genocider - 5\nServer Deminator - 5\nThe Outsider - 4\nI am Railgun - 5\nCopying Eye - 4\nDragon Trainer - 5\nHawk Eye - 4\nThe Solidifier - 3.5\nGravity Twister - 4\nHyper Assassin - 5\nSilent Killer - 3\nBlack Slayer - 4\nThe Slasher - 3.5\nNight Worker - 4\nLight Gemstone - 2\nThe Dracula - 5\nMushroom Grower - 3\nEnder Girl - 2\nTaiga Appearer - 2.5\nThe Ruiner - 4\nSwamp Generater - 3\nArch Summoner - 3\nArch Mage - 3.5\nPuella Magica - 2.5\nHyper Builder - 3\nScalar Increaser - 4\nVector Reflacter - 4.5\nTensor Veerer - 5\nArch Mechanic - 4\nThe Sealer - 3\nThe Archangel - 4\nWhite Eye - 3.5\nMental Out - 3\nWorld Editor - 3\n\nWater Controller sr. - 4.5\nAir Bander sr. - 4.5\nThe Binder sr. - 4.5\n\nDark Healer - 4\n\nFire Expert - 3.5\n\nDark Tornado jr. - 5.5(6)\n");
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(ar);
layout.addView(rm);
layout.addView(rd);
layout.addView(espo);
layout.addView(ps);
layout.addView(tp);
layout.addView(bgm);
layout.addView(ct);
layout.addView(txt);
if(mp2==false){
var txt2 = new android.widget.TextView(ctx);
txt2.setText("스크립트와 맵의 버전이 다릅니다.");
txt2.setTextSize(18);
layout.addView(txt2);
}
if(mcpev==false){
var txt3 = new android.widget.TextView(ctx);
txt3.setText("다음 버전부터는 0.8.1 이하를 지원하지 않습니다. MCPE를 0.10.5로 업데이트해주세요.");
txt3.setTextSize(18);
layout.addView(txt3);
}
layout.addView(maker);
layout.addView(button);
var ts = new android.widget.Button(ctx);
ts.setText("테마곡 감상");
ts.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
if(themeSong==false){
try{
media.reset();
media.setDataSource(sdcard+"/darkTornado/ESP-SB/ESP.mp3");
media.prepare();
media.start();
themeSong = true;
ESP.toast("Play");
}
catch(e){
ESP.toast("해당 경로에 음악파일이 없습니다.");
}
}
else if(themeSong==true){
media.reset();
themeSong = false;
ESP.toast("Stop");
}
}
}));
layout.addView(ts);
var blog = new android.widget.Button(ctx);
blog.setText("제작자 블로그로 이동");
blog.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
blogDialog();
}
}));
layout.addView(blog);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("스크립트 정보");
dialog.setView(scroll);
dialog.setNegativeButton("확인",null);
dialog.show();
}
catch(e){
ESP.sbm(e+", "+e.lineNumber);
}
}}));
}


function openCmdList(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var dialog = new android.app.AlertDialog.Builder(ctx,android.app.AlertDialog.THEME_HOLO_DARK);
var text = new android.widget.TextView(ctx);
text.setText("/day - 낮으로 설정\n/night - 밤으로 설정\n/tp x y z - 해당 좌표로 순간이동\n/reset - 모든 능력 리셋\n/house - 운영자의 집으로 이동\n/hideout - 운영자의 은신처로 순간이동\n/능력자코드 off - 능력 비활성화\n/send 능력자코드 - 능력자를 입구로 전송. 전용맵의 아닐 경우, 서버장의 위치로 소환\n/kill 능력자코드 - 해당 능력사 사살\n/heal 능력자코드 - 해당 능력자의 체력을 30으로 회복\n/heal 능력자코드 n - 해당 능력자의 체력을 n으로 설정\n/on 능력자코드 닉네임 - 해당 플레이어를 해당 능력자로 설정(?)\n/kill 닉네임 - 해당 플레이어 사살\n/send - 해당 플레이어를 입구로 전송\n/.heal 닉네임 - 해당 플레이어의 체력을 20으로 회복\n/move1 - 시계로 터치시 터치한 곳으로 순간이동\n/move2 - 시계로 터치시 터치한 방향으로 이동\n/move3 - 시계로 터치시 터치한 방향으로 플래시 점프\n/move4 - 시계로 터치시 슈퍼점프(아픔)\n/fill - 나침반으로 터치하면 수동수복\n/delete - 나침반으로 터치하면 수동삭제\n/both - 나침반으로 터치하면 수동수복&삭제\n/auto - 플레이어의 위치를 기준으로 /both를 자동으로 실행\n/wide - 나침반으로 터치하면 범위를 늘린 /both를 실행\n/gun - 나침반으로 터치하면 바라보는 방향으로 폭발발사\n/kill - 나침반으로 때리면 맞은 엔티티 사망\n/heal - 나침반으로 때리면 맞은 엔티티의 체력상승. 땅 터치시 자신의 체력 상승\n\n/o 능력자코드 - 0.4.3+의 능력 중 해당 능력 활성화\n/o 능력자코드 off - 0.4.3+의 능력 중 해당 능력 비활성화\n/o all - 0.4.3+의 모든 능력 활성화\n/o off - 0.4.3+의 모든 능력 비활성화\n");
text.setTextSize(18);
var btn = new android.widget.Button(ctx);
btn.setText("능력자코드");
btn.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("능력자 코드", "Fire User - fire\nWater Controller - water\nNature Guardian - tree\nI am Creeper - creeper\nSoil Master - soil\nThe Summoner - summon\nThe Luminous - light\nThe Darkness - dark\nThe Freezer - ice\nDesert Maker - sand\nThe Vampire - blood\nAir Bander - air\nThunder Breaker - thunder\nI am Elsa - elsa\nMass Titan - titan\nThe Binder - bind\nThe Mechanic - meca\nTNT Expert - tnt\nTrap Creater - trap\nThe Healer - heal\nNether Man - nether\nClould Manager - cloud\nThe Assassin - ass\nArrow Shooter - arrow\nThe Defenser - defense\nThe Mage - mage\nPoison Maven - poison\nGround Melter - melt\nHyper Freezer - hfreeze\nThe Builder - builder\nThe Soldier - soldier\nThe Assaulter - as\nThe Burster - burst\nTheWarrior - warrior\nOre Collecter - ore\nThe Rich - rich\nThe Teleporter - tp\nSpace Warpper - space\nSurround Attacker - sattack\nForce Shifter - force\nI am Reinforce - rein\nMagnetism Distorter - magnet\nI am Steve - steve\nI am Herobrine - hero\nThe Hermit - hermit\nClay Gatherer - clay\nI am Kirito - kirito\nJungle Former - jungle\nI am Kanade - kanade\nTime Traveler - time\nThe Sniper - snipe\nZombie Employer - zombie\nThe Necromancer - necro\nI am Asuna - asuna\nHoly Knight - holy\nSolar Paladin - solar\nLunar Wizard - lunar\nHyper Assaulter - has\nRandom Ability - random\nReinforce Zwei - zwei\nThe Decorater - deco\nHyper Sumnoner - hsum\nClimate Changer - climate\nRemote Raider - raid\nWind Operater - wind\nEnergy Transfer - energy\nThe Genocider - geno\nServer Dominator - server\nThe Outsider - out\nI am Railgun - rgun\nCopying Eye - copy\nDragon Trainer - dragon\nHawk Eye - hawk\nThe Solidifier - solid\nGravity Twister - gravity\nHyper Assassin - hass\nSilent Killer - sikill\nBlack Slayer - black\nThe Slasher - slash\nNight Worker - night\nLight Gemstone - gem\nThe Dracula - dra\nMushroom Grower - mush\nEnder Girl - ender\nTaiga Appearer - taiga\nThe Ruiner - ruin\nSwamp Generater - swamp\nArch Summoner - asum\nArch Mage - amage\nPuella Magica - puella\nHyper Builder - hbuild\nScalar Increaser - scalar\nVector Reflacter - vector\nTensor Veerer - tensor\nArch Mechanic - ameca\nThe Sealer - seal\nThe Archangel - angel\nWhite Eye - white\nMental Out - mental\nWorld Editor - world\n\nDark Tornado jr. - dtj\nFire Expert - fe\n\n\n <0.4.3+>\nFire Master - fire\nWater Controller - water\nNature Guardian - tree\nI am Creeper - creeper\nEarth Bander - soil\nThe Summoner - summon\nThe Luminous - light\nThe Darkness - dark\nThe Freezer - ice\n");
}
});
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
layout.addView(btn);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("명령어 목록");
dialog.setView(scroll);
dialog.setNegativeButton("확인",null);
dialog.show();
}
catch(e){
ESP.sbm(e+", "+e.lineNumber);
}
}}));
}


function qA(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var dialog = new android.app.AlertDialog.Builder(ctx,android.app.AlertDialog.THEME_HOLO_DARK);
var qa1 = android.widget.Button(ctx);
var qa2 = android.widget.Button(ctx);
var qa3 = android.widget.Button(ctx);
var qa4 = android.widget.Button(ctx);
var qa5 = android.widget.Button(ctx);
var qa6 = android.widget.Button(ctx);
var qa7 = android.widget.Button(ctx);
var qa8 = android.widget.Button(ctx);
qa1.setText("능력 어떻게 쓰나요?");
qa2.setText("멀티가 안돼요");
qa3.setText("운영자의 은신처 어떻게 가나요?");
qa4.setText("숨겨진 능력이 작동을 안해요");
qa5.setText("다른사람 맵 들어갈 때 오류떠요");
qa6.setText("멀티되나요?");
qa7.setText("공유나 리뷰해도 되나요?");
qa8.setText("2차 각성이 뭔가요?");
qa1.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Q. 능력 어떻게 쓰나요?", "A. 도움말 버튼이나 스크립트 정보 버튼을 눌러보세요. 아니면 명령어 /도움말을 치시면 됩니다.");
}
});
qa2.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Q. 멀티가 안돼요", "A. 0.9.0 이상의 경우, 일부 폰에서는 멀티가 되지 않습니다(왜 그런지는 mojang에게 물어보세요. 전 모릅니다.). 인벤에디터의 월드정보수정에서 old를 flat이나 infinite로 바꾸사면 됩니다.");
}
});
qa3.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Q. 운영자의 은신처 어떻게 가나요?", "A. Admin's House에 있는 탁자(참나무 반 블록)를 터치하시면 은신처로 이동되며, 은신처의 벽에 있는 철창을 터치하시면 Admin's House로 돌아옵니다.");
}
});
qa4.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Q. 숨겨진 능력이 작동을 안해요", "A. 다른 능력자 스크립트입니다.");
}
});
qa5.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Q. 다른사람 맵 들어갈 때 오류떠요", "A. 전용맵인지 아닌지를 구분하기 위해, split를 사용하는데, procCmd에서는 잘 작동하고, newLevel에서는 다른사람 맵 들어가면 오류가 뜹니다. 확실한건 zhuowei zhang에게 물어보세요.");
}
});
qa6.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Q. 멀티되나요", "A. 네, 됩니다. 단, 서버장만 적용허셔야 오류(?)가 안생깁니다.");
}
});
qa7.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Q. 공유나 리뷰해도 되나요?", "A. 리뷰, 무단공유는 허용되어있습니다. 단 비덧공유는 불허하며, 무단수정, 도용 및 제작자를 속이는 행위는 불허합니다.");
}
});
qa8.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.skillInfo("Q. 2차 각성이 뭔가요?", "A. 공격계열 스킬이 하나도 없었던 Water Controller, Air Bander, The Binder, The Healer에게는 2차각성과 흑화가 있습니다. 2차각성이나 흑화는 각성시점으로부터 1분 뒤에 사용이 가능하며, 지속시간은 1분이고, 쿨타임은 5분입니다. 사용방법은 각성 시, 안장이 나오는데, 그 안장으로 터치하면 2차각성 또는 흑화가 진행됩니다. 2차각성은 10, 흑화는 15의 체력을 소모하며, 사용시 체력이 50이 됩니다. 모든 스킬과 쿨타임이 바뀝니다.\n쿨타임은 5초 - 10초 - 10초 - on/off입니다.\n스킬들은 아래와 같이 바뀝니다.\n\nWater Controller sr.(2차각성)\n모자 - 터치한 곳으로 부터 한칸 위에 흐르는 물 소환, 신발이 켜져있을 때는 사정거리가 약간 짧은 아이스 버스터\n윗옷 - 터치한 곳에 물 감옥+활성화된 TNT 소환. \n바지 - 터치하면 그 장소가 기억되고, 한번 더 터치하면 그 곳으로 이동\n신발 - on/off스킬. 터치하면 on 또는 off된다. 활성화시 물이 매직카펫처럼 따라오는 민폐기술\n\nAir Bander sr.(2차각성)\n모자 - 바라보는 방향으로 연쇄적인 폭발이 일어난다.\n윗옷 - 상대방을 위로 tp시킨다.\n바지 - 모자스킬의 2차원화(?)축소된 하울링\n신발 - on/off스킬. 터치하면 on 또는 off된다. 매직카펫이다.\n\nThe Binder sr.(2차각성)\n모자 - 터치한 곳에 폭발을 동반한 거미줄을 소환한다.\n윗옷 - 바라보는 방향으로 폭발+거미줄이 나간다(거미줄 버스터?).\n바지 - 거미줄 감옥을 생성한다. 3초뒤에 폭발한다.\n신발 - on/off스킬. 터치하면 on 또는 off된다. 자신의 주변에 거미줄을 2겹으로 두르고 다닌다.\n\nDark Healer(흑화)\n모자 - 자신의 체력을 5~8회복한다.\n윗옷 - 상대방의 체력을 5~7감소, 사진의 체력을 -1~1회복\n바지 - 상대방 타격 시, 2초뒤에 상대방이 폭발한다.\n신발 - on/off스킬. 터치하면 on 또는 off된다. 상대방이게 직접 타격(물리공격) 당할 시, 50%확률로 공격 무시(사람에게만 해당)\n");
}
});
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(qa1);
layout.addView(qa2);
layout.addView(qa3);
layout.addView(qa4);
layout.addView(qa5);
layout.addView(qa6);
layout.addView(qa7);
layout.addView(qa8);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Q & A");
dialog.setView(scroll);
dialog.setNegativeButton("닫기",null);
dialog.show();
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}


function giveItem(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var dialog = new android.app.AlertDialog.Builder(ctx,android.app.AlertDialog.THEME_HOLO_DARK);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.setGravity(android.view.Gravity.CENTER);

var layout1 = new android.widget.LinearLayout(ctx);
layout1.setGravity(android.view.Gravity.CENTER);
layout1.setOrientation(0);
var loc1 = new android.widget.TextView(ctx);
var loc2 = new android.widget.EditText(ctx);
loc1.setText("ID : ");
loc1.setTextSize(18);
loc2.setHint("Item Id");
loc2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
layout1.addView(loc1);
layout1.addView(loc2);

var layout2 = new android.widget.LinearLayout(ctx);
layout2.setGravity(android.view.Gravity.CENTER);
layout2.setOrientation(0);
var loc3 = new android.widget.TextView(ctx);
var loc4 = new android.widget.EditText(ctx);
loc3.setText("Amount : ");
loc3.setTextSize(18);
loc4.setHint("Item Amount");
loc4.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
layout2.addView(loc3);
layout2.addView(loc4);

var layout3 = new android.widget.LinearLayout(ctx);
layout3.setGravity(android.view.Gravity.CENTER);
layout3.setOrientation(0);
var loc5 = new android.widget.TextView(ctx);
var loc6 = new android.widget.EditText(ctx);
loc5.setText("Demage : ");
loc5.setTextSize(18);
loc6.setHint("Item Demage");
loc6.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
layout3.addView(loc5);
layout3.addView(loc6);

layout.addView(layout1);
layout.addView(layout2);
layout.addView(layout3);

dialog.setTitle("Giving Items");
dialog.setView(layout);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, loc2.getText(), loc4.getText(), loc6.getText());
ESP.toast(Player.getName(playerTarget)+"에게 아이템이 지급되었습니다.");
}
}));
dialog.show();
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}


function worldEdit(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function(){
try{
menu12 = new android.widget.PopupWindow();
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var text = new android.widget.TextView(ctx);
text.setText("지형 수정\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var p1 = new android.widget.Button(ctx);
p1.setText("지점 1 입력");
p1.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
inputPoint(false);
}
});
var p2 = new android.widget.Button(ctx);
p2.setText("지점 2 입력");
p2.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
inputPoint(true);
}
});
var p1w = new Array(3);
var p2w = new Array(3);

var set = android.widget.Button(ctx);
var replace = android.widget.Button(ctx);
set.setText("블록 설정");
replace.setText("블록 변경");
set.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
p1w = [Math.min(p0w[0][0], p0w[1][0]), Math.min(p0w[0][1], p0w[1][1]), Math.min(p0w[0][2], p0w[1][2])];
p2w = [Math.max(p0w[0][0], p0w[1][0]), Math.max(p0w[0][1], p0w[1][1]), Math.max(p0w[0][2], p0w[1][2])];
setDialog(p1w[0], p1w[1], p1w[2], p2w[0], p2w[1], p2w[2]);
}
});
replace.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
p1w = [Math.min(p0w[0][0], p0w[1][0]), Math.min(p0w[0][1], p0w[1][1]), Math.min(p0w[0][2], p0w[1][2])];
p2w = [Math.max(p0w[0][0], p0w[1][0]), Math.max(p0w[0][1], p0w[1][1]), Math.max(p0w[0][2], p0w[1][2])];
replaceDialog(p1w[0], p1w[1], p1w[2], p2w[0], p2w[1], p2w[2]);
}
});

var mdexit = android.widget.Button(ctx);
mdexit.setText("EXIT");
mdexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(menu12!=null){
menu12.dismiss();
menu12 = null;
}
}
});

layout.addView(text);
layout.addView(p1);
layout.addView(p2);
layout.addView(set);
layout.addView(replace);

layout.addView(mdexit);

var scroll = makeScroll(layout,menu12);
menu12.setContentView(scroll);
menu12.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menu12.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}


function inputPoint(tf){
var dialog = new android.app.AlertDialog.Builder(ctx,android.app.AlertDialog.THEME_HOLO_DARK);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.setGravity(android.view.Gravity.CENTER);

var p1x = new android.widget.EditText(ctx);
var p1y = new android.widget.EditText(ctx);
var p1z = new android.widget.EditText(ctx);
p1x.setHint("x좌표");
p1y.setHint("y좌표");
p1z.setHint("z좌표");
p1x.setInputType(android.text.InputType.TYPE_CLASS_NUMBER|android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);
p1y.setInputType(android.text.InputType.TYPE_CLASS_NUMBER|android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);
p1z.setInputType(android.text.InputType.TYPE_CLASS_NUMBER|android.text.InputType.TYPE_NUMBER_FLAG_SIGNED);
var p1t = android.widget.Button(ctx);
p1t.setText("플레이어(머리)의 좌표로 설정");
p1t.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
p1x.setText(Math.floor(Entity.getX(ad))+"");
p1y.setText(Math.floor(Entity.getY(ad))+"");
p1z.setText(Math.floor(Entity.getZ(ad))+"");
}
});

layout.addView(p1x);
layout.addView(p1y);
layout.addView(p1z);
layout.addView(p1t);

var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setView(scroll);
if(tf) dialog.setTitle("지점 2 선택");
else dialog.setTitle("지점 1 선택");
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
if(tf) p0w[1] = [p2x.getText(), p2y.getText(), p2z.getText()];
else p0w[0] = [p1x.getText(), p1y.getText(), p1z.getText()];
ESP.toast("설정되었습니다.");
}
}));
dialog.show();
}


function setDialog(x1, y1, z1, x2, y2, z2){
var dialog = new android.app.AlertDialog.Builder(ctx,android.app.AlertDialog.THEME_HOLO_DARK);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.setGravity(android.view.Gravity.CENTER);

var loc1 = new android.widget.TextView(ctx);
var loc2 = new android.widget.EditText(ctx);
var loc3 = new android.widget.TextView(ctx);
var loc4 = new android.widget.EditText(ctx);

loc1.setText("블록 코드 : ");
loc1.setTextSize(18);
loc2.setHint("블록 코드를 입력하세요");
loc2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
loc3.setText("블록 데미지 : ");
loc3.setTextSize(18);
loc4.setHint("블록 데미지를 입력하세요");
loc4.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);

layout.addView(loc1);
layout.addView(loc2);
layout.addView(loc3);
layout.addView(loc4);

var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setView(scroll);
dialog.setTitle("블록설정");
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
for(var xx=x1;xx<x2+1;xx++)
for(var yy=y1;yy<y2+1;yy++)
for(var zz=z1;zz<z2+1;zz++)
setTile(xx, yy, zz, loc2.getText(), loc4.getText());
ESP.toast("설정되었습니다.");
}
}));
dialog.show();
}


function replaceDialog(x1, y1, z1, x2, y2, z2){
var dialog = new android.app.AlertDialog.Builder(ctx,android.app.AlertDialog.THEME_HOLO_DARK);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.setGravity(android.view.Gravity.CENTER);

var loc0 = new android.widget.TextView(ctx);
var loc1 = new android.widget.TextView(ctx);
var loc2 = new android.widget.EditText(ctx);
var loc3 = new android.widget.TextView(ctx);
var loc4 = new android.widget.EditText(ctx);
var loc5 = new android.widget.TextView(ctx);
var loc6 = new android.widget.TextView(ctx);
var loc7 = new android.widget.EditText(ctx);
var loc8 = new android.widget.TextView(ctx);
var loc9 = new android.widget.EditText(ctx);

loc0.setText("이 블록(들)을");
loc1.setText("블록 코드 : ");
loc1.setTextSize(18);
loc2.setHint("블록 코드를 입력하세요");
loc2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
loc3.setText("블록 데미지 : ");
loc3.setTextSize(18);
loc4.setHint("블록 데미지를 입력하세요");
loc4.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
loc5.setText("\n이 블록(들)으로");
loc6.setText("블록 코드 : ");
loc6.setTextSize(18);
loc7.setHint("블록 코드를 입력하세요");
loc7.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
loc8.setText("블록 데미지 : ");
loc8.setTextSize(18);
loc9.setHint("블록 데미지를 입력하세요");
loc9.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);

layout.addView(loc0);
layout.addView(loc1);
layout.addView(loc2);
layout.addView(loc3);
layout.addView(loc4);
layout.addView(loc5);
layout.addView(loc6);
layout.addView(loc7);
layout.addView(loc8);
layout.addView(loc9);

var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setView(scroll);
dialog.setTitle("블록변경");
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
for(var xx=x1;xx<x2+1;xx++)
for(var yy=y1;yy<y2+1;yy++)
for(var zz=z1;zz<z2+1;zz++)
if(getTile(xx, yy, zz)==loc2.getText()){
if(loc4.getText()==""){
setTile(xx, yy, zz, loc7.getText(), loc9.getText());
}
else{
if(Level.getData(xx, yy, zz)==loc4.getText()){
setTile(xx, yy, zz, loc7.getText(), loc9.getText());
}
}
}
ESP.toast("변경되었습니다.");
}
}));
dialog.show();
}


function aiESP(){
ctx.runOnUiThread(new java.lang.Runnable({
run : function(){
try{
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
var types = ["Fire User", "Water Controller", "Nature Guardian", "I am Creeper", "Soil Master", "The Summoner"];
for(var n in types){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(types[n]);
radio[n].setId(1);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
if(checkedId==1){
aiType = "fire";
ESP.toast("Fire User was selected");
}
if(checkedId==2){
aiType = "water";
ESP.toast("Water Controller was selected");
}
if(checkedId==3){
aiType = "tree";
ESP.toast("Nature Guardian was selected");
}
if(checkedId==4){
aiType = "creeper";
ESP.toast("I am Creeper was selected");
}
if(checkedId==5){
aiType = "soil";
ESP.toast("Soil Master was selected");
}
if(checkedId==6){
aiType = "summon";
ESP.toast("The Summoner was selected");
}
}
}));

var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("초능력자 대전 인공지능(A.I.S.)");
dialog.setView(scroll);
dialog.setNegativeButton("취소",null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("소환하려면 터치하세요.");
aiOn = true;
}
}));
dialog.show();
}
catch(e) 
{
clientMessage("error"+e+", "+e.lineNumber);
}}}));
}


function makePMButton(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
btnPlayer = new android.widget.PopupWindow();
var layout = new android.widget.RelativeLayout(ctx);
var button = new android.widget.Button(ctx);
button.setText("PM");
button.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(v){
if(menuP==null){
playerSelect2();
}
else{
if(menuP!=null){
menuP.dismiss();
menuP = null;
}
}
}
}));
if(emcolor==0){
button.setBackgroundColor(android.graphics.Color.argb(70, 0, 0, 0));
}
else if(emcolor==1){
button.setBackgroundColor(android.graphics.Color.argb(70, 255, 255, 255));
}
else if(emcolor==2){
button.setBackgroundColor(android.graphics.Color.argb(0, 0, 0, 0));
}
layout.addView(button);
btnPlayer.setContentView(layout);
btnPlayer.setWidth(dip2px(ctx, 50));
btnPlayer.setHeight(dip2px(ctx, 48));
btnPlayer.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
btnPlayer.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 320, 10);
}catch(e){
ESP.toast(e+", "+e.lineNumber);
}
}}));
}


function playerSelect2(){
ctx.runOnUiThread(new java.lang.Runnable({
run : function(){
try{
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
playerTarget = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Player Manager");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.toast("Player was selected.");
playerManager2();
}
}));
dialog.show();
}
catch(e) 
{
clientMessage("error"+e+", "+e.lineNumber);
}}}));
}


function playerManager2(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function(){
try{
menuP = new android.widget.PopupWindow();
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var text = new android.widget.TextView(ctx);
text.setText("Player Manager\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var txt = new android.widget.TextView(ctx);
txt.setText("  target : "+Player.getName(playerTarget));
txt.setTextSize(18);
var pban = makeToggleButton("Ban Player", "Ban Player", 
function(){
banData.push([Entity.getHealth(playerTarget), Math.round(Entity.getX(playerTarget)), Math.floor(Entity.getY(playerTarget)), Math.round(Entity.getZ(playerTarget))]);
banList.push(playerTarget);
banName.push(Player.getName(playerTarget));
},
function(){
for(var n in banList){
if(playerTarget==banList[n]){
teleport(playerTarget, banData[n][1], banData[n][2]+1, banData[n][3]);
Entity.setHealth(playerTarget, banData[n][0]);
banList.splice(n, 1);
banData.splice(n, 1);
Ban.removeNameData(playerTarget);
break;
}
}
},
Ban.isBanned(playerTarget));
var button = new Array();
var menus = ["Send Player", "Call Player", "Go to Player", "Set Health", "Give Item", "Give Support Items", "Kick Player"];
for(var n in menus){
button[n] = new android.widget.Button(ctx);
button[n].setText(menus[n]);
button[n].setBackgroundColor(android.graphics.Color.argb(100, 100, 100, 100));
}
button[0].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.send(playerTarget);
ESP.toast(Player.getName(playerTarget)+" was sent");
}
});
button[1].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
teleport(playerTarget, Entity.getX(ad), Entity.getY(ad)+1, Entity.getZ(ad));
ESP.toast(Player.getName(playerTarget)+" was called");
}
});
button[2].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
teleport(ad, Entity.getX(playerTarget), Entity.getY(playerTarget)+1, Entity.getZ(playerTarget));
ESP.toast("Teleported to "+Player.getName(playerTarget));
}
});
button[3].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
playerHealthSet();
}
});
button[4].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
giveItem();
}
});
button[5].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 302, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 303, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 304, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 305, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 267, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 354, 30, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 320, 30, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 306, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 307, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 308, 1, 0);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 309, 1, 0);
if(mcpev4){
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 373, 30, 28);
Level.dropItem(Entity.getX(playerTarget), Entity.getY(playerTarget), Entity.getZ(playerTarget), 0, 373, 15, 30);
}
ESP.toast("아이템이 지급되었습니다.");
}
});
button[6].setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.toast(Player.getName(playerTarget)+" was kicked");
Entity.remove(playerTarget);
}
});
var exit = makeExitButton(menuP);
exit.setBackgroundColor(android.graphics.Color.argb(100, 100, 100, 100));
layout.addView(text);
layout.addView(txt);
layout.addView(pban);
for(var n in menus)
layout.addView(button[n]);
layout.addView(exit);

var scroll = makeScroll(layout,menuP);
menuP.setContentView(scroll);
menuP.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.argb(150, 0, 0, 0)));
menuP.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}


function playerHealthSet(){
var dialog = new android.app.AlertDialog.Builder(ctx,android.app.AlertDialog.THEME_HOLO_DARK);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.setGravity(android.view.Gravity.CENTER);

var loc1 = new android.widget.TextView(ctx);
var loc2 = new android.widget.EditText(ctx);

loc1.setText("체력 : ");
loc1.setTextSize(18);
loc2.setHint("체력을 입력하세요");
loc2.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);

layout.addView(loc1);
layout.addView(loc2);

var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setView(scroll);
dialog.setTitle("체력설정 : "+Player.getName(playerTarget));
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
ESP.setHealth(playerTarget, loc2.getText());
ESP.toast("체력이 "+loc2.getText()+"로 설정되었습니다.");
}
}));
dialog.show();
}


function bgmPlayer(tf){
if(tf==true){
try{
var area = checkArea();
bgm.reset();
if(area==0){
bgm.setDataSource(sdcard+"/games/com.mojang/minecraftWorlds/"+Level.getWorldDir()+"/ESP_low.mp3");
bgmTime = 2900;
}
else if(area==1){
if(nightCheck()){
bgm.setDataSource(sdcard+"/games/com.mojang/minecraftWorlds/"+Level.getWorldDir()+"/Putting_to_Death_low.mp3");
bgmTime = 2500;
}
else{
bgm.setDataSource(sdcard+"/games/com.mojang/minecraftWorlds/"+Level.getWorldDir()+"/R_low.mp3");
bgmTime = 2100;
}
}
else if(area==2){
bgm.setDataSource(sdcard+"/games/com.mojang/minecraftWorlds/"+Level.getWorldDir()+"/Under_this_World_low.mp3");
bgmTime = 2400;
}
else if(area==3){
bgm.setDataSource(sdcard+"/games/com.mojang/minecraftWorlds/"+Level.getWorldDir()+"/The_End_low.mp3");
bgmTime = 2800;
}
else if(area==4){
bgm.setDataSource(sdcard+"/games/com.mojang/minecraftWorlds/"+Level.getWorldDir()+"/Time_Stop_low.mp3");
bgmTime = 3250;
}
else if(area==5){
bgm.setDataSource(sdcard+"/games/com.mojang/minecraftWorlds/"+Level.getWorldDir()+"/ESI_low.mp3");
bgmTime = 3950;
}
else if(area==6){
if(nightCheck()){
bgm.setDataSource(sdcard+"/darkTornado/ESP-SB/Dark_Battle.mp3");
bgmTime = 3700;
}
else{
bgm.setDataSource(sdcard+"/darkTornado/ESP-SB/We_Must_Fight.mp3");
bgmTime = 3300;
}
}
bgm.prepare();
bgm.start();
bgmOnoff = true;
ESP.toast("BGM on");
}
catch(e){
ESP.toast("해당 경로에 음악파일이 없습니다.");
}
}
else if(tf==false&&bgmOnoff==true){
bgm.reset();
bgmOnoff = false;
ESP.toast("BGM off");
}

}


function checkArea(){
var px, pz;
px = Math.round(Entity.getX(ad)-0.5);
pz = Math.round(Entity.getZ(ad)-0.5);
if(px>=1000&&px<=1082&&pz>=1000&&pz<=1063) return 0;
if(px>=1995&&px<=2137&&pz>=-1052&&pz<=-944) return 1;
if(px>=-1057&&px<=-992&&pz>=992&&pz<=1066) return 2;
if(px>=-1044&&px<=-994&&pz>=-1028&&pz<=-972) return 3;
if(px>=996&&px<=1004&&pz>=1496&&pz<=1504) return 4;
if(px>=-1011&&px<=-986&&pz>=2994&&pz<=3019) return 5;
else return 6;

}


function banMenu(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var menuB = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("Ban\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
Ban.removeGonePlayerData();
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e))
players.push(e);
}
var checkBox = new Array();
for(var n in players){
checkBox[n] = new android.widget.CheckBox(ctx);
checkBox[n].setText(Player.getName(players[n]));
checkBox[n].setId(n);
checkBox[n].setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
onCheckedChanged : function(check, onoff){
if(onoff==true){
banData.push([Entity.getHealth(players[check.getId()]), Math.round(Entity.getX(players[check.getId()])), Math.floor(Entity.getY(players[check.getId()])), Math.round(Entity.getZ(players[check.getId()]))]);
banList.push(players[check.getId()]);
}
else if(onoff==false){
Ban.removeData(players[check.getId()]);
Ban.removeNameData(playerTarget);
}
}}));
if(Ban.isBanned(players[n])){
checkBox[n].setChecked(true);
banList.splice(n, 1);
banData.splice(n, 1);
}
else{
checkBox[n].setChecked(false);
}
layout.addView(checkBox[n]);
}
var mreset = android.widget.Button(ctx);
mreset.setText("Reset Ban List");
mreset.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
while(banList[0]!=null)
banList.shift();
ESP.toast("Ban List was reseted.");
}
});
layout.addView(mreset);
var mbexit = makeExitButton(menuB);
layout.addView(mbexit);
var scroll = makeScroll(layout, menuB);
menuB.setContentView(scroll);
menuB.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.BLACK));
menuB.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}


function blogDialog(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var dialog = new android.app.AlertDialog.Builder(ctx,android.app.AlertDialog.THEME_HOLO_DARK);
var text = new android.widget.TextView(ctx);
text.setText("제작자(Dark Tornado)의 블로그로 이동하시겠습니까?");
text.setTextSize(18);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("블로그로 이동");
dialog.setView(scroll);
dialog.setNegativeButton("취소",null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
try{
var link = new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse("http:\/\/blog.naver.com\/dt3141592"));
ctx.startActivity(link);
}
catch(e){
clientMessage(e+", "+e.lineNumber)
}
}
}));
dialog.show();
}
catch(e){
ESP.sbm(e+", "+e.lineNumber);
}
}}));
}


function scriptVersionCheck(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var dialog = new android.app.AlertDialog.Builder(ctx,android.app.AlertDialog.THEME_HOLO_DARK);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var loadTxt = new android.webkit.WebView(ctx);
loadTxt.setWebChromeClient(new android.webkit.WebChromeClient());
loadTxt.setWebViewClient(new android.webkit.WebViewClient());
loadTxt.loadUrl("http:\/\/darktornado.dothome.co.kr\/000+\/ESP-SB.txt");
layout.addView(loadTxt);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("버전 확인");
dialog.setView(scroll);
dialog.setNegativeButton("닫기", null);
dialog.setPositiveButton("블로그로 이동", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
try{
blogDialog();
}
catch(e){
clientMessage(e+", "+e.lineNumber)
}
}
}));
dialog.show();
}
catch(e){
ESP.sbm(e+", "+e.lineNumber);
}
}}));
}


function makeBattleField6(){
for(var xx=113;xx<130;xx++){
for(var zz=-62;zz<-37;zz++){
for(var yy=29;yy<34;yy++)
setTile(xx, yy, zz, 3);
setTile(xx, 34, zz, 2);
}}
for(var xx=90;xx<107;xx++){
for(var zz=-46;zz<-29;zz++){
for(var yy=29;yy<34;yy++)
setTile(xx, yy, zz, 3);
setTile(xx, 34, zz, 2);
}}
for(var xx=53;xx<71;xx++){
for(var zz=-69;zz<-40;zz++){
for(var yy=29;yy<34;yy++)
setTile(xx, yy, zz, 3);
setTile(xx, 34, zz, 2);
}}
for(var xx=31;xx<48;xx++){
for(var zz=-65;zz<-48;zz++){
for(var yy=29;yy<34;yy++)
setTile(xx, yy, zz, 3);
setTile(xx, 34, zz, 2);
}}
for(var xx=37;xx<54;xx++){
for(var zz=-88;zz<-71;zz++){
for(var yy=29;yy<34;yy++)
setTile(xx, yy, zz, 3);
setTile(xx, 34, zz, 2);
}}
for(var xx=56;xx<73;xx++){
for(var zz=-90;zz<-73;zz++){
for(var yy=29;yy<34;yy++)
setTile(xx, yy, zz, 3);
setTile(xx, 34, zz, 2);
}}
for(var xx=76;xx<98;xx++){
for(var zz=-74;zz<-57;zz++){
for(var yy=29;yy<34;yy++)
setTile(xx, yy, zz, 3);
setTile(xx, 34, zz, 110);
}}
for(var xx=102;xx<127;xx++){
for(var zz=-93;zz<-76;zz++){
for(var yy=29;yy<34;yy++)
setTile(xx, yy, zz, 3);
setTile(xx, 34, zz, 243);
}}
for(var xx=75;xx<92;xx++)
for(var yy=29;yy<35;yy++)
for(var zz=-110;zz<-87;zz++)
setTile(xx, yy, zz, 121);
for(var xx=80;xx<83;xx++)
for(var yy=35;yy<44;yy++)
for(var zz=-96;zz<-93;zz++)
setTile(xx, yy, zz, 49);
setTile(81, 43, -95, 87);
for(var xx=49;xx<67;xx++)
for(var yy=29;yy<35;yy++)
for(var zz=-128;zz<-101;zz++)
setTile(xx, yy, zz, 87);
for(var xx=26;xx<42;xx++){
for(var zz=-108;zz<-91;zz++){
for(var yy=29;yy<32;yy++)
setTile(xx, yy, zz, 24);
for(var yy=32;yy<35;yy++)
setTile(xx, yy, zz, 12);
}}
for(var xx=103;xx<119;xx++){
for(var zz=-120;zz<-103;zz++){
for(var yy=29;yy<33;yy++)
setTile(xx, yy, zz, 3);
setTile(xx, 33, zz, 2);
setTile(xx, 34, zz, 78);
}}
setTile(29, 35, -101, 32);
setTile(31, 34, -63, 9);
setTile(31, 34, -54, 9);
setTile(31, 35, -97, 32);
setTile(31, 38, -61, 18);
setTile(31, 38, -60, 18);
setTile(31, 38, -59, 18);
setTile(31, 39, -61, 18);
setTile(31, 39, -60, 18);
setTile(31, 39, -59, 18);
setTile(31, 39, -58, 18);
setTile(32, 34, -64, 9);
setTile(32, 34, -63, 9);
setTile(32, 34, -62, 9);
setTile(32, 34, -61, 9);
setTile(32, 34, -59, 9);
setTile(32, 34, -58, 9);
setTile(32, 34, -57, 9);
setTile(32, 34, -56, 9);
setTile(32, 34, -55, 9);
setTile(32, 34, -54, 9);
setTile(32, 34, -52, 9);
setTile(32, 34, -50, 9);
setTile(32, 35, -104, 81);
setTile(32, 35, -60, 106, 8);
setTile(32, 36, -104, 81);
setTile(32, 36, -60, 106, 8);
setTile(32, 37, -104, 81);
setTile(32, 37, -60, 106, 8);
setTile(32, 38, -62, 18);
setTile(32, 38, -61, 18);
setTile(32, 38, -60, 18);
setTile(32, 38, -59, 18);
setTile(32, 38, -58, 18);
setTile(32, 38, -53, 18);
setTile(32, 38, -52, 18);
setTile(32, 38, -51, 18);
setTile(32, 38, -50, 18);
setTile(32, 39, -62, 18);
setTile(32, 39, -61, 18);
setTile(32, 39, -60, 18);
setTile(32, 39, -59, 18);
setTile(32, 39, -58, 18);
setTile(32, 39, -52, 18);
setTile(32, 39, -51, 18);
setTile(32, 39, -50, 18);
setTile(32, 39, -49, 18);
setTile(32, 40, -60, 18);
setTile(32, 40, -59, 18);
setTile(32, 41, -60, 18);
setTile(33, 34, -64, 9);
setTile(33, 34, -63, 9);
setTile(33, 34, -62, 9);
setTile(33, 34, -61, 9);
setTile(33, 34, -59, 9);
setTile(33, 34, -58, 9);
setTile(33, 34, -57, 9);
setTile(33, 34, -56, 9);
setTile(33, 34, -55, 9);
setTile(33, 34, -53, 9);
setTile(33, 34, -52, 9);
setTile(33, 34, -51, 9);
setTile(33, 34, -50, 9);
setTile(33, 35, -60, 17);
setTile(33, 35, -56, 111);
setTile(33, 36, -61, 106, 1);
setTile(33, 36, -60, 17);
setTile(33, 36, -59, 106, 4);
setTile(33, 36, -51, 106, 8);
setTile(33, 37, -61, 106, 1);
setTile(33, 37, -60, 17);
setTile(33, 37, -51, 106, 8);
setTile(33, 38, -62, 18);
setTile(33, 38, -61, 18);
setTile(33, 38, -60, 17);
setTile(33, 38, -59, 18);
setTile(33, 38, -58, 18);
setTile(33, 38, -53, 18);
setTile(33, 38, -52, 18);
setTile(33, 38, -51, 18);
setTile(33, 38, -50, 18);
setTile(33, 38, -49, 18);
setTile(33, 39, -62, 18);
setTile(33, 39, -61, 18);
setTile(33, 39, -60, 17);
setTile(33, 39, -59, 18);
setTile(33, 39, -58, 18);
setTile(33, 39, -53, 18);
setTile(33, 39, -52, 18);
setTile(33, 39, -51, 18);
setTile(33, 39, -50, 18);
setTile(33, 39, -49, 18);
setTile(33, 40, -61, 18);
setTile(33, 40, -60, 17);
setTile(33, 40, -59, 18);
setTile(33, 40, -52, 18);
setTile(33, 40, -51, 18);
setTile(33, 40, -50, 18);
setTile(33, 41, -61, 18);
setTile(33, 41, -60, 18);
setTile(33, 41, -59, 18);
setTile(33, 41, -51, 18);
setTile(34, 34, -64, 9);
setTile(34, 34, -62, 9);
setTile(34, 34, -61, 9);
setTile(34, 34, -60, 9);
setTile(34, 34, -59, 9);
setTile(34, 34, -56, 9);
setTile(34, 34, -55, 9);
setTile(34, 34, -54, 9);
setTile(34, 34, -53, 9);
setTile(34, 34, -52, 9);
setTile(34, 34, -50, 9);
setTile(34, 35, -97, 81);
setTile(34, 35, -60, 106, 2);
setTile(34, 35, -53, 111);
setTile(34, 35, -51, 17);
setTile(34, 35, -50, 106, 4);
setTile(34, 36, -97, 81, 10);
setTile(34, 36, -60, 106, 2);
setTile(34, 36, -52, 106, 1);
setTile(34, 36, -51, 17);
setTile(34, 36, -50, 106, 4);
setTile(34, 37, -52, 106, 1);
setTile(34, 37, -51, 17);
setTile(34, 37, -50, 106, 4);
setTile(34, 38, -62, 18);
setTile(34, 38, -61, 18);
setTile(34, 38, -60, 18);
setTile(34, 38, -59, 18);
setTile(34, 38, -58, 18);
setTile(34, 38, -53, 18);
setTile(34, 38, -52, 18);
setTile(34, 38, -51, 17);
setTile(34, 38, -50, 18);
setTile(34, 38, -49, 18);
setTile(34, 39, -62, 18);
setTile(34, 39, -61, 18);
setTile(34, 39, -60, 18);
setTile(34, 39, -59, 18);
setTile(34, 39, -58, 18);
setTile(34, 39, -53, 18);
setTile(34, 39, -52, 18);
setTile(34, 39, -51, 17);
setTile(34, 39, -50, 18);
setTile(34, 39, -49, 18);
setTile(34, 40, -60, 18);
setTile(34, 40, -59, 18);
setTile(34, 40, -52, 18);
setTile(34, 40, -51, 17);
setTile(34, 40, -50, 18);
setTile(34, 41, -60, 18);
setTile(34, 41, -52, 18);
setTile(34, 41, -51, 18);
setTile(34, 41, -50, 18);
setTile(35, 34, -64, 9);
setTile(35, 34, -63, 9);
setTile(35, 34, -62, 9);
setTile(35, 34, -60, 9);
setTile(35, 34, -58, 9);
setTile(35, 34, -56, 9);
setTile(35, 34, -55, 9);
setTile(35, 34, -54, 9);
setTile(35, 34, -51, 9);
setTile(35, 34, -50, 9);
setTile(35, 35, -106, 32);
setTile(35, 35, -55, 111);
setTile(35, 35, -51, 106, 2);
setTile(35, 36, -51, 106, 2);
setTile(35, 37, -51, 106, 2);
setTile(35, 38, -62, 18);
setTile(35, 38, -61, 18);
setTile(35, 38, -60, 18);
setTile(35, 38, -59, 18);
setTile(35, 38, -58, 18);
setTile(35, 38, -53, 18);
setTile(35, 38, -52, 18);
setTile(35, 38, -51, 18);
setTile(35, 38, -50, 18);
setTile(35, 38, -49, 18);
setTile(35, 39, -62, 18);
setTile(35, 39, -61, 18);
setTile(35, 39, -60, 18);
setTile(35, 39, -59, 18);
setTile(35, 39, -53, 18);
setTile(35, 39, -52, 18);
setTile(35, 39, -51, 18);
setTile(35, 39, -50, 18);
setTile(35, 39, -49, 18);
setTile(35, 40, -52, 18);
setTile(35, 40, -51, 18);
setTile(35, 41, -51, 18);
setTile(36, 34, -64, 9);
setTile(36, 34, -63, 9);
setTile(36, 34, -62, 9);
setTile(36, 34, -61, 9);
setTile(36, 34, -60, 9);
setTile(36, 34, -58, 9);
setTile(36, 34, -57, 9);
setTile(36, 34, -56, 9);
setTile(36, 34, -55, 9);
setTile(36, 34, -54, 9);
setTile(36, 34, -52, 9);
setTile(36, 34, -51, 9);
setTile(36, 34, -50, 9);
setTile(36, 35, -55, 111);
setTile(36, 38, -52, 18);
setTile(36, 38, -51, 18);
setTile(36, 38, -50, 18);
setTile(36, 38, -49, 18);
setTile(36, 39, -53, 18);
setTile(36, 39, -52, 18);
setTile(36, 39, -51, 18);
setTile(36, 39, -50, 18);
setTile(37, 34, -63, 9);
setTile(37, 34, -62, 9);
setTile(37, 34, -61, 9);
setTile(37, 34, -60, 9);
setTile(37, 34, -57, 9);
setTile(37, 34, -56, 9);
setTile(37, 34, -55, 9);
setTile(37, 34, -54, 9);
setTile(37, 34, -52, 9);
setTile(37, 34, -51, 9);
setTile(37, 35, -98, 32);
setTile(37, 35, -78, 37);
setTile(37, 35, -76, 31, 1);
setTile(37, 35, -74, 31, 1);
setTile(37, 35, -60, 111);
setTile(37, 35, -57, 111);
setTile(37, 35, -56, 111);
setTile(37, 39, -82, 18, 2);
setTile(37, 39, -81, 18, 2);
setTile(37, 39, -80, 18, 2);
setTile(37, 39, -79, 18, 2);
setTile(37, 39, -76, 18, 2);
setTile(37, 39, -75, 18, 2);
setTile(37, 39, -74, 18, 2);
setTile(37, 40, -82, 18, 2);
setTile(37, 40, -81, 18, 2);
setTile(37, 40, -80, 18, 2);
setTile(37, 40, -79, 18, 2);
setTile(37, 40, -77, 18, 2);
setTile(37, 40, -76, 18, 2);
setTile(37, 40, -75, 18, 2);
setTile(37, 40, -74, 18, 2);
setTile(38, 34, -65, 9);
setTile(38, 34, -64, 9);
setTile(38, 34, -63, 9);
setTile(38, 34, -62, 9);
setTile(38, 34, -61, 9);
setTile(38, 34, -60, 9);
setTile(38, 34, -59, 9);
setTile(38, 34, -58, 9);
setTile(38, 34, -57, 9);
setTile(38, 34, -56, 9);
setTile(38, 34, -55, 9);
setTile(38, 34, -53, 9);
setTile(38, 34, -52, 9);
setTile(38, 34, -50, 9);
setTile(38, 35, -77, 38);
setTile(38, 35, -76, 31, 2);
setTile(38, 35, -75, 31, 1);
setTile(38, 35, -74, 31, 1);
setTile(38, 35, -73, 31, 1);
setTile(38, 35, -72, 31, 1);
setTile(38, 35, -63, 111);
setTile(38, 35, -59, 111);
setTile(38, 35, -53, 111);
setTile(38, 36, -57, 18);
setTile(38, 36, -56, 18);
setTile(38, 36, -55, 18);
setTile(38, 36, -54, 18);
setTile(38, 37, -57, 18);
setTile(38, 37, -56, 18);
setTile(38, 37, -55, 18);
setTile(38, 39, -83, 18, 2);
setTile(38, 39, -82, 18, 2);
setTile(38, 39, -81, 18, 2);
setTile(38, 39, -80, 18, 2);
setTile(38, 39, -79, 18, 2);
setTile(38, 39, -77, 18, 2);
setTile(38, 39, -76, 18, 2);
setTile(38, 39, -75, 18, 2);
setTile(38, 39, -74, 18, 2);
setTile(38, 39, -73, 18, 2);
setTile(38, 40, -83, 18, 2);
setTile(38, 40, -82, 18, 2);
setTile(38, 40, -81, 18, 2);
setTile(38, 40, -80, 18, 2);
setTile(38, 40, -79, 18, 2);
setTile(38, 40, -77, 18, 2);
setTile(38, 40, -76, 18, 2);
setTile(38, 40, -75, 18, 2);
setTile(38, 40, -74, 18, 2);
setTile(38, 40, -73, 18, 2);
setTile(38, 41, -82, 18, 2);
setTile(38, 41, -81, 18, 2);
setTile(38, 41, -80, 18, 2);
setTile(38, 41, -76, 18, 2);
setTile(38, 41, -75, 18, 2);
setTile(38, 42, -81, 18, 2);
setTile(38, 42, -75, 18, 2);
setTile(39, 34, -64, 9);
setTile(39, 34, -63, 9);
setTile(39, 34, -61, 9);
setTile(39, 34, -60, 9);
setTile(39, 34, -59, 9);
setTile(39, 34, -57, 9);
setTile(39, 34, -56, 9);
setTile(39, 34, -55, 9);
setTile(39, 34, -54, 9);
setTile(39, 34, -52, 9);
setTile(39, 34, -51, 9);
setTile(39, 34, -50, 9);
setTile(39, 35, -105, 81);
setTile(39, 35, -101, 32);
setTile(39, 35, -81, 17, 2);
setTile(39, 35, -77, 31, 2);
setTile(39, 35, -76, 31, 2);
setTile(39, 35, -75, 17, 2);
setTile(39, 35, -74, 31, 2);
setTile(39, 35, -73, 31, 2);
setTile(39, 35, -72, 175, 2);
setTile(39, 35, -56, 106, 8);
setTile(39, 35, -51, 111);
setTile(39, 36, -105, 81);
setTile(39, 36, -81, 17, 2);
setTile(39, 36, -75, 17, 2);
setTile(39, 36, -72, 175, 8);
setTile(39, 36, -58, 18);
setTile(39, 36, -57, 18);
setTile(39, 36, -56, 18);
setTile(39, 36, -55, 18);
setTile(39, 36, -54, 18);
setTile(39, 37, -105, 81);
setTile(39, 37, -81, 17, 2);
setTile(39, 37, -75, 17, 2);
setTile(39, 37, -58, 18);
setTile(39, 37, -57, 18);
setTile(39, 37, -56, 18);
setTile(39, 37, -55, 18);
setTile(39, 37, -54, 18);
setTile(39, 38, -81, 17, 2);
setTile(39, 38, -79, 18, 2);
setTile(39, 38, -78, 18, 2);
setTile(39, 38, -77, 18, 2);
setTile(39, 38, -76, 18, 2);
setTile(39, 38, -75, 17, 2);
setTile(39, 38, -57, 18);
setTile(39, 38, -56, 18);
setTile(39, 39, -83, 18, 2);
setTile(39, 39, -82, 18, 2);
setTile(39, 39, -81, 17, 2);
setTile(39, 39, -80, 18, 2);
setTile(39, 39, -79, 18, 2);
setTile(39, 39, -78, 18, 2);
setTile(39, 39, -77, 18, 2);
setTile(39, 39, -76, 18, 2);
setTile(39, 39, -75, 17, 2);
setTile(39, 39, -74, 18, 2);
setTile(39, 39, -73, 18, 2);
setTile(39, 39, -56, 18);
setTile(39, 40, -83, 18, 2);
setTile(39, 40, -82, 18, 2);
setTile(39, 40, -81, 17, 2);
setTile(39, 40, -80, 18, 2);
setTile(39, 40, -79, 18, 2);
setTile(39, 40, -77, 18, 2);
setTile(39, 40, -76, 18, 2);
setTile(39, 40, -75, 17, 2);
setTile(39, 40, -74, 18, 2);
setTile(39, 40, -73, 18, 2);
setTile(39, 41, -82, 18, 2);
setTile(39, 41, -81, 17, 2);
setTile(39, 41, -80, 18, 2);
setTile(39, 41, -76, 18, 2);
setTile(39, 41, -75, 17, 2);
setTile(39, 41, -74, 18, 2);
setTile(39, 42, -82, 18, 2);
setTile(39, 42, -81, 18, 2);
setTile(39, 42, -80, 18, 2);
setTile(39, 42, -76, 18, 2);
setTile(39, 42, -75, 18, 2);
setTile(39, 42, -74, 18, 2);
setTile(40, 34, -64, 9);
setTile(40, 34, -63, 9);
setTile(40, 34, -62, 9);
setTile(40, 34, -61, 9);
setTile(40, 34, -59, 9);
setTile(40, 34, -58, 9);
setTile(40, 34, -57, 9);
setTile(40, 34, -55, 9);
setTile(40, 34, -54, 9);
setTile(40, 34, -53, 9);
setTile(40, 34, -52, 9);
setTile(40, 34, -51, 9);
setTile(40, 34, -50, 9);
setTile(40, 34, -49, 8);
setTile(40, 35, -77, 31, 1);
setTile(40, 35, -75, 31, 1);
setTile(40, 35, -74, 37);
setTile(40, 35, -73, 31, 1);
setTile(40, 35, -72, 31, 1);
setTile(40, 35, -57, 106, 1);
setTile(40, 35, -56, 17);
setTile(40, 35, -54, 111);
setTile(40, 35, -52, 111);
setTile(40, 36, -58, 18);
setTile(40, 36, -57, 18);
setTile(40, 36, -56, 17);
setTile(40, 36, -55, 18);
setTile(40, 36, -54, 18);
setTile(40, 37, -58, 18);
setTile(40, 37, -57, 18);
setTile(40, 37, -56, 17);
setTile(40, 37, -55, 18);
setTile(40, 37, -54, 18);
setTile(40, 38, -79, 18, 2);
setTile(40, 38, -78, 18, 2);
setTile(40, 38, -77, 18, 2);
setTile(40, 38, -76, 18, 2);
setTile(40, 38, -75, 18, 2);
setTile(40, 38, -57, 18);
setTile(40, 38, -56, 17);
setTile(40, 38, -55, 18);
setTile(40, 39, -86, 18, 2);
setTile(40, 39, -85, 18, 2);
setTile(40, 39, -84, 18, 2);
setTile(40, 39, -83, 18, 2);
setTile(40, 39, -82, 18, 2);
setTile(40, 39, -81, 18, 2);
setTile(40, 39, -80, 18, 2);
setTile(40, 39, -79, 18, 2);
setTile(40, 39, -78, 18, 2);
setTile(40, 39, -77, 18, 2);
setTile(40, 39, -76, 18, 2);
setTile(40, 39, -75, 18, 2);
setTile(40, 39, -74, 18, 2);
setTile(40, 39, -73, 18, 2);
setTile(40, 39, -57, 18);
setTile(40, 39, -56, 18);
setTile(40, 39, -55, 18);
setTile(40, 40, -87, 18, 2);
setTile(40, 40, -86, 18, 2);
setTile(40, 40, -85, 18, 2);
setTile(40, 40, -84, 18, 2);
setTile(40, 40, -83, 18, 2);
setTile(40, 40, -82, 18, 2);
setTile(40, 40, -81, 18, 2);
setTile(40, 40, -80, 18, 2);
setTile(40, 40, -79, 18, 2);
setTile(40, 40, -78, 18, 2);
setTile(40, 40, -77, 18, 2);
setTile(40, 40, -76, 18, 2);
setTile(40, 40, -75, 18, 2);
setTile(40, 40, -74, 18, 2);
setTile(40, 40, -73, 18, 2);
setTile(40, 41, -81, 18, 2);
setTile(40, 41, -77, 18, 2);
setTile(40, 41, -75, 18, 2);
setTile(40, 42, -81, 18, 2);
setTile(40, 42, -75, 18, 2);
setTile(41, 34, -91, 44);
setTile(41, 34, -90, 44);
setTile(41, 34, -89, 44);
setTile(41, 34, -64, 9);
setTile(41, 34, -63, 9);
setTile(41, 34, -62, 9);
setTile(41, 34, -60, 9);
setTile(41, 34, -59, 9);
setTile(41, 34, -58, 9);
setTile(41, 34, -57, 9);
setTile(41, 34, -56, 9);
setTile(41, 34, -55, 9);
setTile(41, 34, -54, 9);
setTile(41, 34, -53, 9);
setTile(41, 34, -52, 9);
setTile(41, 34, -51, 9);
setTile(41, 34, -50, 9);
setTile(41, 35, -77, 17, 2);
setTile(41, 35, -74, 31, 1);
setTile(41, 35, -63, 111);
setTile(41, 35, -52, 111);
setTile(41, 36, -77, 17, 2);
setTile(41, 36, -58, 18);
setTile(41, 36, -57, 18);
setTile(41, 36, -56, 18);
setTile(41, 36, -55, 18);
setTile(41, 36, -54, 18);
setTile(41, 37, -77, 17, 2);
setTile(41, 37, -58, 18);
setTile(41, 37, -57, 18);
setTile(41, 37, -56, 18);
setTile(41, 37, -55, 18);
setTile(41, 37, -54, 18);
setTile(41, 38, -79, 18, 2);
setTile(41, 38, -78, 18, 2);
setTile(41, 38, -77, 17, 2);
setTile(41, 38, -76, 18, 2);
setTile(41, 38, -75, 18, 2);
setTile(41, 38, -56, 18);
setTile(41, 39, -87, 18, 2);
setTile(41, 39, -86, 18, 2);
setTile(41, 39, -85, 18, 2);
setTile(41, 39, -84, 18, 2);
setTile(41, 39, -83, 18, 2);
setTile(41, 39, -82, 18, 2);
setTile(41, 39, -81, 18, 2);
setTile(41, 39, -80, 18, 2);
setTile(41, 39, -79, 18, 2);
setTile(41, 39, -78, 18, 2);
setTile(41, 39, -77, 17, 2);
setTile(41, 39, -76, 18, 2);
setTile(41, 39, -75, 18, 2);
setTile(41, 39, -74, 18, 2);
setTile(41, 39, -56, 18);
setTile(41, 40, -87, 18, 2);
setTile(41, 40, -86, 18, 2);
setTile(41, 40, -85, 18, 2);
setTile(41, 40, -84, 18, 2);
setTile(41, 40, -83, 18, 2);
setTile(41, 40, -82, 18, 2);
setTile(41, 40, -81, 18, 2);
setTile(41, 40, -80, 18, 2);
setTile(41, 40, -78, 18, 2);
setTile(41, 40, -77, 17, 2);
setTile(41, 40, -76, 18, 2);
setTile(41, 40, -75, 18, 2);
setTile(41, 40, -74, 18, 2);
setTile(41, 41, -86, 18, 2);
setTile(41, 41, -85, 18, 2);
setTile(41, 41, -84, 18, 2);
setTile(41, 41, -78, 18, 2);
setTile(41, 41, -77, 18, 2);
setTile(41, 41, -76, 18, 2);
setTile(41, 42, -85, 18, 2);
setTile(42, 34, -91, 44);
setTile(42, 34, -90, 44);
setTile(42, 34, -89, 44);
setTile(42, 34, -64, 9);
setTile(42, 34, -63, 9);
setTile(42, 34, -62, 9);
setTile(42, 34, -59, 9);
setTile(42, 34, -58, 9);
setTile(42, 34, -57, 9);
setTile(42, 34, -56, 9);
setTile(42, 34, -55, 9);
setTile(42, 34, -54, 9);
setTile(42, 34, -53, 9);
setTile(42, 34, -52, 9);
setTile(42, 34, -51, 9);
setTile(42, 34, -50, 9);
setTile(42, 35, -85, 17, 2);
setTile(42, 35, -84, 31, 2);
setTile(42, 35, -83, 31, 1);
setTile(42, 35, -82, 31, 1);
setTile(42, 35, -81, 31, 1);
setTile(42, 35, -79, 31, 1);
setTile(42, 35, -78, 31, 1);
setTile(42, 35, -77, 31, 1);
setTile(42, 35, -76, 37);
setTile(42, 35, -75, 37);
setTile(42, 35, -52, 111);
setTile(42, 36, -85, 17, 2);
setTile(42, 36, -57, 18);
setTile(42, 36, -56, 18);
setTile(42, 36, -55, 18);
setTile(42, 37, -85, 17, 2);
setTile(42, 37, -77, 18, 2);
setTile(42, 37, -76, 18, 2);
setTile(42, 37, -75, 18, 2);
setTile(42, 37, -74, 18, 2);
setTile(42, 37, -73, 18, 2);
setTile(42, 37, -58, 18);
setTile(42, 37, -57, 18);
setTile(42, 37, -56, 18);
setTile(42, 37, -55, 18);
setTile(42, 37, -54, 18);
setTile(42, 38, -85, 17, 2);
setTile(42, 38, -79, 18, 2);
setTile(42, 38, -78, 18, 2);
setTile(42, 38, -77, 18, 2);
setTile(42, 38, -76, 18, 2);
setTile(42, 38, -75, 18, 2);
setTile(42, 38, -74, 18, 2);
setTile(42, 38, -73, 18, 2);
setTile(42, 39, -87, 18, 2);
setTile(42, 39, -86, 18, 2);
setTile(42, 39, -85, 17, 2);
setTile(42, 39, -84, 18, 2);
setTile(42, 39, -83, 18, 2);
setTile(42, 39, -82, 18, 2);
setTile(42, 39, -81, 18, 2);
setTile(42, 39, -80, 18, 2);
setTile(42, 39, -79, 18, 2);
setTile(42, 39, -78, 18, 2);
setTile(42, 39, -77, 18, 2);
setTile(42, 39, -76, 18, 2);
setTile(42, 39, -75, 18, 2);
setTile(42, 40, -87, 18, 2);
setTile(42, 40, -86, 18, 2);
setTile(42, 40, -85, 17, 2);
setTile(42, 40, -84, 18, 2);
setTile(42, 40, -83, 18, 2);
setTile(42, 40, -81, 18, 2);
setTile(42, 40, -80, 18, 2);
setTile(42, 40, -79, 18, 2);
setTile(42, 40, -78, 18, 2);
setTile(42, 40, -77, 18, 2);
setTile(42, 40, -76, 18, 2);
setTile(42, 41, -86, 18, 2);
setTile(42, 41, -85, 17, 2);
setTile(42, 41, -84, 18, 2);
setTile(42, 41, -77, 18, 2);
setTile(42, 42, -86, 18, 2);
setTile(42, 42, -85, 18, 2);
setTile(42, 42, -84, 18, 2);
setTile(43, 34, -108, 44);
setTile(43, 34, -107, 44);
setTile(43, 34, -64, 9);
setTile(43, 34, -60, 9);
setTile(43, 34, -59, 9);
setTile(43, 34, -57, 9);
setTile(43, 34, -55, 9);
setTile(43, 34, -53, 9);
setTile(43, 34, -52, 9);
setTile(43, 34, -51, 9);
setTile(43, 34, -50, 9);
setTile(43, 35, -85, 37);
setTile(43, 35, -84, 31, 1);
setTile(43, 35, -83, 38);
setTile(43, 35, -82, 175, 2);
setTile(43, 35, -80, 31, 1);
setTile(43, 35, -78, 31, 1);
setTile(43, 35, -77, 31, 1);
setTile(43, 35, -76, 38);
setTile(43, 36, -82, 175, 8);
setTile(43, 37, -77, 18, 2);
setTile(43, 37, -76, 18, 2);
setTile(43, 37, -75, 18, 2);
setTile(43, 37, -74, 18, 2);
setTile(43, 37, -73, 18, 2);
setTile(43, 38, -79, 18, 2);
setTile(43, 38, -78, 18, 2);
setTile(43, 38, -77, 18, 2);
setTile(43, 38, -76, 18, 2);
setTile(43, 38, -75, 18, 2);
setTile(43, 38, -74, 18, 2);
setTile(43, 38, -73, 18, 2);
setTile(43, 39, -87, 18, 2);
setTile(43, 39, -86, 18, 2);
setTile(43, 39, -85, 18, 2);
setTile(43, 39, -84, 18, 2);
setTile(43, 39, -83, 18, 2);
setTile(43, 39, -82, 18, 2);
setTile(43, 39, -81, 18, 2);
setTile(43, 39, -80, 18, 2);
setTile(43, 39, -79, 18, 2);
setTile(43, 39, -78, 18, 2);
setTile(43, 39, -77, 18, 2);
setTile(43, 39, -76, 18, 2);
setTile(43, 39, -75, 18, 2);
setTile(43, 39, -74, 18, 2);
setTile(43, 40, -87, 18, 2);
setTile(43, 40, -86, 18, 2);
setTile(43, 40, -85, 18, 2);
setTile(43, 40, -84, 18, 2);
setTile(43, 40, -83, 18, 2);
setTile(43, 40, -82, 18, 2);
setTile(43, 40, -81, 18, 2);
setTile(43, 40, -80, 18, 2);
setTile(43, 40, -79, 18, 2);
setTile(43, 40, -78, 18, 2);
setTile(43, 40, -75, 18, 2);
setTile(43, 41, -85, 18, 2);
setTile(43, 41, -84, 18, 2);
setTile(43, 41, -81, 18, 2);
setTile(43, 41, -80, 18, 2);
setTile(43, 41, -79, 18, 2);
setTile(43, 42, -85, 18, 2);
setTile(43, 42, -80, 18, 2);
setTile(44, 34, -108, 44);
setTile(44, 34, -107, 44);
setTile(44, 34, -64, 9);
setTile(44, 34, -62, 9);
setTile(44, 34, -61, 9);
setTile(44, 34, -60, 9);
setTile(44, 34, -59, 9);
setTile(44, 34, -58, 9);
setTile(44, 34, -57, 9);
setTile(44, 34, -56, 9);
setTile(44, 34, -55, 9);
setTile(44, 34, -54, 9);
setTile(44, 34, -53, 9);
setTile(44, 34, -51, 9);
setTile(44, 34, -50, 9);
setTile(44, 35, -85, 31, 1);
setTile(44, 35, -84, 31, 1);
setTile(44, 35, -83, 37);
setTile(44, 35, -82, 37);
setTile(44, 35, -81, 31, 1);
setTile(44, 35, -80, 17, 2);
setTile(44, 35, -78, 31, 1);
setTile(44, 35, -77, 31, 1);
setTile(44, 35, -76, 31, 1);
setTile(44, 35, -75, 17, 2);
setTile(44, 35, -62, 111);
setTile(44, 35, -53, 111);
setTile(44, 36, -80, 17, 2);
setTile(44, 36, -75, 17, 2);
setTile(44, 37, -80, 17, 2);
setTile(44, 37, -77, 18, 2);
setTile(44, 37, -76, 18, 2);
setTile(44, 37, -75, 17, 2);
setTile(44, 37, -74, 18, 2);
setTile(44, 37, -73, 18, 2);
setTile(44, 38, -80, 17, 2);
setTile(44, 38, -77, 18, 2);
setTile(44, 38, -76, 18, 2);
setTile(44, 38, -75, 17, 2);
setTile(44, 38, -74, 18, 2);
setTile(44, 38, -73, 18, 2);
setTile(44, 39, -87, 18, 2);
setTile(44, 39, -86, 18, 2);
setTile(44, 39, -85, 18, 2);
setTile(44, 39, -84, 18, 2);
setTile(44, 39, -83, 18, 2);
setTile(44, 39, -82, 18, 2);
setTile(44, 39, -81, 18, 2);
setTile(44, 39, -80, 17, 2);
setTile(44, 39, -79, 18, 2);
setTile(44, 39, -78, 18, 2);
setTile(44, 39, -76, 18, 2);
setTile(44, 39, -75, 17, 2);
setTile(44, 39, -74, 18, 2);
setTile(44, 40, -86, 18, 2);
setTile(44, 40, -85, 18, 2);
setTile(44, 40, -84, 18, 2);
setTile(44, 40, -83, 18, 2);
setTile(44, 40, -82, 18, 2);
setTile(44, 40, -81, 18, 2);
setTile(44, 40, -80, 17, 2);
setTile(44, 40, -79, 18, 2);
setTile(44, 40, -78, 18, 2);
setTile(44, 40, -76, 18, 2);
setTile(44, 40, -75, 18, 2);
setTile(44, 40, -74, 18, 2);
setTile(44, 41, -81, 18, 2);
setTile(44, 41, -80, 17, 2);
setTile(44, 41, -79, 18, 2);
setTile(44, 42, -81, 18, 2);
setTile(44, 42, -80, 18, 2);
setTile(44, 42, -79, 18, 2);
setTile(45, 34, -108, 44);
setTile(45, 34, -107, 44);
setTile(45, 34, -64, 9);
setTile(45, 34, -63, 9);
setTile(45, 34, -62, 9);
setTile(45, 34, -61, 9);
setTile(45, 34, -60, 9);
setTile(45, 34, -59, 9);
setTile(45, 34, -58, 9);
setTile(45, 34, -57, 9);
setTile(45, 34, -55, 9);
setTile(45, 34, -54, 9);
setTile(45, 34, -53, 9);
setTile(45, 34, -52, 9);
setTile(45, 34, -51, 9);
setTile(45, 34, -50, 9);
setTile(45, 35, -86, 31, 1);
setTile(45, 35, -85, 31, 1);
setTile(45, 35, -84, 38);
setTile(45, 35, -83, 31, 1);
setTile(45, 35, -82, 31, 1);
setTile(45, 35, -79, 31, 1);
setTile(45, 35, -78, 38);
setTile(45, 35, -77, 175, 2);
setTile(45, 35, -76, 31, 1);
setTile(45, 35, -55, 111);
setTile(45, 35, -52, 111);
setTile(45, 36, -77, 175, 8);
setTile(45, 37, -77, 18, 2);
setTile(45, 37, -76, 18, 2);
setTile(45, 37, -75, 18, 2);
setTile(45, 37, -74, 18, 2);
setTile(45, 37, -73, 18, 2);
setTile(45, 38, -77, 18, 2);
setTile(45, 38, -76, 18, 2);
setTile(45, 38, -75, 18, 2);
setTile(45, 38, -74, 18, 2);
setTile(45, 38, -73, 18, 2);
setTile(45, 39, -82, 18, 2);
setTile(45, 39, -81, 18, 2);
setTile(45, 39, -80, 18, 2);
setTile(45, 39, -79, 18, 2);
setTile(45, 39, -78, 18, 2);
setTile(45, 39, -76, 18, 2);
setTile(45, 39, -75, 18, 2);
setTile(45, 39, -74, 18, 2);
setTile(45, 40, -82, 18, 2);
setTile(45, 40, -81, 18, 2);
setTile(45, 40, -80, 18, 2);
setTile(45, 40, -79, 18, 2);
setTile(45, 40, -78, 18, 2);
setTile(45, 40, -75, 18, 2);
setTile(45, 41, -81, 18, 2);
setTile(45, 41, -80, 18, 2);
setTile(45, 42, -80, 18, 2);
setTile(46, 34, -108, 44);
setTile(46, 34, -107, 44);
setTile(46, 34, -64, 9);
setTile(46, 34, -63, 9);
setTile(46, 34, -62, 9);
setTile(46, 34, -59, 9);
setTile(46, 34, -58, 9);
setTile(46, 34, -57, 9);
setTile(46, 34, -56, 9);
setTile(46, 34, -55, 9);
setTile(46, 34, -54, 9);
setTile(46, 34, -53, 9);
setTile(46, 34, -52, 9);
setTile(46, 34, -51, 9);
setTile(46, 34, -50, 9);
setTile(46, 35, -86, 31, 1);
setTile(46, 35, -85, 31, 1);
setTile(46, 35, -84, 31, 2);
setTile(46, 35, -83, 31, 1);
setTile(46, 37, -76, 18, 2);
setTile(46, 37, -75, 18, 2);
setTile(46, 37, -74, 18, 2);
setTile(46, 38, -76, 18, 2);
setTile(46, 38, -75, 18, 2);
setTile(46, 38, -74, 18, 2);
setTile(46, 39, -81, 18, 2);
setTile(46, 39, -80, 18, 2);
setTile(46, 39, -79, 18, 2);
setTile(46, 39, -78, 18, 2);
setTile(46, 40, -81, 18, 2);
setTile(46, 40, -80, 18, 2);
setTile(46, 40, -79, 18, 2);
setTile(47, 34, -108, 44);
setTile(47, 34, -107, 44);
setTile(47, 34, -63, 8);
setTile(47, 34, -53, 8);
setTile(47, 35, -86, 31, 1);
setTile(47, 35, -85, 31, 1);
setTile(47, 35, -84, 31, 1);
setTile(47, 35, -83, 31, 1);
setTile(47, 35, -81, 31, 1);
setTile(47, 35, -79, 37);
setTile(47, 38, -81, 18, 2);
setTile(47, 38, -80, 18, 2);
setTile(47, 38, -79, 18, 2);
setTile(47, 38, -78, 18, 2);
setTile(47, 39, -81, 18, 2);
setTile(47, 39, -80, 18, 2);
setTile(47, 39, -79, 18, 2);
setTile(47, 39, -78, 18, 2);
setTile(47, 39, -77, 18, 2);
setTile(48, 34, -108, 44);
setTile(48, 34, -107, 44);
setTile(48, 35, -86, 31, 1);
setTile(48, 35, -85, 31, 1);
setTile(48, 35, -84, 31, 1);
setTile(48, 35, -83, 31, 1);
setTile(48, 35, -82, 31, 1);
setTile(48, 35, -81, 31, 1);
setTile(48, 35, -79, 38);
setTile(48, 37, -76, 18, 2);
setTile(48, 37, -75, 18, 2);
setTile(48, 37, -74, 18, 2);
setTile(48, 37, -73, 18, 2);
setTile(48, 38, -81, 18, 2);
setTile(48, 38, -80, 18, 2);
setTile(48, 38, -79, 18, 2);
setTile(48, 38, -78, 18, 2);
setTile(48, 38, -77, 18, 2);
setTile(48, 38, -76, 18, 2);
setTile(48, 38, -75, 18, 2);
setTile(48, 38, -74, 18, 2);
setTile(48, 38, -73, 18, 2);
setTile(48, 38, -72, 18, 2);
setTile(48, 39, -87, 18, 2);
setTile(48, 39, -86, 18, 2);
setTile(48, 39, -85, 18, 2);
setTile(48, 39, -81, 18, 2);
setTile(48, 39, -80, 18, 2);
setTile(48, 39, -79, 18, 2);
setTile(48, 39, -78, 18, 2);
setTile(48, 39, -77, 18, 2);
setTile(48, 40, -88, 18, 2);
setTile(48, 40, -87, 18, 2);
setTile(48, 40, -86, 18, 2);
setTile(48, 40, -85, 18, 2);
setTile(48, 40, -79, 18, 2);
setTile(48, 41, -79, 18, 2);
setTile(49, 35, -86, 31, 1);
setTile(49, 35, -84, 31, 1);
setTile(49, 35, -83, 31, 1);
setTile(49, 35, -82, 31, 1);
setTile(49, 35, -81, 31, 2);
setTile(49, 35, -80, 31, 1);
setTile(49, 35, -79, 17, 2);
setTile(49, 35, -75, 38);
setTile(49, 35, -72, 31, 1);
setTile(49, 36, -79, 17, 2);
setTile(49, 37, -79, 17, 2);
setTile(49, 37, -76, 18, 2);
setTile(49, 37, -75, 18, 2);
setTile(49, 37, -74, 18, 2);
setTile(49, 37, -73, 18, 2);
setTile(49, 37, -72, 18, 2);
setTile(49, 38, -81, 18, 2);
setTile(49, 38, -80, 18, 2);
setTile(49, 38, -79, 17, 2);
setTile(49, 38, -78, 18, 2);
setTile(49, 38, -77, 18, 2);
setTile(49, 38, -76, 18, 2);
setTile(49, 38, -75, 18, 2);
setTile(49, 38, -74, 18, 2);
setTile(49, 38, -73, 18, 2);
setTile(49, 38, -72, 18, 2);
setTile(49, 39, -88, 18, 2);
setTile(49, 39, -87, 18, 2);
setTile(49, 39, -86, 18, 2);
setTile(49, 39, -85, 18, 2);
setTile(49, 39, -84, 18, 2);
setTile(49, 39, -81, 18, 2);
setTile(49, 39, -80, 18, 2);
setTile(49, 39, -79, 17, 2);
setTile(49, 39, -78, 18, 2);
setTile(49, 39, -77, 18, 2);
setTile(49, 39, -75, 18, 2);
setTile(49, 39, -74, 18, 2);
setTile(49, 40, -88, 18, 2);
setTile(49, 40, -87, 18, 2);
setTile(49, 40, -86, 18, 2);
setTile(49, 40, -85, 18, 2);
setTile(49, 40, -84, 18, 2);
setTile(49, 40, -80, 18, 2);
setTile(49, 40, -79, 17, 2);
setTile(49, 40, -78, 18, 2);
setTile(49, 40, -74, 18, 2);
setTile(49, 41, -87, 18, 2);
setTile(49, 41, -86, 18, 2);
setTile(49, 41, -80, 18, 2);
setTile(49, 41, -79, 18, 2);
setTile(49, 41, -78, 18, 2);
setTile(49, 42, -86, 18, 2);
setTile(50, 35, -114, 11, 6);
setTile(50, 35, -86, 17, 2);
setTile(50, 35, -82, 31, 1);
setTile(50, 35, -81, 31, 2);
setTile(50, 35, -80, 37);
setTile(50, 35, -79, 31, 1);
setTile(50, 35, -74, 17, 2);
setTile(50, 35, -72, 31, 1);
setTile(50, 36, -86, 17, 2);
setTile(50, 36, -74, 17, 2);
setTile(50, 37, -86, 17, 2);
setTile(50, 37, -76, 18, 2);
setTile(50, 37, -75, 18, 2);
setTile(50, 37, -74, 17, 2);
setTile(50, 37, -73, 18, 2);
setTile(50, 37, -72, 18, 2);
setTile(50, 38, -86, 17, 2);
setTile(50, 38, -81, 18, 2);
setTile(50, 38, -80, 18, 2);
setTile(50, 38, -79, 18, 2);
setTile(50, 38, -78, 18, 2);
setTile(50, 38, -77, 18, 2);
setTile(50, 38, -76, 18, 2);
setTile(50, 38, -75, 18, 2);
setTile(50, 38, -74, 17, 2);
setTile(50, 38, -73, 18, 2);
setTile(50, 38, -72, 18, 2);
setTile(50, 39, -88, 18, 2);
setTile(50, 39, -87, 18, 2);
setTile(50, 39, -86, 17, 2);
setTile(50, 39, -85, 18, 2);
setTile(50, 39, -84, 18, 2);
setTile(50, 39, -81, 18, 2);
setTile(50, 39, -80, 18, 2);
setTile(50, 39, -79, 18, 2);
setTile(50, 39, -78, 18, 2);
setTile(50, 39, -77, 18, 2);
setTile(50, 39, -75, 18, 2);
setTile(50, 39, -74, 17, 2);
setTile(50, 39, -73, 18, 2);
setTile(50, 40, -88, 18, 2);
setTile(50, 40, -87, 18, 2);
setTile(50, 40, -86, 17, 2);
setTile(50, 40, -85, 18, 2);
setTile(50, 40, -84, 18, 2);
setTile(50, 40, -80, 18, 2);
setTile(50, 40, -79, 18, 2);
setTile(50, 40, -78, 18, 2);
setTile(50, 40, -75, 18, 2);
setTile(50, 40, -74, 18, 2);
setTile(50, 40, -73, 18, 2);
setTile(50, 41, -87, 18, 2);
setTile(50, 41, -86, 17, 2);
setTile(50, 41, -85, 18, 2);
setTile(50, 41, -79, 18, 2);
setTile(50, 42, -87, 18, 2);
setTile(50, 42, -86, 18, 2);
setTile(50, 42, -85, 18, 2);
setTile(51, 35, -114, 11, 4);
setTile(51, 35, -113, 11, 6);
setTile(51, 35, -112, 89);
setTile(51, 35, -82, 31, 1);
setTile(51, 35, -81, 31, 1);
setTile(51, 35, -80, 31, 1);
setTile(51, 35, -76, 31, 2);
setTile(51, 35, -75, 31, 1);
setTile(51, 35, -74, 31, 1);
setTile(51, 35, -73, 31, 1);
setTile(51, 37, -76, 18, 2);
setTile(51, 37, -75, 18, 2);
setTile(51, 37, -74, 18, 2);
setTile(51, 37, -73, 18, 2);
setTile(51, 37, -72, 18, 2);
setTile(51, 38, -81, 18, 2);
setTile(51, 38, -80, 18, 2);
setTile(51, 38, -79, 18, 2);
setTile(51, 38, -78, 18, 2);
setTile(51, 38, -77, 18, 2);
setTile(51, 38, -76, 18, 2);
setTile(51, 38, -75, 18, 2);
setTile(51, 38, -74, 18, 2);
setTile(51, 38, -73, 18, 2);
setTile(51, 38, -72, 18, 2);
setTile(51, 39, -88, 18, 2);
setTile(51, 39, -87, 18, 2);
setTile(51, 39, -86, 18, 2);
setTile(51, 39, -85, 18, 2);
setTile(51, 39, -84, 18, 2);
setTile(51, 39, -83, 18, 2);
setTile(51, 39, -82, 18, 2);
setTile(51, 39, -81, 18, 2);
setTile(51, 39, -80, 18, 2);
setTile(51, 39, -79, 18, 2);
setTile(51, 39, -78, 18, 2);
setTile(51, 39, -75, 18, 2);
setTile(51, 39, -74, 18, 2);
setTile(51, 40, -88, 18, 2);
setTile(51, 40, -87, 18, 2);
setTile(51, 40, -86, 18, 2);
setTile(51, 40, -85, 18, 2);
setTile(51, 40, -84, 18, 2);
setTile(51, 40, -83, 18, 2);
setTile(51, 40, -82, 18, 2);
setTile(51, 40, -81, 18, 2);
setTile(51, 40, -80, 18, 2);
setTile(51, 40, -74, 18, 2);
setTile(51, 41, -86, 18, 2);
setTile(51, 42, -86, 18, 2);
setTile(52, 34, -101, 44);
setTile(52, 34, -100, 44);
setTile(52, 34, -99, 44);
setTile(52, 34, -98, 44);
setTile(52, 34, -97, 44);
setTile(52, 34, -96, 44);
setTile(52, 34, -95, 44);
setTile(52, 34, -94, 44);
setTile(52, 34, -93, 44);
setTile(52, 34, -92, 44);
setTile(52, 34, -91, 44);
setTile(52, 34, -90, 44);
setTile(52, 34, -89, 44);
setTile(52, 35, -114, 11, 2);
setTile(52, 35, -113, 11, 4);
setTile(52, 35, -112, 89);
setTile(52, 35, -111, 89);
setTile(52, 35, -82, 31, 1);
setTile(52, 35, -81, 31, 1);
setTile(52, 35, -80, 31, 2);
setTile(52, 35, -79, 31, 1);
setTile(52, 35, -75, 31, 1);
setTile(52, 35, -74, 31, 1);
setTile(52, 35, -73, 31, 1);
setTile(52, 36, -51, 18);
setTile(52, 36, -50, 18);
setTile(52, 36, -49, 18);
setTile(52, 37, -76, 18, 2);
setTile(52, 37, -75, 18, 2);
setTile(52, 37, -74, 18, 2);
setTile(52, 37, -73, 18, 2);
setTile(52, 37, -72, 18, 2);
setTile(52, 37, -52, 18);
setTile(52, 37, -51, 18);
setTile(52, 37, -50, 18);
setTile(52, 37, -49, 18);
setTile(52, 38, -76, 18, 2);
setTile(52, 38, -75, 18, 2);
setTile(52, 38, -74, 18, 2);
setTile(52, 38, -73, 18, 2);
setTile(52, 38, -72, 18, 2);
setTile(52, 39, -87, 18, 2);
setTile(52, 39, -86, 18, 2);
setTile(52, 39, -85, 18, 2);
setTile(52, 39, -84, 18, 2);
setTile(52, 39, -83, 18, 2);
setTile(52, 39, -82, 18, 2);
setTile(52, 39, -81, 18, 2);
setTile(52, 39, -80, 18, 2);
setTile(52, 40, -87, 18, 2);
setTile(52, 40, -86, 18, 2);
setTile(52, 40, -85, 18, 2);
setTile(52, 40, -84, 18, 2);
setTile(52, 40, -83, 18, 2);
setTile(52, 40, -82, 18, 2);
setTile(52, 40, -81, 18, 2);
setTile(52, 40, -80, 18, 2);
setTile(52, 41, -83, 18, 2);
setTile(52, 41, -82, 18, 2);
setTile(52, 42, -82, 18, 2);
setTile(53, 34, -101, 44);
setTile(53, 34, -100, 44);
setTile(53, 34, -99, 44);
setTile(53, 34, -98, 44);
setTile(53, 34, -97, 44);
setTile(53, 34, -96, 44);
setTile(53, 34, -95, 44);
setTile(53, 34, -94, 44);
setTile(53, 34, -93, 44);
setTile(53, 34, -92, 44);
setTile(53, 34, -91, 44);
setTile(53, 34, -90, 44);
setTile(53, 34, -89, 44);
setTile(53, 34, -67, 9);
setTile(53, 34, -66, 9);
setTile(53, 35, -118, 11, 6);
setTile(53, 35, -117, 11, 4);
setTile(53, 35, -116, 11, 2);
setTile(53, 35, -115, 11, 10);
setTile(53, 35, -114, 11, 12);
setTile(53, 35, -113, 11, 2);
setTile(53, 35, -112, 89);
setTile(53, 35, -111, 89);
setTile(53, 35, -82, 17, 2);
setTile(53, 35, -81, 31, 1);
setTile(53, 35, -80, 31, 1);
setTile(53, 35, -79, 31, 1);
setTile(53, 35, -74, 31, 1);
setTile(53, 35, -73, 31, 1);
setTile(53, 35, -72, 31, 2);
setTile(53, 35, -69, 31, 1);
setTile(53, 35, -64, 31, 1);
setTile(53, 35, -63, 31, 1);
setTile(53, 35, -62, 38);
setTile(53, 35, -61, 31, 1);
setTile(53, 35, -60, 31, 1);
setTile(53, 35, -59, 31, 1);
setTile(53, 35, -58, 31, 1);
setTile(53, 35, -57, 31, 1);
setTile(53, 35, -48, 31, 1);
setTile(53, 35, -45, 31, 1);
setTile(53, 35, -44, 31, 1);
setTile(53, 35, -43, 37);
setTile(53, 36, -115, 11, 2);
setTile(53, 36, -114, 11, 4);
setTile(53, 36, -112, 89);
setTile(53, 36, -82, 17, 2);
setTile(53, 36, -52, 18);
setTile(53, 36, -51, 18);
setTile(53, 36, -50, 18);
setTile(53, 36, -49, 18);
setTile(53, 36, -48, 18);
setTile(53, 37, -112, 89);
setTile(53, 37, -82, 17, 2);
setTile(53, 37, -52, 18);
setTile(53, 37, -51, 18);
setTile(53, 37, -50, 18);
setTile(53, 37, -49, 18);
setTile(53, 37, -48, 18);
setTile(53, 38, -82, 17, 2);
setTile(53, 38, -50, 18);
setTile(53, 38, -49, 18);
setTile(53, 39, -84, 18, 2);
setTile(53, 39, -83, 18, 2);
setTile(53, 39, -82, 17, 2);
setTile(53, 39, -81, 18, 2);
setTile(53, 39, -80, 18, 2);
setTile(53, 39, -50, 18);
setTile(53, 40, -84, 18, 2);
setTile(53, 40, -83, 18, 2);
setTile(53, 40, -82, 17, 2);
setTile(53, 40, -81, 18, 2);
setTile(53, 40, -80, 18, 2);
setTile(53, 41, -83, 18, 2);
setTile(53, 41, -82, 17, 2);
setTile(53, 41, -81, 18, 2);
setTile(53, 42, -83, 18, 2);
setTile(53, 42, -82, 18, 2);
setTile(53, 42, -81, 18, 2);
setTile(54, 34, -118, 11);
setTile(54, 34, -86, 44);
setTile(54, 34, -85, 44);
setTile(54, 34, -73, 44);
setTile(54, 34, -72, 44);
setTile(54, 34, -71, 44);
setTile(54, 34, -70, 44);
setTile(54, 34, -67, 9);
setTile(54, 34, -66, 9);
setTile(54, 35, -118, 11, 4);
setTile(54, 35, -117, 11, 2);
setTile(54, 35, -116, 11, 10);
setTile(54, 35, -114, 89);
setTile(54, 35, -113, 11, 12);
setTile(54, 35, -112, 89);
setTile(54, 35, -111, 89);
setTile(54, 35, -110, 89);
setTile(54, 35, -69, 31, 1);
setTile(54, 35, -68, 31, 1);
setTile(54, 35, -65, 31, 1);
setTile(54, 35, -64, 31, 1);
setTile(54, 35, -63, 31, 1);
setTile(54, 35, -62, 31, 1);
setTile(54, 35, -61, 31, 1);
setTile(54, 35, -59, 31, 1);
setTile(54, 35, -58, 31, 1);
setTile(54, 35, -57, 31, 1);
setTile(54, 35, -56, 37);
setTile(54, 35, -55, 31, 1);
setTile(54, 35, -50, 17);
setTile(54, 35, -48, 31, 1);
setTile(54, 35, -47, 31, 1);
setTile(54, 35, -46, 31, 1);
setTile(54, 35, -44, 31, 1);
setTile(54, 35, -43, 31, 1);
setTile(54, 35, -42, 37);
setTile(54, 36, -116, 11, 2);
setTile(54, 36, -115, 11);
setTile(54, 36, -114, 11, 2);
setTile(54, 36, -113, 11, 4);
setTile(54, 36, -52, 18);
setTile(54, 36, -51, 18);
setTile(54, 36, -50, 17);
setTile(54, 36, -49, 18);
setTile(54, 36, -48, 18);
setTile(54, 37, -52, 18);
setTile(54, 37, -51, 18);
setTile(54, 37, -50, 17);
setTile(54, 37, -49, 18);
setTile(54, 37, -48, 18);
setTile(54, 38, -51, 18);
setTile(54, 38, -50, 17);
setTile(54, 38, -49, 18);
setTile(54, 39, -84, 18, 2);
setTile(54, 39, -83, 18, 2);
setTile(54, 39, -82, 18, 2);
setTile(54, 39, -81, 18, 2);
setTile(54, 39, -80, 18, 2);
setTile(54, 39, -57, 99, 1);
setTile(54, 39, -56, 99, 4);
setTile(54, 39, -55, 99, 4);
setTile(54, 39, -54, 99, 4);
setTile(54, 39, -53, 99, 7);
setTile(54, 39, -51, 18);
setTile(54, 39, -50, 18);
setTile(54, 39, -49, 18);
setTile(54, 40, -84, 18, 2);
setTile(54, 40, -83, 18, 2);
setTile(54, 40, -82, 18, 2);
setTile(54, 40, -81, 18, 2);
setTile(54, 40, -80, 18, 2);
setTile(54, 41, -83, 18, 2);
setTile(54, 41, -82, 18, 2);
setTile(54, 42, -82, 18, 2);
setTile(55, 34, -118, 11);
setTile(55, 34, -106, 13);
setTile(55, 34, -105, 13);
setTile(55, 34, -86, 44);
setTile(55, 34, -85, 44);
setTile(55, 34, -73, 44);
setTile(55, 34, -72, 44);
setTile(55, 34, -71, 44);
setTile(55, 34, -70, 44);
setTile(55, 34, -67, 9);
setTile(55, 34, -66, 9);
setTile(55, 34, -65, 9);
setTile(55, 35, -118, 11, 6);
setTile(55, 35, -117, 11, 4);
setTile(55, 35, -116, 11, 2);
setTile(55, 35, -115, 11, 10);
setTile(55, 35, -114, 11, 12);
setTile(55, 35, -113, 11, 2);
setTile(55, 35, -111, 89);
setTile(55, 35, -69, 31, 1);
setTile(55, 35, -68, 31, 1);
setTile(55, 35, -63, 31, 1);
setTile(55, 35, -62, 37);
setTile(55, 35, -61, 31, 1);
setTile(55, 35, -60, 31, 2);
setTile(55, 35, -59, 31, 1);
setTile(55, 35, -58, 31, 1);
setTile(55, 35, -57, 31, 1);
setTile(55, 35, -56, 31, 1);
setTile(55, 35, -55, 31, 1);
setTile(55, 35, -54, 31, 1);
setTile(55, 35, -52, 31, 1);
setTile(55, 35, -48, 31, 1);
setTile(55, 35, -47, 31, 1);
setTile(55, 35, -46, 31, 1);
setTile(55, 35, -44, 31, 1);
setTile(55, 35, -43, 31, 1);
setTile(55, 35, -42, 31, 1);
setTile(55, 35, -41, 31, 1);
setTile(55, 36, -115, 11, 2);
setTile(55, 36, -114, 11, 4);
setTile(55, 36, -52, 18);
setTile(55, 36, -51, 18);
setTile(55, 36, -50, 18);
setTile(55, 36, -49, 18);
setTile(55, 36, -48, 18);
setTile(55, 37, -52, 18);
setTile(55, 37, -51, 18);
setTile(55, 37, -50, 18);
setTile(55, 37, -49, 18);
setTile(55, 37, -48, 18);
setTile(55, 38, -50, 18);
setTile(55, 38, -43, 18);
setTile(55, 38, -42, 18);
setTile(55, 38, -41, 18);
setTile(55, 39, -83, 18, 2);
setTile(55, 39, -82, 18, 2);
setTile(55, 39, -81, 18, 2);
setTile(55, 39, -58, 99, 1);
setTile(55, 39, -57, 99, 5);
setTile(55, 39, -56, 99, 5);
setTile(55, 39, -55, 99, 5);
setTile(55, 39, -54, 99, 5);
setTile(55, 39, -53, 99, 5);
setTile(55, 39, -52, 99, 7);
setTile(55, 39, -50, 18);
setTile(55, 39, -43, 18);
setTile(55, 39, -42, 18);
setTile(55, 39, -41, 18);
setTile(55, 40, -84, 18, 2);
setTile(55, 40, -83, 18, 2);
setTile(55, 40, -82, 18, 2);
setTile(55, 40, -81, 18, 2);
setTile(55, 40, -80, 18, 2);
setTile(55, 40, -43, 18, 4);
setTile(55, 40, -42, 18);
setTile(55, 40, -41, 18);
setTile(56, 34, -118, 11);
setTile(56, 34, -106, 13);
setTile(56, 34, -105, 13);
setTile(56, 34, -101, 44);
setTile(56, 34, -100, 44);
setTile(56, 34, -99, 44);
setTile(56, 34, -98, 44);
setTile(56, 34, -97, 44);
setTile(56, 34, -96, 44);
setTile(56, 34, -95, 44);
setTile(56, 34, -94, 44);
setTile(56, 34, -93, 44);
setTile(56, 34, -92, 44);
setTile(56, 34, -91, 44);
setTile(56, 34, -73, 44);
setTile(56, 34, -72, 44);
setTile(56, 34, -71, 44);
setTile(56, 34, -70, 44);
setTile(56, 34, -66, 9);
setTile(56, 34, -65, 9);
setTile(56, 34, -64, 9);
setTile(56, 35, -87, 31, 1);
setTile(56, 35, -84, 175, 2);
setTile(56, 35, -81, 31, 1);
setTile(56, 35, -79, 31, 1);
setTile(56, 35, -78, 31, 1);
setTile(56, 35, -77, 31, 1);
setTile(56, 35, -69, 31, 1);
setTile(56, 35, -68, 31, 1);
setTile(56, 35, -67, 31, 1);
setTile(56, 35, -63, 31, 1);
setTile(56, 35, -61, 31, 1);
setTile(56, 35, -60, 31, 1);
setTile(56, 35, -59, 31, 1);
setTile(56, 35, -58, 31, 1);
setTile(56, 35, -57, 31, 1);
setTile(56, 35, -56, 31, 1);
setTile(56, 35, -55, 31, 2);
setTile(56, 35, -54, 31, 1);
setTile(56, 35, -53, 31, 1);
setTile(56, 35, -52, 37);
setTile(56, 35, -51, 31, 1);
setTile(56, 35, -47, 37);
setTile(56, 35, -46, 31, 1);
setTile(56, 35, -45, 38);
setTile(56, 35, -44, 31, 1);
setTile(56, 35, -43, 31, 1);
setTile(56, 35, -42, 31, 1);
setTile(56, 36, -84, 175, 8);
setTile(56, 36, -51, 18);
setTile(56, 36, -50, 18);
setTile(56, 36, -49, 18);
setTile(56, 37, -70, 18);
setTile(56, 37, -69, 18);
setTile(56, 37, -68, 18);
setTile(56, 37, -67, 18);
setTile(56, 37, -66, 18);
setTile(56, 37, -52, 18);
setTile(56, 37, -51, 18);
setTile(56, 37, -50, 18);
setTile(56, 37, -49, 18);
setTile(56, 37, -48, 18);
setTile(56, 37, -42, 18);
setTile(56, 38, -70, 18);
setTile(56, 38, -69, 18);
setTile(56, 38, -68, 18);
setTile(56, 38, -67, 18);
setTile(56, 38, -44, 18);
setTile(56, 38, -43, 18);
setTile(56, 38, -42, 18);
setTile(56, 38, -41, 18);
setTile(56, 38, -40, 18);
setTile(56, 39, -58, 99, 2);
setTile(56, 39, -57, 99, 5);
setTile(56, 39, -56, 99, 5);
setTile(56, 39, -55, 99, 5);
setTile(56, 39, -54, 99, 5);
setTile(56, 39, -53, 99, 5);
setTile(56, 39, -52, 99, 8);
setTile(56, 39, -44, 18);
setTile(56, 39, -43, 18);
setTile(56, 39, -42, 18, 4);
setTile(56, 39, -41, 18);
setTile(56, 39, -40, 18);
setTile(56, 40, -63, 161, 1);
setTile(56, 40, -62, 161, 1);
setTile(56, 40, -61, 161, 1);
setTile(56, 40, -60, 161, 1);
setTile(56, 40, -59, 161, 1);
setTile(56, 40, -44, 18);
setTile(56, 40, -43, 18);
setTile(56, 40, -42, 18);
setTile(56, 40, -41, 18);
setTile(56, 40, -40, 18);
setTile(56, 41, -63, 161, 1);
setTile(56, 41, -62, 161, 1);
setTile(56, 41, -61, 161, 1);
setTile(56, 41, -60, 161, 1);
setTile(56, 41, -59, 161, 1);
setTile(56, 41, -42, 18, 4);
setTile(57, 34, -118, 11);
setTile(57, 34, -106, 13);
setTile(57, 34, -105, 13);
setTile(57, 34, -101, 44);
setTile(57, 34, -100, 44);
setTile(57, 34, -99, 44);
setTile(57, 34, -98, 44);
setTile(57, 34, -97, 44);
setTile(57, 34, -96, 44);
setTile(57, 34, -95, 44);
setTile(57, 34, -94, 44);
setTile(57, 34, -93, 44);
setTile(57, 34, -92, 44);
setTile(57, 34, -91, 44);
setTile(57, 34, -73, 44);
setTile(57, 34, -72, 44);
setTile(57, 34, -71, 44);
setTile(57, 34, -70, 44);
setTile(57, 34, -65, 9);
setTile(57, 34, -64, 9);
setTile(57, 35, -88, 31, 1);
setTile(57, 35, -87, 38);
setTile(57, 35, -86, 31, 1);
setTile(57, 35, -85, 175, 2);
setTile(57, 35, -81, 31, 1);
setTile(57, 35, -80, 31, 2);
setTile(57, 35, -79, 31, 1);
setTile(57, 35, -78, 31, 2);
setTile(57, 35, -69, 31, 1);
setTile(57, 35, -60, 31, 1);
setTile(57, 35, -58, 31, 1);
setTile(57, 35, -55, 99, 10);
setTile(57, 35, -52, 37);
setTile(57, 35, -51, 31, 1);
setTile(57, 35, -50, 31, 1);
setTile(57, 35, -49, 31, 2);
setTile(57, 35, -47, 38);
setTile(57, 35, -46, 31, 1);
setTile(57, 35, -45, 31, 1);
setTile(57, 35, -44, 31, 1);
setTile(57, 35, -43, 31, 1);
setTile(57, 35, -42, 17);
setTile(57, 36, -85, 175, 8);
setTile(57, 36, -55, 99, 10);
setTile(57, 36, -42, 17);
setTile(57, 37, -70, 18);
setTile(57, 37, -69, 18);
setTile(57, 37, -68, 18);
setTile(57, 37, -67, 18);
setTile(57, 37, -66, 18);
setTile(57, 37, -55, 99, 10);
setTile(57, 37, -43, 18);
setTile(57, 37, -42, 17);
setTile(57, 37, -41, 18);
setTile(57, 38, -70, 18);
setTile(57, 38, -69, 18);
setTile(57, 38, -68, 18);
setTile(57, 38, -67, 18);
setTile(57, 38, -66, 18);
setTile(57, 38, -55, 99, 10);
setTile(57, 38, -44, 18);
setTile(57, 38, -43, 18, 4);
setTile(57, 38, -42, 17);
setTile(57, 38, -41, 18);
setTile(57, 38, -40, 18);
setTile(57, 39, -69, 18);
setTile(57, 39, -68, 18);
setTile(57, 39, -58, 99, 2);
setTile(57, 39, -57, 99, 5);
setTile(57, 39, -56, 99, 5);
setTile(57, 39, -55, 99, 5);
setTile(57, 39, -54, 99, 5);
setTile(57, 39, -53, 99, 5);
setTile(57, 39, -52, 99, 8);
setTile(57, 39, -44, 18);
setTile(57, 39, -43, 18);
setTile(57, 39, -42, 17);
setTile(57, 39, -41, 18, 4);
setTile(57, 39, -40, 18, 4);
setTile(57, 40, -68, 18);
setTile(57, 40, -64, 161, 1);
setTile(57, 40, -63, 161, 1);
setTile(57, 40, -62, 161, 1);
setTile(57, 40, -61, 161, 1);
setTile(57, 40, -60, 161, 1);
setTile(57, 40, -59, 161, 1);
setTile(57, 40, -58, 161, 1);
setTile(57, 40, -44, 18);
setTile(57, 40, -43, 18);
setTile(57, 40, -42, 18);
setTile(57, 40, -41, 18);
setTile(57, 40, -40, 18);
setTile(57, 41, -64, 161, 1);
setTile(57, 41, -63, 161, 1);
setTile(57, 41, -62, 161, 1);
setTile(57, 41, -61, 161, 1);
setTile(57, 41, -60, 161, 1);
setTile(57, 41, -59, 161, 1);
setTile(57, 41, -58, 161, 1);
setTile(57, 41, -43, 18);
setTile(57, 41, -42, 18, 4);
setTile(57, 41, -41, 18);
setTile(57, 42, -61, 161, 1);
setTile(57, 42, -60, 161, 1);
setTile(58, 34, -118, 11);
setTile(58, 34, -65, 9);
setTile(58, 34, -64, 9);
setTile(58, 35, -108, 11, 6);
setTile(58, 35, -90, 31, 1);
setTile(58, 35, -89, 31, 1);
setTile(58, 35, -88, 31, 1);
setTile(58, 35, -87, 31, 1);
setTile(58, 35, -86, 31, 1);
setTile(58, 35, -84, 175, 2);
setTile(58, 35, -83, 31, 1);
setTile(58, 35, -82, 31, 1);
setTile(58, 35, -81, 38);
setTile(58, 35, -80, 175, 2);
setTile(58, 35, -79, 31, 1);
setTile(58, 35, -78, 175, 2);
setTile(58, 35, -77, 31, 1);
setTile(58, 35, -74, 31, 1);
setTile(58, 35, -68, 17);
setTile(58, 35, -57, 31, 1);
setTile(58, 35, -56, 31, 1);
setTile(58, 35, -55, 31, 1);
setTile(58, 35, -53, 31, 2);
setTile(58, 35, -52, 31, 1);
setTile(58, 35, -51, 37);
setTile(58, 35, -50, 31, 1);
setTile(58, 35, -48, 37);
setTile(58, 35, -47, 31, 1);
setTile(58, 35, -46, 31, 1);
setTile(58, 35, -45, 31, 1);
setTile(58, 35, -44, 31, 1);
setTile(58, 36, -84, 175, 8);
setTile(58, 36, -80, 175, 8);
setTile(58, 36, -78, 175, 8);
setTile(58, 36, -68, 17);
setTile(58, 37, -70, 18);
setTile(58, 37, -69, 18);
setTile(58, 37, -68, 17);
setTile(58, 37, -67, 18);
setTile(58, 37, -66, 18);
setTile(58, 37, -62, 162, 1);
setTile(58, 37, -42, 18);
setTile(58, 38, -70, 18);
setTile(58, 38, -69, 18);
setTile(58, 38, -68, 17);
setTile(58, 38, -67, 18);
setTile(58, 38, -66, 18);
setTile(58, 38, -62, 162, 1);
setTile(58, 38, -44, 18);
setTile(58, 38, -43, 18, 4);
setTile(58, 38, -42, 18);
setTile(58, 38, -41, 18);
setTile(58, 38, -40, 18);
setTile(58, 39, -69, 18);
setTile(58, 39, -68, 17);
setTile(58, 39, -67, 18);
setTile(58, 39, -62, 162, 1);
setTile(58, 39, -60, 162, 1);
setTile(58, 39, -58, 99, 2);
setTile(58, 39, -57, 99, 5);
setTile(58, 39, -56, 99, 5);
setTile(58, 39, -55, 99, 5);
setTile(58, 39, -54, 99, 5);
setTile(58, 39, -53, 99, 5);
setTile(58, 39, -52, 99, 8);
setTile(58, 39, -44, 18);
setTile(58, 39, -43, 18);
setTile(58, 39, -42, 18);
setTile(58, 39, -41, 18, 4);
setTile(58, 39, -40, 18);
setTile(58, 40, -69, 18);
setTile(58, 40, -68, 18);
setTile(58, 40, -67, 18);
setTile(58, 40, -64, 161, 1);
setTile(58, 40, -63, 161, 1);
setTile(58, 40, -62, 162, 1);
setTile(58, 40, -61, 161, 1);
setTile(58, 40, -60, 162, 1);
setTile(58, 40, -59, 161, 1);
setTile(58, 40, -58, 161, 1);
setTile(58, 40, -57, 161, 1);
setTile(58, 40, -44, 18);
setTile(58, 40, -43, 18);
setTile(58, 40, -42, 18);
setTile(58, 40, -41, 18);
setTile(58, 40, -40, 18);
setTile(58, 41, -64, 161, 1);
setTile(58, 41, -63, 161, 1);
setTile(58, 41, -62, 161, 1);
setTile(58, 41, -61, 161, 1);
setTile(58, 41, -60, 161, 1);
setTile(58, 41, -59, 161, 1);
setTile(58, 41, -58, 161, 1);
setTile(58, 41, -57, 161, 1);
setTile(58, 41, -42, 18);
setTile(58, 42, -62, 161, 1);
setTile(58, 42, -61, 161, 1);
setTile(58, 42, -60, 161, 1);
setTile(58, 42, -59, 161, 1);
setTile(59, 34, -118, 11);
setTile(59, 34, -65, 9);
setTile(59, 34, -64, 9);
setTile(59, 35, -109, 11, 6);
setTile(59, 35, -108, 11, 4);
setTile(59, 35, -107, 11, 6);
setTile(59, 35, -90, 31, 1);
setTile(59, 35, -89, 31, 1);
setTile(59, 35, -88, 175, 2);
setTile(59, 35, -87, 31, 1);
setTile(59, 35, -86, 37);
setTile(59, 35, -85, 31, 1);
setTile(59, 35, -84, 31, 1);
setTile(59, 35, -83, 31, 1);
setTile(59, 35, -82, 31, 1);
setTile(59, 35, -81, 31, 1);
setTile(59, 35, -80, 31, 1);
setTile(59, 35, -79, 37);
setTile(59, 35, -78, 31, 1);
setTile(59, 35, -77, 175, 2);
setTile(59, 35, -76, 31, 1);
setTile(59, 35, -75, 37);
setTile(59, 35, -74, 31, 1);
setTile(59, 35, -61, 162, 1);
setTile(59, 35, -60, 162, 1);
setTile(59, 35, -58, 31, 1);
setTile(59, 35, -57, 31, 1);
setTile(59, 35, -56, 31, 1);
setTile(59, 35, -55, 31, 1);
setTile(59, 35, -54, 31, 2);
setTile(59, 35, -53, 31, 1);
setTile(59, 35, -52, 31, 1);
setTile(59, 35, -51, 31, 1);
setTile(59, 35, -50, 31, 1);
setTile(59, 35, -46, 31, 1);
setTile(59, 35, -45, 38);
setTile(59, 35, -42, 31, 2);
setTile(59, 36, -88, 175, 8);
setTile(59, 36, -77, 175, 8);
setTile(59, 36, -61, 162, 1);
setTile(59, 36, -60, 162, 1);
setTile(59, 37, -70, 18);
setTile(59, 37, -69, 18);
setTile(59, 37, -68, 18);
setTile(59, 37, -67, 18);
setTile(59, 37, -66, 18);
setTile(59, 37, -61, 162, 1);
setTile(59, 37, -60, 162, 1);
setTile(59, 37, -59, 162, 1);
setTile(59, 38, -70, 18);
setTile(59, 38, -69, 18);
setTile(59, 38, -68, 18);
setTile(59, 38, -67, 18);
setTile(59, 38, -66, 18);
setTile(59, 38, -61, 162, 1);
setTile(59, 38, -60, 162, 1);
setTile(59, 38, -59, 162, 1);
setTile(59, 38, -43, 18);
setTile(59, 38, -42, 18);
setTile(59, 38, -41, 18, 4);
setTile(59, 39, -69, 18);
setTile(59, 39, -68, 18);
setTile(59, 39, -61, 162, 1);
setTile(59, 39, -60, 162, 1);
setTile(59, 39, -59, 162, 1);
setTile(59, 39, -58, 99, 3);
setTile(59, 39, -57, 99, 5);
setTile(59, 39, -56, 99, 5);
setTile(59, 39, -55, 99, 5);
setTile(59, 39, -54, 99, 5);
setTile(59, 39, -53, 99, 5);
setTile(59, 39, -52, 99, 9);
setTile(59, 39, -51, 18);
setTile(59, 39, -50, 18);
setTile(59, 39, -49, 18);
setTile(59, 39, -43, 18);
setTile(59, 39, -42, 18);
setTile(59, 39, -41, 18);
setTile(59, 40, -68, 18);
setTile(59, 40, -64, 161, 1);
setTile(59, 40, -63, 161, 1);
setTile(59, 40, -62, 161, 1);
setTile(59, 40, -61, 162, 1);
setTile(59, 40, -60, 162, 1);
setTile(59, 40, -59, 162, 1);
setTile(59, 40, -58, 161, 1);
setTile(59, 40, -57, 161, 1);
setTile(59, 40, -51, 18);
setTile(59, 40, -50, 18);
setTile(59, 40, -49, 18);
setTile(59, 40, -43, 18);
setTile(59, 40, -42, 18);
setTile(59, 40, -41, 18);
setTile(59, 41, -64, 161, 1);
setTile(59, 41, -63, 161, 1);
setTile(59, 41, -62, 161, 1);
setTile(59, 41, -61, 162, 1);
setTile(59, 41, -60, 162, 1);
setTile(59, 41, -59, 161, 1);
setTile(59, 41, -58, 161, 1);
setTile(59, 41, -57, 161, 1);
setTile(59, 42, -63, 161, 1);
setTile(59, 42, -62, 161, 1);
setTile(59, 42, -61, 161, 1);
setTile(59, 42, -60, 161, 1);
setTile(59, 42, -59, 161, 1);
setTile(59, 42, -58, 161, 1);
setTile(59, 43, -61, 161, 1);
setTile(59, 43, -60, 161, 1);
setTile(60, 34, -118, 11);
setTile(60, 34, -65, 9);
setTile(60, 34, -64, 9);
setTile(60, 34, -63, 9);
setTile(60, 35, -110, 11, 6);
setTile(60, 35, -109, 11, 4);
setTile(60, 35, -108, 11, 2);
setTile(60, 35, -107, 11, 4);
setTile(60, 35, -106, 11, 6);
setTile(60, 35, -90, 38);
setTile(60, 35, -89, 31, 2);
setTile(60, 35, -88, 31, 1);
setTile(60, 35, -87, 31, 1);
setTile(60, 35, -86, 31, 1);
setTile(60, 35, -85, 175, 2);
setTile(60, 35, -84, 38);
setTile(60, 35, -83, 38);
setTile(60, 35, -82, 38, 8);
setTile(60, 35, -81, 31, 1);
setTile(60, 35, -80, 31, 1);
setTile(60, 35, -79, 175, 2);
setTile(60, 35, -78, 38, 8);
setTile(60, 35, -77, 31, 1);
setTile(60, 35, -76, 31, 1);
setTile(60, 35, -74, 175, 2);
setTile(60, 35, -61, 162, 1);
setTile(60, 35, -60, 162, 1);
setTile(60, 35, -58, 31, 1);
setTile(60, 35, -57, 38);
setTile(60, 35, -56, 31, 1);
setTile(60, 35, -55, 31, 1);
setTile(60, 35, -54, 31, 1);
setTile(60, 35, -53, 31, 1);
setTile(60, 35, -50, 37);
setTile(60, 35, -44, 37);
setTile(60, 35, -43, 31, 1);
setTile(60, 35, -42, 38);
setTile(60, 36, -85, 175, 8);
setTile(60, 36, -79, 175, 8);
setTile(60, 36, -74, 175, 8);
setTile(60, 36, -61, 162, 1);
setTile(60, 36, -60, 162, 1);
setTile(60, 37, -70, 18);
setTile(60, 37, -69, 18);
setTile(60, 37, -68, 18);
setTile(60, 37, -67, 18);
setTile(60, 37, -62, 162, 1);
setTile(60, 37, -61, 162, 1);
setTile(60, 37, -60, 162, 1);
setTile(60, 38, -69, 18);
setTile(60, 38, -68, 18);
setTile(60, 38, -67, 18);
setTile(60, 38, -62, 162, 1);
setTile(60, 38, -61, 162, 1);
setTile(60, 38, -60, 162, 1);
setTile(60, 38, -50, 18);
setTile(60, 39, -62, 162, 1);
setTile(60, 39, -61, 162, 1);
setTile(60, 39, -60, 162, 1);
setTile(60, 39, -57, 99, 3);
setTile(60, 39, -56, 99, 6);
setTile(60, 39, -55, 99, 6);
setTile(60, 39, -54, 99, 6);
setTile(60, 39, -53, 99, 9);
setTile(60, 39, -52, 18);
setTile(60, 39, -51, 18);
setTile(60, 39, -50, 18);
setTile(60, 39, -49, 18);
setTile(60, 39, -48, 18);
setTile(60, 40, -64, 161, 1);
setTile(60, 40, -63, 161, 1);
setTile(60, 40, -62, 162, 1);
setTile(60, 40, -61, 162, 1);
setTile(60, 40, -60, 162, 1);
setTile(60, 40, -59, 161, 1);
setTile(60, 40, -58, 161, 1);
setTile(60, 40, -57, 161, 1);
setTile(60, 40, -53, 18);
setTile(60, 40, -52, 18);
setTile(60, 40, -51, 18);
setTile(60, 40, -50, 18);
setTile(60, 40, -49, 18);
setTile(60, 40, -48, 18);
setTile(60, 41, -64, 161, 1);
setTile(60, 41, -63, 161, 1);
setTile(60, 41, -62, 161, 1);
setTile(60, 41, -61, 162, 1);
setTile(60, 41, -60, 162, 1);
setTile(60, 41, -59, 161, 1);
setTile(60, 41, -58, 161, 1);
setTile(60, 41, -57, 161, 1);
setTile(60, 41, -52, 18);
setTile(60, 41, -51, 18);
setTile(60, 41, -50, 18);
setTile(60, 41, -49, 18);
setTile(60, 41, -48, 18);
setTile(60, 42, -63, 161, 1);
setTile(60, 42, -62, 161, 1);
setTile(60, 42, -61, 161, 1);
setTile(60, 42, -60, 161, 1);
setTile(60, 42, -59, 161, 1);
setTile(60, 42, -58, 161, 1);
setTile(60, 42, -52, 18);
setTile(60, 42, -51, 18);
setTile(60, 42, -50, 18);
setTile(60, 42, -49, 18);
setTile(60, 42, -48, 18);
setTile(60, 43, -61, 161, 1);
setTile(60, 43, -60, 161, 1);
setTile(60, 43, -49, 18);
setTile(60, 43, -48, 18);
setTile(60, 43, -47, 18);
setTile(60, 44, -51, 18);
setTile(60, 44, -50, 18);
setTile(60, 44, -49, 18);
setTile(60, 44, -48, 18);
setTile(60, 45, -50, 18);
setTile(61, 34, -118, 11);
setTile(61, 34, -114, 13);
setTile(61, 34, -64, 9);
setTile(61, 34, -63, 9);
setTile(61, 35, -111, 11, 6);
setTile(61, 35, -110, 11, 4);
setTile(61, 35, -109, 11, 2);
setTile(61, 35, -108, 11);
setTile(61, 35, -107, 11, 2);
setTile(61, 35, -106, 11, 4);
setTile(61, 35, -105, 11, 6);
setTile(61, 35, -89, 31, 1);
setTile(61, 35, -88, 31, 1);
setTile(61, 35, -87, 38, 2);
setTile(61, 35, -86, 31, 1);
setTile(61, 35, -85, 38);
setTile(61, 35, -84, 31, 1);
setTile(61, 35, -82, 38, 8);
setTile(61, 35, -80, 175, 2);
setTile(61, 35, -77, 31, 1);
setTile(61, 35, -76, 38);
setTile(61, 35, -75, 31, 1);
setTile(61, 35, -62, 31, 2);
setTile(61, 35, -61, 31, 1);
setTile(61, 35, -60, 38);
setTile(61, 35, -59, 31, 1);
setTile(61, 35, -58, 31, 1);
setTile(61, 35, -57, 31, 1);
setTile(61, 35, -55, 37);
setTile(61, 35, -54, 37);
setTile(61, 35, -53, 31, 1);
setTile(61, 35, -52, 31, 1);
setTile(61, 35, -51, 31, 1);
setTile(61, 35, -50, 31, 1);
setTile(61, 35, -46, 31, 1);
setTile(61, 35, -44, 31, 1);
setTile(61, 35, -43, 31, 1);
setTile(61, 35, -42, 31, 1);
setTile(61, 35, -41, 31, 1);
setTile(61, 36, -80, 175, 8);
setTile(61, 37, -50, 18);
setTile(61, 37, -49, 18);
setTile(61, 37, -48, 18);
setTile(61, 38, -51, 18);
setTile(61, 38, -50, 18);
setTile(61, 38, -49, 18);
setTile(61, 38, -48, 18);
setTile(61, 38, -47, 18);
setTile(61, 39, -52, 18);
setTile(61, 39, -51, 18);
setTile(61, 39, -50, 18);
setTile(61, 39, -49, 18);
setTile(61, 39, -48, 18);
setTile(61, 40, -64, 161, 1);
setTile(61, 40, -63, 161, 1);
setTile(61, 40, -62, 161, 1);
setTile(61, 40, -61, 161, 1);
setTile(61, 40, -60, 161, 1);
setTile(61, 40, -59, 161, 1);
setTile(61, 40, -58, 161, 1);
setTile(61, 40, -54, 18);
setTile(61, 40, -53, 18);
setTile(61, 40, -52, 18);
setTile(61, 40, -51, 18);
setTile(61, 40, -50, 18);
setTile(61, 40, -49, 18);
setTile(61, 40, -48, 18);
setTile(61, 40, -47, 18);
setTile(61, 40, -46, 18);
setTile(61, 41, -64, 161, 1);
setTile(61, 41, -63, 161, 1);
setTile(61, 41, -62, 161, 1);
setTile(61, 41, -61, 161, 1);
setTile(61, 41, -60, 161, 1);
setTile(61, 41, -59, 161, 1);
setTile(61, 41, -58, 161, 1);
setTile(61, 41, -57, 161, 1);
setTile(61, 41, -53, 18);
setTile(61, 41, -52, 18);
setTile(61, 41, -51, 18);
setTile(61, 41, -50, 18);
setTile(61, 41, -49, 18);
setTile(61, 41, -48, 18);
setTile(61, 41, -47, 18);
setTile(61, 41, -46, 18);
setTile(61, 42, -62, 161, 1);
setTile(61, 42, -61, 161, 1);
setTile(61, 42, -60, 161, 1);
setTile(61, 42, -59, 161, 1);
setTile(61, 42, -53, 18);
setTile(61, 42, -52, 18);
setTile(61, 42, -51, 18);
setTile(61, 42, -50, 18);
setTile(61, 42, -49, 18);
setTile(61, 42, -48, 18);
setTile(61, 42, -47, 18);
setTile(61, 43, -52, 18);
setTile(61, 43, -50, 18);
setTile(61, 43, -49, 18);
setTile(61, 43, -48, 18);
setTile(61, 43, -47, 18);
setTile(61, 43, -46, 18);
setTile(61, 44, -52, 18);
setTile(61, 44, -51, 18);
setTile(61, 44, -50, 18);
setTile(61, 44, -49, 18);
setTile(61, 44, -48, 18);
setTile(61, 44, -47, 18);
setTile(61, 45, -51, 18);
setTile(61, 45, -50, 18);
setTile(61, 45, -49, 18);
setTile(61, 45, -48, 18);
setTile(61, 46, -50, 18);
setTile(62, 34, -118, 11);
setTile(62, 35, -110, 11, 6);
setTile(62, 35, -109, 11, 4);
setTile(62, 35, -108, 11, 2);
setTile(62, 35, -107, 11, 4);
setTile(62, 35, -88, 31, 2);
setTile(62, 35, -87, 31, 1);
setTile(62, 35, -85, 31, 1);
setTile(62, 35, -84, 38);
setTile(62, 35, -81, 38);
setTile(62, 35, -80, 175, 2);
setTile(62, 35, -79, 38, 4);
setTile(62, 35, -78, 31, 1);
setTile(62, 35, -76, 38);
setTile(62, 35, -75, 175, 3);
setTile(62, 35, -74, 38);
setTile(62, 35, -68, 38);
setTile(62, 35, -67, 31, 1);
setTile(62, 35, -66, 31, 1);
setTile(62, 35, -65, 31, 1);
setTile(62, 35, -61, 175, 2);
setTile(62, 35, -60, 38);
setTile(62, 35, -59, 31, 1);
setTile(62, 35, -53, 31, 1);
setTile(62, 35, -52, 31, 1);
setTile(62, 35, -50, 17);
setTile(62, 35, -44, 31, 1);
setTile(62, 35, -43, 31, 1);
setTile(62, 35, -42, 31, 1);
setTile(62, 36, -80, 175, 8);
setTile(62, 36, -75, 175, 8);
setTile(62, 36, -61, 175, 8);
setTile(62, 36, -50, 17);
setTile(62, 37, -51, 18);
setTile(62, 37, -50, 17);
setTile(62, 37, -49, 18);
setTile(62, 37, -48, 18);
setTile(62, 37, -47, 18);
setTile(62, 38, -51, 18);
setTile(62, 38, -50, 17);
setTile(62, 38, -49, 18);
setTile(62, 38, -48, 18);
setTile(62, 38, -47, 18);
setTile(62, 39, -53, 18);
setTile(62, 39, -52, 18);
setTile(62, 39, -51, 17, 8);
setTile(62, 39, -50, 17);
setTile(62, 39, -49, 18);
setTile(62, 39, -48, 18);
setTile(62, 39, -47, 18);
setTile(62, 40, -63, 161, 1);
setTile(62, 40, -62, 161, 1);
setTile(62, 40, -61, 161, 1);
setTile(62, 40, -60, 161, 1);
setTile(62, 40, -59, 161, 1);
setTile(62, 40, -58, 161, 1);
setTile(62, 40, -54, 18);
setTile(62, 40, -53, 18);
setTile(62, 40, -52, 18);
setTile(62, 40, -51, 17, 8);
setTile(62, 40, -50, 17);
setTile(62, 40, -49, 17, 8);
setTile(62, 40, -48, 18);
setTile(62, 40, -47, 18);
setTile(62, 40, -46, 18);
setTile(62, 40, -45, 18);
setTile(62, 41, -63, 161, 1);
setTile(62, 41, -62, 161, 1);
setTile(62, 41, -61, 161, 1);
setTile(62, 41, -60, 161, 1);
setTile(62, 41, -59, 161, 1);
setTile(62, 41, -54, 18);
setTile(62, 41, -53, 18);
setTile(62, 41, -52, 18);
setTile(62, 41, -51, 18);
setTile(62, 41, -50, 17);
setTile(62, 41, -49, 18);
setTile(62, 41, -48, 18);
setTile(62, 41, -47, 18);
setTile(62, 41, -46, 18);
setTile(62, 41, -45, 18);
setTile(62, 42, -61, 161, 1);
setTile(62, 42, -60, 161, 1);
setTile(62, 42, -54, 18);
setTile(62, 42, -53, 18);
setTile(62, 42, -52, 18);
setTile(62, 42, -51, 18);
setTile(62, 42, -50, 17);
setTile(62, 42, -49, 17, 8);
setTile(62, 42, -48, 17, 8);
setTile(62, 42, -47, 18);
setTile(62, 43, -53, 18);
setTile(62, 43, -52, 18);
setTile(62, 43, -51, 18);
setTile(62, 43, -50, 17);
setTile(62, 43, -49, 18);
setTile(62, 43, -48, 18);
setTile(62, 43, -47, 18);
setTile(62, 43, -46, 18);
setTile(62, 44, -52, 18);
setTile(62, 44, -51, 18);
setTile(62, 44, -50, 18);
setTile(62, 44, -49, 18);
setTile(62, 44, -48, 18);
setTile(62, 44, -47, 18);
setTile(62, 44, -46, 18);
setTile(62, 45, -52, 18);
setTile(62, 45, -51, 18);
setTile(62, 45, -50, 18);
setTile(62, 45, -49, 18);
setTile(62, 45, -48, 18);
setTile(62, 45, -47, 18);
setTile(62, 46, -51, 18);
setTile(62, 46, -50, 18);
setTile(62, 46, -49, 18);
setTile(63, 35, -109, 11, 6);
setTile(63, 35, -108, 11, 4);
setTile(63, 35, -107, 11, 6);
setTile(63, 35, -88, 31, 1);
setTile(63, 35, -87, 37);
setTile(63, 35, -86, 31, 1);
setTile(63, 35, -85, 31, 1);
setTile(63, 35, -82, 38, 8);
setTile(63, 35, -80, 31, 1);
setTile(63, 35, -79, 38, 4);
setTile(63, 35, -78, 31, 1);
setTile(63, 35, -77, 38, 2);
setTile(63, 35, -75, 31, 1);
setTile(63, 35, -74, 31, 1);
setTile(63, 35, -68, 37);
setTile(63, 35, -67, 31, 1);
setTile(63, 35, -66, 31, 1);
setTile(63, 35, -63, 31, 1);
setTile(63, 35, -60, 31, 1);
setTile(63, 35, -59, 31, 1);
setTile(63, 35, -58, 31, 2);
setTile(63, 35, -56, 31, 1);
setTile(63, 35, -55, 31, 1);
setTile(63, 35, -53, 31, 2);
setTile(63, 35, -49, 17);
setTile(63, 35, -44, 31, 1);
setTile(63, 35, -43, 38);
setTile(63, 35, -42, 31, 1);
setTile(63, 35, -41, 31, 1);
setTile(63, 36, -49, 17);
setTile(63, 37, -51, 18);
setTile(63, 37, -50, 18);
setTile(63, 37, -49, 17);
setTile(63, 37, -48, 18);
setTile(63, 37, -47, 18);
setTile(63, 38, -51, 18);
setTile(63, 38, -50, 18);
setTile(63, 38, -49, 17);
setTile(63, 38, -48, 18);
setTile(63, 38, -47, 18);
setTile(63, 39, -52, 18);
setTile(63, 39, -51, 18);
setTile(63, 39, -50, 18);
setTile(63, 39, -49, 17);
setTile(63, 39, -48, 18);
setTile(63, 39, -47, 18);
setTile(63, 39, -46, 18);
setTile(63, 40, -54, 18);
setTile(63, 40, -53, 18);
setTile(63, 40, -52, 18);
setTile(63, 40, -51, 18);
setTile(63, 40, -50, 18);
setTile(63, 40, -49, 18);
setTile(63, 40, -48, 18);
setTile(63, 40, -47, 18);
setTile(63, 40, -46, 18);
setTile(63, 41, -62, 161, 1);
setTile(63, 41, -61, 161, 1);
setTile(63, 41, -60, 161, 1);
setTile(63, 41, -59, 161, 1);
setTile(63, 41, -54, 18);
setTile(63, 41, -53, 18);
setTile(63, 41, -52, 18);
setTile(63, 41, -51, 18);
setTile(63, 41, -50, 17, 4);
setTile(63, 41, -49, 17, 4);
setTile(63, 41, -48, 18);
setTile(63, 41, -47, 18);
setTile(63, 41, -46, 18);
setTile(63, 41, -45, 18);
setTile(63, 42, -53, 18);
setTile(63, 42, -52, 18);
setTile(63, 42, -51, 18);
setTile(63, 42, -50, 18);
setTile(63, 42, -49, 18);
setTile(63, 42, -48, 18);
setTile(63, 42, -47, 18);
setTile(63, 42, -46, 18);
setTile(63, 43, -52, 18);
setTile(63, 43, -51, 18);
setTile(63, 43, -50, 18);
setTile(63, 43, -49, 18);
setTile(63, 43, -48, 18);
setTile(63, 43, -47, 18);
setTile(63, 43, -46, 18);
setTile(63, 44, -52, 18);
setTile(63, 44, -51, 18);
setTile(63, 44, -50, 18);
setTile(63, 44, -49, 18);
setTile(63, 44, -48, 18);
setTile(63, 44, -47, 18);
setTile(63, 45, -51, 18);
setTile(63, 45, -50, 18);
setTile(63, 45, -49, 18);
setTile(63, 45, -48, 18);
setTile(63, 46, -50, 18);
setTile(64, 35, -108, 11, 6);
setTile(64, 35, -89, 31, 1);
setTile(64, 35, -88, 31, 1);
setTile(64, 35, -86, 175, 1);
setTile(64, 35, -85, 31, 1);
setTile(64, 35, -84, 38);
setTile(64, 35, -83, 31, 1);
setTile(64, 35, -82, 31, 1);
setTile(64, 35, -81, 31, 1);
setTile(64, 35, -80, 175, 2);
setTile(64, 35, -79, 175, 2);
setTile(64, 35, -77, 31, 1);
setTile(64, 35, -75, 31, 1);
setTile(64, 35, -74, 37);
setTile(64, 35, -69, 31, 1);
setTile(64, 35, -68, 37);
setTile(64, 35, -67, 31, 1);
setTile(64, 35, -66, 31, 2);
setTile(64, 35, -65, 31, 1);
setTile(64, 35, -64, 31, 1);
setTile(64, 35, -62, 31, 1);
setTile(64, 35, -60, 31, 1);
setTile(64, 35, -59, 31, 1);
setTile(64, 35, -55, 31, 2);
setTile(64, 35, -52, 31, 1);
setTile(64, 35, -46, 31, 1);
setTile(64, 35, -45, 37);
setTile(64, 35, -44, 31, 1);
setTile(64, 35, -43, 31, 1);
setTile(64, 35, -41, 31, 1);
setTile(64, 36, -86, 175, 8);
setTile(64, 36, -80, 175, 8);
setTile(64, 36, -79, 175, 8);
setTile(64, 37, -51, 18);
setTile(64, 37, -50, 18);
setTile(64, 37, -49, 18);
setTile(64, 37, -48, 18);
setTile(64, 37, -47, 18);
setTile(64, 38, -61, 18);
setTile(64, 38, -60, 18);
setTile(64, 38, -59, 18);
setTile(64, 38, -51, 18);
setTile(64, 38, -50, 18);
setTile(64, 38, -49, 18);
setTile(64, 38, -48, 18);
setTile(64, 38, -47, 18);
setTile(64, 39, -61, 18);
setTile(64, 39, -60, 18);
setTile(64, 39, -59, 18);
setTile(64, 39, -58, 18);
setTile(64, 39, -57, 18);
setTile(64, 39, -56, 18);
setTile(64, 39, -50, 18);
setTile(64, 39, -49, 18);
setTile(64, 39, -48, 18);
setTile(64, 39, -47, 18);
setTile(64, 40, -58, 18);
setTile(64, 40, -57, 18);
setTile(64, 40, -53, 18);
setTile(64, 40, -52, 18);
setTile(64, 40, -51, 18);
setTile(64, 40, -49, 18);
setTile(64, 40, -48, 18);
setTile(64, 40, -47, 18);
setTile(64, 40, -46, 18);
setTile(64, 41, -60, 18);
setTile(64, 41, -59, 18);
setTile(64, 41, -58, 18);
setTile(64, 41, -53, 18);
setTile(64, 41, -52, 18);
setTile(64, 41, -51, 18);
setTile(64, 41, -50, 17, 4);
setTile(64, 41, -49, 17, 4);
setTile(64, 41, -48, 18);
setTile(64, 41, -47, 18);
setTile(64, 41, -46, 18);
setTile(64, 41, -45, 18);
setTile(64, 42, -59, 18);
setTile(64, 42, -53, 18);
setTile(64, 42, -52, 18);
setTile(64, 42, -51, 18);
setTile(64, 42, -50, 18);
setTile(64, 42, -49, 18);
setTile(64, 42, -48, 18);
setTile(64, 42, -47, 18);
setTile(64, 43, -52, 18);
setTile(64, 43, -51, 18);
setTile(64, 43, -50, 18);
setTile(64, 43, -49, 18);
setTile(64, 43, -48, 18);
setTile(64, 43, -47, 18);
setTile(64, 43, -46, 18);
setTile(64, 44, -51, 18);
setTile(64, 44, -50, 18);
setTile(64, 44, -49, 18);
setTile(64, 44, -48, 18);
setTile(64, 44, -47, 18);
setTile(64, 45, -50, 18);
setTile(64, 45, -49, 18);
setTile(64, 45, -48, 18);
setTile(65, 35, -89, 31, 1);
setTile(65, 35, -88, 31, 1);
setTile(65, 35, -87, 175, 2);
setTile(65, 35, -86, 37);
setTile(65, 35, -84, 31, 1);
setTile(65, 35, -83, 37);
setTile(65, 35, -82, 38, 2);
setTile(65, 35, -81, 31, 1);
setTile(65, 35, -80, 38);
setTile(65, 35, -78, 38, 4);
setTile(65, 35, -77, 31, 1);
setTile(65, 35, -76, 31, 1);
setTile(65, 35, -75, 38);
setTile(65, 35, -74, 31, 1);
setTile(65, 35, -69, 31, 1);
setTile(65, 35, -68, 31, 1);
setTile(65, 35, -67, 37);
setTile(65, 35, -66, 31, 1);
setTile(65, 35, -65, 31, 1);
setTile(65, 35, -64, 38);
setTile(65, 35, -63, 31, 1);
setTile(65, 35, -61, 31, 1);
setTile(65, 35, -60, 31, 1);
setTile(65, 35, -52, 31, 1);
setTile(65, 35, -51, 31, 1);
setTile(65, 35, -50, 31, 1);
setTile(65, 35, -48, 31, 1);
setTile(65, 35, -47, 38);
setTile(65, 35, -46, 31, 1);
setTile(65, 35, -45, 175, 2);
setTile(65, 35, -43, 31, 1);
setTile(65, 36, -87, 175, 8);
setTile(65, 36, -45, 175, 8);
setTile(65, 37, -60, 18);
setTile(65, 37, -50, 18);
setTile(65, 37, -49, 18);
setTile(65, 37, -48, 18);
setTile(65, 37, -47, 18);
setTile(65, 38, -62, 18);
setTile(65, 38, -61, 18);
setTile(65, 38, -60, 18);
setTile(65, 38, -59, 18);
setTile(65, 38, -58, 18);
setTile(65, 38, -57, 18);
setTile(65, 38, -51, 18);
setTile(65, 38, -50, 18);
setTile(65, 38, -49, 18);
setTile(65, 38, -48, 18);
setTile(65, 38, -47, 18);
setTile(65, 39, -62, 18);
setTile(65, 39, -61, 18);
setTile(65, 39, -60, 18);
setTile(65, 39, -59, 18);
setTile(65, 39, -58, 18);
setTile(65, 39, -57, 18);
setTile(65, 39, -56, 18);
setTile(65, 39, -55, 18);
setTile(65, 40, -60, 18);
setTile(65, 40, -59, 18);
setTile(65, 40, -58, 18);
setTile(65, 40, -57, 18);
setTile(65, 40, -56, 18);
setTile(65, 40, -48, 18);
setTile(65, 40, -47, 18);
setTile(65, 40, -46, 18);
setTile(65, 41, -61, 18);
setTile(65, 41, -60, 18);
setTile(65, 41, -59, 18);
setTile(65, 41, -58, 18);
setTile(65, 41, -57, 18);
setTile(65, 41, -50, 18);
setTile(65, 41, -48, 18);
setTile(65, 41, -47, 18);
setTile(65, 41, -46, 18);
setTile(65, 42, -60, 18);
setTile(65, 42, -59, 18);
setTile(65, 42, -58, 18);
setTile(65, 42, -52, 18);
setTile(65, 42, -51, 18);
setTile(65, 42, -50, 18);
setTile(65, 42, -49, 18);
setTile(65, 42, -48, 17, 4);
setTile(65, 42, -47, 18);
setTile(65, 43, -59, 18);
setTile(65, 43, -51, 18);
setTile(65, 43, -50, 18);
setTile(65, 43, -49, 18);
setTile(65, 43, -48, 18);
setTile(65, 43, -47, 18);
setTile(65, 43, -46, 18);
setTile(65, 44, -50, 18);
setTile(65, 44, -49, 18);
setTile(65, 44, -48, 18);
setTile(65, 44, -47, 18);
setTile(65, 44, -46, 18);
setTile(65, 45, -49, 18);
setTile(65, 45, -48, 18);
setTile(65, 45, -47, 18);
setTile(66, 35, -89, 31, 1);
setTile(66, 35, -88, 31, 1);
setTile(66, 35, -87, 31, 1);
setTile(66, 35, -86, 31, 1);
setTile(66, 35, -85, 38);
setTile(66, 35, -84, 31, 1);
setTile(66, 35, -83, 31, 1);
setTile(66, 35, -82, 31, 1);
setTile(66, 35, -81, 37);
setTile(66, 35, -78, 37);
setTile(66, 35, -77, 31, 1);
setTile(66, 35, -68, 31, 1);
setTile(66, 35, -67, 31, 1);
setTile(66, 35, -66, 31, 1);
setTile(66, 35, -65, 31, 1);
setTile(66, 35, -64, 31, 2);
setTile(66, 35, -63, 31, 1);
setTile(66, 35, -61, 31, 1);
setTile(66, 35, -60, 31, 1);
setTile(66, 35, -59, 17);
setTile(66, 35, -57, 31, 1);
setTile(66, 35, -55, 38);
setTile(66, 35, -53, 31, 2);
setTile(66, 35, -52, 31, 1);
setTile(66, 35, -51, 31, 1);
setTile(66, 35, -50, 31, 2);
setTile(66, 35, -48, 31, 2);
setTile(66, 35, -46, 31, 1);
setTile(66, 35, -45, 31, 1);
setTile(66, 35, -44, 38);
setTile(66, 35, -42, 31, 1);
setTile(66, 35, -41, 31, 1);
setTile(66, 36, -59, 17);
setTile(66, 37, -61, 18);
setTile(66, 37, -60, 18);
setTile(66, 37, -59, 17);
setTile(66, 38, -62, 18);
setTile(66, 38, -61, 18);
setTile(66, 38, -60, 18);
setTile(66, 38, -59, 17);
setTile(66, 38, -58, 17, 8);
setTile(66, 38, -57, 17, 8);
setTile(66, 38, -56, 18);
setTile(66, 39, -62, 18);
setTile(66, 39, -61, 18);
setTile(66, 39, -60, 18);
setTile(66, 39, -59, 17);
setTile(66, 39, -58, 18);
setTile(66, 39, -57, 18);
setTile(66, 39, -56, 18);
setTile(66, 39, -55, 18);
setTile(66, 40, -61, 18);
setTile(66, 40, -60, 18);
setTile(66, 40, -59, 17);
setTile(66, 40, -58, 18);
setTile(66, 40, -57, 18);
setTile(66, 40, -56, 18);
setTile(66, 40, -55, 18);
setTile(66, 40, -43, 161, 1);
setTile(66, 40, -42, 161, 1);
setTile(66, 40, -41, 161, 1);
setTile(66, 40, -40, 161, 1);
setTile(66, 41, -61, 18);
setTile(66, 41, -60, 18);
setTile(66, 41, -59, 18);
setTile(66, 41, -58, 18);
setTile(66, 41, -57, 18);
setTile(66, 41, -56, 18);
setTile(66, 41, -44, 161, 1);
setTile(66, 41, -43, 161, 1);
setTile(66, 41, -42, 161, 1);
setTile(66, 41, -41, 161, 1);
setTile(66, 42, -61, 18);
setTile(66, 42, -60, 18);
setTile(66, 42, -59, 18);
setTile(66, 42, -58, 18);
setTile(66, 42, -57, 18);
setTile(66, 42, -51, 18);
setTile(66, 42, -50, 18);
setTile(66, 42, -49, 18);
setTile(66, 42, -48, 18);
setTile(66, 43, -60, 18);
setTile(66, 43, -59, 18);
setTile(66, 43, -58, 18);
setTile(66, 43, -50, 18);
setTile(66, 43, -49, 18);
setTile(66, 43, -48, 18);
setTile(66, 43, -47, 18);
setTile(66, 43, -46, 18);
setTile(66, 44, -49, 18);
setTile(66, 44, -48, 18);
setTile(66, 44, -47, 18);
setTile(66, 45, -48, 18);
setTile(67, 34, -109, 44);
setTile(67, 34, -108, 44);
setTile(67, 35, -90, 31, 1);
setTile(67, 35, -89, 31, 1);
setTile(67, 35, -88, 175, 2);
setTile(67, 35, -87, 175, 1);
setTile(67, 35, -84, 175, 1);
setTile(67, 35, -83, 31, 1);
setTile(67, 35, -82, 31, 1);
setTile(67, 35, -81, 31, 1);
setTile(67, 35, -80, 31, 2);
setTile(67, 35, -79, 31, 1);
setTile(67, 35, -78, 31, 1);
setTile(67, 35, -77, 175);
setTile(67, 35, -76, 31, 1);
setTile(67, 35, -75, 175, 2);
setTile(67, 35, -69, 31, 1);
setTile(67, 35, -68, 38);
setTile(67, 35, -66, 31, 1);
setTile(67, 35, -65, 31, 1);
setTile(67, 35, -64, 31, 2);
setTile(67, 35, -63, 31, 1);
setTile(67, 35, -61, 31, 1);
setTile(67, 35, -59, 38);
setTile(67, 35, -58, 31, 1);
setTile(67, 35, -57, 31, 1);
setTile(67, 35, -56, 31, 1);
setTile(67, 35, -55, 31, 1);
setTile(67, 35, -51, 31, 1);
setTile(67, 35, -50, 31, 1);
setTile(67, 35, -49, 31, 2);
setTile(67, 35, -48, 37);
setTile(67, 35, -45, 31, 1);
setTile(67, 36, -88, 175, 8);
setTile(67, 36, -87, 175, 8);
setTile(67, 36, -84, 175, 8);
setTile(67, 36, -77, 175, 8);
setTile(67, 36, -75, 175, 8);
setTile(67, 37, -62, 162, 1);
setTile(67, 37, -60, 18);
setTile(67, 38, -62, 162, 1);
setTile(67, 38, -61, 18);
setTile(67, 38, -60, 18);
setTile(67, 38, -59, 18);
setTile(67, 38, -58, 18);
setTile(67, 38, -57, 18);
setTile(67, 39, -64, 162, 1);
setTile(67, 39, -62, 162, 1);
setTile(67, 39, -61, 18);
setTile(67, 39, -60, 18);
setTile(67, 39, -59, 18);
setTile(67, 39, -58, 17, 4);
setTile(67, 39, -57, 17, 8);
setTile(67, 39, -56, 18);
setTile(67, 39, -55, 18);
setTile(67, 40, -65, 161, 1);
setTile(67, 40, -64, 162, 1);
setTile(67, 40, -63, 161, 1);
setTile(67, 40, -62, 162, 1);
setTile(67, 40, -61, 161, 1);
setTile(67, 40, -60, 18);
setTile(67, 40, -59, 18);
setTile(67, 40, -58, 18);
setTile(67, 40, -57, 18);
setTile(67, 40, -56, 18);
setTile(67, 40, -55, 18);
setTile(67, 40, -44, 161, 1);
setTile(67, 40, -43, 161, 1);
setTile(67, 40, -42, 161, 1);
setTile(67, 40, -41, 161, 1);
setTile(67, 40, -40, 161, 1);
setTile(67, 40, -39, 161, 1);
setTile(67, 41, -65, 161, 1);
setTile(67, 41, -64, 161, 1);
setTile(67, 41, -63, 161, 1);
setTile(67, 41, -62, 161, 1);
setTile(67, 41, -61, 18);
setTile(67, 41, -60, 18);
setTile(67, 41, -59, 18);
setTile(67, 41, -58, 18);
setTile(67, 41, -57, 18);
setTile(67, 41, -56, 18);
setTile(67, 41, -55, 18);
setTile(67, 41, -45, 161, 1);
setTile(67, 41, -44, 161, 1);
setTile(67, 41, -43, 161, 1);
setTile(67, 41, -42, 161, 1);
setTile(67, 41, -41, 161, 1);
setTile(67, 41, -40, 161, 1);
setTile(67, 42, -61, 18);
setTile(67, 42, -60, 18);
setTile(67, 42, -59, 18);
setTile(67, 42, -58, 18);
setTile(67, 42, -57, 18);
setTile(67, 42, -56, 18);
setTile(67, 42, -42, 161, 1);
setTile(67, 42, -41, 161, 1);
setTile(67, 43, -59, 18);
setTile(67, 43, -49, 18);
setTile(67, 43, -48, 18);
setTile(67, 43, -47, 18);
setTile(67, 44, -48, 18);
setTile(68, 34, -109, 44);
setTile(68, 34, -108, 44);
setTile(68, 35, -89, 31, 1);
setTile(68, 35, -88, 31, 1);
setTile(68, 35, -87, 31, 1);
setTile(68, 35, -85, 31, 2);
setTile(68, 35, -84, 31, 1);
setTile(68, 35, -83, 31, 1);
setTile(68, 35, -82, 31, 1);
setTile(68, 35, -81, 38);
setTile(68, 35, -79, 175);
setTile(68, 35, -78, 31, 1);
setTile(68, 35, -77, 31, 1);
setTile(68, 35, -76, 31, 2);
setTile(68, 35, -74, 31, 1);
setTile(68, 35, -68, 31, 1);
setTile(68, 35, -67, 38);
setTile(68, 35, -66, 31, 1);
setTile(68, 35, -65, 37);
setTile(68, 35, -63, 162, 1);
setTile(68, 35, -62, 162, 1);
setTile(68, 35, -61, 31, 1);
setTile(68, 35, -59, 175, 2);
setTile(68, 35, -57, 31, 1);
setTile(68, 35, -56, 31, 1);
setTile(68, 35, -55, 31, 1);
setTile(68, 35, -53, 31, 1);
setTile(68, 35, -52, 31, 1);
setTile(68, 35, -50, 31, 1);
setTile(68, 35, -49, 31, 1);
setTile(68, 35, -48, 31, 1);
setTile(68, 36, -79, 175, 8);
setTile(68, 36, -63, 162, 1);
setTile(68, 36, -62, 162, 1);
setTile(68, 36, -59, 175, 8);
setTile(68, 37, -63, 162, 1);
setTile(68, 37, -62, 162, 1);
setTile(68, 37, -42, 162, 1);
setTile(68, 38, -63, 162, 1);
setTile(68, 38, -62, 162, 1);
setTile(68, 38, -61, 18);
setTile(68, 38, -60, 18);
setTile(68, 38, -59, 18);
setTile(68, 38, -43, 162, 1);
setTile(68, 38, -42, 162, 1);
setTile(68, 39, -63, 162, 1);
setTile(68, 39, -62, 162, 1);
setTile(68, 39, -61, 162, 1);
setTile(68, 39, -60, 18);
setTile(68, 39, -59, 18);
setTile(68, 39, -58, 18);
setTile(68, 39, -57, 18);
setTile(68, 39, -56, 18);
setTile(68, 39, -43, 162, 1);
setTile(68, 39, -42, 162, 1);
setTile(68, 40, -66, 161, 1);
setTile(68, 40, -65, 161, 1);
setTile(68, 40, -64, 161, 1);
setTile(68, 40, -63, 162, 1);
setTile(68, 40, -62, 162, 1);
setTile(68, 40, -61, 162, 1);
setTile(68, 40, -60, 161, 1);
setTile(68, 40, -59, 18);
setTile(68, 40, -58, 18);
setTile(68, 40, -57, 18);
setTile(68, 40, -56, 18);
setTile(68, 40, -55, 18);
setTile(68, 40, -44, 161, 1);
setTile(68, 40, -43, 162, 1);
setTile(68, 40, -42, 162, 1);
setTile(68, 40, -41, 161, 1);
setTile(68, 40, -40, 161, 1);
setTile(68, 40, -39, 161, 1);
setTile(68, 41, -66, 161, 1);
setTile(68, 41, -65, 161, 1);
setTile(68, 41, -64, 161, 1);
setTile(68, 41, -63, 162, 1);
setTile(68, 41, -62, 162, 1);
setTile(68, 41, -61, 161, 1);
setTile(68, 41, -60, 18);
setTile(68, 41, -59, 18);
setTile(68, 41, -58, 18);
setTile(68, 41, -57, 18);
setTile(68, 41, -56, 18);
setTile(68, 41, -45, 161, 1);
setTile(68, 41, -44, 161, 1);
setTile(68, 41, -43, 161, 1);
setTile(68, 41, -42, 161, 1);
setTile(68, 41, -41, 161, 1);
setTile(68, 41, -40, 161, 1);
setTile(68, 41, -39, 161, 1);
setTile(68, 42, -63, 161, 1);
setTile(68, 42, -62, 161, 1);
setTile(68, 42, -60, 18);
setTile(68, 42, -59, 18);
setTile(68, 42, -58, 18);
setTile(68, 42, -57, 18);
setTile(68, 42, -43, 161, 1);
setTile(68, 42, -42, 161, 1);
setTile(68, 42, -41, 161, 1);
setTile(68, 42, -40, 161, 1);
setTile(69, 34, -109, 44);
setTile(69, 34, -108, 44);
setTile(69, 35, -88, 175, 2);
setTile(69, 35, -87, 31, 1);
setTile(69, 35, -85, 31, 1);
setTile(69, 35, -84, 31, 1);
setTile(69, 35, -83, 37);
setTile(69, 35, -82, 31, 1);
setTile(69, 35, -81, 38);
setTile(69, 35, -80, 31, 1);
setTile(69, 35, -78, 37);
setTile(69, 35, -77, 31, 1);
setTile(69, 35, -76, 175, 2);
setTile(69, 35, -75, 31, 1);
setTile(69, 35, -74, 31, 1);
setTile(69, 35, -67, 31, 1);
setTile(69, 35, -66, 31, 1);
setTile(69, 35, -63, 162, 1);
setTile(69, 35, -62, 162, 1);
setTile(69, 35, -60, 31, 1);
setTile(69, 35, -57, 31, 1);
setTile(69, 35, -56, 31, 1);
setTile(69, 35, -55, 31, 1);
setTile(69, 35, -54, 31, 1);
setTile(69, 35, -51, 31, 1);
setTile(69, 35, -50, 31, 1);
setTile(69, 35, -49, 31, 1);
setTile(69, 35, -47, 31, 1);
setTile(69, 35, -43, 162, 1);
setTile(69, 35, -42, 162, 1);
setTile(69, 36, -88, 175, 8);
setTile(69, 36, -76, 175, 8);
setTile(69, 36, -63, 162, 1);
setTile(69, 36, -62, 162, 1);
setTile(69, 36, -43, 162, 1);
setTile(69, 36, -42, 162, 1);
setTile(69, 37, -63, 162, 1);
setTile(69, 37, -62, 162, 1);
setTile(69, 37, -61, 162, 1);
setTile(69, 37, -43, 162, 1);
setTile(69, 37, -42, 162, 1);
setTile(69, 38, -63, 162, 1);
setTile(69, 38, -62, 162, 1);
setTile(69, 38, -61, 162, 1);
setTile(69, 38, -43, 162, 1);
setTile(69, 38, -42, 162, 1);
setTile(69, 39, -63, 162, 1);
setTile(69, 39, -62, 162, 1);
setTile(69, 39, -61, 162, 1);
setTile(69, 39, -43, 162, 1);
setTile(69, 39, -42, 162, 1);
setTile(69, 40, -66, 161, 1);
setTile(69, 40, -65, 161, 1);
setTile(69, 40, -64, 161, 1);
setTile(69, 40, -63, 162, 1);
setTile(69, 40, -62, 162, 1);
setTile(69, 40, -61, 162, 1);
setTile(69, 40, -60, 161, 1);
setTile(69, 40, -59, 161, 1);
setTile(69, 40, -58, 18);
setTile(69, 40, -57, 18);
setTile(69, 40, -56, 18);
setTile(69, 40, -44, 161, 1);
setTile(69, 40, -43, 162, 1);
setTile(69, 40, -42, 162, 1);
setTile(69, 40, -41, 161, 1);
setTile(69, 40, -40, 161, 1);
setTile(69, 40, -39, 161, 1);
setTile(69, 41, -66, 161, 1);
setTile(69, 41, -65, 161, 1);
setTile(69, 41, -64, 161, 1);
setTile(69, 41, -63, 162, 1);
setTile(69, 41, -62, 162, 1);
setTile(69, 41, -61, 161, 1);
setTile(69, 41, -60, 161, 1);
setTile(69, 41, -59, 161, 1);
setTile(69, 41, -58, 18);
setTile(69, 41, -57, 18);
setTile(69, 41, -45, 161, 1);
setTile(69, 41, -44, 161, 1);
setTile(69, 41, -43, 162, 1);
setTile(69, 41, -42, 162, 1);
setTile(69, 41, -41, 161, 1);
setTile(69, 41, -40, 161, 1);
setTile(69, 41, -39, 161, 1);
setTile(69, 41, -38, 161, 1);
setTile(69, 42, -64, 161, 1);
setTile(69, 42, -63, 161, 1);
setTile(69, 42, -62, 161, 1);
setTile(69, 42, -61, 161, 1);
setTile(69, 42, -44, 161, 1);
setTile(69, 42, -43, 161, 1);
setTile(69, 42, -42, 161, 1);
setTile(69, 42, -41, 161, 1);
setTile(69, 42, -40, 161, 1);
setTile(69, 42, -39, 161, 1);
setTile(69, 43, -42, 161, 1);
setTile(69, 43, -41, 161, 1);
setTile(70, 34, -109, 44);
setTile(70, 34, -108, 44);
setTile(70, 35, -90, 31, 1);
setTile(70, 35, -89, 38);
setTile(70, 35, -88, 31, 1);
setTile(70, 35, -87, 175, 2);
setTile(70, 35, -86, 31, 1);
setTile(70, 35, -85, 31, 1);
setTile(70, 35, -84, 175, 2);
setTile(70, 35, -83, 38);
setTile(70, 35, -82, 31, 1);
setTile(70, 35, -81, 31, 2);
setTile(70, 35, -79, 31, 1);
setTile(70, 35, -78, 31, 1);
setTile(70, 35, -77, 31, 1);
setTile(70, 35, -76, 38, 4);
setTile(70, 35, -74, 38);
setTile(70, 35, -57, 31, 1);
setTile(70, 35, -56, 31, 2);
setTile(70, 35, -51, 31, 1);
setTile(70, 35, -43, 162, 1);
setTile(70, 35, -42, 162, 1);
setTile(70, 36, -87, 175, 8);
setTile(70, 36, -84, 175, 8);
setTile(70, 36, -43, 162, 1);
setTile(70, 36, -42, 162, 1);
setTile(70, 37, -61, 162, 1);
setTile(70, 37, -43, 162, 1);
setTile(70, 37, -42, 162, 1);
setTile(70, 38, -61, 162, 1);
setTile(70, 38, -43, 162, 1);
setTile(70, 38, -42, 162, 1);
setTile(70, 39, -61, 162, 1);
setTile(70, 39, -43, 162, 1);
setTile(70, 39, -42, 162, 1);
setTile(70, 40, -66, 161, 1);
setTile(70, 40, -65, 161, 1);
setTile(70, 40, -64, 161, 1);
setTile(70, 40, -63, 161, 1);
setTile(70, 40, -62, 161, 1);
setTile(70, 40, -61, 162, 1);
setTile(70, 40, -60, 161, 1);
setTile(70, 40, -59, 161, 1);
setTile(70, 40, -44, 161, 1);
setTile(70, 40, -43, 162, 1);
setTile(70, 40, -42, 162, 1);
setTile(70, 40, -41, 161, 1);
setTile(70, 40, -40, 161, 1);
setTile(70, 40, -39, 161, 1);
setTile(70, 40, -38, 161, 1);
setTile(70, 41, -66, 161, 1);
setTile(70, 41, -65, 161, 1);
setTile(70, 41, -64, 161, 1);
setTile(70, 41, -63, 161, 1);
setTile(70, 41, -62, 161, 1);
setTile(70, 41, -61, 161, 1);
setTile(70, 41, -60, 161, 1);
setTile(70, 41, -59, 161, 1);
setTile(70, 41, -45, 161, 1);
setTile(70, 41, -44, 161, 1);
setTile(70, 41, -43, 162, 1);
setTile(70, 41, -42, 162, 1);
setTile(70, 41, -41, 161, 1);
setTile(70, 41, -40, 161, 1);
setTile(70, 41, -39, 161, 1);
setTile(70, 41, -38, 161, 1);
setTile(70, 42, -65, 161, 1);
setTile(70, 42, -64, 161, 1);
setTile(70, 42, -63, 161, 1);
setTile(70, 42, -62, 161, 1);
setTile(70, 42, -61, 161, 1);
setTile(70, 42, -60, 161, 1);
setTile(70, 42, -44, 161, 1);
setTile(70, 42, -43, 161, 1);
setTile(70, 42, -42, 161, 1);
setTile(70, 42, -41, 161, 1);
setTile(70, 42, -40, 161, 1);
setTile(70, 42, -39, 161, 1);
setTile(70, 43, -63, 161, 1);
setTile(70, 43, -62, 161, 1);
setTile(70, 43, -42, 161, 1);
setTile(70, 43, -41, 161, 1);
setTile(71, 34, -109, 44);
setTile(71, 34, -108, 44);
setTile(71, 34, -73, 44);
setTile(71, 34, -72, 44);
setTile(71, 34, -71, 44);
setTile(71, 34, -70, 44);
setTile(71, 34, -69, 44);
setTile(71, 34, -68, 44);
setTile(71, 35, -88, 37);
setTile(71, 35, -85, 31, 1);
setTile(71, 35, -84, 31, 1);
setTile(71, 35, -83, 175, 2);
setTile(71, 35, -82, 31, 2);
setTile(71, 35, -81, 31, 1);
setTile(71, 35, -79, 31, 1);
setTile(71, 35, -77, 175, 2);
setTile(71, 35, -76, 31, 1);
setTile(71, 35, -75, 31, 1);
setTile(71, 35, -74, 31, 1);
setTile(71, 36, -83, 175, 8);
setTile(71, 36, -77, 175, 8);
setTile(71, 38, -41, 162, 1);
setTile(71, 39, -41, 162, 1);
setTile(71, 40, -65, 161, 1);
setTile(71, 40, -64, 161, 1);
setTile(71, 40, -63, 161, 1);
setTile(71, 40, -62, 161, 1);
setTile(71, 40, -61, 161, 1);
setTile(71, 40, -60, 161, 1);
setTile(71, 40, -59, 161, 1);
setTile(71, 40, -44, 161, 1);
setTile(71, 40, -43, 161, 1);
setTile(71, 40, -42, 161, 1);
setTile(71, 40, -41, 162, 1);
setTile(71, 40, -40, 161, 1);
setTile(71, 40, -39, 161, 1);
setTile(71, 40, -38, 161, 1);
setTile(71, 41, -65, 161, 1);
setTile(71, 41, -64, 161, 1);
setTile(71, 41, -63, 161, 1);
setTile(71, 41, -62, 161, 1);
setTile(71, 41, -61, 161, 1);
setTile(71, 41, -60, 161, 1);
setTile(71, 41, -59, 161, 1);
setTile(71, 41, -45, 161, 1);
setTile(71, 41, -44, 161, 1);
setTile(71, 41, -43, 161, 1);
setTile(71, 41, -42, 161, 1);
setTile(71, 41, -41, 161, 1);
setTile(71, 41, -40, 161, 1);
setTile(71, 41, -39, 161, 1);
setTile(71, 41, -38, 161, 1);
setTile(71, 42, -64, 161, 1);
setTile(71, 42, -63, 161, 1);
setTile(71, 42, -62, 161, 1);
setTile(71, 42, -61, 161, 1);
setTile(71, 42, -60, 161, 1);
setTile(71, 42, -43, 161, 1);
setTile(71, 42, -42, 161, 1);
setTile(71, 42, -41, 161, 1);
setTile(71, 42, -40, 161, 1);
setTile(71, 43, -63, 161, 1);
setTile(71, 43, -62, 161, 1);
setTile(72, 34, -109, 44);
setTile(72, 34, -108, 44);
setTile(72, 34, -73, 44);
setTile(72, 34, -72, 44);
setTile(72, 34, -71, 44);
setTile(72, 34, -70, 44);
setTile(72, 34, -69, 44);
setTile(72, 34, -68, 44);
setTile(72, 35, -82, 31, 1);
setTile(72, 35, -81, 38, 8);
setTile(72, 35, -80, 31, 1);
setTile(72, 35, -76, 31, 1);
setTile(72, 35, -74, 31, 1);
setTile(72, 40, -64, 161, 1);
setTile(72, 40, -63, 161, 1);
setTile(72, 40, -62, 161, 1);
setTile(72, 40, -61, 161, 1);
setTile(72, 40, -60, 161, 1);
setTile(72, 40, -59, 161, 1);
setTile(72, 40, -44, 161, 1);
setTile(72, 40, -43, 161, 1);
setTile(72, 40, -42, 161, 1);
setTile(72, 40, -41, 161, 1);
setTile(72, 40, -40, 161, 1);
setTile(72, 40, -39, 161, 1);
setTile(72, 40, -38, 161, 1);
setTile(72, 41, -64, 161, 1);
setTile(72, 41, -63, 161, 1);
setTile(72, 41, -62, 161, 1);
setTile(72, 41, -61, 161, 1);
setTile(72, 41, -60, 161, 1);
setTile(72, 41, -44, 161, 1);
setTile(72, 41, -43, 161, 1);
setTile(72, 41, -42, 161, 1);
setTile(72, 41, -41, 161, 1);
setTile(72, 41, -40, 161, 1);
setTile(72, 41, -39, 161, 1);
setTile(72, 42, -63, 161, 1);
setTile(72, 42, -62, 161, 1);
setTile(72, 42, -61, 161, 1);
setTile(72, 42, -42, 161, 1);
setTile(72, 42, -41, 161, 1);
setTile(73, 34, -109, 44);
setTile(73, 34, -108, 44);
setTile(73, 34, -89, 44);
setTile(73, 34, -88, 44);
setTile(73, 34, -69, 44);
setTile(73, 34, -68, 44);
setTile(73, 40, -63, 161, 1);
setTile(73, 40, -62, 161, 1);
setTile(73, 40, -61, 161, 1);
setTile(73, 40, -60, 161, 1);
setTile(73, 40, -41, 161, 1);
setTile(73, 40, -40, 161, 1);
setTile(73, 40, -39, 161, 1);
setTile(73, 41, -63, 161, 1);
setTile(73, 41, -62, 161, 1);
setTile(73, 41, -61, 161, 1);
setTile(73, 41, -44, 161, 1);
setTile(73, 41, -43, 161, 1);
setTile(73, 41, -42, 161, 1);
setTile(73, 41, -41, 161, 1);
setTile(73, 41, -40, 161, 1);
setTile(74, 34, -109, 44);
setTile(74, 34, -108, 44);
setTile(74, 34, -89, 44);
setTile(74, 34, -88, 44);
setTile(74, 34, -69, 44);
setTile(74, 34, -68, 44);
setTile(74, 40, -61, 161, 1);
setTile(75, 34, -69, 44);
setTile(75, 34, -68, 44);
setTile(76, 40, -70, 99, 1);
setTile(76, 40, -69, 99, 4);
setTile(76, 40, -68, 99, 4);
setTile(76, 40, -67, 99, 4);
setTile(76, 40, -66, 99, 7);
setTile(77, 40, -71, 99, 1);
setTile(77, 40, -70, 99, 5);
setTile(77, 40, -69, 99, 5);
setTile(77, 40, -68, 99, 5);
setTile(77, 40, -67, 99, 5);
setTile(77, 40, -66, 99, 5);
setTile(77, 40, -65, 99, 7);
setTile(78, 34, -85, 44);
setTile(78, 34, -84, 44);
setTile(78, 34, -83, 44);
setTile(78, 34, -82, 44);
setTile(78, 34, -81, 44);
setTile(78, 34, -80, 44);
setTile(78, 34, -79, 44);
setTile(78, 34, -78, 44);
setTile(78, 34, -77, 44);
setTile(78, 34, -76, 44);
setTile(78, 34, -75, 44);
setTile(78, 35, -61, 39);
setTile(78, 40, -71, 99, 2);
setTile(78, 40, -70, 99, 5);
setTile(78, 40, -69, 99, 5);
setTile(78, 40, -68, 99, 5);
setTile(78, 40, -67, 99, 5);
setTile(78, 40, -66, 99, 5);
setTile(78, 40, -65, 99, 8);
setTile(79, 34, -85, 44);
setTile(79, 34, -84, 44);
setTile(79, 34, -83, 44);
setTile(79, 34, -82, 44);
setTile(79, 34, -81, 44);
setTile(79, 34, -80, 44);
setTile(79, 34, -79, 44);
setTile(79, 34, -78, 44);
setTile(79, 34, -77, 44);
setTile(79, 34, -76, 44);
setTile(79, 34, -75, 44);
setTile(79, 35, -72, 39);
setTile(79, 35, -68, 99, 10);
setTile(79, 36, -68, 99, 10);
setTile(79, 37, -68, 99, 10);
setTile(79, 38, -68, 99, 10);
setTile(79, 39, -68, 99, 10);
setTile(79, 40, -71, 99, 2);
setTile(79, 40, -70, 99, 5);
setTile(79, 40, -69, 99, 5);
setTile(79, 40, -68, 99, 5);
setTile(79, 40, -67, 99, 5);
setTile(79, 40, -66, 99, 5);
setTile(79, 40, -65, 99, 8);
setTile(80, 35, -63, 40);
setTile(80, 35, -59, 40);
setTile(80, 40, -71, 99, 2);
setTile(80, 40, -70, 99, 5);
setTile(80, 40, -69, 99, 5);
setTile(80, 40, -68, 99, 5);
setTile(80, 40, -67, 99, 5);
setTile(80, 40, -66, 99, 5);
setTile(80, 40, -65, 99, 8);
setTile(81, 35, -62, 40);
setTile(81, 40, -71, 99, 3);
setTile(81, 40, -70, 99, 5);
setTile(81, 40, -69, 99, 5);
setTile(81, 40, -68, 99, 5);
setTile(81, 40, -67, 99, 5);
setTile(81, 40, -66, 99, 5);
setTile(81, 40, -65, 99, 9);
setTile(81, 44, -95, 51, 15);
setTile(82, 35, -61, 40);
setTile(82, 40, -70, 99, 3);
setTile(82, 40, -69, 99, 6);
setTile(82, 40, -68, 99, 6);
setTile(82, 40, -67, 99, 6);
setTile(82, 40, -66, 99, 9);
setTile(82, 40, -64, 99, 1);
setTile(82, 40, -63, 99, 4);
setTile(82, 40, -62, 99, 4);
setTile(82, 40, -61, 99, 4);
setTile(82, 40, -60, 99, 7);
setTile(83, 40, -65, 99, 1);
setTile(83, 40, -64, 99, 5);
setTile(83, 40, -63, 99, 5);
setTile(83, 40, -62, 99, 5);
setTile(83, 40, -61, 99, 5);
setTile(83, 40, -60, 99, 5);
setTile(83, 40, -59, 99, 7);
setTile(84, 35, -70, 39);
setTile(84, 35, -60, 40);
setTile(84, 40, -65, 99, 2);
setTile(84, 40, -64, 99, 5);
setTile(84, 40, -63, 99, 5);
setTile(84, 40, -62, 99, 5);
setTile(84, 40, -61, 99, 5);
setTile(84, 40, -60, 99, 5);
setTile(84, 40, -59, 99, 8);
setTile(85, 35, -62, 99, 10);
setTile(85, 36, -62, 99, 10);
setTile(85, 37, -62, 99, 10);
setTile(85, 38, -72, 100, 1);
setTile(85, 38, -71, 100, 4);
setTile(85, 38, -70, 100, 7);
setTile(85, 38, -62, 99, 10);
setTile(85, 39, -72, 100, 1);
setTile(85, 39, -71, 100, 4);
setTile(85, 39, -70, 100, 7);
setTile(85, 39, -62, 99, 10);
setTile(85, 40, -72, 100, 1);
setTile(85, 40, -71, 100, 4);
setTile(85, 40, -70, 100, 7);
setTile(85, 40, -65, 99, 2);
setTile(85, 40, -64, 99, 5);
setTile(85, 40, -63, 99, 5);
setTile(85, 40, -62, 99, 5);
setTile(85, 40, -61, 99, 5);
setTile(85, 40, -60, 99, 5);
setTile(85, 40, -59, 99, 8);
setTile(86, 35, -67, 40);
setTile(86, 35, -65, 40);
setTile(86, 38, -73, 100, 1);
setTile(86, 38, -69, 100, 7);
setTile(86, 39, -73, 100, 1);
setTile(86, 39, -69, 100, 7);
setTile(86, 40, -73, 100, 1);
setTile(86, 40, -69, 100, 7);
setTile(86, 40, -65, 99, 2);
setTile(86, 40, -64, 99, 5);
setTile(86, 40, -63, 99, 5);
setTile(86, 40, -62, 99, 5);
setTile(86, 40, -61, 99, 5);
setTile(86, 40, -60, 99, 5);
setTile(86, 40, -59, 99, 8);
setTile(86, 41, -72, 100, 1);
setTile(86, 41, -71, 100, 4);
setTile(86, 41, -70, 100, 7);
setTile(87, 34, -61, 9);
setTile(87, 34, -60, 9);
setTile(87, 34, -59, 9);
setTile(87, 35, -71, 100, 10);
setTile(87, 35, -66, 40);
setTile(87, 36, -71, 100, 10);
setTile(87, 37, -71, 100, 10);
setTile(87, 38, -73, 100, 2);
setTile(87, 38, -71, 100, 10);
setTile(87, 38, -69, 100, 8);
setTile(87, 39, -73, 100, 2);
setTile(87, 39, -71, 100, 10);
setTile(87, 39, -69, 100, 8);
setTile(87, 40, -73, 100, 2);
setTile(87, 40, -71, 100, 10);
setTile(87, 40, -69, 100, 8);
setTile(87, 40, -65, 99, 3);
setTile(87, 40, -64, 99, 5);
setTile(87, 40, -63, 99, 5);
setTile(87, 40, -62, 99, 5);
setTile(87, 40, -61, 99, 5);
setTile(87, 40, -60, 99, 5);
setTile(87, 40, -59, 99, 9);
setTile(87, 41, -72, 100, 2);
setTile(87, 41, -71, 100, 5);
setTile(87, 41, -70, 100, 8);
setTile(87, 46, -43, 18, 3);
setTile(87, 46, -42, 18, 3);
setTile(87, 47, -43, 18, 3);
setTile(88, 34, -61, 9);
setTile(88, 34, -60, 9);
setTile(88, 34, -59, 9);
setTile(88, 34, -58, 9, 1);
setTile(88, 35, -68, 39);
setTile(88, 35, -67, 39);
setTile(88, 38, -73, 100, 3);
setTile(88, 38, -69, 100, 9);
setTile(88, 39, -73, 100, 3);
setTile(88, 39, -69, 100, 9);
setTile(88, 40, -73, 100, 3);
setTile(88, 40, -69, 100, 9);
setTile(88, 40, -64, 99, 3);
setTile(88, 40, -63, 99, 6);
setTile(88, 40, -62, 99, 6);
setTile(88, 40, -61, 99, 6);
setTile(88, 40, -60, 99, 9);
setTile(88, 41, -72, 100, 3);
setTile(88, 41, -71, 100, 6);
setTile(88, 41, -70, 100, 9);
setTile(88, 46, -44, 18, 3);
setTile(88, 46, -43, 18, 3);
setTile(88, 46, -42, 18, 3);
setTile(88, 46, -41, 18, 3);
setTile(88, 47, -44, 18, 3);
setTile(88, 47, -43, 18, 3);
setTile(88, 47, -42, 18, 3);
setTile(88, 48, -43, 18, 3);
setTile(89, 34, -61, 9);
setTile(89, 34, -60, 9);
setTile(89, 34, -59, 9);
setTile(89, 38, -72, 100, 3);
setTile(89, 38, -71, 100, 6);
setTile(89, 38, -70, 100, 9);
setTile(89, 39, -72, 100, 3);
setTile(89, 39, -71, 100, 6);
setTile(89, 39, -70, 100, 9);
setTile(89, 40, -72, 100, 3);
setTile(89, 40, -71, 100, 6);
setTile(89, 40, -70, 100, 9);
setTile(89, 40, -66, 99, 1);
setTile(89, 40, -65, 99, 4);
setTile(89, 40, -64, 99, 4);
setTile(89, 40, -63, 99, 4);
setTile(89, 40, -62, 99, 7);
setTile(89, 46, -45, 18, 3);
setTile(89, 46, -44, 18, 3);
setTile(89, 46, -43, 18, 3);
setTile(89, 46, -42, 18, 3);
setTile(89, 46, -41, 18, 3);
setTile(89, 46, -40, 18, 3);
setTile(89, 47, -45, 18, 3);
setTile(89, 47, -44, 18, 3);
setTile(89, 47, -43, 18, 3);
setTile(89, 47, -42, 18, 3);
setTile(89, 47, -41, 18, 3);
setTile(89, 48, -44, 18, 3);
setTile(89, 48, -43, 18, 3);
setTile(89, 48, -42, 18, 3);
setTile(90, 34, -85, 44);
setTile(90, 34, -84, 44);
setTile(90, 34, -83, 44);
setTile(90, 34, -82, 44);
setTile(90, 34, -81, 44);
setTile(90, 34, -80, 44);
setTile(90, 34, -79, 44);
setTile(90, 34, -78, 44);
setTile(90, 34, -77, 44);
setTile(90, 34, -76, 44);
setTile(90, 34, -75, 44);
setTile(90, 34, -61, 9);
setTile(90, 34, -60, 9);
setTile(90, 34, -59, 9);
setTile(90, 35, -73, 40);
setTile(90, 35, -66, 39);
setTile(90, 35, -43, 106, 8);
setTile(90, 35, -42, 106, 8);
setTile(90, 35, -37, 38);
setTile(90, 35, -36, 31, 1);
setTile(90, 35, -35, 31, 1);
setTile(90, 35, -34, 31, 1);
setTile(90, 36, -43, 106, 8);
setTile(90, 36, -42, 106, 8);
setTile(90, 37, -42, 106, 8);
setTile(90, 38, -42, 106, 8);
setTile(90, 40, -67, 99, 1);
setTile(90, 40, -66, 99, 5);
setTile(90, 40, -65, 99, 5);
setTile(90, 40, -64, 99, 5);
setTile(90, 40, -63, 99, 5);
setTile(90, 40, -62, 99, 5);
setTile(90, 40, -61, 99, 7);
setTile(90, 40, -43, 106, 8);
setTile(90, 40, -42, 106, 8);
setTile(90, 41, -43, 106, 8);
setTile(90, 41, -42, 106, 8);
setTile(90, 42, -42, 106, 8);
setTile(90, 43, -43, 106, 8);
setTile(90, 43, -42, 106, 8);
setTile(90, 44, -43, 106, 8);
setTile(90, 44, -42, 106, 8);
setTile(90, 45, -42, 106, 8);
setTile(90, 46, -46, 18, 3);
setTile(90, 46, -45, 18, 3);
setTile(90, 46, -44, 18, 3);
setTile(90, 46, -43, 18, 3);
setTile(90, 46, -42, 18, 3);
setTile(90, 46, -41, 18, 3);
setTile(90, 46, -40, 18, 3);
setTile(90, 46, -39, 18, 3);
setTile(90, 47, -46, 18, 3);
setTile(90, 47, -45, 18, 3);
setTile(90, 47, -44, 18, 3);
setTile(90, 47, -43, 18, 3);
setTile(90, 47, -42, 18, 3);
setTile(90, 47, -41, 18, 3);
setTile(90, 47, -40, 18, 3);
setTile(90, 48, -45, 18, 3);
setTile(90, 48, -44, 18, 3);
setTile(90, 48, -43, 18, 3);
setTile(90, 48, -42, 18, 3);
setTile(90, 48, -41, 18, 3);
setTile(90, 56, -33, 18, 3);
setTile(90, 56, -32, 18, 3);
setTile(90, 57, -33, 18, 3);
setTile(91, 34, -85, 44);
setTile(91, 34, -84, 44);
setTile(91, 34, -83, 44);
setTile(91, 34, -82, 44);
setTile(91, 34, -81, 44);
setTile(91, 34, -80, 44);
setTile(91, 34, -79, 44);
setTile(91, 34, -78, 44);
setTile(91, 34, -77, 44);
setTile(91, 34, -76, 44);
setTile(91, 34, -75, 44);
setTile(91, 34, -61, 9);
setTile(91, 34, -60, 9);
setTile(91, 34, -59, 9);
setTile(91, 35, -70, 39);
setTile(91, 35, -44, 106, 1);
setTile(91, 35, -43, 17, 3);
setTile(91, 35, -42, 17, 3);
setTile(91, 35, -38, 31, 1);
setTile(91, 35, -37, 31, 2);
setTile(91, 35, -36, 37);
setTile(91, 35, -35, 31, 1);
setTile(91, 35, -34, 31, 1);
setTile(91, 35, -33, 31, 1);
setTile(91, 35, -32, 31, 1);
setTile(91, 36, -44, 106, 1);
setTile(91, 36, -43, 17, 3);
setTile(91, 36, -42, 17, 3);
setTile(91, 37, -44, 106, 1);
setTile(91, 37, -43, 17, 3);
setTile(91, 37, -42, 17, 3);
setTile(91, 37, -41, 106, 4);
setTile(91, 38, -44, 106, 1);
setTile(91, 38, -43, 17, 3);
setTile(91, 38, -42, 17, 3);
setTile(91, 38, -41, 106, 4);
setTile(91, 38, -38, 18, 3);
setTile(91, 38, -37, 18, 3);
setTile(91, 38, -36, 18, 3);
setTile(91, 39, -44, 106, 1);
setTile(91, 39, -43, 17, 3);
setTile(91, 39, -42, 17, 3);
setTile(91, 39, -41, 106, 4);
setTile(91, 39, -39, 18, 3);
setTile(91, 39, -38, 18, 3);
setTile(91, 39, -37, 18, 3);
setTile(91, 39, -36, 18, 3);
setTile(91, 40, -67, 99, 2);
setTile(91, 40, -66, 99, 5);
setTile(91, 40, -65, 99, 5);
setTile(91, 40, -64, 99, 5);
setTile(91, 40, -63, 99, 5);
setTile(91, 40, -62, 99, 5);
setTile(91, 40, -61, 99, 8);
setTile(91, 40, -44, 106, 1);
setTile(91, 40, -43, 17, 3);
setTile(91, 40, -42, 17, 3);
setTile(91, 41, -44, 106, 1);
setTile(91, 41, -43, 17, 3);
setTile(91, 41, -42, 17, 3);
setTile(91, 41, -41, 106, 4);
setTile(91, 42, -44, 106, 1);
setTile(91, 42, -43, 17, 3);
setTile(91, 42, -42, 17, 3);
setTile(91, 42, -41, 106, 4);
setTile(91, 43, -44, 106, 1);
setTile(91, 43, -43, 17, 3);
setTile(91, 43, -42, 17, 3);
setTile(91, 43, -41, 106, 4);
setTile(91, 44, -44, 106, 1);
setTile(91, 44, -43, 17, 3);
setTile(91, 44, -42, 17, 3);
setTile(91, 44, -41, 106, 4);
setTile(91, 45, -44, 106, 1);
setTile(91, 45, -43, 17, 3);
setTile(91, 45, -42, 17, 3);
setTile(91, 45, -41, 106, 4);
setTile(91, 46, -47, 18, 3);
setTile(91, 46, -46, 18, 3);
setTile(91, 46, -45, 18, 3);
setTile(91, 46, -44, 18, 3);
setTile(91, 46, -43, 17, 3);
setTile(91, 46, -42, 17, 3);
setTile(91, 46, -41, 18, 3);
setTile(91, 46, -40, 18, 3);
setTile(91, 46, -39, 18, 3);
setTile(91, 46, -38, 18, 3);
setTile(91, 47, -47, 18, 3);
setTile(91, 47, -46, 18, 3);
setTile(91, 47, -45, 18, 3);
setTile(91, 47, -44, 18, 3);
setTile(91, 47, -43, 17, 3);
setTile(91, 47, -42, 18, 3);
setTile(91, 47, -41, 18, 3);
setTile(91, 47, -40, 18, 3);
setTile(91, 47, -39, 18, 3);
setTile(91, 48, -46, 18, 3);
setTile(91, 48, -45, 18, 3);
setTile(91, 48, -44, 18, 3);
setTile(91, 48, -43, 18, 3);
setTile(91, 48, -42, 18, 3);
setTile(91, 48, -41, 18, 3);
setTile(91, 48, -40, 18, 3);
setTile(91, 52, -28, 18, 3);
setTile(91, 56, -34, 18, 3);
setTile(91, 56, -33, 18, 3);
setTile(91, 56, -32, 18, 3);
setTile(91, 56, -31, 18, 3);
setTile(91, 57, -34, 18, 3);
setTile(91, 57, -33, 18, 3);
setTile(91, 57, -32, 18, 3);
setTile(91, 58, -33, 18, 3);
setTile(92, 34, -110, 44);
setTile(92, 34, -109, 44);
setTile(92, 34, -93, 44);
setTile(92, 34, -92, 44);
setTile(92, 34, -57, 44);
setTile(92, 34, -56, 44);
setTile(92, 34, -55, 44);
setTile(92, 34, -54, 44);
setTile(92, 34, -53, 44);
setTile(92, 34, -52, 44);
setTile(92, 34, -51, 44);
setTile(92, 34, -50, 44);
setTile(92, 34, -49, 44);
setTile(92, 34, -48, 44);
setTile(92, 34, -47, 44);
setTile(92, 35, -71, 40);
setTile(92, 35, -69, 40);
setTile(92, 35, -68, 40);
setTile(92, 35, -65, 39);
setTile(92, 35, -64, 99, 10);
setTile(92, 35, -43, 17, 3);
setTile(92, 35, -42, 17, 3);
setTile(92, 35, -41, 106, 4);
setTile(92, 35, -39, 31, 1);
setTile(92, 35, -38, 31, 1);
setTile(92, 35, -37, 37);
setTile(92, 35, -36, 175, 2);
setTile(92, 35, -35, 31, 1);
setTile(92, 35, -34, 31, 1);
setTile(92, 35, -33, 31, 1);
setTile(92, 35, -32, 31, 1);
setTile(92, 36, -64, 99, 10);
setTile(92, 36, -44, 106, 1);
setTile(92, 36, -43, 17, 3);
setTile(92, 36, -42, 17, 3);
setTile(92, 36, -41, 106, 4);
setTile(92, 36, -36, 175, 8);
setTile(92, 37, -64, 99, 10);
setTile(92, 37, -44, 106, 1);
setTile(92, 37, -43, 17, 3);
setTile(92, 37, -42, 17, 3);
setTile(92, 37, -41, 106, 4);
setTile(92, 38, -64, 99, 10);
setTile(92, 38, -44, 106, 1);
setTile(92, 38, -43, 17, 3);
setTile(92, 38, -42, 17, 3);
setTile(92, 38, -41, 106, 4);
setTile(92, 38, -39, 18, 3);
setTile(92, 38, -38, 18, 3);
setTile(92, 38, -37, 18, 3);
setTile(92, 38, -36, 18, 3);
setTile(92, 38, -35, 18, 3);
setTile(92, 39, -64, 99, 10);
setTile(92, 39, -43, 17, 3);
setTile(92, 39, -42, 17, 3);
setTile(92, 39, -41, 106, 4);
setTile(92, 39, -39, 18, 3);
setTile(92, 39, -38, 18, 3);
setTile(92, 39, -37, 18, 3);
setTile(92, 39, -36, 18, 3);
setTile(92, 39, -35, 18, 3);
setTile(92, 40, -67, 99, 2);
setTile(92, 40, -66, 99, 5);
setTile(92, 40, -65, 99, 5);
setTile(92, 40, -64, 99, 5);
setTile(92, 40, -63, 99, 5);
setTile(92, 40, -62, 99, 5);
setTile(92, 40, -61, 99, 8);
setTile(92, 40, -44, 106, 1);
setTile(92, 40, -43, 17, 3);
setTile(92, 40, -42, 17, 3);
setTile(92, 40, -38, 18, 3);
setTile(92, 40, -37, 18, 3);
setTile(92, 40, -36, 18, 3);
setTile(92, 41, -44, 106, 1);
setTile(92, 41, -43, 17, 3);
setTile(92, 41, -42, 17, 3);
setTile(92, 41, -41, 106, 4);
setTile(92, 41, -37, 18, 3);
setTile(92, 42, -43, 17, 3);
setTile(92, 42, -42, 17, 3);
setTile(92, 42, -41, 106, 4);
setTile(92, 43, -44, 106, 1);
setTile(92, 43, -43, 17, 3);
setTile(92, 43, -42, 17, 3);
setTile(92, 43, -41, 106, 4);
setTile(92, 44, -44, 106, 1);
setTile(92, 44, -43, 17, 3);
setTile(92, 44, -42, 17, 3);
setTile(92, 44, -41, 106, 4);
setTile(92, 45, -44, 106, 1);
setTile(92, 45, -43, 17, 3);
setTile(92, 45, -42, 17, 3);
setTile(92, 45, -41, 106, 4);
setTile(92, 46, -47, 18, 3);
setTile(92, 46, -46, 18, 3);
setTile(92, 46, -45, 18, 3);
setTile(92, 46, -44, 18, 3);
setTile(92, 46, -43, 17, 3);
setTile(92, 46, -42, 17, 3);
setTile(92, 46, -41, 18, 3);
setTile(92, 46, -40, 18, 3);
setTile(92, 46, -39, 18, 3);
setTile(92, 46, -38, 18, 3);
setTile(92, 47, -46, 18, 3);
setTile(92, 47, -45, 18, 3);
setTile(92, 47, -44, 18, 3);
setTile(92, 47, -43, 18, 3);
setTile(92, 47, -42, 18, 3);
setTile(92, 47, -41, 18, 3);
setTile(92, 47, -40, 18, 3);
setTile(92, 47, -39, 18, 3);
setTile(92, 48, -45, 18, 3);
setTile(92, 48, -44, 18, 3);
setTile(92, 48, -43, 18, 3);
setTile(92, 48, -42, 18, 3);
setTile(92, 48, -41, 18, 3);
setTile(92, 48, -40, 18, 3);
setTile(92, 52, -30, 18, 3);
setTile(92, 52, -29, 18, 3);
setTile(92, 52, -28, 18, 3);
setTile(92, 53, -28, 18, 3);
setTile(92, 56, -35, 18, 3);
setTile(92, 56, -34, 18, 3);
setTile(92, 56, -33, 18, 3);
setTile(92, 56, -32, 18, 3);
setTile(92, 56, -31, 18, 3);
setTile(92, 56, -30, 18, 3);
setTile(92, 57, -35, 18, 3);
setTile(92, 57, -34, 18, 3);
setTile(92, 57, -33, 18, 3);
setTile(92, 57, -32, 18, 3);
setTile(92, 57, -31, 18, 3);
setTile(92, 58, -34, 18, 3);
setTile(92, 58, -33, 18, 3);
setTile(92, 58, -32, 18, 3);
setTile(93, 34, -110, 44);
setTile(93, 34, -109, 44);
setTile(93, 34, -93, 44);
setTile(93, 34, -92, 44);
setTile(93, 34, -57, 44);
setTile(93, 34, -56, 44);
setTile(93, 34, -55, 44);
setTile(93, 34, -54, 44);
setTile(93, 34, -53, 44);
setTile(93, 34, -52, 44);
setTile(93, 34, -51, 44);
setTile(93, 34, -50, 44);
setTile(93, 34, -49, 44);
setTile(93, 34, -48, 44);
setTile(93, 34, -47, 44);
setTile(93, 35, -43, 106, 2);
setTile(93, 35, -42, 106, 2);
setTile(93, 35, -39, 31, 1);
setTile(93, 35, -38, 31, 1);
setTile(93, 35, -37, 17, 3);
setTile(93, 35, -36, 31, 1);
setTile(93, 35, -35, 37);
setTile(93, 35, -33, 31, 1);
setTile(93, 35, -32, 31, 1);
setTile(93, 36, -43, 106, 2);
setTile(93, 36, -42, 106, 2);
setTile(93, 36, -37, 17, 3);
setTile(93, 36, -33, 106, 8);
setTile(93, 37, -72, 100, 1);
setTile(93, 37, -71, 100, 4);
setTile(93, 37, -70, 100, 7);
setTile(93, 37, -43, 106, 2);
setTile(93, 37, -42, 106, 2);
setTile(93, 37, -37, 17, 3);
setTile(93, 37, -33, 106, 8);
setTile(93, 37, -32, 106, 8);
setTile(93, 38, -72, 100, 1);
setTile(93, 38, -71, 100, 4);
setTile(93, 38, -70, 100, 7);
setTile(93, 38, -47, 18, 3);
setTile(93, 38, -46, 18, 3);
setTile(93, 38, -45, 18, 3);
setTile(93, 38, -43, 106, 2);
setTile(93, 38, -42, 106, 2);
setTile(93, 38, -39, 18, 3);
setTile(93, 38, -38, 18, 3);
setTile(93, 38, -37, 17, 3);
setTile(93, 38, -36, 18, 3);
setTile(93, 38, -35, 18, 3);
setTile(93, 38, -33, 106, 8);
setTile(93, 39, -72, 100, 1);
setTile(93, 39, -71, 100, 4);
setTile(93, 39, -70, 100, 7);
setTile(93, 39, -48, 18, 3);
setTile(93, 39, -47, 18, 3);
setTile(93, 39, -46, 18, 3);
setTile(93, 39, -45, 18, 3);
setTile(93, 39, -43, 106, 2);
setTile(93, 39, -39, 18, 3);
setTile(93, 39, -38, 18, 3);
setTile(93, 39, -37, 17, 3);
setTile(93, 39, -36, 18, 3);
setTile(93, 39, -35, 18, 3);
setTile(93, 39, -33, 106, 8);
setTile(93, 40, -67, 99, 2);
setTile(93, 40, -66, 99, 5);
setTile(93, 40, -65, 99, 5);
setTile(93, 40, -64, 99, 5);
setTile(93, 40, -63, 99, 5);
setTile(93, 40, -62, 99, 5);
setTile(93, 40, -61, 99, 8);
setTile(93, 40, -43, 106, 2);
setTile(93, 40, -42, 17, 3);
setTile(93, 40, -38, 18, 3);
setTile(93, 40, -37, 17, 3);
setTile(93, 40, -36, 18, 3);
setTile(93, 40, -33, 106, 8);
setTile(93, 40, -32, 106, 8);
setTile(93, 41, -43, 106, 2);
setTile(93, 41, -42, 106, 2);
setTile(93, 41, -38, 18, 3);
setTile(93, 41, -37, 18, 3);
setTile(93, 41, -36, 18, 3);
setTile(93, 41, -33, 106, 8);
setTile(93, 41, -32, 106, 8);
setTile(93, 42, -43, 106, 2);
setTile(93, 42, -42, 106, 2);
setTile(93, 42, -33, 106, 8);
setTile(93, 42, -32, 106, 8);
setTile(93, 43, -43, 106, 2);
setTile(93, 43, -42, 106, 2);
setTile(93, 43, -33, 106, 8);
setTile(93, 43, -32, 106, 8);
setTile(93, 44, -43, 106, 2);
setTile(93, 44, -42, 106, 2);
setTile(93, 44, -33, 106, 8);
setTile(93, 44, -32, 106, 8);
setTile(93, 45, -43, 106, 2);
setTile(93, 45, -33, 106, 8);
setTile(93, 45, -32, 106, 8);
setTile(93, 46, -46, 18, 3);
setTile(93, 46, -45, 18, 3);
setTile(93, 46, -44, 18, 3);
setTile(93, 46, -43, 18, 3);
setTile(93, 46, -42, 18, 3);
setTile(93, 46, -41, 18, 3);
setTile(93, 46, -40, 18, 3);
setTile(93, 46, -39, 18, 3);
setTile(93, 46, -33, 106, 8);
setTile(93, 46, -32, 106, 8);
setTile(93, 47, -45, 18, 3);
setTile(93, 47, -44, 18, 3);
setTile(93, 47, -43, 18, 3);
setTile(93, 47, -42, 18, 3);
setTile(93, 47, -41, 18, 3);
setTile(93, 47, -40, 18, 3);
setTile(93, 47, -33, 106, 8);
setTile(93, 47, -32, 106, 8);
setTile(93, 48, -44, 18, 3);
setTile(93, 48, -43, 18, 3);
setTile(93, 48, -42, 18, 3);
setTile(93, 48, -41, 18, 3);
setTile(93, 48, -33, 106, 8);
setTile(93, 48, -32, 106, 8);
setTile(93, 49, -33, 106, 8);
setTile(93, 49, -32, 106, 8);
setTile(93, 50, -33, 106, 8);
setTile(93, 50, -32, 106, 8);
setTile(93, 51, -32, 106, 8);
setTile(93, 52, -33, 106, 8);
setTile(93, 52, -32, 106, 8);
setTile(93, 52, -30, 18, 3);
setTile(93, 52, -29, 18, 3);
setTile(93, 52, -28, 18, 3);
setTile(93, 53, -33, 106, 8);
setTile(93, 53, -32, 106, 8);
setTile(93, 53, -29, 18, 3);
setTile(93, 53, -28, 18, 3);
setTile(93, 54, -33, 106, 8);
setTile(93, 54, -32, 106, 8);
setTile(93, 54, -28, 18, 3);
setTile(93, 55, -33, 106, 8);
setTile(93, 55, -32, 106, 8);
setTile(93, 56, -36, 18, 3);
setTile(93, 56, -35, 18, 3);
setTile(93, 56, -34, 18, 3);
setTile(93, 56, -33, 18, 3);
setTile(93, 56, -32, 18, 3);
setTile(93, 56, -31, 18, 3);
setTile(93, 56, -30, 18, 3);
setTile(93, 56, -29, 18, 3);
setTile(93, 57, -36, 18, 3);
setTile(93, 57, -35, 18, 3);
setTile(93, 57, -34, 18, 3);
setTile(93, 57, -33, 18, 3);
setTile(93, 57, -32, 18, 3);
setTile(93, 57, -31, 18, 3);
setTile(93, 57, -30, 18, 3);
setTile(93, 58, -35, 18, 3);
setTile(93, 58, -34, 18, 3);
setTile(93, 58, -33, 18, 3);
setTile(93, 58, -32, 18, 3);
setTile(93, 58, -31, 18, 3);
setTile(94, 34, -110, 44);
setTile(94, 34, -109, 44);
setTile(94, 34, -93, 44);
setTile(94, 34, -92, 44);
setTile(94, 35, -62, 40);
setTile(94, 35, -46, 31, 1);
setTile(94, 35, -43, 31, 1);
setTile(94, 35, -42, 38);
setTile(94, 35, -41, 31, 1);
setTile(94, 35, -40, 31, 1);
setTile(94, 35, -34, 106, 1);
setTile(94, 35, -33, 17, 3);
setTile(94, 35, -32, 17, 3);
setTile(94, 35, -31, 106, 4);
setTile(94, 36, -34, 106, 1);
setTile(94, 36, -33, 17, 3);
setTile(94, 36, -32, 17, 3);
setTile(94, 36, -31, 106, 4);
setTile(94, 37, -73, 100, 1);
setTile(94, 37, -69, 100, 7);
setTile(94, 37, -34, 106, 1);
setTile(94, 37, -33, 17, 3);
setTile(94, 37, -32, 17, 3);
setTile(94, 37, -31, 106, 4);
setTile(94, 38, -73, 100, 1);
setTile(94, 38, -69, 100, 7);
setTile(94, 38, -48, 18, 3);
setTile(94, 38, -47, 18, 3);
setTile(94, 38, -46, 18, 3);
setTile(94, 38, -45, 18, 3);
setTile(94, 38, -44, 18, 3);
setTile(94, 38, -39, 18, 3);
setTile(94, 38, -38, 18, 3);
setTile(94, 38, -37, 18, 3);
setTile(94, 38, -36, 18, 3);
setTile(94, 38, -35, 18, 3);
setTile(94, 38, -34, 106, 1);
setTile(94, 38, -33, 17, 3);
setTile(94, 38, -32, 17, 3);
setTile(94, 39, -73, 100, 1);
setTile(94, 39, -69, 100, 7);
setTile(94, 39, -48, 18, 3);
setTile(94, 39, -47, 18, 3);
setTile(94, 39, -46, 18, 3);
setTile(94, 39, -45, 18, 3);
setTile(94, 39, -44, 18, 3);
setTile(94, 39, -39, 18, 3);
setTile(94, 39, -38, 18, 3);
setTile(94, 39, -37, 18, 3);
setTile(94, 39, -36, 18, 3);
setTile(94, 39, -35, 18, 3);
setTile(94, 39, -34, 106, 1);
setTile(94, 39, -33, 17, 3);
setTile(94, 39, -32, 17, 3);
setTile(94, 39, -31, 106, 4);
setTile(94, 40, -72, 100, 1);
setTile(94, 40, -71, 100, 4);
setTile(94, 40, -70, 100, 7);
setTile(94, 40, -67, 99, 3);
setTile(94, 40, -66, 99, 5);
setTile(94, 40, -65, 99, 5);
setTile(94, 40, -64, 99, 5);
setTile(94, 40, -63, 99, 5);
setTile(94, 40, -62, 99, 5);
setTile(94, 40, -61, 99, 9);
setTile(94, 40, -46, 18, 3);
setTile(94, 40, -45, 18, 3);
setTile(94, 40, -37, 18, 3);
setTile(94, 40, -34, 106, 1);
setTile(94, 40, -33, 17, 3);
setTile(94, 40, -32, 17, 3);
setTile(94, 40, -31, 106, 4);
setTile(94, 41, -46, 18, 3);
setTile(94, 41, -42, 17, 3);
setTile(94, 41, -37, 18, 3);
setTile(94, 41, -34, 106, 1);
setTile(94, 41, -33, 17, 3);
setTile(94, 41, -32, 17, 3);
setTile(94, 42, -42, 18, 3);
setTile(94, 42, -34, 106, 1);
setTile(94, 42, -33, 17, 3);
setTile(94, 42, -32, 17, 3);
setTile(94, 42, -31, 106, 4);
setTile(94, 43, -34, 106, 1);
setTile(94, 43, -33, 17, 3);
setTile(94, 43, -32, 17, 3);
setTile(94, 43, -31, 106, 4);
setTile(94, 44, -34, 106, 1);
setTile(94, 44, -33, 17, 3);
setTile(94, 44, -32, 17, 3);
setTile(94, 45, -34, 106, 1);
setTile(94, 45, -33, 17, 3);
setTile(94, 45, -32, 17, 3);
setTile(94, 45, -31, 106, 4);
setTile(94, 46, -45, 18, 3);
setTile(94, 46, -44, 18, 3);
setTile(94, 46, -43, 18, 3);
setTile(94, 46, -42, 18, 3);
setTile(94, 46, -41, 18, 3);
setTile(94, 46, -40, 18, 3);
setTile(94, 46, -33, 17, 3);
setTile(94, 46, -32, 17, 3);
setTile(94, 46, -31, 106, 4);
setTile(94, 47, -44, 18, 3);
setTile(94, 47, -43, 18, 3);
setTile(94, 47, -42, 18, 3);
setTile(94, 47, -41, 18, 3);
setTile(94, 47, -33, 17, 3);
setTile(94, 47, -32, 17, 3);
setTile(94, 47, -31, 106, 4);
setTile(94, 48, -43, 18, 3);
setTile(94, 48, -42, 18, 3);
setTile(94, 48, -34, 106, 1);
setTile(94, 48, -33, 17, 3);
setTile(94, 48, -32, 17, 3);
setTile(94, 48, -31, 106, 4);
setTile(94, 49, -34, 106, 1);
setTile(94, 49, -33, 17, 3);
setTile(94, 49, -32, 17, 3);
setTile(94, 49, -31, 106, 4);
setTile(94, 50, -34, 106, 1);
setTile(94, 50, -33, 17, 3);
setTile(94, 50, -32, 17, 3);
setTile(94, 50, -31, 106, 4);
setTile(94, 51, -33, 17, 3);
setTile(94, 51, -32, 17, 3);
setTile(94, 51, -31, 106, 4);
setTile(94, 52, -34, 106, 1);
setTile(94, 52, -33, 17, 3);
setTile(94, 52, -32, 17, 3);
setTile(94, 52, -31, 18, 3);
setTile(94, 52, -30, 18, 3);
setTile(94, 52, -29, 17, 3);
setTile(94, 52, -28, 18, 3);
setTile(94, 53, -33, 17, 3);
setTile(94, 53, -32, 17, 3);
setTile(94, 53, -31, 106, 4);
setTile(94, 53, -30, 18, 3);
setTile(94, 53, -29, 18, 3);
setTile(94, 53, -28, 17, 3);
setTile(94, 54, -34, 106, 1);
setTile(94, 54, -33, 17, 3);
setTile(94, 54, -32, 17, 3);
setTile(94, 54, -31, 106, 4);
setTile(94, 54, -29, 18, 3);
setTile(94, 54, -28, 18, 3);
setTile(94, 55, -33, 17, 3);
setTile(94, 55, -32, 17, 3);
setTile(94, 55, -31, 106, 4);
setTile(94, 56, -37, 18, 3);
setTile(94, 56, -36, 18, 3);
setTile(94, 56, -35, 18, 3);
setTile(94, 56, -34, 18, 3);
setTile(94, 56, -33, 17, 3);
setTile(94, 56, -32, 17, 3);
setTile(94, 56, -31, 18, 3);
setTile(94, 56, -30, 18, 3);
setTile(94, 56, -29, 18, 3);
setTile(94, 56, -28, 18, 3);
setTile(94, 57, -37, 18, 3);
setTile(94, 57, -36, 18, 3);
setTile(94, 57, -35, 18, 3);
setTile(94, 57, -34, 18, 3);
setTile(94, 57, -33, 17, 3);
setTile(94, 57, -32, 18, 3);
setTile(94, 57, -31, 18, 3);
setTile(94, 57, -30, 18, 3);
setTile(94, 57, -29, 18, 3);
setTile(94, 58, -36, 18, 3);
setTile(94, 58, -35, 18, 3);
setTile(94, 58, -34, 18, 3);
setTile(94, 58, -33, 18, 3);
setTile(94, 58, -32, 18, 3);
setTile(94, 58, -31, 18, 3);
setTile(94, 58, -30, 18, 3);
setTile(95, 34, -110, 44);
setTile(95, 34, -109, 44);
setTile(95, 34, -93, 44);
setTile(95, 34, -92, 44);
setTile(95, 35, -71, 100, 10);
setTile(95, 35, -65, 39);
setTile(95, 35, -59, 39);
setTile(95, 35, -46, 17, 3);
setTile(95, 35, -45, 31, 1);
setTile(95, 35, -44, 31, 1);
setTile(95, 35, -43, 31, 1);
setTile(95, 35, -42, 31, 1);
setTile(95, 35, -41, 31, 1);
setTile(95, 35, -34, 106, 1);
setTile(95, 35, -33, 17, 3);
setTile(95, 35, -32, 17, 3);
setTile(95, 35, -31, 106, 4);
setTile(95, 36, -71, 100, 10);
setTile(95, 36, -46, 17, 3);
setTile(95, 36, -34, 106, 1);
setTile(95, 36, -33, 17, 3);
setTile(95, 36, -32, 17, 3);
setTile(95, 36, -31, 106, 4);
setTile(95, 37, -73, 100, 2);
setTile(95, 37, -71, 100, 10);
setTile(95, 37, -69, 100, 8);
setTile(95, 37, -46, 17, 3);
setTile(95, 37, -34, 106, 1);
setTile(95, 37, -33, 17, 3);
setTile(95, 37, -32, 17, 3);
setTile(95, 37, -31, 106, 4);
setTile(95, 38, -73, 100, 2);
setTile(95, 38, -71, 100, 10);
setTile(95, 38, -69, 100, 8);
setTile(95, 38, -48, 18, 3);
setTile(95, 38, -47, 18, 3);
setTile(95, 38, -46, 17, 3);
setTile(95, 38, -45, 18, 3);
setTile(95, 38, -44, 18, 3);
setTile(95, 38, -39, 18, 3);
setTile(95, 38, -38, 18, 3);
setTile(95, 38, -37, 18, 3);
setTile(95, 38, -36, 18, 3);
setTile(95, 38, -34, 106, 1);
setTile(95, 38, -33, 17, 3);
setTile(95, 38, -32, 17, 3);
setTile(95, 38, -31, 106, 4);
setTile(95, 39, -73, 100, 2);
setTile(95, 39, -71, 100, 10);
setTile(95, 39, -69, 100, 8);
setTile(95, 39, -48, 18, 3);
setTile(95, 39, -47, 18, 3);
setTile(95, 39, -46, 17, 3);
setTile(95, 39, -45, 18, 3);
setTile(95, 39, -44, 18, 3);
setTile(95, 39, -38, 18, 3);
setTile(95, 39, -37, 18, 3);
setTile(95, 39, -36, 18, 3);
setTile(95, 39, -34, 106, 1);
setTile(95, 39, -33, 17, 3);
setTile(95, 39, -32, 17, 3);
setTile(95, 39, -31, 106, 4);
setTile(95, 40, -72, 100, 2);
setTile(95, 40, -71, 100, 5);
setTile(95, 40, -70, 100, 8);
setTile(95, 40, -66, 99, 3);
setTile(95, 40, -65, 99, 6);
setTile(95, 40, -64, 99, 6);
setTile(95, 40, -63, 99, 6);
setTile(95, 40, -62, 99, 9);
setTile(95, 40, -47, 18, 3);
setTile(95, 40, -46, 17, 3);
setTile(95, 40, -45, 18, 3);
setTile(95, 40, -34, 106, 1);
setTile(95, 40, -33, 17, 3);
setTile(95, 40, -32, 17, 3);
setTile(95, 40, -31, 106, 4);
setTile(95, 41, -47, 18, 3);
setTile(95, 41, -46, 18, 3);
setTile(95, 41, -45, 18, 3);
setTile(95, 41, -42, 17, 3);
setTile(95, 41, -34, 106, 1);
setTile(95, 41, -33, 17, 3);
setTile(95, 41, -32, 17, 3);
setTile(95, 41, -31, 106, 4);
setTile(95, 42, -43, 18, 3);
setTile(95, 42, -42, 18, 3);
setTile(95, 42, -41, 18, 3);
setTile(95, 42, -34, 106, 1);
setTile(95, 42, -33, 17, 3);
setTile(95, 42, -32, 17, 3);
setTile(95, 42, -31, 106, 4);
setTile(95, 43, -42, 18, 3);
setTile(95, 43, -34, 106, 1);
setTile(95, 43, -33, 17, 3);
setTile(95, 43, -32, 17, 3);
setTile(95, 43, -31, 106, 4);
setTile(95, 44, -34, 106, 1);
setTile(95, 44, -33, 17, 3);
setTile(95, 44, -32, 17, 3);
setTile(95, 44, -31, 106, 4);
setTile(95, 45, -34, 106, 1);
setTile(95, 45, -33, 17, 3);
setTile(95, 45, -32, 17, 3);
setTile(95, 45, -31, 106, 4);
setTile(95, 46, -44, 18, 3);
setTile(95, 46, -43, 18, 3);
setTile(95, 46, -42, 18, 3);
setTile(95, 46, -41, 18, 3);
setTile(95, 46, -34, 106, 1);
setTile(95, 46, -33, 17, 3);
setTile(95, 46, -32, 17, 3);
setTile(95, 47, -43, 18, 3);
setTile(95, 47, -42, 18, 3);
setTile(95, 47, -34, 106, 1);
setTile(95, 47, -33, 17, 3);
setTile(95, 47, -32, 17, 3);
setTile(95, 47, -31, 106, 4);
setTile(95, 48, -34, 106, 1);
setTile(95, 48, -33, 17, 3);
setTile(95, 48, -32, 17, 3);
setTile(95, 49, -34, 106, 1);
setTile(95, 49, -33, 17, 3);
setTile(95, 49, -32, 17, 3);
setTile(95, 50, -34, 106, 1);
setTile(95, 50, -33, 17, 3);
setTile(95, 50, -32, 17, 3);
setTile(95, 51, -34, 106, 1);
setTile(95, 51, -33, 17, 3);
setTile(95, 51, -32, 17, 3);
setTile(95, 51, -31, 17, 3);
setTile(95, 52, -34, 106, 1);
setTile(95, 52, -33, 17, 3);
setTile(95, 52, -32, 17, 3);
setTile(95, 52, -31, 106, 4);
setTile(95, 52, -30, 17, 3);
setTile(95, 52, -29, 18, 3);
setTile(95, 52, -28, 18, 3);
setTile(95, 53, -34, 106, 1);
setTile(95, 53, -33, 17, 3);
setTile(95, 53, -32, 17, 3);
setTile(95, 53, -31, 106, 4);
setTile(95, 53, -29, 18, 3);
setTile(95, 53, -28, 18, 3);
setTile(95, 54, -34, 106, 1);
setTile(95, 54, -33, 17, 3);
setTile(95, 54, -32, 17, 3);
setTile(95, 54, -31, 106, 4);
setTile(95, 54, -28, 18, 3);
setTile(95, 55, -34, 106, 1);
setTile(95, 55, -33, 17, 3);
setTile(95, 55, -32, 17, 3);
setTile(95, 56, -37, 18, 3);
setTile(95, 56, -36, 18, 3);
setTile(95, 56, -35, 18, 3);
setTile(95, 56, -34, 18, 3);
setTile(95, 56, -33, 17, 3);
setTile(95, 56, -32, 17, 3);
setTile(95, 56, -31, 18, 3);
setTile(95, 56, -30, 18, 3);
setTile(95, 56, -29, 18, 3);
setTile(95, 56, -28, 18, 3);
setTile(95, 57, -36, 18, 3);
setTile(95, 57, -35, 18, 3);
setTile(95, 57, -34, 18, 3);
setTile(95, 57, -33, 18, 3);
setTile(95, 57, -32, 18, 3);
setTile(95, 57, -31, 18, 3);
setTile(95, 57, -30, 18, 3);
setTile(95, 57, -29, 18, 3);
setTile(95, 58, -35, 18, 3);
setTile(95, 58, -34, 18, 3);
setTile(95, 58, -33, 18, 3);
setTile(95, 58, -32, 18, 3);
setTile(95, 58, -31, 18, 3);
setTile(95, 58, -30, 18, 3);
setTile(96, 34, -110, 44);
setTile(96, 34, -109, 44);
setTile(96, 34, -93, 44);
setTile(96, 34, -92, 44);
setTile(96, 35, -66, 39);
setTile(96, 35, -46, 31, 1);
setTile(96, 35, -45, 31, 1);
setTile(96, 35, -44, 31, 2);
setTile(96, 35, -43, 37);
setTile(96, 35, -42, 37);
setTile(96, 35, -40, 31, 1);
setTile(96, 35, -39, 31, 1);
setTile(96, 35, -38, 31, 1);
setTile(96, 35, -35, 175, 2);
setTile(96, 35, -34, 31, 1);
setTile(96, 35, -33, 106, 2);
setTile(96, 35, -32, 106, 2);
setTile(96, 36, -35, 175, 8);
setTile(96, 36, -33, 106, 2);
setTile(96, 36, -32, 106, 2);
setTile(96, 37, -73, 100, 3);
setTile(96, 37, -69, 100, 9);
setTile(96, 37, -33, 106, 2);
setTile(96, 37, -32, 106, 2);
setTile(96, 38, -73, 100, 3);
setTile(96, 38, -69, 100, 9);
setTile(96, 38, -48, 18, 3);
setTile(96, 38, -47, 18, 3);
setTile(96, 38, -46, 18, 3);
setTile(96, 38, -45, 18, 3);
setTile(96, 38, -44, 18, 3);
setTile(96, 38, -32, 106, 2);
setTile(96, 39, -73, 100, 3);
setTile(96, 39, -69, 100, 9);
setTile(96, 39, -48, 18, 3);
setTile(96, 39, -47, 18, 3);
setTile(96, 39, -46, 18, 3);
setTile(96, 39, -45, 18, 3);
setTile(96, 39, -44, 18, 3);
setTile(96, 39, -32, 106, 2);
setTile(96, 40, -72, 100, 3);
setTile(96, 40, -71, 100, 6);
setTile(96, 40, -70, 100, 9);
setTile(96, 40, -46, 18, 3);
setTile(96, 40, -45, 18, 3);
setTile(96, 40, -33, 106, 2);
setTile(96, 40, -32, 106, 2);
setTile(96, 41, -46, 18, 3);
setTile(96, 41, -33, 106, 2);
setTile(96, 41, -32, 106, 2);
setTile(96, 42, -44, 18, 3);
setTile(96, 42, -43, 18, 3);
setTile(96, 42, -42, 17, 3);
setTile(96, 42, -41, 18, 3);
setTile(96, 42, -40, 18, 3);
setTile(96, 42, -33, 106, 2);
setTile(96, 42, -32, 106, 2);
setTile(96, 43, -43, 18, 3);
setTile(96, 43, -42, 18, 3);
setTile(96, 43, -41, 18, 3);
setTile(96, 43, -33, 106, 2);
setTile(96, 44, -33, 106, 2);
setTile(96, 44, -32, 106, 2);
setTile(96, 45, -33, 106, 2);
setTile(96, 45, -32, 106, 2);
setTile(96, 46, -43, 18, 3);
setTile(96, 46, -42, 18, 3);
setTile(96, 46, -33, 106, 2);
setTile(96, 46, -32, 106, 2);
setTile(96, 47, -40, 18, 3);
setTile(96, 47, -39, 18, 3);
setTile(96, 47, -32, 106, 2);
setTile(96, 48, -40, 18, 3);
setTile(96, 48, -33, 17, 3);
setTile(96, 49, -35, 18, 3);
setTile(96, 49, -34, 18, 3);
setTile(96, 49, -33, 18, 3);
setTile(96, 49, -32, 18, 3);
setTile(96, 49, -31, 18, 3);
setTile(96, 50, -33, 18, 3);
setTile(96, 50, -32, 106, 2);
setTile(96, 51, -32, 106, 2);
setTile(96, 52, -32, 106, 2);
setTile(96, 52, -30, 18, 3);
setTile(96, 52, -29, 18, 3);
setTile(96, 52, -28, 18, 3);
setTile(96, 53, -33, 106, 2);
setTile(96, 53, -32, 106, 2);
setTile(96, 53, -28, 18, 3);
setTile(96, 54, -33, 106, 2);
setTile(96, 54, -32, 106, 2);
setTile(96, 55, -33, 106, 2);
setTile(96, 55, -32, 106, 2);
setTile(96, 56, -36, 18, 3);
setTile(96, 56, -35, 18, 3);
setTile(96, 56, -34, 18, 3);
setTile(96, 56, -33, 18, 3);
setTile(96, 56, -32, 18, 3);
setTile(96, 56, -31, 18, 3);
setTile(96, 56, -30, 18, 3);
setTile(96, 56, -29, 18, 3);
setTile(96, 57, -35, 18, 3);
setTile(96, 57, -34, 18, 3);
setTile(96, 57, -33, 18, 3);
setTile(96, 57, -32, 18, 3);
setTile(96, 57, -31, 18, 3);
setTile(96, 57, -30, 18, 3);
setTile(96, 58, -34, 18, 3);
setTile(96, 58, -33, 18, 3);
setTile(96, 58, -32, 18, 3);
setTile(96, 58, -31, 18, 3);
setTile(97, 34, -110, 44);
setTile(97, 34, -109, 44);
setTile(97, 34, -93, 44);
setTile(97, 34, -92, 44);
setTile(97, 35, -46, 31, 1);
setTile(97, 35, -43, 175, 2);
setTile(97, 35, -42, 31, 1);
setTile(97, 35, -41, 31, 1);
setTile(97, 35, -40, 31, 1);
setTile(97, 35, -39, 31, 1);
setTile(97, 35, -36, 175, 2);
setTile(97, 35, -35, 31, 1);
setTile(97, 35, -34, 31, 1);
setTile(97, 35, -33, 31, 1);
setTile(97, 35, -32, 31, 1);
setTile(97, 35, -31, 31, 1);
setTile(97, 35, -30, 31, 1);
setTile(97, 36, -43, 175, 8);
setTile(97, 36, -36, 175, 8);
setTile(97, 37, -72, 100, 3);
setTile(97, 37, -71, 100, 6);
setTile(97, 37, -70, 100, 9);
setTile(97, 38, -72, 100, 3);
setTile(97, 38, -71, 100, 6);
setTile(97, 38, -70, 100, 9);
setTile(97, 38, -48, 18, 3);
setTile(97, 38, -47, 18, 3);
setTile(97, 38, -46, 18, 3);
setTile(97, 38, -45, 18, 3);
setTile(97, 38, -44, 18, 3);
setTile(97, 39, -72, 100, 3);
setTile(97, 39, -71, 100, 6);
setTile(97, 39, -70, 100, 9);
setTile(97, 39, -48, 18, 3);
setTile(97, 39, -47, 18, 3);
setTile(97, 39, -46, 18, 3);
setTile(97, 39, -45, 18, 3);
setTile(97, 39, -44, 18, 3);
setTile(97, 42, -43, 18, 3);
setTile(97, 42, -42, 18, 3);
setTile(97, 42, -41, 18, 3);
setTile(97, 43, -42, 18, 3);
setTile(97, 47, -41, 18, 3);
setTile(97, 47, -40, 18, 3);
setTile(97, 47, -39, 18, 3);
setTile(97, 47, -38, 18, 3);
setTile(97, 48, -41, 18, 3);
setTile(97, 48, -40, 18, 3);
setTile(97, 48, -39, 18, 3);
setTile(97, 49, -40, 18, 3);
setTile(97, 49, -35, 18, 3);
setTile(97, 49, -34, 18, 3);
setTile(97, 49, -33, 17, 3);
setTile(97, 49, -32, 18, 3);
setTile(97, 49, -31, 18, 3);
setTile(97, 50, -34, 18, 3);
setTile(97, 50, -33, 18, 3);
setTile(97, 50, -32, 18, 3);
setTile(97, 51, -33, 18, 3);
setTile(97, 52, -28, 18, 3);
setTile(97, 56, -35, 18, 3);
setTile(97, 56, -34, 18, 3);
setTile(97, 56, -33, 18, 3);
setTile(97, 56, -32, 18, 3);
setTile(97, 56, -31, 18, 3);
setTile(97, 56, -30, 18, 3);
setTile(97, 57, -34, 18, 3);
setTile(97, 57, -33, 18, 3);
setTile(97, 57, -32, 18, 3);
setTile(97, 57, -31, 18, 3);
setTile(97, 58, -33, 18, 3);
setTile(97, 58, -32, 18, 3);
setTile(98, 33, -110, 44, 8);
setTile(98, 33, -109, 44, 8);
setTile(98, 34, -93, 44);
setTile(98, 34, -92, 44);
setTile(98, 34, -73, 44);
setTile(98, 34, -72, 44);
setTile(98, 34, -59, 44);
setTile(98, 34, -58, 44);
setTile(98, 35, -46, 31, 1);
setTile(98, 35, -45, 31, 1);
setTile(98, 35, -44, 31, 1);
setTile(98, 35, -41, 31, 1);
setTile(98, 35, -40, 31, 1);
setTile(98, 35, -39, 31, 1);
setTile(98, 35, -37, 31, 1);
setTile(98, 35, -36, 31, 1);
setTile(98, 35, -35, 38);
setTile(98, 35, -34, 31, 1);
setTile(98, 35, -32, 31, 1);
setTile(98, 35, -31, 31, 1);
setTile(98, 35, -30, 31, 1);
setTile(98, 38, -36, 18, 3);
setTile(98, 38, -35, 18, 3);
setTile(98, 38, -34, 18, 3);
setTile(98, 38, -33, 18, 3);
setTile(98, 39, -37, 18, 3);
setTile(98, 39, -36, 18, 3);
setTile(98, 39, -35, 18, 3);
setTile(98, 39, -34, 18, 3);
setTile(98, 42, -42, 18, 3);
setTile(98, 44, -35, 18, 3);
setTile(98, 47, -42, 18, 3);
setTile(98, 47, -41, 18, 3);
setTile(98, 47, -40, 18, 3);
setTile(98, 47, -39, 18, 3);
setTile(98, 47, -38, 18, 3);
setTile(98, 47, -37, 18, 3);
setTile(98, 48, -42, 18, 3);
setTile(98, 48, -41, 18, 3);
setTile(98, 48, -40, 18, 3);
setTile(98, 48, -39, 18, 3);
setTile(98, 48, -38, 18, 3);
setTile(98, 49, -41, 18, 3);
setTile(98, 49, -40, 18, 3);
setTile(98, 49, -39, 18, 3);
setTile(98, 49, -36, 18, 3);
setTile(98, 49, -35, 18, 3);
setTile(98, 49, -34, 18, 3);
setTile(98, 49, -33, 18, 3);
setTile(98, 49, -32, 18, 3);
setTile(98, 49, -31, 18, 3);
setTile(98, 49, -30, 18, 3);
setTile(98, 50, -35, 18, 3);
setTile(98, 50, -34, 18, 3);
setTile(98, 50, -33, 17, 3);
setTile(98, 50, -32, 18, 3);
setTile(98, 50, -31, 18, 3);
setTile(98, 51, -34, 18, 3);
setTile(98, 51, -33, 18, 3);
setTile(98, 51, -32, 18, 3);
setTile(98, 56, -34, 18, 3);
setTile(98, 56, -33, 18, 3);
setTile(98, 56, -32, 18, 3);
setTile(98, 56, -31, 18, 3);
setTile(98, 57, -33, 18, 3);
setTile(98, 57, -32, 18, 3);
setTile(99, 33, -110, 44, 8);
setTile(99, 33, -109, 44, 8);
setTile(99, 34, -93, 44);
setTile(99, 34, -92, 44);
setTile(99, 34, -73, 44);
setTile(99, 34, -72, 44);
setTile(99, 34, -59, 44);
setTile(99, 34, -58, 44);
setTile(99, 35, -46, 31, 1);
setTile(99, 35, -45, 31, 1);
setTile(99, 35, -40, 106, 8);
setTile(99, 35, -39, 106, 8);
setTile(99, 35, -37, 103);
setTile(99, 35, -36, 31, 1);
setTile(99, 35, -34, 31, 1);
setTile(99, 35, -32, 31, 2);
setTile(99, 35, -31, 37);
setTile(99, 35, -30, 31, 1);
setTile(99, 36, -40, 106, 8);
setTile(99, 36, -39, 106, 8);
setTile(99, 37, -45, 18, 3);
setTile(99, 37, -44, 18, 3);
setTile(99, 37, -43, 18, 3);
setTile(99, 37, -40, 106, 8);
setTile(99, 37, -39, 106, 8);
setTile(99, 38, -46, 18, 3);
setTile(99, 38, -45, 18, 3);
setTile(99, 38, -44, 18, 3);
setTile(99, 38, -43, 18, 3);
setTile(99, 38, -40, 106, 8);
setTile(99, 38, -39, 106, 8);
setTile(99, 38, -37, 18, 3);
setTile(99, 38, -36, 18, 3);
setTile(99, 38, -35, 18, 3);
setTile(99, 38, -34, 18, 3);
setTile(99, 38, -33, 18, 3);
setTile(99, 39, -40, 106, 8);
setTile(99, 39, -39, 106, 8);
setTile(99, 39, -37, 18, 3);
setTile(99, 39, -36, 18, 3);
setTile(99, 39, -35, 18, 3);
setTile(99, 39, -34, 18, 3);
setTile(99, 39, -33, 18, 3);
setTile(99, 40, -40, 106, 8);
setTile(99, 40, -39, 106, 8);
setTile(99, 40, -35, 18, 3);
setTile(99, 40, -34, 18, 3);
setTile(99, 41, -40, 106, 8);
setTile(99, 41, -39, 106, 8);
setTile(99, 41, -35, 18, 3);
setTile(99, 42, -40, 106, 8);
setTile(99, 42, -39, 106, 8);
setTile(99, 43, -40, 106, 8);
setTile(99, 43, -39, 106, 8);
setTile(99, 44, -40, 106, 8);
setTile(99, 44, -36, 18, 3);
setTile(99, 44, -35, 18, 3);
setTile(99, 44, -34, 18, 3);
setTile(99, 45, -40, 106, 8);
setTile(99, 45, -39, 106, 8);
setTile(99, 45, -35, 18, 3);
setTile(99, 46, -40, 106, 8);
setTile(99, 46, -39, 106, 8);
setTile(99, 47, -43, 18, 3);
setTile(99, 47, -42, 18, 3);
setTile(99, 47, -41, 18, 3);
setTile(99, 47, -40, 18, 3);
setTile(99, 47, -39, 18, 3);
setTile(99, 47, -38, 18, 3);
setTile(99, 47, -37, 18, 3);
setTile(99, 47, -36, 18, 3);
setTile(99, 48, -43, 18, 3);
setTile(99, 48, -42, 18, 3);
setTile(99, 48, -41, 18, 3);
setTile(99, 48, -40, 18, 3);
setTile(99, 48, -39, 18, 3);
setTile(99, 48, -38, 18, 3);
setTile(99, 48, -37, 18, 3);
setTile(99, 49, -42, 18, 3);
setTile(99, 49, -41, 18, 3);
setTile(99, 49, -40, 18, 3);
setTile(99, 49, -39, 18, 3);
setTile(99, 49, -38, 18, 3);
setTile(99, 49, -35, 18, 3);
setTile(99, 49, -34, 18, 3);
setTile(99, 49, -33, 18, 3);
setTile(99, 49, -32, 18, 3);
setTile(99, 49, -31, 18, 3);
setTile(99, 50, -34, 18, 3);
setTile(99, 50, -33, 18, 3);
setTile(99, 50, -32, 18, 3);
setTile(99, 51, -33, 18, 3);
setTile(99, 56, -33, 18, 3);
setTile(99, 56, -32, 18, 3);
setTile(100, 33, -110, 44, 8);
setTile(100, 33, -109, 44, 8);
setTile(100, 34, -93, 44);
setTile(100, 34, -92, 44);
setTile(100, 34, -73, 44);
setTile(100, 34, -72, 44);
setTile(100, 34, -59, 44);
setTile(100, 34, -58, 44);
setTile(100, 35, -46, 31, 2);
setTile(100, 35, -45, 31, 1);
setTile(100, 35, -44, 31, 2);
setTile(100, 35, -41, 106, 1);
setTile(100, 35, -40, 17, 3);
setTile(100, 35, -39, 17, 3);
setTile(100, 35, -36, 37);
setTile(100, 35, -35, 17, 3);
setTile(100, 35, -34, 31, 1);
setTile(100, 35, -33, 31, 1);
setTile(100, 35, -32, 31, 1);
setTile(100, 35, -31, 31, 1);
setTile(100, 35, -30, 31, 1);
setTile(100, 36, -86, 18, 1);
setTile(100, 36, -85, 18, 1);
setTile(100, 36, -84, 18, 1);
setTile(100, 36, -41, 106, 1);
setTile(100, 36, -40, 17, 3);
setTile(100, 36, -39, 17, 3);
setTile(100, 36, -38, 106, 4);
setTile(100, 36, -35, 17, 3);
setTile(100, 37, -46, 18, 3);
setTile(100, 37, -45, 18, 3);
setTile(100, 37, -44, 18, 3);
setTile(100, 37, -43, 18, 3);
setTile(100, 37, -42, 18, 3);
setTile(100, 37, -41, 106, 1);
setTile(100, 37, -40, 17, 3);
setTile(100, 37, -39, 17, 3);
setTile(100, 37, -38, 106, 4);
setTile(100, 37, -35, 17, 3);
setTile(100, 38, -86, 18, 1);
setTile(100, 38, -85, 18, 1);
setTile(100, 38, -84, 18, 1);
setTile(100, 38, -46, 18, 3);
setTile(100, 38, -45, 18, 3);
setTile(100, 38, -44, 18, 3);
setTile(100, 38, -43, 18, 3);
setTile(100, 38, -42, 18, 3);
setTile(100, 38, -41, 106, 1);
setTile(100, 38, -40, 17, 3);
setTile(100, 38, -39, 17, 3);
setTile(100, 38, -38, 106, 4);
setTile(100, 38, -37, 18, 3);
setTile(100, 38, -36, 18, 3);
setTile(100, 38, -35, 17, 3);
setTile(100, 38, -34, 18, 3);
setTile(100, 38, -33, 18, 3);
setTile(100, 39, -44, 18, 3);
setTile(100, 39, -40, 17, 3);
setTile(100, 39, -39, 17, 3);
setTile(100, 39, -38, 106, 4);
setTile(100, 39, -37, 18, 3);
setTile(100, 39, -36, 18, 3);
setTile(100, 39, -35, 17, 3);
setTile(100, 39, -34, 18, 3);
setTile(100, 39, -33, 18, 3);
setTile(100, 40, -86, 18, 1);
setTile(100, 40, -85, 18, 1);
setTile(100, 40, -84, 18, 1);
setTile(100, 40, -44, 18, 3);
setTile(100, 40, -41, 106, 1);
setTile(100, 40, -40, 17, 3);
setTile(100, 40, -39, 17, 3);
setTile(100, 40, -38, 106, 4);
setTile(100, 40, -36, 18, 3);
setTile(100, 40, -35, 17, 3);
setTile(100, 40, -34, 18, 3);
setTile(100, 41, -41, 106, 1);
setTile(100, 41, -40, 17, 3);
setTile(100, 41, -39, 17, 3);
setTile(100, 41, -38, 106, 4);
setTile(100, 41, -36, 18, 3);
setTile(100, 41, -35, 18, 3);
setTile(100, 41, -34, 18, 3);
setTile(100, 42, -41, 106, 1);
setTile(100, 42, -40, 17, 3);
setTile(100, 42, -39, 17, 3);
setTile(100, 42, -38, 106, 4);
setTile(100, 43, -41, 106, 1);
setTile(100, 43, -40, 17, 3);
setTile(100, 43, -39, 17, 3);
setTile(100, 43, -38, 106, 4);
setTile(100, 43, -37, 17, 3);
setTile(100, 43, -36, 17, 3);
setTile(100, 44, -41, 106, 1);
setTile(100, 44, -40, 17, 3);
setTile(100, 44, -39, 17, 3);
setTile(100, 44, -38, 106, 4);
setTile(100, 44, -37, 18, 3);
setTile(100, 44, -36, 18, 3);
setTile(100, 44, -35, 17, 3);
setTile(100, 44, -34, 18, 3);
setTile(100, 44, -33, 18, 3);
setTile(100, 45, -41, 106, 1);
setTile(100, 45, -40, 17, 3);
setTile(100, 45, -39, 17, 3);
setTile(100, 45, -38, 106, 4);
setTile(100, 45, -36, 18, 3);
setTile(100, 45, -35, 18, 3);
setTile(100, 45, -34, 18, 3);
setTile(100, 46, -93, 18, 1);
setTile(100, 46, -92, 18, 1);
setTile(100, 46, -41, 106, 1);
setTile(100, 46, -40, 17, 3);
setTile(100, 46, -39, 17, 3);
setTile(100, 46, -38, 106, 4);
setTile(100, 47, -44, 18, 3);
setTile(100, 47, -43, 18, 3);
setTile(100, 47, -42, 18, 3);
setTile(100, 47, -41, 18, 3);
setTile(100, 47, -40, 17, 3);
setTile(100, 47, -39, 17, 3);
setTile(100, 47, -38, 18, 3);
setTile(100, 47, -37, 18, 3);
setTile(100, 47, -36, 18, 3);
setTile(100, 47, -35, 18, 3);
setTile(100, 48, -44, 18, 3);
setTile(100, 48, -43, 18, 3);
setTile(100, 48, -42, 18, 3);
setTile(100, 48, -41, 18, 3);
setTile(100, 48, -40, 17, 3);
setTile(100, 48, -39, 18, 3);
setTile(100, 48, -38, 18, 3);
setTile(100, 48, -37, 18, 3);
setTile(100, 48, -36, 18, 3);
setTile(100, 49, -43, 18, 3);
setTile(100, 49, -42, 18, 3);
setTile(100, 49, -41, 18, 3);
setTile(100, 49, -40, 18, 3);
setTile(100, 49, -39, 18, 3);
setTile(100, 49, -38, 18, 3);
setTile(100, 49, -37, 18, 3);
setTile(100, 49, -34, 18, 3);
setTile(100, 49, -33, 18, 3);
setTile(100, 49, -32, 18, 3);
setTile(100, 50, -33, 18, 3);
setTile(101, 33, -110, 44, 8);
setTile(101, 33, -109, 44, 8);
setTile(101, 34, -93, 44);
setTile(101, 34, -92, 44);
setTile(101, 34, -73, 44);
setTile(101, 34, -72, 44);
setTile(101, 34, -59, 44);
setTile(101, 34, -58, 44);
setTile(101, 35, -46, 31, 1);
setTile(101, 35, -45, 31, 2);
setTile(101, 35, -44, 17, 3);
setTile(101, 35, -43, 31, 1);
setTile(101, 35, -41, 106, 1);
setTile(101, 35, -40, 17, 3);
setTile(101, 35, -39, 17, 3);
setTile(101, 35, -38, 106, 4);
setTile(101, 35, -34, 31, 1);
setTile(101, 35, -33, 31, 1);
setTile(101, 35, -32, 31, 1);
setTile(101, 36, -87, 18, 1);
setTile(101, 36, -86, 18, 1);
setTile(101, 36, -85, 18, 1);
setTile(101, 36, -84, 18, 1);
setTile(101, 36, -83, 18, 1);
setTile(101, 36, -44, 17, 3);
setTile(101, 36, -41, 106, 1);
setTile(101, 36, -40, 17, 3);
setTile(101, 36, -39, 17, 3);
setTile(101, 36, -38, 106, 4);
setTile(101, 37, -85, 18, 1);
setTile(101, 37, -46, 18, 3);
setTile(101, 37, -45, 18, 3);
setTile(101, 37, -44, 17, 3);
setTile(101, 37, -43, 18, 3);
setTile(101, 37, -42, 18, 3);
setTile(101, 37, -41, 106, 1);
setTile(101, 37, -40, 17, 3);
setTile(101, 37, -39, 17, 3);
setTile(101, 37, -38, 106, 4);
setTile(101, 38, -87, 18, 1);
setTile(101, 38, -86, 18, 1);
setTile(101, 38, -85, 18, 1);
setTile(101, 38, -84, 18, 1);
setTile(101, 38, -83, 18, 1);
setTile(101, 38, -46, 18, 3);
setTile(101, 38, -45, 18, 3);
setTile(101, 38, -44, 17, 3);
setTile(101, 38, -43, 18, 3);
setTile(101, 38, -42, 18, 3);
setTile(101, 38, -41, 106, 1);
setTile(101, 38, -40, 17, 3);
setTile(101, 38, -39, 17, 3);
setTile(101, 38, -38, 106, 4);
setTile(101, 38, -37, 18, 3);
setTile(101, 38, -36, 18, 3);
setTile(101, 38, -35, 18, 3);
setTile(101, 38, -34, 18, 3);
setTile(101, 38, -33, 18, 3);
setTile(101, 39, -85, 18, 1);
setTile(101, 39, -45, 18, 3);
setTile(101, 39, -44, 17, 3);
setTile(101, 39, -43, 18, 3);
setTile(101, 39, -41, 106, 1);
setTile(101, 39, -40, 17, 3);
setTile(101, 39, -39, 17, 3);
setTile(101, 39, -38, 106, 4);
setTile(101, 39, -37, 18, 3);
setTile(101, 39, -36, 18, 3);
setTile(101, 39, -35, 18, 3);
setTile(101, 39, -34, 18, 3);
setTile(101, 39, -33, 18, 3);
setTile(101, 40, -87, 18, 1);
setTile(101, 40, -86, 18, 1);
setTile(101, 40, -85, 18, 1);
setTile(101, 40, -84, 18, 1);
setTile(101, 40, -83, 18, 1);
setTile(101, 40, -45, 18, 3);
setTile(101, 40, -44, 18, 3);
setTile(101, 40, -43, 18, 3);
setTile(101, 40, -41, 106, 1);
setTile(101, 40, -40, 17, 3);
setTile(101, 40, -39, 17, 3);
setTile(101, 40, -38, 106, 4);
setTile(101, 40, -36, 18, 3);
setTile(101, 40, -35, 18, 3);
setTile(101, 40, -34, 18, 3);
setTile(101, 41, -85, 18, 1);
setTile(101, 41, -41, 106, 1);
setTile(101, 41, -40, 17, 3);
setTile(101, 41, -39, 17, 3);
setTile(101, 41, -38, 106, 4);
setTile(101, 41, -35, 18, 3);
setTile(101, 42, -41, 106, 1);
setTile(101, 42, -40, 17, 3);
setTile(101, 42, -39, 17, 3);
setTile(101, 42, -38, 17, 3);
setTile(101, 43, -85, 18, 1);
setTile(101, 43, -41, 106, 1);
setTile(101, 43, -40, 17, 3);
setTile(101, 43, -39, 17, 3);
setTile(101, 43, -38, 106, 4);
setTile(101, 43, -34, 18, 3);
setTile(101, 43, -33, 18, 3);
setTile(101, 43, -31, 18, 3);
setTile(101, 43, -30, 18, 3);
setTile(101, 44, -41, 106, 1);
setTile(101, 44, -40, 17, 3);
setTile(101, 44, -39, 17, 3);
setTile(101, 44, -36, 18, 3);
setTile(101, 44, -35, 18, 3);
setTile(101, 44, -34, 18, 3);
setTile(101, 44, -31, 18, 3);
setTile(101, 45, -93, 18, 1);
setTile(101, 45, -92, 18, 1);
setTile(101, 45, -40, 17, 3);
setTile(101, 45, -39, 17, 3);
setTile(101, 45, -38, 106, 4);
setTile(101, 45, -35, 18, 3);
setTile(101, 46, -94, 18, 1);
setTile(101, 46, -93, 18, 1);
setTile(101, 46, -92, 18, 1);
setTile(101, 46, -91, 18, 1);
setTile(101, 46, -40, 17, 3);
setTile(101, 46, -39, 17, 3);
setTile(101, 47, -44, 18, 3);
setTile(101, 47, -43, 18, 3);
setTile(101, 47, -42, 18, 3);
setTile(101, 47, -41, 18, 3);
setTile(101, 47, -40, 17, 3);
setTile(101, 47, -39, 17, 3);
setTile(101, 47, -38, 18, 3);
setTile(101, 47, -37, 18, 3);
setTile(101, 47, -36, 18, 3);
setTile(101, 47, -35, 18, 3);
setTile(101, 48, -93, 18, 1);
setTile(101, 48, -92, 18, 1);
setTile(101, 48, -43, 18, 3);
setTile(101, 48, -42, 18, 3);
setTile(101, 48, -41, 18, 3);
setTile(101, 48, -40, 18, 3);
setTile(101, 48, -39, 18, 3);
setTile(101, 48, -38, 18, 3);
setTile(101, 48, -37, 18, 3);
setTile(101, 48, -36, 18, 3);
setTile(101, 49, -42, 18, 3);
setTile(101, 49, -41, 18, 3);
setTile(101, 49, -40, 18, 3);
setTile(101, 49, -39, 18, 3);
setTile(101, 49, -38, 18, 3);
setTile(101, 49, -37, 18, 3);
setTile(101, 49, -33, 18, 3);
setTile(101, 50, -93, 18, 1);
setTile(101, 50, -92, 18, 1);
setTile(101, 58, -43, 18, 3);
setTile(101, 58, -42, 18, 3);
setTile(101, 59, -43, 18, 3);
setTile(102, 33, -110, 44, 8);
setTile(102, 33, -109, 44, 8);
setTile(102, 34, -76, 44);
setTile(102, 34, -75, 44);
setTile(102, 34, -74, 44);
setTile(102, 34, -73, 44);
setTile(102, 34, -72, 44);
setTile(102, 34, -59, 44);
setTile(102, 34, -58, 44);
setTile(102, 35, -93, 175, 3);
setTile(102, 35, -85, 17, 1);
setTile(102, 35, -46, 37);
setTile(102, 35, -45, 103);
setTile(102, 35, -44, 31, 2);
setTile(102, 35, -39, 106, 2);
setTile(102, 35, -35, 103);
setTile(102, 35, -34, 103);
setTile(102, 35, -33, 31, 1);
setTile(102, 35, -32, 31, 1);
setTile(102, 35, -31, 38);
setTile(102, 35, -30, 31, 1);
setTile(102, 36, -93, 175, 8);
setTile(102, 36, -87, 18, 1);
setTile(102, 36, -86, 18, 1);
setTile(102, 36, -85, 17, 1);
setTile(102, 36, -84, 18, 1);
setTile(102, 36, -83, 18, 1);
setTile(102, 36, -40, 106, 2);
setTile(102, 36, -39, 106, 2);
setTile(102, 37, -86, 18, 1);
setTile(102, 37, -85, 17, 1);
setTile(102, 37, -84, 18, 1);
setTile(102, 37, -46, 18, 3);
setTile(102, 37, -45, 18, 3);
setTile(102, 37, -44, 18, 3);
setTile(102, 37, -43, 18, 3);
setTile(102, 37, -42, 18, 3);
setTile(102, 37, -40, 106, 2);
setTile(102, 37, -39, 106, 2);
setTile(102, 38, -87, 18, 1);
setTile(102, 38, -86, 18, 1);
setTile(102, 38, -85, 17, 1);
setTile(102, 38, -84, 18, 1);
setTile(102, 38, -83, 18, 1);
setTile(102, 38, -46, 18, 3);
setTile(102, 38, -45, 18, 3);
setTile(102, 38, -44, 18, 3);
setTile(102, 38, -43, 18, 3);
setTile(102, 38, -42, 18, 3);
setTile(102, 38, -40, 106, 2);
setTile(102, 38, -39, 106, 2);
setTile(102, 38, -37, 18, 3);
setTile(102, 38, -36, 18, 3);
setTile(102, 38, -35, 18, 3);
setTile(102, 38, -34, 18, 3);
setTile(102, 39, -86, 18, 1);
setTile(102, 39, -85, 17, 1);
setTile(102, 39, -84, 18, 1);
setTile(102, 39, -45, 18, 3);
setTile(102, 39, -44, 18, 3);
setTile(102, 39, -39, 106, 2);
setTile(102, 39, -36, 18, 3);
setTile(102, 39, -35, 18, 3);
setTile(102, 39, -34, 18, 3);
setTile(102, 40, -87, 18, 1);
setTile(102, 40, -86, 18, 1);
setTile(102, 40, -85, 17, 1);
setTile(102, 40, -84, 18, 1);
setTile(102, 40, -83, 18, 1);
setTile(102, 40, -44, 18, 3);
setTile(102, 40, -40, 106, 2);
setTile(102, 40, -39, 106, 2);
setTile(102, 41, -86, 18, 1);
setTile(102, 41, -85, 17, 1);
setTile(102, 41, -84, 18, 1);
setTile(102, 41, -40, 106, 2);
setTile(102, 41, -39, 106, 2);
setTile(102, 42, -85, 18, 1);
setTile(102, 42, -40, 106, 2);
setTile(102, 42, -39, 106, 2);
setTile(102, 43, -86, 18, 1);
setTile(102, 43, -85, 18, 1);
setTile(102, 43, -84, 18, 1);
setTile(102, 43, -40, 106, 2);
setTile(102, 43, -39, 106, 2);
setTile(102, 43, -35, 18, 3);
setTile(102, 43, -34, 18, 3);
setTile(102, 43, -32, 18, 3);
setTile(102, 43, -31, 18, 3);
setTile(102, 43, -30, 18, 3);
setTile(102, 43, -29, 18, 3);
setTile(102, 44, -40, 106, 2);
setTile(102, 44, -39, 106, 2);
setTile(102, 44, -35, 18, 3);
setTile(102, 44, -32, 18, 3);
setTile(102, 44, -31, 18, 3);
setTile(102, 44, -30, 18, 3);
setTile(102, 45, -95, 18, 1);
setTile(102, 45, -94, 18, 1);
setTile(102, 45, -93, 18, 1);
setTile(102, 45, -92, 18, 1);
setTile(102, 45, -91, 18, 1);
setTile(102, 45, -90, 18, 1);
setTile(102, 45, -40, 106, 2);
setTile(102, 45, -39, 106, 2);
setTile(102, 45, -31, 18, 3);
setTile(102, 46, -95, 18, 1);
setTile(102, 46, -94, 18, 1);
setTile(102, 46, -93, 18, 1);
setTile(102, 46, -92, 18, 1);
setTile(102, 46, -91, 18, 1);
setTile(102, 46, -90, 18, 1);
setTile(102, 47, -93, 18, 1);
setTile(102, 47, -92, 18, 1);
setTile(102, 47, -43, 18, 3);
setTile(102, 47, -42, 18, 3);
setTile(102, 47, -41, 18, 3);
setTile(102, 47, -40, 18, 3);
setTile(102, 47, -39, 18, 3);
setTile(102, 47, -38, 18, 3);
setTile(102, 47, -37, 18, 3);
setTile(102, 47, -36, 18, 3);
setTile(102, 48, -95, 18, 1);
setTile(102, 48, -94, 18, 1);
setTile(102, 48, -93, 18, 1);
setTile(102, 48, -92, 18, 1);
setTile(102, 48, -91, 18, 1);
setTile(102, 48, -90, 18, 1);
setTile(102, 48, -42, 18, 3);
setTile(102, 48, -41, 18, 3);
setTile(102, 48, -40, 18, 3);
setTile(102, 48, -39, 18, 3);
setTile(102, 48, -38, 18, 3);
setTile(102, 48, -37, 18, 3);
setTile(102, 49, -93, 18, 1);
setTile(102, 49, -92, 18, 1);
setTile(102, 49, -41, 18, 3);
setTile(102, 49, -40, 18, 3);
setTile(102, 49, -39, 18, 3);
setTile(102, 49, -38, 18, 3);
setTile(102, 50, -95, 18, 1);
setTile(102, 50, -94, 18, 1);
setTile(102, 50, -93, 18, 1);
setTile(102, 50, -92, 18, 1);
setTile(102, 50, -91, 18, 1);
setTile(102, 50, -90, 18, 1);
setTile(102, 52, -93, 18, 1);
setTile(102, 52, -92, 18, 1);
setTile(102, 54, -93, 18, 1);
setTile(102, 54, -92, 18, 1);
setTile(102, 58, -44, 18, 3);
setTile(102, 58, -43, 18, 3);
setTile(102, 58, -42, 18, 3);
setTile(102, 58, -41, 18, 3);
setTile(102, 59, -44, 18, 3);
setTile(102, 59, -43, 18, 3);
setTile(102, 59, -42, 18, 3);
setTile(102, 60, -43, 18, 3);
setTile(103, 34, -76, 44);
setTile(103, 34, -75, 44);
setTile(103, 34, -74, 44);
setTile(103, 34, -73, 44);
setTile(103, 34, -72, 44);
setTile(103, 34, -59, 44);
setTile(103, 34, -58, 44);
setTile(103, 35, -46, 31, 1);
setTile(103, 35, -45, 31, 1);
setTile(103, 35, -44, 31, 1);
setTile(103, 35, -43, 31, 1);
setTile(103, 35, -40, 103);
setTile(103, 35, -39, 31, 1);
setTile(103, 35, -37, 31, 1);
setTile(103, 35, -34, 103);
setTile(103, 36, -87, 18, 1);
setTile(103, 36, -86, 18, 1);
setTile(103, 36, -85, 18, 1);
setTile(103, 36, -84, 18, 1);
setTile(103, 36, -83, 18, 1);
setTile(103, 37, -85, 18, 1);
setTile(103, 37, -45, 18, 3);
setTile(103, 37, -44, 18, 3);
setTile(103, 37, -43, 18, 3);
setTile(103, 38, -87, 18, 1);
setTile(103, 38, -86, 18, 1);
setTile(103, 38, -85, 18, 1);
setTile(103, 38, -84, 18, 1);
setTile(103, 38, -83, 18, 1);
setTile(103, 38, -45, 18, 3);
setTile(103, 38, -44, 18, 3);
setTile(103, 38, -43, 18, 3);
setTile(103, 38, -39, 18, 3);
setTile(103, 38, -38, 18, 3);
setTile(103, 38, -37, 18, 3);
setTile(103, 38, -36, 18, 3);
setTile(103, 38, -35, 18, 3);
setTile(103, 39, -85, 18, 1);
setTile(103, 39, -39, 18, 3);
setTile(103, 39, -38, 18, 3);
setTile(103, 39, -37, 18, 3);
setTile(103, 39, -36, 18, 3);
setTile(103, 40, -87, 18, 1);
setTile(103, 40, -86, 18, 1);
setTile(103, 40, -85, 18, 1);
setTile(103, 40, -84, 18, 1);
setTile(103, 40, -83, 18, 1);
setTile(103, 41, -85, 18, 1);
setTile(103, 43, -85, 18, 1);
setTile(103, 43, -35, 18, 3);
setTile(103, 43, -33, 18, 3);
setTile(103, 43, -32, 18, 3);
setTile(103, 43, -31, 18, 3);
setTile(103, 43, -30, 18, 3);
setTile(103, 43, -29, 18, 3);
setTile(103, 43, -28, 18, 3);
setTile(103, 44, -33, 18, 3);
setTile(103, 44, -32, 18, 3);
setTile(103, 44, -31, 18, 3);
setTile(103, 44, -30, 18, 3);
setTile(103, 44, -29, 18, 3);
setTile(103, 45, -95, 18, 1);
setTile(103, 45, -94, 18, 1);
setTile(103, 45, -93, 18, 1);
setTile(103, 45, -92, 18, 1);
setTile(103, 45, -91, 18, 1);
setTile(103, 45, -90, 18, 1);
setTile(103, 45, -32, 18, 3);
setTile(103, 45, -31, 18, 3);
setTile(103, 45, -30, 18, 3);
setTile(103, 46, -96, 18, 1);
setTile(103, 46, -95, 18, 1);
setTile(103, 46, -94, 18, 1);
setTile(103, 46, -93, 18, 1);
setTile(103, 46, -92, 18, 1);
setTile(103, 46, -91, 18, 1);
setTile(103, 46, -90, 18, 1);
setTile(103, 46, -89, 18, 1);
setTile(103, 47, -94, 18, 1);
setTile(103, 47, -93, 18, 1);
setTile(103, 47, -92, 18, 1);
setTile(103, 47, -91, 18, 1);
setTile(103, 47, -42, 18, 3);
setTile(103, 47, -41, 18, 3);
setTile(103, 47, -40, 18, 3);
setTile(103, 47, -39, 18, 3);
setTile(103, 47, -38, 18, 3);
setTile(103, 47, -37, 18, 3);
setTile(103, 48, -95, 18, 1);
setTile(103, 48, -94, 18, 1);
setTile(103, 48, -93, 18, 1);
setTile(103, 48, -92, 18, 1);
setTile(103, 48, -91, 18, 1);
setTile(103, 48, -90, 18, 1);
setTile(103, 48, -41, 18, 3);
setTile(103, 48, -40, 18, 3);
setTile(103, 48, -39, 18, 3);
setTile(103, 48, -38, 18, 3);
setTile(103, 49, -94, 18, 1);
setTile(103, 49, -93, 18, 1);
setTile(103, 49, -92, 18, 1);
setTile(103, 49, -91, 18, 1);
setTile(103, 49, -40, 18, 3);
setTile(103, 49, -39, 18, 3);
setTile(103, 50, -95, 18, 1);
setTile(103, 50, -94, 18, 1);
setTile(103, 50, -93, 18, 1);
setTile(103, 50, -92, 18, 1);
setTile(103, 50, -91, 18, 1);
setTile(103, 50, -90, 18, 1);
setTile(103, 51, -93, 18, 1);
setTile(103, 51, -92, 18, 1);
setTile(103, 52, -94, 18, 1);
setTile(103, 52, -93, 18, 1);
setTile(103, 52, -92, 18, 1);
setTile(103, 52, -91, 18, 1);
setTile(103, 53, -93, 18, 1);
setTile(103, 53, -92, 18, 1);
setTile(103, 54, -94, 18, 1);
setTile(103, 54, -93, 18, 1);
setTile(103, 54, -92, 18, 1);
setTile(103, 54, -91, 18, 1);
setTile(103, 56, -93, 18, 1);
setTile(103, 56, -92, 18, 1);
setTile(103, 58, -45, 18, 3);
setTile(103, 58, -44, 18, 3);
setTile(103, 58, -43, 18, 3);
setTile(103, 58, -42, 18, 3);
setTile(103, 58, -41, 18, 3);
setTile(103, 58, -40, 18, 3);
setTile(103, 59, -45, 18, 3);
setTile(103, 59, -44, 18, 3);
setTile(103, 59, -43, 18, 3);
setTile(103, 59, -42, 18, 3);
setTile(103, 59, -41, 18, 3);
setTile(103, 60, -44, 18, 3);
setTile(103, 60, -43, 18, 3);
setTile(103, 60, -42, 18, 3);
setTile(104, 33, -109, 79);
setTile(104, 33, -108, 79);
setTile(104, 33, -107, 79);
setTile(104, 33, -106, 79);
setTile(104, 33, -105, 79);
setTile(104, 34, -59, 44);
setTile(104, 34, -58, 44);
setTile(104, 35, -93, 17, 1);
setTile(104, 35, -92, 17, 1);
setTile(104, 35, -46, 31, 1);
setTile(104, 35, -45, 31, 1);
setTile(104, 35, -44, 31, 1);
setTile(104, 35, -43, 31, 1);
setTile(104, 35, -42, 106, 8);
setTile(104, 35, -40, 103);
setTile(104, 35, -39, 31, 1);
setTile(104, 35, -38, 31, 1);
setTile(104, 35, -37, 31, 1);
setTile(104, 35, -36, 31, 1);
setTile(104, 35, -33, 31, 1);
setTile(104, 35, -32, 31, 1);
setTile(104, 36, -93, 17, 1);
setTile(104, 36, -92, 17, 1);
setTile(104, 36, -86, 18, 1);
setTile(104, 36, -85, 18, 1);
setTile(104, 36, -84, 18, 1);
setTile(104, 36, -43, 106, 8);
setTile(104, 36, -42, 106, 8);
setTile(104, 36, -31, 106, 8);
setTile(104, 36, -30, 106, 8);
setTile(104, 37, -93, 17, 1);
setTile(104, 37, -92, 17, 1);
setTile(104, 37, -43, 106, 8);
setTile(104, 37, -42, 106, 8);
setTile(104, 37, -31, 106, 8);
setTile(104, 37, -30, 106, 8);
setTile(104, 38, -93, 17, 1);
setTile(104, 38, -92, 17, 1);
setTile(104, 38, -86, 18, 1);
setTile(104, 38, -85, 18, 1);
setTile(104, 38, -84, 18, 1);
setTile(104, 38, -43, 106, 8);
setTile(104, 38, -42, 106, 8);
setTile(104, 38, -39, 18, 3);
setTile(104, 38, -38, 18, 3);
setTile(104, 38, -37, 18, 3);
setTile(104, 38, -36, 18, 3);
setTile(104, 38, -35, 18, 3);
setTile(104, 38, -31, 106, 8);
setTile(104, 39, -93, 17, 1);
setTile(104, 39, -92, 17, 1);
setTile(104, 39, -43, 106, 8);
setTile(104, 39, -42, 106, 8);
setTile(104, 39, -39, 18, 3);
setTile(104, 39, -38, 18, 3);
setTile(104, 39, -37, 18, 3);
setTile(104, 39, -36, 18, 3);
setTile(104, 39, -35, 18, 3);
setTile(104, 39, -31, 106, 8);
setTile(104, 39, -30, 106, 8);
setTile(104, 40, -93, 17, 1);
setTile(104, 40, -92, 17, 1);
setTile(104, 40, -86, 18, 1);
setTile(104, 40, -85, 18, 1);
setTile(104, 40, -84, 18, 1);
setTile(104, 40, -43, 106, 8);
setTile(104, 40, -42, 106, 8);
setTile(104, 40, -38, 18, 3);
setTile(104, 40, -37, 18, 3);
setTile(104, 40, -31, 106, 8);
setTile(104, 40, -30, 106, 8);
setTile(104, 41, -93, 17, 1);
setTile(104, 41, -92, 17, 1);
setTile(104, 41, -43, 106, 8);
setTile(104, 41, -42, 106, 8);
setTile(104, 41, -37, 18, 3);
setTile(104, 41, -31, 106, 8);
setTile(104, 42, -93, 17, 1);
setTile(104, 42, -92, 17, 1);
setTile(104, 42, -42, 106, 8);
setTile(104, 42, -31, 106, 8);
setTile(104, 43, -93, 17, 1);
setTile(104, 43, -92, 17, 1);
setTile(104, 43, -43, 106, 8);
setTile(104, 43, -42, 106, 8);
setTile(104, 43, -34, 18, 3);
setTile(104, 43, -33, 18, 3);
setTile(104, 43, -32, 18, 3);
setTile(104, 43, -31, 18, 3);
setTile(104, 43, -30, 18, 3);
setTile(104, 43, -29, 18, 3);
setTile(104, 43, -28, 18, 3);
setTile(104, 44, -93, 17, 1);
setTile(104, 44, -92, 17, 1);
setTile(104, 44, -43, 106, 8);
setTile(104, 44, -42, 106, 8);
setTile(104, 44, -34, 18, 3);
setTile(104, 44, -33, 18, 3);
setTile(104, 44, -32, 18, 3);
setTile(104, 44, -31, 18, 3);
setTile(104, 44, -30, 18, 3);
setTile(104, 44, -29, 18, 3);
setTile(104, 44, -28, 18, 3);
setTile(104, 45, -96, 18, 1);
setTile(104, 45, -95, 18, 1);
setTile(104, 45, -94, 18, 1);
setTile(104, 45, -93, 17, 1);
setTile(104, 45, -92, 17, 1);
setTile(104, 45, -91, 18, 1);
setTile(104, 45, -90, 18, 1);
setTile(104, 45, -89, 18, 1);
setTile(104, 45, -43, 106, 8);
setTile(104, 45, -42, 106, 8);
setTile(104, 45, -33, 18, 3);
setTile(104, 45, -32, 18, 3);
setTile(104, 45, -31, 18, 3);
setTile(104, 45, -30, 18, 3);
setTile(104, 45, -29, 18, 3);
setTile(104, 46, -97, 18, 1);
setTile(104, 46, -96, 18, 1);
setTile(104, 46, -95, 18, 1);
setTile(104, 46, -94, 18, 1);
setTile(104, 46, -93, 17, 1);
setTile(104, 46, -92, 17, 1);
setTile(104, 46, -91, 18, 1);
setTile(104, 46, -90, 18, 1);
setTile(104, 46, -89, 18, 1);
setTile(104, 46, -88, 18, 1);
setTile(104, 46, -43, 106, 8);
setTile(104, 46, -42, 106, 8);
setTile(104, 47, -95, 18, 1);
setTile(104, 47, -94, 18, 1);
setTile(104, 47, -93, 17, 1);
setTile(104, 47, -92, 17, 1);
setTile(104, 47, -91, 18, 1);
setTile(104, 47, -90, 18, 1);
setTile(104, 47, -43, 18, 3);
setTile(104, 47, -42, 106, 8);
setTile(104, 47, -41, 18, 3);
setTile(104, 47, -40, 18, 3);
setTile(104, 47, -39, 18, 3);
setTile(104, 47, -38, 18, 3);
setTile(104, 48, -96, 18, 1);
setTile(104, 48, -95, 18, 1);
setTile(104, 48, -94, 18, 1);
setTile(104, 48, -93, 17, 1);
setTile(104, 48, -92, 17, 1);
setTile(104, 48, -91, 18, 1);
setTile(104, 48, -90, 18, 1);
setTile(104, 48, -89, 18, 1);
setTile(104, 48, -42, 18, 3);
setTile(104, 48, -41, 18, 3);
setTile(104, 48, -40, 18, 3);
setTile(104, 48, -39, 18, 3);
setTile(104, 49, -95, 18, 1);
setTile(104, 49, -94, 18, 1);
setTile(104, 49, -93, 17, 1);
setTile(104, 49, -92, 17, 1);
setTile(104, 49, -91, 18, 1);
setTile(104, 49, -90, 18, 1);
setTile(104, 49, -43, 106, 8);
setTile(104, 49, -42, 106, 8);
setTile(104, 49, -40, 18, 3);
setTile(104, 50, -96, 18, 1);
setTile(104, 50, -95, 18, 1);
setTile(104, 50, -94, 18, 1);
setTile(104, 50, -93, 17, 1);
setTile(104, 50, -92, 17, 1);
setTile(104, 50, -91, 18, 1);
setTile(104, 50, -90, 18, 1);
setTile(104, 50, -89, 18, 1);
setTile(104, 50, -43, 106, 8);
setTile(104, 50, -42, 106, 8);
setTile(104, 51, -94, 18, 1);
setTile(104, 51, -93, 17, 1);
setTile(104, 51, -92, 17, 1);
setTile(104, 51, -91, 18, 1);
setTile(104, 51, -43, 106, 8);
setTile(104, 51, -42, 106, 8);
setTile(104, 52, -95, 18, 1);
setTile(104, 52, -94, 18, 1);
setTile(104, 52, -93, 17, 1);
setTile(104, 52, -92, 17, 1);
setTile(104, 52, -91, 18, 1);
setTile(104, 52, -90, 18, 1);
setTile(104, 52, -43, 106, 8);
setTile(104, 52, -42, 106, 8);
setTile(104, 53, -94, 18, 1);
setTile(104, 53, -93, 17, 1);
setTile(104, 53, -92, 17, 1);
setTile(104, 53, -91, 18, 1);
setTile(104, 53, -43, 106, 8);
setTile(104, 53, -42, 106, 8);
setTile(104, 54, -95, 18, 1);
setTile(104, 54, -94, 18, 1);
setTile(104, 54, -93, 17, 1);
setTile(104, 54, -92, 17, 1);
setTile(104, 54, -91, 18, 1);
setTile(104, 54, -90, 18, 1);
setTile(104, 54, -43, 106, 8);
setTile(104, 54, -42, 106, 8);
setTile(104, 55, -93, 17, 1);
setTile(104, 55, -92, 17, 1);
setTile(104, 55, -43, 106, 8);
setTile(104, 56, -94, 18, 1);
setTile(104, 56, -93, 17, 1);
setTile(104, 56, -92, 17, 1);
setTile(104, 56, -91, 18, 1);
setTile(104, 56, -42, 106, 8);
setTile(104, 57, -93, 17, 1);
setTile(104, 57, -92, 18, 1);
setTile(104, 57, -43, 106, 8);
setTile(104, 57, -42, 106, 8);
setTile(104, 58, -93, 18, 1);
setTile(104, 58, -92, 18, 1);
setTile(104, 58, -46, 18, 3);
setTile(104, 58, -45, 18, 3);
setTile(104, 58, -44, 18, 3);
setTile(104, 58, -43, 18, 3);
setTile(104, 58, -42, 18, 3);
setTile(104, 58, -41, 18, 3);
setTile(104, 58, -40, 18, 3);
setTile(104, 58, -39, 18, 3);
setTile(104, 59, -46, 18, 3);
setTile(104, 59, -45, 18, 3);
setTile(104, 59, -44, 18, 3);
setTile(104, 59, -43, 18, 3);
setTile(104, 59, -42, 18, 3);
setTile(104, 59, -41, 18, 3);
setTile(104, 59, -40, 18, 3);
setTile(104, 60, -45, 18, 3);
setTile(104, 60, -44, 18, 3);
setTile(104, 60, -43, 18, 3);
setTile(104, 60, -42, 18, 3);
setTile(104, 60, -41, 18, 3);
setTile(105, 32, -109, 79);
setTile(105, 32, -108, 79);
setTile(105, 32, -107, 79);
setTile(105, 32, -106, 79);
setTile(105, 33, -109, 79);
setTile(105, 33, -108, 79);
setTile(105, 33, -107, 79);
setTile(105, 33, -106, 79);
setTile(105, 33, -105, 79);
setTile(105, 34, -59, 44);
setTile(105, 34, -58, 44);
setTile(105, 35, -93, 17, 1);
setTile(105, 35, -92, 17, 1);
setTile(105, 35, -83, 175, 3);
setTile(105, 35, -45, 31, 1);
setTile(105, 35, -43, 17, 3);
setTile(105, 35, -42, 17, 3);
setTile(105, 35, -41, 106, 4);
setTile(105, 35, -39, 31, 1);
setTile(105, 35, -38, 31, 1);
setTile(105, 35, -37, 17, 3);
setTile(105, 35, -35, 31, 1);
setTile(105, 35, -34, 31, 1);
setTile(105, 35, -33, 31, 1);
setTile(105, 35, -32, 31, 1);
setTile(105, 35, -31, 17, 3);
setTile(105, 35, -30, 17, 3);
setTile(105, 36, -93, 17, 1);
setTile(105, 36, -92, 17, 1);
setTile(105, 36, -83, 175, 8);
setTile(105, 36, -43, 17, 3);
setTile(105, 36, -42, 17, 3);
setTile(105, 36, -41, 106, 4);
setTile(105, 36, -37, 17, 3);
setTile(105, 36, -32, 106, 1);
setTile(105, 36, -31, 17, 3);
setTile(105, 36, -30, 17, 3);
setTile(105, 36, -29, 106, 4);
setTile(105, 37, -93, 17, 1);
setTile(105, 37, -92, 17, 1);
setTile(105, 37, -44, 106, 1);
setTile(105, 37, -43, 17, 3);
setTile(105, 37, -42, 17, 3);
setTile(105, 37, -41, 106, 4);
setTile(105, 37, -37, 17, 3);
setTile(105, 37, -32, 106, 1);
setTile(105, 37, -31, 17, 3);
setTile(105, 37, -30, 17, 3);
setTile(105, 37, -29, 106, 4);
setTile(105, 38, -93, 17, 1);
setTile(105, 38, -92, 17, 1);
setTile(105, 38, -44, 106, 1);
setTile(105, 38, -43, 17, 3);
setTile(105, 38, -42, 17, 3);
setTile(105, 38, -41, 106, 4);
setTile(105, 38, -39, 18, 3);
setTile(105, 38, -38, 18, 3);
setTile(105, 38, -37, 17, 3);
setTile(105, 38, -36, 18, 3);
setTile(105, 38, -35, 18, 3);
setTile(105, 38, -32, 106, 1);
setTile(105, 38, -31, 17, 3);
setTile(105, 38, -30, 17, 3);
setTile(105, 38, -29, 106, 4);
setTile(105, 39, -93, 17, 1);
setTile(105, 39, -92, 17, 1);
setTile(105, 39, -44, 106, 1);
setTile(105, 39, -43, 17, 3);
setTile(105, 39, -42, 17, 3);
setTile(105, 39, -41, 106, 4);
setTile(105, 39, -39, 18, 3);
setTile(105, 39, -38, 18, 3);
setTile(105, 39, -37, 17, 3);
setTile(105, 39, -36, 18, 3);
setTile(105, 39, -35, 18, 3);
setTile(105, 39, -32, 106, 1);
setTile(105, 39, -31, 17, 3);
setTile(105, 39, -30, 17, 3);
setTile(105, 40, -93, 17, 1);
setTile(105, 40, -92, 17, 1);
setTile(105, 40, -44, 106, 1);
setTile(105, 40, -43, 17, 3);
setTile(105, 40, -42, 17, 3);
setTile(105, 40, -41, 106, 4);
setTile(105, 40, -38, 18, 3);
setTile(105, 40, -37, 17, 3);
setTile(105, 40, -36, 18, 3);
setTile(105, 40, -32, 106, 1);
setTile(105, 40, -31, 17, 3);
setTile(105, 40, -30, 17, 3);
setTile(105, 40, -29, 106, 4);
setTile(105, 41, -93, 17, 1);
setTile(105, 41, -92, 17, 1);
setTile(105, 41, -44, 106, 1);
setTile(105, 41, -43, 17, 3);
setTile(105, 41, -42, 17, 3);
setTile(105, 41, -38, 18, 3);
setTile(105, 41, -37, 18, 3);
setTile(105, 41, -36, 18, 3);
setTile(105, 41, -32, 106, 1);
setTile(105, 41, -31, 17, 3);
setTile(105, 41, -30, 17, 3);
setTile(105, 41, -29, 106, 4);
setTile(105, 42, -93, 17, 1);
setTile(105, 42, -92, 17, 1);
setTile(105, 42, -44, 106, 1);
setTile(105, 42, -43, 17, 3);
setTile(105, 42, -42, 17, 3);
setTile(105, 42, -31, 17, 3);
setTile(105, 42, -30, 17, 3);
setTile(105, 43, -93, 17, 1);
setTile(105, 43, -92, 17, 1);
setTile(105, 43, -44, 106, 1);
setTile(105, 43, -43, 17, 3);
setTile(105, 43, -42, 17, 3);
setTile(105, 43, -35, 18, 3);
setTile(105, 43, -34, 18, 3);
setTile(105, 43, -33, 18, 3);
setTile(105, 43, -32, 18, 3);
setTile(105, 43, -31, 17, 3);
setTile(105, 43, -30, 17, 3);
setTile(105, 43, -29, 18, 3);
setTile(105, 43, -28, 18, 3);
setTile(105, 44, -93, 17, 1);
setTile(105, 44, -92, 17, 1);
setTile(105, 44, -44, 106, 1);
setTile(105, 44, -43, 17, 3);
setTile(105, 44, -42, 17, 3);
setTile(105, 44, -41, 106, 4);
setTile(105, 44, -35, 18, 3);
setTile(105, 44, -34, 18, 3);
setTile(105, 44, -33, 18, 3);
setTile(105, 44, -32, 18, 3);
setTile(105, 44, -31, 17, 3);
setTile(105, 44, -30, 18, 3);
setTile(105, 44, -29, 18, 3);
setTile(105, 44, -28, 18, 3);
setTile(105, 45, -96, 18, 1);
setTile(105, 45, -95, 18, 1);
setTile(105, 45, -94, 18, 1);
setTile(105, 45, -93, 17, 1);
setTile(105, 45, -92, 17, 1);
setTile(105, 45, -91, 18, 1);
setTile(105, 45, -90, 18, 1);
setTile(105, 45, -89, 18, 1);
setTile(105, 45, -43, 17, 3);
setTile(105, 45, -42, 17, 3);
setTile(105, 45, -41, 106, 4);
setTile(105, 45, -34, 18, 3);
setTile(105, 45, -33, 18, 3);
setTile(105, 45, -32, 18, 3);
setTile(105, 45, -31, 18, 3);
setTile(105, 45, -30, 18, 3);
setTile(105, 45, -29, 18, 3);
setTile(105, 45, -28, 18, 3);
setTile(105, 46, -97, 18, 1);
setTile(105, 46, -96, 18, 1);
setTile(105, 46, -95, 18, 1);
setTile(105, 46, -94, 18, 1);
setTile(105, 46, -93, 17, 1);
setTile(105, 46, -92, 17, 1);
setTile(105, 46, -91, 18, 1);
setTile(105, 46, -90, 18, 1);
setTile(105, 46, -89, 18, 1);
setTile(105, 46, -88, 18, 1);
setTile(105, 46, -44, 106, 1);
setTile(105, 46, -43, 17, 3);
setTile(105, 46, -42, 17, 3);
setTile(105, 47, -95, 18, 1);
setTile(105, 47, -94, 18, 1);
setTile(105, 47, -93, 17, 1);
setTile(105, 47, -92, 17, 1);
setTile(105, 47, -91, 18, 1);
setTile(105, 47, -90, 18, 1);
setTile(105, 47, -44, 106, 1);
setTile(105, 47, -43, 17, 3);
setTile(105, 47, -42, 17, 3);
setTile(105, 47, -41, 18, 3);
setTile(105, 47, -40, 18, 3);
setTile(105, 47, -39, 18, 3);
setTile(105, 47, -38, 18, 3);
setTile(105, 48, -96, 18, 1);
setTile(105, 48, -95, 18, 1);
setTile(105, 48, -94, 18, 1);
setTile(105, 48, -93, 17, 1);
setTile(105, 48, -92, 17, 1);
setTile(105, 48, -91, 18, 1);
setTile(105, 48, -90, 18, 1);
setTile(105, 48, -89, 18, 1);
setTile(105, 48, -44, 106, 1);
setTile(105, 48, -43, 17, 3);
setTile(105, 48, -42, 17, 3);
setTile(105, 48, -41, 106, 4);
setTile(105, 48, -39, 18, 3);
setTile(105, 49, -95, 18, 1);
setTile(105, 49, -94, 18, 1);
setTile(105, 49, -93, 17, 1);
setTile(105, 49, -92, 17, 1);
setTile(105, 49, -91, 18, 1);
setTile(105, 49, -90, 18, 1);
setTile(105, 49, -44, 106, 1);
setTile(105, 49, -43, 17, 3);
setTile(105, 49, -42, 17, 3);
setTile(105, 49, -41, 106, 4);
setTile(105, 50, -96, 18, 1);
setTile(105, 50, -95, 18, 1);
setTile(105, 50, -94, 18, 1);
setTile(105, 50, -93, 17, 1);
setTile(105, 50, -92, 17, 1);
setTile(105, 50, -91, 18, 1);
setTile(105, 50, -90, 18, 1);
setTile(105, 50, -89, 18, 1);
setTile(105, 50, -44, 106, 1);
setTile(105, 50, -43, 17, 3);
setTile(105, 50, -42, 17, 3);
setTile(105, 50, -41, 106, 4);
setTile(105, 51, -94, 18, 1);
setTile(105, 51, -93, 17, 1);
setTile(105, 51, -92, 17, 1);
setTile(105, 51, -91, 18, 1);
setTile(105, 51, -44, 106, 1);
setTile(105, 51, -43, 17, 3);
setTile(105, 51, -42, 17, 3);
setTile(105, 51, -41, 106, 4);
setTile(105, 52, -95, 18, 1);
setTile(105, 52, -94, 18, 1);
setTile(105, 52, -93, 17, 1);
setTile(105, 52, -92, 17, 1);
setTile(105, 52, -91, 18, 1);
setTile(105, 52, -90, 18, 1);
setTile(105, 52, -44, 106, 1);
setTile(105, 52, -43, 17, 3);
setTile(105, 52, -42, 17, 3);
setTile(105, 52, -41, 106, 4);
setTile(105, 53, -94, 18, 1);
setTile(105, 53, -93, 17, 1);
setTile(105, 53, -92, 17, 1);
setTile(105, 53, -91, 18, 1);
setTile(105, 53, -43, 17, 3);
setTile(105, 53, -42, 17, 3);
setTile(105, 53, -41, 106, 4);
setTile(105, 53, -39, 18, 3);
setTile(105, 54, -95, 18, 1);
setTile(105, 54, -94, 18, 1);
setTile(105, 54, -93, 17, 1);
setTile(105, 54, -92, 17, 1);
setTile(105, 54, -91, 18, 1);
setTile(105, 54, -90, 18, 1);
setTile(105, 54, -43, 17, 3);
setTile(105, 54, -42, 17, 3);
setTile(105, 54, -41, 106, 4);
setTile(105, 55, -93, 17, 1);
setTile(105, 55, -92, 17, 1);
setTile(105, 55, -44, 106, 1);
setTile(105, 55, -43, 17, 3);
setTile(105, 55, -42, 17, 3);
setTile(105, 55, -41, 106, 4);
setTile(105, 56, -94, 18, 1);
setTile(105, 56, -93, 17, 1);
setTile(105, 56, -92, 17, 1);
setTile(105, 56, -91, 18, 1);
setTile(105, 56, -44, 106, 1);
setTile(105, 56, -43, 17, 3);
setTile(105, 56, -42, 17, 3);
setTile(105, 57, -93, 18, 1);
setTile(105, 57, -92, 18, 1);
setTile(105, 57, -44, 106, 1);
setTile(105, 57, -43, 17, 3);
setTile(105, 57, -42, 17, 3);
setTile(105, 58, -93, 18, 1);
setTile(105, 58, -92, 18, 1);
setTile(105, 58, -47, 18, 3);
setTile(105, 58, -46, 18, 3);
setTile(105, 58, -45, 18, 3);
setTile(105, 58, -44, 18, 3);
setTile(105, 58, -43, 17, 3);
setTile(105, 58, -42, 17, 3);
setTile(105, 58, -41, 18, 3);
setTile(105, 58, -40, 18, 3);
setTile(105, 58, -39, 18, 3);
setTile(105, 58, -38, 18, 3);
setTile(105, 59, -47, 18, 3);
setTile(105, 59, -46, 18, 3);
setTile(105, 59, -45, 18, 3);
setTile(105, 59, -44, 18, 3);
setTile(105, 59, -43, 17, 3);
setTile(105, 59, -42, 18, 3);
setTile(105, 59, -41, 18, 3);
setTile(105, 59, -40, 18, 3);
setTile(105, 59, -39, 18, 3);
setTile(105, 60, -46, 18, 3);
setTile(105, 60, -45, 18, 3);
setTile(105, 60, -44, 18, 3);
setTile(105, 60, -43, 18, 3);
setTile(105, 60, -42, 18, 3);
setTile(105, 60, -41, 18, 3);
setTile(105, 60, -40, 18, 3);
setTile(106, 32, -109, 79);
setTile(106, 32, -108, 79);
setTile(106, 32, -107, 79);
setTile(106, 32, -106, 79);
setTile(106, 33, -109, 79);
setTile(106, 33, -108, 79);
setTile(106, 33, -107, 79);
setTile(106, 33, -106, 79);
setTile(106, 33, -105, 79);
setTile(106, 33, -103, 44, 8);
setTile(106, 33, -102, 44, 8);
setTile(106, 33, -101, 44, 8);
setTile(106, 33, -100, 44, 8);
setTile(106, 33, -99, 44, 8);
setTile(106, 34, -98, 44);
setTile(106, 34, -97, 44);
setTile(106, 34, -96, 44);
setTile(106, 34, -95, 44);
setTile(106, 34, -94, 44);
setTile(106, 34, -59, 44);
setTile(106, 34, -58, 44);
setTile(106, 35, -78, 175, 3);
setTile(106, 35, -45, 31, 1);
setTile(106, 35, -44, 106, 1);
setTile(106, 35, -43, 17, 3);
setTile(106, 35, -42, 17, 3);
setTile(106, 35, -39, 31, 1);
setTile(106, 35, -38, 38);
setTile(106, 35, -37, 31, 1);
setTile(106, 35, -36, 31, 2);
setTile(106, 35, -34, 31, 1);
setTile(106, 35, -33, 31, 1);
setTile(106, 35, -32, 106, 1);
setTile(106, 35, -31, 17, 3);
setTile(106, 35, -30, 17, 3);
setTile(106, 36, -78, 175, 8);
setTile(106, 36, -44, 106, 1);
setTile(106, 36, -43, 17, 3);
setTile(106, 36, -42, 17, 3);
setTile(106, 36, -32, 106, 1);
setTile(106, 36, -31, 17, 3);
setTile(106, 36, -30, 17, 3);
setTile(106, 36, -29, 106, 4);
setTile(106, 37, -44, 106, 1);
setTile(106, 37, -43, 17, 3);
setTile(106, 37, -42, 17, 3);
setTile(106, 37, -41, 106, 4);
setTile(106, 37, -31, 17, 3);
setTile(106, 37, -30, 17, 3);
setTile(106, 37, -29, 106, 4);
setTile(106, 38, -84, 18, 1);
setTile(106, 38, -83, 18, 1);
setTile(106, 38, -44, 106, 1);
setTile(106, 38, -43, 17, 3);
setTile(106, 38, -42, 17, 3);
setTile(106, 38, -41, 106, 4);
setTile(106, 38, -39, 18, 3);
setTile(106, 38, -38, 18, 3);
setTile(106, 38, -37, 18, 3);
setTile(106, 38, -36, 18, 3);
setTile(106, 38, -35, 18, 3);
setTile(106, 38, -31, 17, 3);
setTile(106, 38, -30, 17, 3);
setTile(106, 38, -29, 106, 4);
setTile(106, 39, -43, 17, 3);
setTile(106, 39, -42, 17, 3);
setTile(106, 39, -41, 106, 4);
setTile(106, 39, -39, 18, 3);
setTile(106, 39, -38, 18, 3);
setTile(106, 39, -37, 18, 3);
setTile(106, 39, -36, 18, 3);
setTile(106, 39, -35, 18, 3);
setTile(106, 39, -32, 106, 1);
setTile(106, 39, -31, 17, 3);
setTile(106, 39, -30, 17, 3);
setTile(106, 39, -29, 106, 4);
setTile(106, 40, -43, 17, 3);
setTile(106, 40, -42, 17, 3);
setTile(106, 40, -41, 106, 4);
setTile(106, 40, -37, 18, 3);
setTile(106, 40, -36, 18, 3);
setTile(106, 40, -32, 106, 1);
setTile(106, 40, -31, 17, 3);
setTile(106, 40, -30, 17, 3);
setTile(106, 41, -43, 17, 3);
setTile(106, 41, -42, 17, 3);
setTile(106, 41, -41, 106, 4);
setTile(106, 41, -37, 18, 3);
setTile(106, 41, -32, 106, 1);
setTile(106, 41, -31, 17, 3);
setTile(106, 41, -30, 17, 3);
setTile(106, 42, -44, 106, 1);
setTile(106, 42, -43, 17, 3);
setTile(106, 42, -42, 17, 3);
setTile(106, 42, -32, 106, 1);
setTile(106, 42, -31, 17, 3);
setTile(106, 42, -30, 17, 3);
setTile(106, 42, -29, 106, 4);
setTile(106, 43, -44, 106, 1);
setTile(106, 43, -43, 17, 3);
setTile(106, 43, -42, 17, 3);
setTile(106, 43, -41, 106, 4);
setTile(106, 43, -35, 18, 3);
setTile(106, 43, -34, 18, 3);
setTile(106, 43, -33, 18, 3);
setTile(106, 43, -32, 18, 3);
setTile(106, 43, -31, 17, 3);
setTile(106, 43, -30, 17, 3);
setTile(106, 43, -29, 18, 3);
setTile(106, 43, -28, 18, 3);
setTile(106, 44, -43, 17, 3);
setTile(106, 44, -42, 17, 3);
setTile(106, 44, -41, 106, 4);
setTile(106, 44, -34, 18, 3);
setTile(106, 44, -33, 18, 3);
setTile(106, 44, -32, 18, 3);
setTile(106, 44, -31, 18, 3);
setTile(106, 44, -30, 18, 3);
setTile(106, 44, -29, 18, 3);
setTile(106, 44, -28, 18, 3);
setTile(106, 45, -95, 18, 1);
setTile(106, 45, -94, 18, 1);
setTile(106, 45, -93, 18, 1);
setTile(106, 45, -92, 18, 1);
setTile(106, 45, -91, 18, 1);
setTile(106, 45, -90, 18, 1);
setTile(106, 45, -43, 17, 3);
setTile(106, 45, -42, 17, 3);
setTile(106, 45, -41, 106, 4);
setTile(106, 45, -33, 18, 3);
setTile(106, 45, -32, 18, 3);
setTile(106, 45, -31, 18, 3);
setTile(106, 45, -30, 18, 3);
setTile(106, 45, -29, 18, 3);
setTile(106, 45, -28, 18, 3);
setTile(106, 46, -96, 18, 1);
setTile(106, 46, -95, 18, 1);
setTile(106, 46, -94, 18, 1);
setTile(106, 46, -93, 18, 1);
setTile(106, 46, -92, 18, 1);
setTile(106, 46, -91, 18, 1);
setTile(106, 46, -90, 18, 1);
setTile(106, 46, -89, 18, 1);
setTile(106, 46, -44, 106, 1);
setTile(106, 46, -43, 17, 3);
setTile(106, 46, -42, 17, 3);
setTile(106, 46, -41, 106, 4);
setTile(106, 47, -94, 18, 1);
setTile(106, 47, -93, 18, 1);
setTile(106, 47, -92, 18, 1);
setTile(106, 47, -91, 18, 1);
setTile(106, 47, -44, 106, 1);
setTile(106, 47, -43, 17, 3);
setTile(106, 47, -42, 17, 3);
setTile(106, 47, -41, 106, 4);
setTile(106, 47, -39, 18, 3);
setTile(106, 48, -95, 18, 1);
setTile(106, 48, -94, 18, 1);
setTile(106, 48, -93, 18, 1);
setTile(106, 48, -92, 18, 1);
setTile(106, 48, -91, 18, 1);
setTile(106, 48, -90, 18, 1);
setTile(106, 48, -44, 106, 1);
setTile(106, 48, -43, 17, 3);
setTile(106, 48, -42, 17, 3);
setTile(106, 48, -41, 106, 4);
setTile(106, 49, -94, 18, 1);
setTile(106, 49, -93, 18, 1);
setTile(106, 49, -92, 18, 1);
setTile(106, 49, -91, 18, 1);
setTile(106, 49, -44, 106, 1);
setTile(106, 49, -43, 17, 3);
setTile(106, 49, -42, 17, 3);
setTile(106, 49, -41, 106, 4);
setTile(106, 50, -95, 18, 1);
setTile(106, 50, -94, 18, 1);
setTile(106, 50, -93, 18, 1);
setTile(106, 50, -92, 18, 1);
setTile(106, 50, -91, 18, 1);
setTile(106, 50, -90, 18, 1);
setTile(106, 50, -43, 17, 3);
setTile(106, 50, -42, 17, 3);
setTile(106, 50, -41, 106, 4);
setTile(106, 51, -93, 18, 1);
setTile(106, 51, -92, 18, 1);
setTile(106, 51, -44, 106, 1);
setTile(106, 51, -43, 17, 3);
setTile(106, 51, -42, 17, 3);
setTile(106, 52, -94, 18, 1);
setTile(106, 52, -93, 18, 1);
setTile(106, 52, -92, 18, 1);
setTile(106, 52, -91, 18, 1);
setTile(106, 52, -44, 106, 1);
setTile(106, 52, -43, 17, 3);
setTile(106, 52, -42, 17, 3);
setTile(106, 53, -93, 18, 1);
setTile(106, 53, -92, 18, 1);
setTile(106, 53, -44, 106, 1);
setTile(106, 53, -43, 17, 3);
setTile(106, 53, -42, 17, 3);
setTile(106, 53, -41, 18, 3);
setTile(106, 53, -40, 18, 3);
setTile(106, 53, -39, 18, 3);
setTile(106, 53, -38, 18, 3);
setTile(106, 53, -37, 18, 3);
setTile(106, 54, -94, 18, 1);
setTile(106, 54, -93, 18, 1);
setTile(106, 54, -92, 18, 1);
setTile(106, 54, -91, 18, 1);
setTile(106, 54, -44, 106, 1);
setTile(106, 54, -43, 17, 3);
setTile(106, 54, -42, 17, 3);
setTile(106, 54, -41, 106, 4);
setTile(106, 54, -39, 18, 3);
setTile(106, 55, -44, 106, 1);
setTile(106, 55, -43, 17, 3);
setTile(106, 55, -42, 17, 3);
setTile(106, 55, -41, 106, 4);
setTile(106, 56, -93, 18, 1);
setTile(106, 56, -92, 18, 1);
setTile(106, 56, -44, 106, 1);
setTile(106, 56, -43, 17, 3);
setTile(106, 56, -42, 17, 3);
setTile(106, 56, -41, 106, 4);
setTile(106, 57, -44, 106, 1);
setTile(106, 57, -43, 17, 3);
setTile(106, 57, -42, 17, 3);
setTile(106, 57, -41, 106, 4);
setTile(106, 58, -47, 18, 3);
setTile(106, 58, -46, 18, 3);
setTile(106, 58, -45, 18, 3);
setTile(106, 58, -44, 18, 3);
setTile(106, 58, -43, 17, 3);
setTile(106, 58, -42, 17, 3);
setTile(106, 58, -41, 18, 3);
setTile(106, 58, -40, 18, 3);
setTile(106, 58, -39, 18, 3);
setTile(106, 58, -38, 18, 3);
setTile(106, 59, -46, 18, 3);
setTile(106, 59, -45, 18, 3);
setTile(106, 59, -44, 18, 3);
setTile(106, 59, -43, 18, 3);
setTile(106, 59, -42, 18, 3);
setTile(106, 59, -41, 18, 3);
setTile(106, 59, -40, 18, 3);
setTile(106, 59, -39, 18, 3);
setTile(106, 60, -45, 18, 3);
setTile(106, 60, -44, 18, 3);
setTile(106, 60, -43, 18, 3);
setTile(106, 60, -42, 18, 3);
setTile(106, 60, -41, 18, 3);
setTile(106, 60, -40, 18, 3);
setTile(107, 32, -109, 79);
setTile(107, 32, -108, 79);
setTile(107, 32, -107, 79);
setTile(107, 32, -106, 79);
setTile(107, 33, -109, 79);
setTile(107, 33, -108, 79);
setTile(107, 33, -107, 79);
setTile(107, 33, -106, 79);
setTile(107, 33, -105, 79);
setTile(107, 33, -103, 44, 8);
setTile(107, 33, -102, 44, 8);
setTile(107, 33, -101, 44, 8);
setTile(107, 33, -100, 44, 8);
setTile(107, 33, -99, 44, 8);
setTile(107, 34, -98, 44);
setTile(107, 34, -97, 44);
setTile(107, 34, -96, 44);
setTile(107, 34, -95, 44);
setTile(107, 34, -94, 44);
setTile(107, 34, -87, 48);
setTile(107, 34, -82, 48);
setTile(107, 34, -81, 48);
setTile(107, 34, -59, 44);
setTile(107, 34, -58, 44);
setTile(107, 34, -46, 44);
setTile(107, 34, -45, 44);
setTile(107, 34, -42, 106, 2);
setTile(107, 35, -89, 175, 3);
setTile(107, 35, -42, 106, 2);
setTile(107, 35, -31, 106, 2);
setTile(107, 36, -89, 175, 8);
setTile(107, 36, -43, 106, 2);
setTile(107, 36, -42, 106, 2);
setTile(107, 36, -31, 106, 2);
setTile(107, 36, -30, 106, 2);
setTile(107, 37, -84, 18, 1);
setTile(107, 37, -83, 18, 1);
setTile(107, 37, -43, 106, 2);
setTile(107, 37, -42, 106, 2);
setTile(107, 37, -31, 106, 2);
setTile(107, 37, -30, 106, 2);
setTile(107, 38, -85, 18, 1);
setTile(107, 38, -84, 18, 1);
setTile(107, 38, -83, 18, 1);
setTile(107, 38, -82, 18, 1);
setTile(107, 38, -43, 106, 2);
setTile(107, 38, -42, 106, 2);
setTile(107, 38, -39, 18, 3);
setTile(107, 38, -38, 18, 3);
setTile(107, 38, -37, 18, 3);
setTile(107, 38, -36, 18, 3);
setTile(107, 38, -31, 106, 2);
setTile(107, 38, -30, 106, 2);
setTile(107, 39, -84, 18, 1);
setTile(107, 39, -83, 18, 1);
setTile(107, 39, -42, 106, 2);
setTile(107, 39, -39, 18, 3);
setTile(107, 39, -38, 18, 3);
setTile(107, 39, -37, 18, 3);
setTile(107, 39, -36, 18, 3);
setTile(107, 39, -31, 106, 2);
setTile(107, 39, -30, 106, 2);
setTile(107, 40, -43, 106, 2);
setTile(107, 40, -42, 106, 2);
setTile(107, 40, -31, 106, 2);
setTile(107, 40, -30, 106, 2);
setTile(107, 41, -43, 106, 2);
setTile(107, 41, -42, 106, 2);
setTile(107, 41, -31, 106, 2);
setTile(107, 41, -30, 106, 2);
setTile(107, 42, -84, 18, 1);
setTile(107, 42, -83, 18, 1);
setTile(107, 42, -43, 106, 2);
setTile(107, 42, -42, 106, 2);
setTile(107, 42, -31, 106, 2);
setTile(107, 42, -30, 106, 2);
setTile(107, 43, -43, 106, 2);
setTile(107, 43, -42, 106, 2);
setTile(107, 43, -34, 18, 3);
setTile(107, 43, -33, 18, 3);
setTile(107, 43, -32, 18, 3);
setTile(107, 43, -31, 18, 3);
setTile(107, 43, -30, 18, 3);
setTile(107, 43, -29, 18, 3);
setTile(107, 43, -28, 18, 3);
setTile(107, 44, -42, 106, 2);
setTile(107, 44, -33, 18, 3);
setTile(107, 44, -32, 18, 3);
setTile(107, 44, -31, 18, 3);
setTile(107, 44, -30, 18, 3);
setTile(107, 44, -29, 18, 3);
setTile(107, 44, -28, 18, 3);
setTile(107, 45, -95, 18, 1);
setTile(107, 45, -94, 18, 1);
setTile(107, 45, -93, 18, 1);
setTile(107, 45, -92, 18, 1);
setTile(107, 45, -91, 18, 1);
setTile(107, 45, -90, 18, 1);
setTile(107, 45, -43, 106, 2);
setTile(107, 45, -32, 18, 3);
setTile(107, 45, -31, 18, 3);
setTile(107, 45, -30, 18, 3);
setTile(107, 45, -29, 18, 3);
setTile(107, 46, -95, 18, 1);
setTile(107, 46, -94, 18, 1);
setTile(107, 46, -93, 18, 1);
setTile(107, 46, -92, 18, 1);
setTile(107, 46, -91, 18, 1);
setTile(107, 46, -90, 18, 1);
setTile(107, 46, -43, 106, 2);
setTile(107, 46, -42, 106, 2);
setTile(107, 47, -93, 18, 1);
setTile(107, 47, -92, 18, 1);
setTile(107, 47, -43, 106, 2);
setTile(107, 47, -42, 17, 3);
setTile(107, 48, -95, 18, 1);
setTile(107, 48, -94, 18, 1);
setTile(107, 48, -93, 18, 1);
setTile(107, 48, -92, 18, 1);
setTile(107, 48, -91, 18, 1);
setTile(107, 48, -90, 18, 1);
setTile(107, 48, -43, 18, 3);
setTile(107, 48, -42, 106, 2);
setTile(107, 49, -93, 18, 1);
setTile(107, 49, -92, 18, 1);
setTile(107, 49, -42, 106, 2);
setTile(107, 50, -95, 18, 1);
setTile(107, 50, -94, 18, 1);
setTile(107, 50, -93, 18, 1);
setTile(107, 50, -92, 18, 1);
setTile(107, 50, -91, 18, 1);
setTile(107, 50, -90, 18, 1);
setTile(107, 50, -43, 106, 2);
setTile(107, 50, -42, 106, 2);
setTile(107, 51, -43, 106, 2);
setTile(107, 51, -42, 106, 2);
setTile(107, 52, -93, 18, 1);
setTile(107, 52, -92, 18, 1);
setTile(107, 52, -43, 106, 2);
setTile(107, 52, -41, 17, 3);
setTile(107, 53, -43, 106, 2);
setTile(107, 53, -42, 106, 2);
setTile(107, 53, -41, 18, 3);
setTile(107, 53, -40, 17, 3);
setTile(107, 53, -39, 18, 3);
setTile(107, 53, -38, 18, 3);
setTile(107, 53, -37, 18, 3);
setTile(107, 54, -93, 18, 1);
setTile(107, 54, -92, 18, 1);
setTile(107, 54, -43, 106, 2);
setTile(107, 54, -42, 106, 2);
setTile(107, 54, -40, 18, 3);
setTile(107, 54, -39, 18, 3);
setTile(107, 54, -38, 18, 3);
setTile(107, 55, -43, 106, 2);
setTile(107, 55, -42, 106, 2);
setTile(107, 55, -39, 18, 3);
setTile(107, 56, -43, 106, 2);
setTile(107, 56, -42, 106, 2);
setTile(107, 57, -43, 106, 2);
setTile(107, 57, -42, 106, 2);
setTile(107, 58, -46, 18, 3);
setTile(107, 58, -45, 18, 3);
setTile(107, 58, -44, 18, 3);
setTile(107, 58, -43, 18, 3);
setTile(107, 58, -42, 18, 3);
setTile(107, 58, -41, 18, 3);
setTile(107, 58, -40, 18, 3);
setTile(107, 58, -39, 18, 3);
setTile(107, 59, -45, 18, 3);
setTile(107, 59, -44, 18, 3);
setTile(107, 59, -43, 18, 3);
setTile(107, 59, -42, 18, 3);
setTile(107, 59, -41, 18, 3);
setTile(107, 59, -40, 18, 3);
setTile(107, 60, -44, 18, 3);
setTile(107, 60, -43, 18, 3);
setTile(107, 60, -42, 18, 3);
setTile(107, 60, -41, 18, 3);
setTile(108, 32, -109, 79);
setTile(108, 32, -108, 79);
setTile(108, 32, -107, 79);
setTile(108, 32, -106, 79);
setTile(108, 33, -109, 79);
setTile(108, 33, -108, 79);
setTile(108, 33, -107, 79);
setTile(108, 33, -106, 79);
setTile(108, 33, -105, 79);
setTile(108, 33, -88, 48);
setTile(108, 34, -88, 48);
setTile(108, 34, -87, 48);
setTile(108, 34, -82, 48);
setTile(108, 34, -59, 44);
setTile(108, 34, -58, 44);
setTile(108, 34, -46, 44);
setTile(108, 34, -45, 44);
setTile(108, 35, -86, 31, 2);
setTile(108, 37, -86, 18, 1);
setTile(108, 37, -85, 18, 1);
setTile(108, 37, -84, 18, 1);
setTile(108, 37, -83, 18, 1);
setTile(108, 37, -82, 18, 1);
setTile(108, 37, -81, 18, 1);
setTile(108, 38, -86, 18, 1);
setTile(108, 38, -85, 18, 1);
setTile(108, 38, -84, 18, 1);
setTile(108, 38, -83, 18, 1);
setTile(108, 38, -82, 18, 1);
setTile(108, 38, -81, 18, 1);
setTile(108, 39, -86, 18, 1);
setTile(108, 39, -85, 18, 1);
setTile(108, 39, -84, 18, 1);
setTile(108, 39, -83, 18, 1);
setTile(108, 39, -82, 18, 1);
setTile(108, 39, -81, 18, 1);
setTile(108, 40, -84, 18, 1);
setTile(108, 40, -83, 18, 1);
setTile(108, 41, -84, 18, 1);
setTile(108, 41, -83, 18, 1);
setTile(108, 42, -86, 18, 1);
setTile(108, 42, -85, 18, 1);
setTile(108, 42, -84, 18, 1);
setTile(108, 42, -83, 18, 1);
setTile(108, 42, -82, 18, 1);
setTile(108, 42, -81, 18, 1);
setTile(108, 43, -84, 18, 1);
setTile(108, 43, -83, 18, 1);
setTile(108, 43, -33, 18, 3);
setTile(108, 43, -32, 18, 3);
setTile(108, 43, -31, 18, 3);
setTile(108, 43, -30, 18, 3);
setTile(108, 43, -29, 18, 3);
setTile(108, 43, -28, 18, 3);
setTile(108, 44, -32, 18, 3);
setTile(108, 44, -31, 18, 3);
setTile(108, 44, -30, 18, 3);
setTile(108, 44, -29, 18, 3);
setTile(108, 45, -93, 18, 1);
setTile(108, 45, -92, 18, 1);
setTile(108, 45, -31, 18, 3);
setTile(108, 45, -30, 18, 3);
setTile(108, 46, -94, 18, 1);
setTile(108, 46, -93, 18, 1);
setTile(108, 46, -92, 18, 1);
setTile(108, 46, -91, 18, 1);
setTile(108, 46, -84, 18, 1);
setTile(108, 46, -83, 18, 1);
setTile(108, 48, -93, 18, 1);
setTile(108, 48, -92, 18, 1);
setTile(108, 48, -84, 18, 1);
setTile(108, 48, -83, 18, 1);
setTile(108, 48, -45, 18, 3);
setTile(108, 48, -44, 18, 3);
setTile(108, 48, -43, 18, 3);
setTile(108, 48, -42, 17, 3);
setTile(108, 48, -41, 18, 3);
setTile(108, 49, -43, 18, 3);
setTile(108, 50, -93, 18, 1);
setTile(108, 50, -92, 18, 1);
setTile(108, 53, -42, 18, 3);
setTile(108, 53, -41, 18, 3);
setTile(108, 53, -40, 18, 3);
setTile(108, 53, -39, 17, 3);
setTile(108, 53, -38, 18, 3);
setTile(108, 53, -37, 18, 3);
setTile(108, 53, -36, 18, 3);
setTile(108, 54, -41, 18, 3);
setTile(108, 54, -40, 18, 3);
setTile(108, 54, -39, 17, 3);
setTile(108, 54, -38, 18, 3);
setTile(108, 54, -37, 18, 3);
setTile(108, 55, -40, 18, 3);
setTile(108, 55, -39, 18, 3);
setTile(108, 55, -38, 18, 3);
setTile(108, 58, -45, 18, 3);
setTile(108, 58, -44, 18, 3);
setTile(108, 58, -43, 18, 3);
setTile(108, 58, -42, 18, 3);
setTile(108, 58, -41, 18, 3);
setTile(108, 58, -40, 18, 3);
setTile(108, 59, -44, 18, 3);
setTile(108, 59, -43, 18, 3);
setTile(108, 59, -42, 18, 3);
setTile(108, 59, -41, 18, 3);
setTile(108, 60, -43, 18, 3);
setTile(108, 60, -42, 18, 3);
setTile(109, 32, -109, 79);
setTile(109, 32, -108, 79);
setTile(109, 32, -107, 79);
setTile(109, 32, -106, 79);
setTile(109, 33, -109, 79);
setTile(109, 33, -108, 79);
setTile(109, 33, -107, 79);
setTile(109, 33, -106, 79);
setTile(109, 33, -105, 79);
setTile(109, 34, -88, 48);
setTile(109, 34, -59, 44);
setTile(109, 34, -58, 44);
setTile(109, 34, -46, 44);
setTile(109, 34, -45, 44);
setTile(109, 35, -80, 175, 3);
setTile(109, 36, -80, 175, 8);
setTile(109, 37, -86, 18, 1);
setTile(109, 37, -85, 18, 1);
setTile(109, 37, -84, 18, 1);
setTile(109, 37, -83, 18, 1);
setTile(109, 37, -82, 18, 1);
setTile(109, 37, -81, 18, 1);
setTile(109, 38, -87, 18, 1);
setTile(109, 38, -86, 18, 1);
setTile(109, 38, -85, 18, 1);
setTile(109, 38, -84, 18, 1);
setTile(109, 38, -83, 18, 1);
setTile(109, 38, -82, 18, 1);
setTile(109, 38, -81, 18, 1);
setTile(109, 38, -80, 18, 1);
setTile(109, 39, -86, 18, 1);
setTile(109, 39, -85, 18, 1);
setTile(109, 39, -84, 18, 1);
setTile(109, 39, -83, 18, 1);
setTile(109, 39, -82, 18, 1);
setTile(109, 39, -81, 18, 1);
setTile(109, 40, -85, 18, 1);
setTile(109, 40, -84, 18, 1);
setTile(109, 40, -83, 18, 1);
setTile(109, 40, -82, 18, 1);
setTile(109, 41, -85, 18, 1);
setTile(109, 41, -84, 18, 1);
setTile(109, 41, -83, 18, 1);
setTile(109, 41, -82, 18, 1);
setTile(109, 42, -86, 18, 1);
setTile(109, 42, -85, 18, 1);
setTile(109, 42, -84, 18, 1);
setTile(109, 42, -83, 18, 1);
setTile(109, 42, -82, 18, 1);
setTile(109, 42, -81, 18, 1);
setTile(109, 43, -85, 18, 1);
setTile(109, 43, -84, 18, 1);
setTile(109, 43, -83, 18, 1);
setTile(109, 43, -82, 18, 1);
setTile(109, 43, -32, 18, 3);
setTile(109, 43, -31, 18, 3);
setTile(109, 43, -30, 18, 3);
setTile(109, 43, -29, 18, 3);
setTile(109, 44, -84, 18, 1);
setTile(109, 44, -83, 18, 1);
setTile(109, 44, -31, 18, 3);
setTile(109, 44, -30, 18, 3);
setTile(109, 45, -84, 18, 1);
setTile(109, 45, -83, 18, 1);
setTile(109, 46, -93, 18, 1);
setTile(109, 46, -92, 18, 1);
setTile(109, 46, -85, 18, 1);
setTile(109, 46, -84, 18, 1);
setTile(109, 46, -83, 18, 1);
setTile(109, 46, -82, 18, 1);
setTile(109, 47, -84, 18, 1);
setTile(109, 47, -83, 18, 1);
setTile(109, 48, -85, 18, 1);
setTile(109, 48, -84, 18, 1);
setTile(109, 48, -83, 18, 1);
setTile(109, 48, -82, 18, 1);
setTile(109, 48, -45, 18, 3);
setTile(109, 48, -44, 18, 3);
setTile(109, 48, -43, 18, 3);
setTile(109, 48, -42, 17, 3);
setTile(109, 48, -41, 18, 3);
setTile(109, 49, -44, 18, 3);
setTile(109, 49, -43, 18, 3);
setTile(109, 49, -42, 18, 3);
setTile(109, 50, -84, 18, 1);
setTile(109, 50, -83, 18, 1);
setTile(109, 50, -43, 18, 3);
setTile(109, 52, -84, 18, 1);
setTile(109, 52, -83, 18, 1);
setTile(109, 53, -41, 18, 3);
setTile(109, 53, -40, 18, 3);
setTile(109, 53, -39, 18, 3);
setTile(109, 53, -38, 18, 3);
setTile(109, 53, -37, 18, 3);
setTile(109, 54, -40, 18, 3);
setTile(109, 54, -39, 18, 3);
setTile(109, 54, -38, 18, 3);
setTile(109, 55, -39, 18, 3);
setTile(109, 58, -44, 18, 3);
setTile(109, 58, -43, 18, 3);
setTile(109, 58, -42, 18, 3);
setTile(109, 58, -41, 18, 3);
setTile(109, 59, -43, 18, 3);
setTile(109, 59, -42, 18, 3);
setTile(110, 32, -109, 79);
setTile(110, 32, -108, 79);
setTile(110, 32, -107, 79);
setTile(110, 32, -106, 79);
setTile(110, 33, -109, 79);
setTile(110, 33, -108, 79);
setTile(110, 33, -107, 79);
setTile(110, 33, -106, 79);
setTile(110, 33, -105, 79);
setTile(110, 34, -59, 44);
setTile(110, 34, -58, 44);
setTile(110, 34, -46, 44);
setTile(110, 34, -45, 44);
setTile(110, 35, -84, 17, 1);
setTile(110, 35, -83, 17, 1);
setTile(110, 36, -84, 17, 1);
setTile(110, 36, -83, 17, 1);
setTile(110, 37, -87, 18, 1);
setTile(110, 37, -86, 18, 1);
setTile(110, 37, -85, 18, 1);
setTile(110, 37, -84, 17, 1);
setTile(110, 37, -83, 17, 1);
setTile(110, 37, -82, 18, 1);
setTile(110, 37, -81, 18, 1);
setTile(110, 37, -80, 18, 1);
setTile(110, 38, -88, 18, 1);
setTile(110, 38, -87, 18, 1);
setTile(110, 38, -86, 18, 1);
setTile(110, 38, -85, 18, 1);
setTile(110, 38, -84, 17, 1);
setTile(110, 38, -83, 17, 1);
setTile(110, 38, -82, 18, 1);
setTile(110, 38, -81, 18, 1);
setTile(110, 38, -80, 18, 1);
setTile(110, 38, -79, 18, 1);
setTile(110, 39, -87, 18, 1);
setTile(110, 39, -86, 18, 1);
setTile(110, 39, -85, 18, 1);
setTile(110, 39, -84, 17, 1);
setTile(110, 39, -83, 17, 1);
setTile(110, 39, -82, 18, 1);
setTile(110, 39, -81, 18, 1);
setTile(110, 39, -80, 18, 1);
setTile(110, 40, -86, 18, 1);
setTile(110, 40, -85, 18, 1);
setTile(110, 40, -84, 17, 1);
setTile(110, 40, -83, 17, 1);
setTile(110, 40, -82, 18, 1);
setTile(110, 40, -81, 18, 1);
setTile(110, 41, -86, 18, 1);
setTile(110, 41, -85, 18, 1);
setTile(110, 41, -84, 17, 1);
setTile(110, 41, -83, 17, 1);
setTile(110, 41, -82, 18, 1);
setTile(110, 41, -81, 18, 1);
setTile(110, 42, -87, 18, 1);
setTile(110, 42, -86, 18, 1);
setTile(110, 42, -85, 18, 1);
setTile(110, 42, -84, 17, 1);
setTile(110, 42, -83, 17, 1);
setTile(110, 42, -82, 18, 1);
setTile(110, 42, -81, 18, 1);
setTile(110, 42, -80, 18, 1);
setTile(110, 43, -86, 18, 1);
setTile(110, 43, -85, 18, 1);
setTile(110, 43, -84, 17, 1);
setTile(110, 43, -83, 17, 1);
setTile(110, 43, -82, 18, 1);
setTile(110, 43, -81, 18, 1);
setTile(110, 43, -31, 18, 3);
setTile(110, 43, -30, 18, 3);
setTile(110, 44, -85, 18, 1);
setTile(110, 44, -84, 17, 1);
setTile(110, 44, -83, 17, 1);
setTile(110, 44, -82, 18, 1);
setTile(110, 45, -85, 18, 1);
setTile(110, 45, -84, 17, 1);
setTile(110, 45, -83, 17, 1);
setTile(110, 45, -82, 18, 1);
setTile(110, 46, -86, 18, 1);
setTile(110, 46, -85, 18, 1);
setTile(110, 46, -84, 17, 1);
setTile(110, 46, -83, 17, 1);
setTile(110, 46, -82, 18, 1);
setTile(110, 46, -81, 18, 1);
setTile(110, 47, -85, 18, 1);
setTile(110, 47, -84, 17, 1);
setTile(110, 47, -83, 17, 1);
setTile(110, 47, -82, 18, 1);
setTile(110, 48, -86, 18, 1);
setTile(110, 48, -85, 18, 1);
setTile(110, 48, -84, 17, 1);
setTile(110, 48, -83, 17, 1);
setTile(110, 48, -82, 18, 1);
setTile(110, 48, -81, 18, 1);
setTile(110, 48, -46, 18, 3);
setTile(110, 48, -45, 18, 3);
setTile(110, 48, -44, 18, 3);
setTile(110, 48, -43, 18, 3);
setTile(110, 48, -42, 18, 3);
setTile(110, 48, -41, 18, 3);
setTile(110, 48, -40, 18, 3);
setTile(110, 49, -84, 17, 1);
setTile(110, 49, -83, 17, 1);
setTile(110, 49, -45, 18, 3);
setTile(110, 49, -44, 18, 3);
setTile(110, 49, -43, 17, 3);
setTile(110, 49, -42, 18, 3);
setTile(110, 49, -41, 18, 3);
setTile(110, 50, -85, 18, 1);
setTile(110, 50, -84, 17, 1);
setTile(110, 50, -83, 17, 1);
setTile(110, 50, -82, 18, 1);
setTile(110, 50, -44, 18, 3);
setTile(110, 50, -43, 18, 3);
setTile(110, 50, -42, 18, 3);
setTile(110, 51, -84, 17, 1);
setTile(110, 51, -83, 17, 1);
setTile(110, 52, -85, 18, 1);
setTile(110, 52, -84, 17, 1);
setTile(110, 52, -83, 18, 1);
setTile(110, 52, -82, 18, 1);
setTile(110, 53, -84, 18, 1);
setTile(110, 53, -83, 18, 1);
setTile(110, 53, -41, 18, 3);
setTile(110, 53, -40, 18, 3);
setTile(110, 53, -39, 18, 3);
setTile(110, 53, -38, 18, 3);
setTile(110, 53, -37, 18, 3);
setTile(110, 54, -39, 18, 3);
setTile(110, 58, -43, 18, 3);
setTile(110, 58, -42, 18, 3);
setTile(111, 34, -59, 44);
setTile(111, 34, -58, 44);
setTile(111, 34, -46, 44);
setTile(111, 34, -45, 44);
setTile(111, 35, -84, 17, 1);
setTile(111, 35, -83, 17, 1);
setTile(111, 36, -84, 17, 1);
setTile(111, 36, -83, 17, 1);
setTile(111, 37, -87, 18, 1);
setTile(111, 37, -86, 18, 1);
setTile(111, 37, -85, 18, 1);
setTile(111, 37, -84, 17, 1);
setTile(111, 37, -83, 17, 1);
setTile(111, 37, -82, 18, 1);
setTile(111, 37, -81, 18, 1);
setTile(111, 37, -80, 18, 1);
setTile(111, 38, -88, 18, 1);
setTile(111, 38, -87, 18, 1);
setTile(111, 38, -86, 18, 1);
setTile(111, 38, -85, 18, 1);
setTile(111, 38, -84, 17, 1);
setTile(111, 38, -83, 17, 1);
setTile(111, 38, -82, 18, 1);
setTile(111, 38, -81, 18, 1);
setTile(111, 38, -80, 18, 1);
setTile(111, 38, -79, 18, 1);
setTile(111, 39, -87, 18, 1);
setTile(111, 39, -86, 18, 1);
setTile(111, 39, -85, 18, 1);
setTile(111, 39, -84, 17, 1);
setTile(111, 39, -83, 17, 1);
setTile(111, 39, -82, 18, 1);
setTile(111, 39, -81, 18, 1);
setTile(111, 39, -80, 18, 1);
setTile(111, 40, -86, 18, 1);
setTile(111, 40, -85, 18, 1);
setTile(111, 40, -84, 17, 1);
setTile(111, 40, -83, 17, 1);
setTile(111, 40, -82, 18, 1);
setTile(111, 40, -81, 18, 1);
setTile(111, 41, -86, 18, 1);
setTile(111, 41, -85, 18, 1);
setTile(111, 41, -84, 17, 1);
setTile(111, 41, -83, 17, 1);
setTile(111, 41, -82, 18, 1);
setTile(111, 41, -81, 18, 1);
setTile(111, 42, -87, 18, 1);
setTile(111, 42, -86, 18, 1);
setTile(111, 42, -85, 18, 1);
setTile(111, 42, -84, 17, 1);
setTile(111, 42, -83, 17, 1);
setTile(111, 42, -82, 18, 1);
setTile(111, 42, -81, 18, 1);
setTile(111, 42, -80, 18, 1);
setTile(111, 43, -86, 18, 1);
setTile(111, 43, -85, 18, 1);
setTile(111, 43, -84, 17, 1);
setTile(111, 43, -83, 17, 1);
setTile(111, 43, -82, 18, 1);
setTile(111, 43, -81, 18, 1);
setTile(111, 44, -85, 18, 1);
setTile(111, 44, -84, 17, 1);
setTile(111, 44, -83, 17, 1);
setTile(111, 44, -82, 18, 1);
setTile(111, 45, -85, 18, 1);
setTile(111, 45, -84, 17, 1);
setTile(111, 45, -83, 17, 1);
setTile(111, 45, -82, 18, 1);
setTile(111, 46, -86, 18, 1);
setTile(111, 46, -85, 18, 1);
setTile(111, 46, -84, 17, 1);
setTile(111, 46, -83, 17, 1);
setTile(111, 46, -82, 18, 1);
setTile(111, 46, -81, 18, 1);
setTile(111, 47, -85, 18, 1);
setTile(111, 47, -84, 17, 1);
setTile(111, 47, -83, 17, 1);
setTile(111, 47, -82, 18, 1);
setTile(111, 48, -86, 18, 1);
setTile(111, 48, -85, 18, 1);
setTile(111, 48, -84, 17, 1);
setTile(111, 48, -83, 17, 1);
setTile(111, 48, -82, 18, 1);
setTile(111, 48, -81, 18, 1);
setTile(111, 48, -45, 18, 3);
setTile(111, 48, -44, 18, 3);
setTile(111, 48, -43, 18, 3);
setTile(111, 48, -42, 18, 3);
setTile(111, 48, -41, 18, 3);
setTile(111, 49, -84, 17, 1);
setTile(111, 49, -83, 17, 1);
setTile(111, 49, -44, 18, 3);
setTile(111, 49, -43, 18, 3);
setTile(111, 49, -42, 18, 3);
setTile(111, 50, -85, 18, 1);
setTile(111, 50, -84, 17, 1);
setTile(111, 50, -83, 17, 1);
setTile(111, 50, -82, 18, 1);
setTile(111, 50, -43, 18, 3);
setTile(111, 51, -84, 17, 1);
setTile(111, 51, -83, 17, 1);
setTile(111, 52, -85, 18, 1);
setTile(111, 52, -84, 18, 1);
setTile(111, 52, -83, 18, 1);
setTile(111, 52, -82, 18, 1);
setTile(111, 53, -84, 18, 1);
setTile(111, 53, -83, 18, 1);
setTile(111, 53, -39, 18, 3);
setTile(112, 34, -59, 44);
setTile(112, 34, -58, 44);
setTile(112, 34, -46, 44);
setTile(112, 34, -45, 44);
setTile(112, 35, -90, 40);
setTile(112, 37, -86, 18, 1);
setTile(112, 37, -85, 18, 1);
setTile(112, 37, -84, 18, 1);
setTile(112, 37, -83, 18, 1);
setTile(112, 37, -82, 18, 1);
setTile(112, 37, -81, 18, 1);
setTile(112, 38, -87, 18, 1);
setTile(112, 38, -86, 18, 1);
setTile(112, 38, -85, 18, 1);
setTile(112, 38, -84, 18, 1);
setTile(112, 38, -83, 18, 1);
setTile(112, 38, -82, 18, 1);
setTile(112, 38, -81, 18, 1);
setTile(112, 38, -80, 18, 1);
setTile(112, 39, -86, 18, 1);
setTile(112, 39, -85, 18, 1);
setTile(112, 39, -84, 18, 1);
setTile(112, 39, -83, 18, 1);
setTile(112, 39, -82, 18, 1);
setTile(112, 39, -81, 18, 1);
setTile(112, 40, -85, 18, 1);
setTile(112, 40, -84, 18, 1);
setTile(112, 40, -83, 18, 1);
setTile(112, 40, -82, 18, 1);
setTile(112, 41, -85, 18, 1);
setTile(112, 41, -84, 18, 1);
setTile(112, 41, -83, 18, 1);
setTile(112, 41, -82, 18, 1);
setTile(112, 42, -86, 18, 1);
setTile(112, 42, -85, 18, 1);
setTile(112, 42, -84, 18, 1);
setTile(112, 42, -83, 18, 1);
setTile(112, 42, -82, 18, 1);
setTile(112, 42, -81, 18, 1);
setTile(112, 43, -85, 18, 1);
setTile(112, 43, -84, 18, 1);
setTile(112, 43, -83, 18, 1);
setTile(112, 43, -82, 18, 1);
setTile(112, 44, -84, 18, 1);
setTile(112, 44, -83, 18, 1);
setTile(112, 45, -84, 18, 1);
setTile(112, 45, -83, 18, 1);
setTile(112, 46, -85, 18, 1);
setTile(112, 46, -84, 18, 1);
setTile(112, 46, -83, 18, 1);
setTile(112, 46, -82, 18, 1);
setTile(112, 47, -84, 18, 1);
setTile(112, 47, -83, 18, 1);
setTile(112, 48, -85, 18, 1);
setTile(112, 48, -84, 18, 1);
setTile(112, 48, -83, 18, 1);
setTile(112, 48, -82, 18, 1);
setTile(112, 48, -45, 18, 3);
setTile(112, 48, -44, 18, 3);
setTile(112, 48, -43, 18, 3);
setTile(112, 48, -42, 18, 3);
setTile(112, 48, -41, 18, 3);
setTile(112, 49, -43, 18, 3);
setTile(112, 50, -84, 18, 1);
setTile(112, 50, -83, 18, 1);
setTile(112, 52, -84, 18, 1);
setTile(112, 52, -83, 18, 1);
setTile(113, 35, -82, 175, 2);
setTile(113, 36, -82, 175, 8);
setTile(113, 37, -86, 18, 1);
setTile(113, 37, -85, 18, 1);
setTile(113, 37, -84, 18, 1);
setTile(113, 37, -83, 18, 1);
setTile(113, 37, -82, 18, 1);
setTile(113, 37, -81, 18, 1);
setTile(113, 38, -87, 18, 1);
setTile(113, 38, -86, 18, 1);
setTile(113, 38, -85, 18, 1);
setTile(113, 38, -84, 18, 1);
setTile(113, 38, -83, 18, 1);
setTile(113, 38, -82, 18, 1);
setTile(113, 38, -81, 18, 1);
setTile(113, 39, -86, 18, 1);
setTile(113, 39, -85, 18, 1);
setTile(113, 39, -84, 18, 1);
setTile(113, 39, -83, 18, 1);
setTile(113, 39, -82, 18, 1);
setTile(113, 39, -81, 18, 1);
setTile(113, 40, -84, 18, 1);
setTile(113, 40, -83, 18, 1);
setTile(113, 41, -84, 18, 1);
setTile(113, 41, -83, 18, 1);
setTile(113, 42, -86, 18, 1);
setTile(113, 42, -85, 18, 1);
setTile(113, 42, -84, 18, 1);
setTile(113, 42, -83, 18, 1);
setTile(113, 42, -82, 18, 1);
setTile(113, 42, -81, 18, 1);
setTile(113, 43, -84, 18, 1);
setTile(113, 43, -83, 18, 1);
setTile(113, 46, -84, 18, 1);
setTile(113, 46, -83, 18, 1);
setTile(113, 48, -84, 18, 1);
setTile(113, 48, -83, 18, 1);
setTile(113, 48, -43, 18, 3);
setTile(114, 34, -116, 79);
setTile(114, 34, -80, 48);
setTile(114, 35, -116, 79);
setTile(114, 35, -90, 175, 3);
setTile(114, 36, -116, 79);
setTile(114, 36, -90, 175, 8);
setTile(114, 37, -84, 18, 1);
setTile(114, 37, -83, 18, 1);
setTile(114, 38, -88, 18, 1);
setTile(114, 38, -87, 18, 1);
setTile(114, 38, -86, 18, 1);
setTile(114, 38, -85, 18, 1);
setTile(114, 38, -84, 18, 1);
setTile(114, 38, -83, 18, 1);
setTile(114, 38, -82, 18, 1);
setTile(114, 39, -84, 18, 1);
setTile(114, 39, -83, 18, 1);
setTile(114, 42, -84, 18, 1);
setTile(114, 42, -83, 18, 1);
setTile(115, 34, -117, 79);
setTile(115, 34, -116, 79);
setTile(115, 34, -115, 79);
setTile(115, 34, -81, 48);
setTile(115, 34, -76, 44);
setTile(115, 34, -75, 44);
setTile(115, 34, -74, 44);
setTile(115, 34, -73, 44);
setTile(115, 34, -72, 44);
setTile(115, 34, -71, 44);
setTile(115, 34, -70, 44);
setTile(115, 34, -69, 44);
setTile(115, 34, -68, 44);
setTile(115, 34, -67, 44);
setTile(115, 34, -66, 44);
setTile(115, 34, -65, 44);
setTile(115, 34, -64, 44);
setTile(115, 34, -63, 44);
setTile(115, 35, -117, 79);
setTile(115, 35, -116, 79);
setTile(115, 35, -115, 79);
setTile(115, 36, -117, 79);
setTile(115, 36, -116, 79);
setTile(115, 36, -115, 79);
setTile(115, 37, -117, 79);
setTile(115, 37, -116, 79);
setTile(115, 37, -115, 79);
setTile(115, 37, -87, 18, 1);
setTile(115, 38, -117, 79);
setTile(115, 38, -116, 79);
setTile(115, 38, -115, 79);
setTile(115, 38, -89, 18, 1);
setTile(115, 38, -88, 18, 1);
setTile(115, 38, -87, 18, 1);
setTile(115, 38, -86, 18, 1);
setTile(115, 38, -85, 18, 1);
setTile(115, 38, -84, 18, 1);
setTile(115, 38, -83, 18, 1);
setTile(115, 39, -116, 79);
setTile(115, 39, -87, 18, 1);
setTile(115, 40, -116, 79);
setTile(115, 41, -116, 79);
setTile(115, 41, -87, 18, 1);
setTile(116, 34, -118, 79);
setTile(116, 34, -117, 79);
setTile(116, 34, -116, 79);
setTile(116, 34, -115, 79);
setTile(116, 34, -114, 79);
setTile(116, 34, -76, 44);
setTile(116, 34, -75, 44);
setTile(116, 34, -74, 44);
setTile(116, 34, -73, 44);
setTile(116, 34, -72, 44);
setTile(116, 34, -71, 44);
setTile(116, 34, -70, 44);
setTile(116, 34, -69, 44);
setTile(116, 34, -68, 44);
setTile(116, 34, -67, 44);
setTile(116, 34, -66, 44);
setTile(116, 34, -65, 44);
setTile(116, 34, -64, 44);
setTile(116, 34, -63, 44);
setTile(116, 35, -118, 79);
setTile(116, 35, -117, 79);
setTile(116, 35, -116, 79);
setTile(116, 35, -115, 79);
setTile(116, 35, -114, 79);
setTile(116, 35, -92, 175, 3);
setTile(116, 35, -87, 17, 1);
setTile(116, 36, -118, 79);
setTile(116, 36, -117, 79);
setTile(116, 36, -116, 79);
setTile(116, 36, -115, 79);
setTile(116, 36, -114, 79);
setTile(116, 36, -92, 175, 8);
setTile(116, 36, -87, 17, 1);
setTile(116, 37, -117, 79);
setTile(116, 37, -116, 79);
setTile(116, 37, -115, 79);
setTile(116, 37, -88, 18, 1);
setTile(116, 37, -87, 17, 1);
setTile(116, 37, -86, 18, 1);
setTile(116, 38, -117, 79);
setTile(116, 38, -116, 79);
setTile(116, 38, -115, 79);
setTile(116, 38, -89, 18, 1);
setTile(116, 38, -88, 18, 1);
setTile(116, 38, -87, 17, 1);
setTile(116, 38, -86, 18, 1);
setTile(116, 38, -85, 18, 1);
setTile(116, 39, -117, 79);
setTile(116, 39, -116, 79);
setTile(116, 39, -115, 79);
setTile(116, 39, -88, 18, 1);
setTile(116, 39, -87, 17, 1);
setTile(116, 39, -86, 18, 1);
setTile(116, 40, -117, 79);
setTile(116, 40, -116, 79);
setTile(116, 40, -115, 79);
setTile(116, 40, -87, 18, 1);
setTile(116, 41, -117, 79);
setTile(116, 41, -116, 79);
setTile(116, 41, -115, 79);
setTile(116, 41, -88, 18, 1);
setTile(116, 41, -87, 18, 1);
setTile(116, 41, -86, 18, 1);
setTile(116, 42, -116, 79);
setTile(116, 43, -116, 79);
setTile(116, 44, -116, 79);
setTile(117, 34, -117, 79);
setTile(117, 34, -116, 79);
setTile(117, 34, -115, 79);
setTile(117, 35, -117, 79);
setTile(117, 35, -116, 79);
setTile(117, 35, -115, 79);
setTile(117, 35, -89, 31, 1);
setTile(117, 35, -86, 31, 2);
setTile(117, 35, -81, 39);
setTile(117, 36, -117, 79);
setTile(117, 36, -116, 79);
setTile(117, 36, -115, 79);
setTile(117, 37, -117, 79);
setTile(117, 37, -116, 79);
setTile(117, 37, -115, 79);
setTile(117, 37, -87, 18, 1);
setTile(117, 38, -117, 79);
setTile(117, 38, -116, 79);
setTile(117, 38, -115, 79);
setTile(117, 38, -89, 18, 1);
setTile(117, 38, -88, 18, 1);
setTile(117, 38, -87, 18, 1);
setTile(117, 38, -86, 18, 1);
setTile(117, 38, -85, 18, 1);
setTile(117, 39, -116, 79);
setTile(117, 39, -87, 18, 1);
setTile(117, 40, -116, 79);
setTile(117, 41, -116, 79);
setTile(117, 41, -87, 18, 1);
setTile(118, 34, -116, 79);
setTile(118, 35, -116, 79);
setTile(118, 35, -83, 31, 2);
setTile(118, 35, -81, 39);
setTile(118, 36, -116, 79);
setTile(118, 36, -80, 18, 1);
setTile(118, 36, -79, 18, 1);
setTile(118, 36, -78, 18, 1);
setTile(118, 38, -88, 18, 1);
setTile(118, 38, -87, 18, 1);
setTile(118, 38, -86, 18, 1);
setTile(118, 38, -80, 18, 1);
setTile(118, 38, -79, 18, 1);
setTile(118, 38, -78, 18, 1);
setTile(119, 35, -81, 39);
setTile(119, 36, -81, 18, 1);
setTile(119, 36, -80, 18, 1);
setTile(119, 36, -79, 18, 1);
setTile(119, 36, -78, 18, 1);
setTile(119, 36, -77, 18, 1);
setTile(119, 37, -79, 18, 1);
setTile(119, 38, -81, 18, 1);
setTile(119, 38, -80, 18, 1);
setTile(119, 38, -79, 18, 1);
setTile(119, 38, -78, 18, 1);
setTile(119, 38, -77, 18, 1);
setTile(119, 39, -79, 18, 1);
setTile(119, 41, -79, 18, 1);
setTile(120, 35, -86, 39);
setTile(120, 35, -82, 31, 2);
setTile(120, 35, -79, 17, 1);
setTile(120, 36, -92, 18, 1);
setTile(120, 36, -91, 18, 1);
setTile(120, 36, -81, 18, 1);
setTile(120, 36, -80, 18, 1);
setTile(120, 36, -79, 17, 1);
setTile(120, 36, -78, 18, 1);
setTile(120, 36, -77, 18, 1);
setTile(120, 37, -92, 18, 1);
setTile(120, 37, -91, 18, 1);
setTile(120, 37, -80, 18, 1);
setTile(120, 37, -79, 17, 1);
setTile(120, 37, -78, 18, 1);
setTile(120, 38, -81, 18, 1);
setTile(120, 38, -80, 18, 1);
setTile(120, 38, -79, 17, 1);
setTile(120, 38, -78, 18, 1);
setTile(120, 38, -77, 18, 1);
setTile(120, 39, -80, 18, 1);
setTile(120, 39, -79, 18, 1);
setTile(120, 39, -78, 18, 1);
setTile(120, 40, -92, 18, 1);
setTile(120, 40, -91, 18, 1);
setTile(120, 40, -79, 18, 1);
setTile(120, 41, -80, 18, 1);
setTile(120, 41, -79, 18, 1);
setTile(120, 41, -78, 18, 1);
setTile(121, 34, -84, 48);
setTile(121, 35, -88, 31, 1);
setTile(121, 35, -86, 39);
setTile(121, 36, -94, 18, 1);
setTile(121, 36, -93, 18, 1);
setTile(121, 36, -92, 18, 1);
setTile(121, 36, -91, 18, 1);
setTile(121, 36, -90, 18, 1);
setTile(121, 36, -89, 18, 1);
setTile(121, 36, -81, 18, 1);
setTile(121, 36, -80, 18, 1);
setTile(121, 36, -79, 18, 1);
setTile(121, 36, -78, 18, 1);
setTile(121, 36, -77, 18, 1);
setTile(121, 37, -94, 18, 1);
setTile(121, 37, -93, 18, 1);
setTile(121, 37, -92, 18, 1);
setTile(121, 37, -91, 18, 1);
setTile(121, 37, -90, 18, 1);
setTile(121, 37, -89, 18, 1);
setTile(121, 37, -79, 18, 1);
setTile(121, 38, -92, 18, 1);
setTile(121, 38, -91, 18, 1);
setTile(121, 38, -81, 18, 1);
setTile(121, 38, -80, 18, 1);
setTile(121, 38, -79, 18, 1);
setTile(121, 38, -78, 18, 1);
setTile(121, 38, -77, 18, 1);
setTile(121, 39, -92, 18, 1);
setTile(121, 39, -91, 18, 1);
setTile(121, 39, -79, 18, 1);
setTile(121, 40, -94, 18, 1);
setTile(121, 40, -93, 18, 1);
setTile(121, 40, -92, 18, 1);
setTile(121, 40, -91, 18, 1);
setTile(121, 40, -90, 18, 1);
setTile(121, 40, -89, 18, 1);
setTile(121, 41, -92, 18, 1);
setTile(121, 41, -91, 18, 1);
setTile(121, 41, -79, 18, 1);
setTile(121, 44, -92, 18, 1);
setTile(121, 44, -91, 18, 1);
setTile(122, 36, -94, 18, 1);
setTile(122, 36, -93, 18, 1);
setTile(122, 36, -92, 18, 1);
setTile(122, 36, -91, 18, 1);
setTile(122, 36, -90, 18, 1);
setTile(122, 36, -89, 18, 1);
setTile(122, 36, -80, 18, 1);
setTile(122, 36, -79, 18, 1);
setTile(122, 36, -78, 18, 1);
setTile(122, 37, -94, 18, 1);
setTile(122, 37, -93, 18, 1);
setTile(122, 37, -92, 18, 1);
setTile(122, 37, -91, 18, 1);
setTile(122, 37, -90, 18, 1);
setTile(122, 37, -89, 18, 1);
setTile(122, 38, -93, 18, 1);
setTile(122, 38, -92, 18, 1);
setTile(122, 38, -91, 18, 1);
setTile(122, 38, -90, 18, 1);
setTile(122, 38, -80, 18, 1);
setTile(122, 38, -79, 18, 1);
setTile(122, 38, -78, 18, 1);
setTile(122, 39, -93, 18, 1);
setTile(122, 39, -92, 18, 1);
setTile(122, 39, -91, 18, 1);
setTile(122, 39, -90, 18, 1);
setTile(122, 40, -94, 18, 1);
setTile(122, 40, -93, 18, 1);
setTile(122, 40, -92, 18, 1);
setTile(122, 40, -91, 18, 1);
setTile(122, 40, -90, 18, 1);
setTile(122, 40, -89, 18, 1);
setTile(122, 41, -93, 18, 1);
setTile(122, 41, -92, 18, 1);
setTile(122, 41, -91, 18, 1);
setTile(122, 41, -90, 18, 1);
setTile(122, 42, -92, 18, 1);
setTile(122, 42, -91, 18, 1);
setTile(122, 43, -92, 18, 1);
setTile(122, 43, -91, 18, 1);
setTile(122, 44, -93, 18, 1);
setTile(122, 44, -92, 18, 1);
setTile(122, 44, -91, 18, 1);
setTile(122, 44, -90, 18, 1);
setTile(122, 45, -92, 18, 1);
setTile(122, 45, -91, 18, 1);
setTile(122, 48, -92, 18, 1);
setTile(122, 48, -91, 18, 1);
setTile(123, 35, -92, 17, 1);
setTile(123, 35, -91, 17, 1);
setTile(123, 36, -95, 18, 1);
setTile(123, 36, -94, 18, 1);
setTile(123, 36, -93, 18, 1);
setTile(123, 36, -92, 17, 1);
setTile(123, 36, -91, 17, 1);
setTile(123, 36, -90, 18, 1);
setTile(123, 36, -89, 18, 1);
setTile(123, 36, -88, 18, 1);
setTile(123, 37, -95, 18, 1);
setTile(123, 37, -94, 18, 1);
setTile(123, 37, -93, 18, 1);
setTile(123, 37, -92, 17, 1);
setTile(123, 37, -91, 17, 1);
setTile(123, 37, -90, 18, 1);
setTile(123, 37, -89, 18, 1);
setTile(123, 37, -88, 18, 1);
setTile(123, 38, -94, 18, 1);
setTile(123, 38, -93, 18, 1);
setTile(123, 38, -92, 17, 1);
setTile(123, 38, -91, 17, 1);
setTile(123, 38, -90, 18, 1);
setTile(123, 38, -89, 18, 1);
setTile(123, 39, -94, 18, 1);
setTile(123, 39, -93, 18, 1);
setTile(123, 39, -92, 17, 1);
setTile(123, 39, -91, 17, 1);
setTile(123, 39, -90, 18, 1);
setTile(123, 39, -89, 18, 1);
setTile(123, 40, -95, 18, 1);
setTile(123, 40, -94, 18, 1);
setTile(123, 40, -93, 18, 1);
setTile(123, 40, -92, 17, 1);
setTile(123, 40, -91, 17, 1);
setTile(123, 40, -90, 18, 1);
setTile(123, 40, -89, 18, 1);
setTile(123, 40, -88, 18, 1);
setTile(123, 41, -94, 18, 1);
setTile(123, 41, -93, 18, 1);
setTile(123, 41, -92, 17, 1);
setTile(123, 41, -91, 17, 1);
setTile(123, 41, -90, 18, 1);
setTile(123, 41, -89, 18, 1);
setTile(123, 42, -93, 18, 1);
setTile(123, 42, -92, 17, 1);
setTile(123, 42, -91, 17, 1);
setTile(123, 42, -90, 18, 1);
setTile(123, 43, -93, 18, 1);
setTile(123, 43, -92, 17, 1);
setTile(123, 43, -91, 17, 1);
setTile(123, 43, -90, 18, 1);
setTile(123, 44, -94, 18, 1);
setTile(123, 44, -93, 18, 1);
setTile(123, 44, -92, 17, 1);
setTile(123, 44, -91, 17, 1);
setTile(123, 44, -90, 18, 1);
setTile(123, 44, -89, 18, 1);
setTile(123, 45, -93, 18, 1);
setTile(123, 45, -92, 17, 1);
setTile(123, 45, -91, 17, 1);
setTile(123, 45, -90, 18, 1);
setTile(123, 46, -92, 17, 1);
setTile(123, 46, -91, 17, 1);
setTile(123, 47, -92, 17, 1);
setTile(123, 47, -91, 17, 1);
setTile(123, 48, -93, 18, 1);
setTile(123, 48, -92, 17, 1);
setTile(123, 48, -91, 18, 1);
setTile(123, 48, -90, 18, 1);
setTile(123, 49, -92, 18, 1);
setTile(123, 49, -91, 18, 1);
setTile(124, 35, -92, 17, 1);
setTile(124, 35, -91, 17, 1);
setTile(124, 35, -84, 31, 1);
setTile(124, 35, -80, 31, 1);
setTile(124, 36, -95, 18, 1);
setTile(124, 36, -94, 18, 1);
setTile(124, 36, -93, 18, 1);
setTile(124, 36, -92, 17, 1);
setTile(124, 36, -91, 17, 1);
setTile(124, 36, -90, 18, 1);
setTile(124, 36, -89, 18, 1);
setTile(124, 36, -88, 18, 1);
setTile(124, 37, -95, 18, 1);
setTile(124, 37, -94, 18, 1);
setTile(124, 37, -93, 18, 1);
setTile(124, 37, -92, 17, 1);
setTile(124, 37, -91, 17, 1);
setTile(124, 37, -90, 18, 1);
setTile(124, 37, -89, 18, 1);
setTile(124, 37, -88, 18, 1);
setTile(124, 38, -94, 18, 1);
setTile(124, 38, -93, 18, 1);
setTile(124, 38, -92, 17, 1);
setTile(124, 38, -91, 17, 1);
setTile(124, 38, -90, 18, 1);
setTile(124, 38, -89, 18, 1);
setTile(124, 38, -83, 18, 1);
setTile(124, 38, -82, 18, 1);
setTile(124, 38, -81, 18, 1);
setTile(124, 39, -94, 18, 1);
setTile(124, 39, -93, 18, 1);
setTile(124, 39, -92, 17, 1);
setTile(124, 39, -91, 17, 1);
setTile(124, 39, -90, 18, 1);
setTile(124, 39, -89, 18, 1);
setTile(124, 40, -95, 18, 1);
setTile(124, 40, -94, 18, 1);
setTile(124, 40, -93, 18, 1);
setTile(124, 40, -92, 17, 1);
setTile(124, 40, -91, 17, 1);
setTile(124, 40, -90, 18, 1);
setTile(124, 40, -89, 18, 1);
setTile(124, 40, -88, 18, 1);
setTile(124, 40, -83, 18, 1);
setTile(124, 40, -82, 18, 1);
setTile(124, 40, -81, 18, 1);
setTile(124, 41, -94, 18, 1);
setTile(124, 41, -93, 18, 1);
setTile(124, 41, -92, 17, 1);
setTile(124, 41, -91, 17, 1);
setTile(124, 41, -90, 18, 1);
setTile(124, 41, -89, 18, 1);
setTile(124, 42, -93, 18, 1);
setTile(124, 42, -92, 17, 1);
setTile(124, 42, -91, 17, 1);
setTile(124, 42, -90, 18, 1);
setTile(124, 43, -93, 18, 1);
setTile(124, 43, -92, 17, 1);
setTile(124, 43, -91, 17, 1);
setTile(124, 43, -90, 18, 1);
setTile(124, 44, -94, 18, 1);
setTile(124, 44, -93, 18, 1);
setTile(124, 44, -92, 17, 1);
setTile(124, 44, -91, 17, 1);
setTile(124, 44, -90, 18, 1);
setTile(124, 44, -89, 18, 1);
setTile(124, 45, -93, 18, 1);
setTile(124, 45, -92, 17, 1);
setTile(124, 45, -91, 17, 1);
setTile(124, 45, -90, 18, 1);
setTile(124, 46, -92, 17, 1);
setTile(124, 46, -91, 17, 1);
setTile(124, 47, -92, 17, 1);
setTile(124, 47, -91, 17, 1);
setTile(124, 48, -93, 18, 1);
setTile(124, 48, -92, 18, 1);
setTile(124, 48, -91, 18, 1);
setTile(124, 48, -90, 18, 1);
setTile(124, 49, -92, 18, 1);
setTile(124, 49, -91, 18, 1);
setTile(125, 36, -94, 18, 1);
setTile(125, 36, -93, 18, 1);
setTile(125, 36, -92, 18, 1);
setTile(125, 36, -91, 18, 1);
setTile(125, 36, -90, 18, 1);
setTile(125, 36, -89, 18, 1);
setTile(125, 37, -94, 18, 1);
setTile(125, 37, -93, 18, 1);
setTile(125, 37, -92, 18, 1);
setTile(125, 37, -91, 18, 1);
setTile(125, 37, -90, 18, 1);
setTile(125, 37, -89, 18, 1);
setTile(125, 37, -82, 18, 1);
setTile(125, 38, -93, 18, 1);
setTile(125, 38, -92, 18, 1);
setTile(125, 38, -91, 18, 1);
setTile(125, 38, -90, 18, 1);
setTile(125, 38, -84, 18, 1);
setTile(125, 38, -83, 18, 1);
setTile(125, 38, -82, 18, 1);
setTile(125, 38, -81, 18, 1);
setTile(125, 38, -80, 18, 1);
setTile(125, 39, -93, 18, 1);
setTile(125, 39, -92, 18, 1);
setTile(125, 39, -91, 18, 1);
setTile(125, 39, -90, 18, 1);
setTile(125, 39, -82, 18, 1);
setTile(125, 40, -94, 18, 1);
setTile(125, 40, -93, 18, 1);
setTile(125, 40, -92, 18, 1);
setTile(125, 40, -91, 18, 1);
setTile(125, 40, -90, 18, 1);
setTile(125, 40, -89, 18, 1);
setTile(125, 40, -84, 18, 1);
setTile(125, 40, -83, 18, 1);
setTile(125, 40, -82, 18, 1);
setTile(125, 40, -81, 18, 1);
setTile(125, 40, -80, 18, 1);
setTile(125, 41, -93, 18, 1);
setTile(125, 41, -92, 18, 1);
setTile(125, 41, -91, 18, 1);
setTile(125, 41, -90, 18, 1);
setTile(125, 41, -82, 18, 1);
setTile(125, 42, -92, 18, 1);
setTile(125, 42, -91, 18, 1);
setTile(125, 43, -92, 18, 1);
setTile(125, 43, -91, 18, 1);
setTile(125, 43, -82, 18, 1);
setTile(125, 44, -93, 18, 1);
setTile(125, 44, -92, 18, 1);
setTile(125, 44, -91, 18, 1);
setTile(125, 44, -90, 18, 1);
setTile(125, 45, -92, 18, 1);
setTile(125, 45, -91, 18, 1);
setTile(125, 48, -92, 18, 1);
setTile(125, 48, -91, 18, 1);
setTile(126, 35, -82, 17, 1);
setTile(126, 36, -94, 18, 1);
setTile(126, 36, -93, 18, 1);
setTile(126, 36, -92, 18, 1);
setTile(126, 36, -91, 18, 1);
setTile(126, 36, -90, 18, 1);
setTile(126, 36, -89, 18, 1);
setTile(126, 36, -82, 17, 1);
setTile(126, 37, -94, 18, 1);
setTile(126, 37, -93, 18, 1);
setTile(126, 37, -92, 18, 1);
setTile(126, 37, -91, 18, 1);
setTile(126, 37, -90, 18, 1);
setTile(126, 37, -89, 18, 1);
setTile(126, 37, -83, 18, 1);
setTile(126, 37, -82, 17, 1);
setTile(126, 37, -81, 18, 1);
setTile(126, 38, -92, 18, 1);
setTile(126, 38, -91, 18, 1);
setTile(126, 38, -84, 18, 1);
setTile(126, 38, -83, 18, 1);
setTile(126, 38, -82, 17, 1);
setTile(126, 38, -81, 18, 1);
setTile(126, 38, -80, 18, 1);
setTile(126, 39, -92, 18, 1);
setTile(126, 39, -91, 18, 1);
setTile(126, 39, -83, 18, 1);
setTile(126, 39, -82, 17, 1);
setTile(126, 39, -81, 18, 1);
setTile(126, 40, -94, 18, 1);
setTile(126, 40, -93, 18, 1);
setTile(126, 40, -92, 18, 1);
setTile(126, 40, -91, 18, 1);
setTile(126, 40, -90, 18, 1);
setTile(126, 40, -89, 18, 1);
setTile(126, 40, -84, 18, 1);
setTile(126, 40, -83, 18, 1);
setTile(126, 40, -82, 17, 1);
setTile(126, 40, -81, 18, 1);
setTile(126, 40, -80, 18, 1);
setTile(126, 41, -92, 18, 1);
setTile(126, 41, -91, 18, 1);
setTile(126, 41, -83, 18, 1);
setTile(126, 41, -82, 17, 1);
setTile(126, 41, -81, 18, 1);
setTile(126, 42, -82, 17, 1);
setTile(126, 43, -83, 18, 1);
setTile(126, 43, -82, 18, 1);
setTile(126, 43, -81, 18, 1);
setTile(126, 44, -92, 18, 1);
setTile(126, 44, -91, 18, 1);
setTile(127, 36, -92, 18, 1);
setTile(127, 36, -91, 18, 1);
setTile(127, 37, -92, 18, 1);
setTile(127, 37, -91, 18, 1);
setTile(127, 37, -82, 18, 1);
setTile(127, 38, -84, 18, 1);
setTile(127, 38, -83, 18, 1);
setTile(127, 38, -82, 18, 1);
setTile(127, 38, -81, 18, 1);
setTile(127, 38, -80, 18, 1);
setTile(127, 39, -82, 18, 1);
setTile(127, 40, -92, 18, 1);
setTile(127, 40, -91, 18, 1);
setTile(127, 40, -84, 18, 1);
setTile(127, 40, -83, 18, 1);
setTile(127, 40, -82, 18, 1);
setTile(127, 40, -81, 18, 1);
setTile(127, 40, -80, 18, 1);
setTile(127, 41, -82, 18, 1);
setTile(127, 43, -82, 18, 1);
setTile(128, 38, -83, 18, 1);
setTile(128, 38, -82, 18, 1);
setTile(128, 38, -81, 18, 1);
setTile(128, 40, -83, 18, 1);
setTile(128, 40, -82, 18, 1);
setTile(128, 40, -81, 18, 1);
for(var xx=54;xx<63;xx++)
for(var zz=-123;zz<-118;zz++)
setTile(xx, 34, zz, 11);
setTile(63, 34, -121, 11);
setTile(63, 34, -120, 11);
setTile(64, 34, -121, 11);
setTile(64, 34, -120, 11);
setTile(64, 35, -123, 89);
setTile(64, 35, -122, 89);
setTile(64, 35, -119, 89);
setTile(64, 36, -122, 89);
setTile(64, 36, -121, 89);
setTile(64, 36, -120, 89);
setTile(65, 34, -120, 11);
setTile(65, 35, -124, 89);
setTile(65, 35, -119, 89);
setTile(66, 34, -120, 10);
setTile(88, 34, -58, 8);
setTile(90, 34, -87, 44);
setTile(90, 34, -86, 44);
setTile(91, 34, -87, 44);
setTile(91, 34, -86, 44);
setTile(78, 34, -87, 44);
setTile(78, 34, -86, 44);
setTile(79, 34, -87, 44);
setTile(79, 34, -86, 44);



}


var Ban = {
removeGonePlayerData : function(){
for(var n in banList){
if(ESP.isPlayer(banList[n])==false){
banList.splice(n, 1);
banData.splice(n, 1);
}
}
},
isBanned : function(p){
for(var n in banList){
if(p==banList[n]){
return true;
}
}
return false;
},
wasBanned : function(p){
for(var n in banName){
if(Player.getName(p)==banName[n]){
return true;
}
}
return false;
},
removeNameData : function(p){
for(var n in banName){
if(Player.getName(p)==banName[n]){
banName.splice(n, 1);
break;
}
}
},
removeData : function(p){
for(var n in banList){
if(p==banList[n]){
banList.splice(n, 1);
banData.splice(n, 1);
}
}
}


}


//Semi ESP Manager
function openSemiESPManager(){
if(menuS==null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
menuS = new android.widget.PopupWindow();
var text = new android.widget.TextView(ctx);
text.setText("ESP\nManager\n");
text.setTextSize(25);
text.setGravity(android.view.Gravity.CENTER);
text.setTextColor(android.graphics.Color.CYAN);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(text);

var mss = new android.widget.ToggleButton(ctx);
var mbgm = new android.widget.ToggleButton(ctx);
var mclock = new android.widget.Button(ctx);
var madd = new android.widget.Button(ctx);
var minv = new android.widget.Button(ctx);
var mgo = new android.widget.Button(ctx);
var mqtt = new android.widget.Button(ctx);
var minfo = android.widget.Button(ctx);
var mmulti = android.widget.Button(ctx);
var msexit = android.widget.Button(ctx);

mss.setTextOn("Screen Shot");
mss.setTextOff("Screen Shot");
mbgm.setTextOn("BGM on");
mbgm.setTextOff("BGM off");
mclock.setText("Clock Moving");
madd.setText("Add Item");
minv.setText("Reset Inv.");
mgo.setText("Go to...");
mqtt.setText("QTT");
minfo.setText("도움말");
mmulti.setText("서버장 모드");
msexit.setText("EXIT");

if(btnSS!=null){
mss.setChecked(true);
}
else if(btnSS==null){
mss.setChecked(false);
}
if(bgmOnoff==false){
mbgm.setChecked(false);
}
else if(bgmOnoff==true){
mbgm.setChecked(true);
}

mss.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
onCheckedChanged : function(toggle, onoff){
if(onoff==true){
makeScreenShotButton();
}
else if(onoff==false){
if(btnSS!=null){
btnSS.dismiss();
btnSS = null;
}
}
}
}));
mbgm.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
onCheckedChanged : function(toggle, onoff){
if(onoff==true){
bgmPlayer(true);
}
else if(onoff==false){
bgmPlayer(false);
}
}
}));
mclock.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
clockMoving();
}
});
madd.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
addItem();
}
});
mgo.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
goToPlayer();
}
});
minv.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
for(var n=0;n<36;n++)
Player.clearInventorySlot(n);
ESP.toast("인벤토리가 리셋되었습니다.");
}
});
mqtt.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ModPE.leaveGame();
ESP.toast("Quit to Title.");
if(btn!=null){
btn.dismiss();
btn = null;
}
if(btnSS!=null){
btnSS.dismiss();
btnSS = null;
}
if(menuS!=null){
menuS.dismiss();
menuS = null;
ESP.toast("ESP Manager off");
}
}
});
minfo.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
ESP.infoDialog("초능력자 대전", "\"초능력자 대전\"은 Dark Tornado가 만든 능력자 스크립트로서, 무단 공유는 허용하나, 무단 수정 및 자신이 만들었다고 주장하는 행위는 금지하며, 그냥 또는 학습을 위해 열어보는 것은 허용합니다.\n대략적인 사용법은 명령어 \"/help\"또는 \"/도움말\"을 치시면 나옵니다.\n오른쪽 아래의 \"EM\"버튼으로 on/off되는 이 버튼들(?)은 \"ESP Manager\"이며, 이곳에 있는 기능들은 대부분이 명령어로도 사용이 가능합니다. EM버튼은 위치 수정이 가능합니다.\nESP Manager의 기능들은 능력 비활성화(타 스크립트의 능력자의 경우 불가)와 능력자 전송, 사살, 회복 등이며, 서버관리자의 기능도 어느정도는 있습니다. 기능들은 버튼의  내용을 해석하시면 될 듯 싶습니다.\nESP Manager가 지원하는 능력자 스크립트는 초능력자 대전, 초능력자 대전+, 마법사 대전, 부르르 능력자, S-Transfer, Flower Fairy(꽃요정), 모두의 능력자, 사신수 능력자, The Operaters와 ELSE에 있는 능력자들입니다.\n지금은 타인의 서버에 서버원으로 들어가는 것이기 때문에 능력각성이 및 ESP Manager의 일부 기능이 제한됩니다.\n", " 2014 Dark Tornado\n(http:\/\/blog.naver.com\/dt3141592)");
}
});
mmulti.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
multi = false;
ESP.toast("서버장 모드로 변경되었습니다.");
if(menuS!=null){
menuS.dismiss();
menuS = null;
}
if(menuP!=null){
menuP.dismiss();
menuP = null;
}
}
});
msexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(menuS!=null){
menuS.dismiss();
menuS = null;
}
}
});

layout.addView(mss);
layout.addView(mbgm);
layout.addView(mclock);
layout.addView(madd);
layout.addView(minv);
layout.addView(mgo);
layout.addView(mqtt);
layout.addView(minfo);
layout.addView(mmulti);
layout.addView(msexit);

var scroll = makeScroll(layout,menuS);
menuS.setContentView(scroll);
menuS.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.argb(150, 0, 0, 0)));
menuS.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.TOP, 0, 0);
ESP.toast("ESP Manager on");
}
catch(e){
clientMessage("error "+e+", "+e.lineNumber);
}
}
}));
}
else if(menuS!=null){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
if(menuS!=null){
menuS.dismiss();
menuS = null;
}
}catch(e){
clientMessage("error : "+e);
}
}}));
ESP.toast("ESP Manager off");
}

}


function goToPlayer(){
ESP.toast("플레이어를 선택하세요");
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e)){
players.push(e);
}
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<players.length;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Go to Player");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
Entity.setPosition(ESP.getUser(), Entity.getX(player), Entity.getY(player)+0.2, Entity.getZ(player));
ESP.toast("이동되었습니다");
}
}));
dialog.show();
}


//Sealed ESP Manager
function openSEManager(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function(){
try{
menuH = new android.widget.PopupWindow();
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var text = new android.widget.TextView(ctx);
text.setText("SE Manager\n");
text.setTextSize(23);
text.setGravity(android.view.Gravity.CENTER);
text.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(hhhhh==0){
hhhhh = 150;
ESP.toast("They are coming...");
}
else{
hhhhh = 0;
}
}
});
layout.addView(text);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
var names = ["The Demon", "Hyper Burster", "Hyper Genocider", "Lolita Complex", "The Avenger", "Hidden Blade", "The Gambler", "Dark Reaper", "Imagine Vanisher", "The Overwhelmer", "I am B.R.S.", "The C", "The Doctor", "Hyper Teleporter", "Evil Eye"];
for(var n in names){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(names[n]);
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
seNum = checkedId;
}
}));
layout.addView(radios);
var of = new android.widget.ToggleButton(ctx);
of.setTextOn("ESP-SE on");
of.setTextOff("ESP-SE off");
of.setChecked(se.tf);
of.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
onCheckedChanged : function(toggle, onoff){
se.tf = onoff;
}
}));
layout.addView(of);
var medit = android.widget.Button(ctx);
medit.setText("Manage");
medit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
SE.espManage(seNum);
return;
if(seNum==0) SE.theDemon();
if(seNum==1) SE.hyperBurster();
if(seNum==2) SE.hyperGenocider();
if(seNum==3) SE.lolitaComplex();
if(seNum==4) SE.theAvenger();
if(seNum==5) SE.hiddenBlade();
if(seNum==6) SE.theGambler();
if(seNum==7) SE.darkReaper();
if(seNum==8) SE.imagineVanisher();
if(seNum==9) SE.theOverwhelmer();
if(seNum==10) SE.iamBLS();
if(seNum==11) SE.theC();
if(seNum==12) SE.theDoctor();
if(seNum==13) SE.hyperTeleporter();
if(seNum==14) SE.evilEye();
}
});
layout.addView(medit);
var mhexit = android.widget.Button(ctx);
mhexit.setText("EXIT");
mhexit.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(menuH!=null){
menuH.dismiss();
menuH = null;
}
}
});
layout.addView(mhexit);
var layout2 = new android.widget.LinearLayout(ctx);
layout2.setOrientation(0);
layout2.setGravity(android.view.Gravity.CENTER);
var lol = android.widget.Button(ctx);
lol.setText("←");
lol.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
se.locate = 1;
menuH.dismiss();
menuH = null;
openSEManager();
}
});
layout2.addView(lol);
var loc = android.widget.Button(ctx);
loc.setText("○");
loc.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
se.locate = 0;
menuH.dismiss();
menuH = null;
openSEManager();
}
});
layout2.addView(loc);
var lor = android.widget.Button(ctx);
lor.setText("→");
lor.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
se.locate = 2;
menuH.dismiss();
menuH = null;
openSEManager();
}
});
layout2.addView(lor);
layout.addView(layout2);

var scroll = makeScroll(layout,menuH);
menuH.setContentView(scroll);
menuH.setWidth(ctx.getWindowManager().getDefaultDisplay().getWidth()*1/3);
menuH.setHeight(ctx.getWindowManager().getDefaultDisplay().getHeight()*4/5);
menuH.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.argb(180, 0, 0, 0)));
if(se.locate==0){
menuH.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.CENTER|android.view.Gravity.CENTER, 0, 0);
}
else if(se.locate==1){
menuH.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.LEFT|android.view.Gravity.CENTER, 0, 0);
}
else if(se.locate==2){
menuH.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.RIGHT|android.view.Gravity.CENTER, 0, 0);
}
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}}));
}


function adminPass(){
ctx.runOnUiThread(new java.lang.Runnable({
run : function(){
try{
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var text = new android.widget.EditText(ctx);
text.setHint("ID를 입력하세요...")
var txt = new android.widget.EditText(ctx);
txt.setHint("비밀번호를 입력하세요...")
txt.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
layout.addView(text);
layout.addView(txt);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("ESI 권한이 필요합니다...");
dialog.setView(scroll);
dialog.setNegativeButton("취소",null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
var esiId = text.getText();
var esiPass = txt.getText();
eval(function(p,a,c,k,e,r){e=function(c){return c.toString(a)};if(!''.replace(/^/,String)){while(c--)r[e(c)]=k[c]||e(c);k=[function(e){return r[e]}];e=function(){return'\\w+'};c=1};while(c--)if(k[c])p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c]);return p}('l f=["m d",e,"h j",k,"a b n",o,p];3(4=="c g"){3(5=="i"){0.1("6 0 7 8");9()}2{0.1("비밀번호가 다릅니다.")}}2 3(4=="a b q"){3(5=="r"){0.1("6 0 7 8");9()}2{0.1("비밀번호가 다릅니다.")}}2 3(4=="s t"){3(5=="u"){0.1("6 0 7 8");9()}2{0.1("비밀번호가 다릅니다.")}}2{0.1("해당 아이디는 존재하지 않습니다.")}',31,31,'ESP|toast|else|if|esiId|esiPass|Sealed|Manager|on|openSEManager|Liber|de|Dark|Hurricane|3289|passs|Tornado|Master|3014|Transfer|1234|var|Bright|Lumen|0321|6254|Obscurum|1237|Skill|Drottinn|2580'.split('|'),0,{}));
}
}));
dialog.show();
}
catch(e) 
{
clientMessage("error"+e+", "+e.lineNumber);
}}}));
}


var SE = {
espManage : function(type){
var names = ["The Demon", "Hyper Burster", "Hyper Genocider", "Lolita Complex", "The Avenger", "Hidden Blade", "The Gambler", "Dark Reaper", "Imagine Vanisher", "The Overwhelmer", "I am B.R.S.", "The C", "The Doctor", "Hyper Teleporter", "Evil Eye"];
ctx.runOnUiThread(new java.lang.Runnable({
run: function() {
try{
if(SE.isOff(type)){
var player = null;
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e))
players.push(e);
}
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n in players){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(Player.getName(players[n]));
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
player = players[checkedId];
}
}));
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle(names[type]+" on");
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
SE.on(type, player);
ESP.toast(names[type]+" on.");
}
}));
dialog.show();
}
else{
var work = null;
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var user = new android.widget.TextView(ctx);
user.setText("  User : "+Player.getName(eval(se.code[type])));
user.setTextSize(18);
layout.addView(user);
var radios = new android.widget.RadioGroup(ctx);
radios.setOrientation(1);
var radio = new Array();
for(var n=0;n<4;n++){
radio[n] = new android.widget.RadioButton(ctx);
radio[n].setText(se.menus[n]);
radio[n].setId(n);
radios.addView(radio[n]);
}
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
work = checkedId;
}
}));
layout.addView(radios);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle(names[type]);
dialog.setView(scroll);
dialog.setNegativeButton("취소", null);
dialog.setPositiveButton("확인", new android.content.DialogInterface.OnClickListener({
onClick: function(v){
if(work==0){
SE.off(type);
ESP.toast(names[type]+" off");
}
else if(work==1){
ESP.send(eval(se.code[type]));
ESP.toast(names[type]+" was sent");
}
else if(work==2){
ESP.kill(eval(se.code[type]));
ESP.toast(names[type]+" was killed");
}
else if(work==3){
ESP.heal(eval(se.code[type]));
ESP.toast(names[type]+" was healed");
}
}
}));
dialog.show();
}
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
},
isOff : function(type){
if(type==0&&se.demon==null) return true;
if(type==1&&se.burst==null) return true;
if(type==2&&se.geno==null) return true;
if(type==3&&se.lolita==null) return true;
if(type==4&&se.avenge==null) return true;
if(type==5&&se.hide==null) return true;
if(type==6&&se.gamble==null) return true;
if(type==7&&se.reaper==null) return true;
if(type==8&&se.ima==null) return true;
if(type==9&&se.over==null) return true;
if(type==10&&se.bls==null) return true;
if(type==11&&se.c==null) return true;
if(type==12&&se.doctor==null) return true;
if(type==13&&se.htp==null) return true;
if(type==14&&se.evil==null) return true;
else return false;
},
on : function(type, target){
if(type==0) se.demon = target;
if(type==1) se.burst = target;
if(type==2) se.geno = target;
if(type==3) se.lolita = target;
if(type==4) se.avenge = target;
if(type==5) se.hide = target;
if(type==6) se.gamble = target;
if(type==7) se.reaper = target;
if(type==8) se.ima = target;
if(type==9) se.over = target;
if(type==10) se.bls = target;
if(type==11) se.c = target;
if(type==12) se.doctor = target;
if(type==13) se.htp = target;
if(type==14) se.evil = target;
},
off : function(type){
if(type==0) se.demon = null;
if(type==1) se.burst = null;
if(type==2) se.geno = null;
if(type==3) se.lolita = null;
if(type==4) se.avenge = null;
if(type==5) se.hide = null;
if(type==6) se.gamble = null;
if(type==7) se.reaper = null;
if(type==8) se.ima = null;
if(type==9) se.over = null;
if(type==10) se.bls = null;
if(type==11) se.c = null;
if(type==12) se.doctor = null;
if(type==13) se.htp = null;
if(type==14) se.evil = null;
}



};


function passwordDialog(){
ctx.runOnUiThread(new java.lang.Runnable({
run : function(){
try{
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var text = new android.widget.EditText(ctx);
text.setHint("비밀번호를 입력하세요...")
text.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);
layout.addView(text);
var dialog = makeDialog("ESP - 14 해제", layout, "취소", null, "확인", function(){
if(text.getText()=="1234"){
he.on = true;
ESP.toast("해제되었습니다.");
}
else{
ESP.toast("비밀번호가 다릅니다.");
}
});
dialog.show();
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}


function showDeathCount(){
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
try{
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var text = new Array();
for(var n=0;n<dc.p.length;n++){
text[n] = new android.widget.TextView(ctx);
text[n].setText(Player.getName(dc.p[n])+" : "+dc.c[n]);
text[n].setTextSize(18);
layout.addView(text[n]);
}
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
dialog.setTitle("Death Count");
dialog.setView(scroll);
dialog.setNegativeButton("확인", null);
dialog.show();
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}


//easter egg
function theyAreComing(){
var rrr = ESP.random(15);
hhhhh = 150;
if(rrr==0){
Level.playSound(Entity.getX(ad), Entity.getY(ad), Entity.getZ(ad), "random.explode", 10, 1);
}
else if(rrr==1||rrr==2||rrr==8||rrr==10|rrr==12){
Level.playSound(Entity.getX(ad), Entity.getY(ad), Entity.getZ(ad), "random.fuse", 10, 1);
}
if(rrr==3){
Level.playSound(Entity.getX(ad), Entity.getY(ad), Entity.getZ(ad), "random.splash", 10, 1);
}
if(rrr==4){
Level.playSound(Entity.getX(ad), Entity.getY(ad), Entity.getZ(ad), "random.door_open", 10, 1);
}
if(rrr==5){
Level.playSound(Entity.getX(ad), Entity.getY(ad), Entity.getZ(ad), "random.door_close", 10, 1);
}
if(rrr==6){
wl.m("Hello, "+Player.getName(ad)+"§f.");
}
if(rrr==7){
Level.playSound(Entity.getX(ad), Entity.getY(ad), Entity.getZ(ad), "random.break", 10, 1);
}
if(rrr==9){
for(var n=0;n<5;n++)
cree[n] = Level.spawnMob(Entity.getX(ad), Entity.getY(ad)+1, Entity.getZ(ad), 33);
hhhhh = 180;
}
if(rrr==11){
wl.m("Hello, "+Player.getName(ad)+"§f. Are you There?");
hhhhh = 330;
}
if(rrr==13){
Level.playSound(Entity.getX(ad), Entity.getY(ad), Entity.getZ(ad), "mob.zpigdeath", 10, 1);
}


}


function makeHiddenArea(){
for(var xx=90;xx<130;xx++){
for(var zz=140;zz<185;zz++){
setTile(xx, 9, zz, 7);
setTile(xx, 17, zz, 7);
}}
for(var xx=90;xx<130;xx++){
for(var yy=9;yy<18;yy++){
setTile(xx, yy, 140, 7);
setTile(xx, yy, 184, 7);
}}
for(var yy=9;yy<18;yy++){
for(var zz=140;zz<185;zz++){
setTile(90, yy, zz, 7);
setTile(129, yy, zz, 7);
}}
for(var xx=91;xx<129;xx++){
for(var zz=141;zz<184;zz++){
for(var yy=10;yy<16;yy++)
setTile(xx, yy, zz, 0);
setTile(xx, 16, zz, 89);
}}
setTile(100, 16, 150, 10);

}


function makeLady(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
menuI = new android.widget.PopupWindow();
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var imageView = new android.widget.ImageView(ctx);
var bitmap = new android.graphics.BitmapFactory.decodeFile(sdcard+"/games/com.mojang/minecraftWorlds/"+Level.getWorldDir()+"/wl.png");
imageView.setImageBitmap(bitmap);
imageView.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(viewarg) {
var rrr = ESP.random(31);
if(rrr>=21){
wl.m("Do you know who am I?");
}
else if(rrr>=11){
wl.m("Do you know where am I?");
}
else if(rrr>=1){
wl.m("You cannot kill me!");
}
else if(rrr==0){
wl.m("I miss him...");
}
}
}));
layout.addView(imageView);
var scroll = android.widget.ScrollView(ctx);
scroll.addView(layout);
menuI.setContentView(scroll);
menuI.setWidth(233);
menuI.setHeight(254);
menuI.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
menuI.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.CENTER|android.view.Gravity.BOTTOM, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}


function redScreen(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var menuR = new android.widget.PopupWindow();
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var off = android.widget.Button(ctx);
off.setText("       ");
off.setBackgroundColor(android.graphics.Color.argb(0, 0, 0, 0));
off.setOnClickListener(new android.view.View.OnClickListener() {
onClick: function(v){
if(wl.o==0){
wl.o = 15;
}
else if(wl.o>0){
if(menuR!=null){
menuR.dismiss();
menuR = null;
}
if(menuI!=null){
menuI.dismiss();
menuI = null;
}
wl.t = 0;
if(mp==false){
Entity.setPosition(ad, 116, 52, 25);
}
else if(mp==true){
Entity.setPosition(ad, 24, 52, 23);
}
hhhhh = 0;
wl.pn = [];
}
}
});
layout.addView(off);
var text = new android.widget.TextView(ctx);
text.setText("\nGood bye, "+Player.getName(ad)+".");
text.setTextSize(30);
text.setGravity(android.view.Gravity.CENTER);
text.setTextColor(android.graphics.Color.argb(255, 255, 60, 60));
layout.addView(text);
menuR.setContentView(layout);
menuR.setWidth(ctx.getWindowManager().getDefaultDisplay().getWidth());
menuR.setHeight(ctx.getWindowManager().getDefaultDisplay().getHeight());
menuR.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.argb(150, 255, 0, 0)));
menuR.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.CENTER|android.view.Gravity.CENTER, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}


function ladyAttack(){
var rrr = ESP.random(10);
if(rrr<=2){
for each(var e in wl.p){
Entity.setHealth(e, Entity.getHealth(e)-6);
}
}
else if(rrr<=4){
for each(var e in wl.p){
var zzz = Level.spawnMob(Entity.getX(e), Entity.getY(e)+1, Entity.getZ(e), 32);
Entity.setHealth(zzz, 30);
zzz = Level.spawnMob(Entity.getX(e), Entity.getY(e)+1, Entity.getZ(e), 32);
Entity.setHealth(zzz, 30);
zzz = Level.spawnMob(Entity.getX(e), Entity.getY(e)+1, Entity.getZ(e), 32);
Entity.setHealth(zzz, 30);
}
}
else if(rrr==5){
for each(var e in wl.p){
explode(Entity.getX(e), Entity.getY(e)+0.1, Entity.getZ(e), 1);
}
}
else if(rrr==6){
for each(var e in wl.p){
setTile(Entity.getX(e), Entity.getY(e)+2, Entity.getZ(e), 46);
explode(Entity.getX(e), Entity.getY(e)+2, Entity.getZ(e), 0.6);
}
}
else if(rrr==7){
for each(var e in wl.p){
setTile(Entity.getX(e), Entity.getY(e)-1, Entity.getZ(e), 30);
}
}
else{
for each(var e in wl.p){
Entity.setFireTicks(e, 5);
}
}

}


function checkPlayerIsThere(p){
if(Entity.getX(p)>=90&&Entity.getX(p)<=131&&Entity.getY(p)>=9&&Entity.getY(p)<=18&&Entity.getZ(p)>=141&&Entity.getZ(p)<=185){
return true;
}
else{
return false;
}

}


function makeCrash(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
thisWillMakeCrash();
}
}));
}


function playWLMusic(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
wl.bgm.reset();
wl.bgm.setDataSource(sdcard+"/games/com.mojang/minecraftWorlds/"+Level.getWorldDir()+"/White_Lady_Theme.mp3");
wl.bgm.prepare();
wl.bgm.start();
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}


function explodeHook(e, x, y, z, p, f){
if(exp.onoff){
if(ESP.isPlayer(e)==true&&Level.getGameMode()==0){
var dis = getDistanceFromAdmin(x, y, z);
if(dis<=(p+1)&&exp.c==0){
if(dis>0.5){
Entity.setHealth(ad, Entity.getHealth(ad)-Math.round(3*p/dis));
}
else if(p<3){
Entity.setHealth(ad, Entity.getHealth(ad)-Math.round((5*p-1)/(dis+1)));
}
else{
Entity.setHealth(ad, Entity.getHealth(ad)-Math.round((5*p+4)/(dis+1)+2));
}
if(Math.abs(exp.x-x)<1.5&&Math.abs(exp.y-y)<1.5&&Math.abs(exp.z-z)<1.5){
exp.c = 1;
}
exp.x = x;
exp.y = y;
exp.z = z;
}
else if(exp.c==1){
exp.c = 2;
}
else if(exp.c==2){
exp.c = 0;
}
}
}

if(se.i4>1350){
var i = {x : null, x : null, x : null, d : null};
i.x = x-Entity.getX(se.ima);
i.y = y-Entity.getY(se.ima);
i.z = z-Entity.getZ(se.ima);
i.d = Math.sqrt(Math.pow(i.x, 2)+Math.pow(i.x, 2)+Math.pow(i.z, 2));
if(i.d<=(p+2))
preventDefault();
}

if(townCheck(x, z)){
preventDefault();
}


}

/*
function setTile(x, y, z, b, bd){
if(bd==undefined) bd = 0;
if(townCheck(x, z)) return;
else net.zhuoweizhang.mcpelauncher.ScriptManager.nativeSetTile(x, y, z, b, bd);
}
*/

function getDistanceFromAdmin(x, y, z){
var px, py, pz, dist;
px = x-Entity.getX(ad);
py = y-Entity.getY(ad);
pz = z-Entity.getZ(ad);
dist = Math.sqrt(Math.pow(px, 2)+Math.pow(py, 2)+Math.pow(pz, 2));
return dist;
}


function showSummonDialog(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var nn = 0;
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var radios = new android.widget.RadioGroup(ctx);
var eng = new android.widget.RadioButton(ctx);
eng.setText("English");
eng.setId(1);
var kor = new android.widget.RadioButton(ctx);
kor.setText("한국어");
kor.setId(2);
radios.addView(eng);
radios.addView(kor);
radios.setOnCheckedChangeListener(new android.widget.RadioGroup.OnCheckedChangeListener({
onCheckedChanged: function (group, checkedId){
nn = checkedId;
}
}));
layout.addView(radios);
var dialog = makeDialog("제작자가 사용할 언어를 선택하세요", layout, "확인",
function(){
dt.tf = true;
ESP.toast("소환하려면 \"Dark Tornado's Book\"으로 터치하세요.");
dt.ek = nn;
});
dialog.show();
}
catch(e){
ESP.sbm(e+", "+e.lineNumber);
}
}
}));
}


function fightDialog(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var text = new android.widget.TextView(ctx);
text.setText(Player.getName(ad)+", 나와 대련을 할 생각이 있는가?");
text.setTextSize(18);
layout.addView(text);
var dialog = makeDialog("대련신청", layout, "네", function(){
dt.f = true;
ESP.toast("전투 모드가 되었습니다.");
var p3x = Entity.getX(dt.p);
var p3y = Entity.getY(dt.p);
var p3z = Entity.getZ(dt.p);
var p3p = dt.p;
dt.p = Level.spawnMob(p3x, p3y+0.5, p3z, 35, "mob/darkTornado.png");
Entity.setRenderType(dt.p, darkRender.renderType);
Entity.setNameTag(dt.p, "    §0Dark Tornado§f");
Entity.remove(p3p);
Entity.setCollisionSize(dt.p, 0.7, 1.8);
anti3 = 0;
dt.l = true;
},
"아니요", function(){
dt.f = false;
ESP.toast("평화 모드를 유지합니다.");
});
dialog.show();
}
catch(e){
ESP.sbm(e+", "+e.lineNumber);
}
}
}));
}


function darkTornadoAssault(){
var yaw, pitch;
dt.r = ESP.random(15); 
dt.x = Entity.getX(dt.p);
dt.y = Entity.getY(dt.p)-1;
dt.z = Entity.getZ(dt.p);
if(dt.r==0) Entity.setHealth(ad, Entity.getHealth(ad)-5);
if(dt.r==1) Entity.setFireTicks(ad, 5);
if(dt.r==2) Entity.setPosition(ad, dt.x, dt.y+3, dt.z);
if(dt.r==3) Entity.setPosition(dt.p, Entity.getX(ad), Entity.getY(ad)+1, Entity.getZ(ad));
if(dt.r==4) setTile(Entity.getX(ad), Entity.getY(ad)-1, Entity.getZ(ad), 30);
if(dt.r==5) Entity.setVelY(ad, 2);
if(dt.r==6) arroundMobHealthDown(dt.p, 30, 10);
if(dt.r==7) explode(Entity.getX(ad), Entity.getY(ad)+1, Entity.getZ(ad), 2);
if(dt.r==8){
dt.x = Entity.getX(dt.p);
dt.y = Entity.getY(dt.p)-1;
dt.z = Entity.getZ(dt.p);
yaw = Math.floor(Entity.getYaw(dt.p));
dt.s = -Math.sin(yaw/180*Math.PI);
dt.c = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
explode(dt.x+5*dt.s, dt.y+1, dt.z+5*dt.c, 3);
}
if(dt.r==9){
yaw = Math.floor(Entity.getYaw(dt.p));
dt.s = -Math.sin(yaw/180*Math.PI);
dt.c = Math.cos(yaw/180*Math.PI);
for(var gun=3;gun<25;gun++)
setTile(dt.x+gun*dt.s, dt.y+1, dt.z+gun*dt.c, 51);
}
if(dt.r==10){
yaw = Math.floor(Entity.getYaw(dt.p));
dt.s = -Math.sin(yaw/180*Math.PI);
dt.c = Math.cos(yaw/180*Math.PI);
ESP.antiLack(3);
for(var gun=4;gun<25;gun++)
explode(dt.x+gun*dt.s, dt.y+2.5, dt.z+gun*dt.c, 2);
}
if(dt.r==11){
Level.spawnMob(dt.x-5, dt.t+6, dt.z-1, 65);
Level.spawnMob(dt.x, dt.t+10, dt.z+3, 65);
Level.spawnMob(dt.x+4, dt.t+7, dt.z, 65);
Level.spawnMob(dt.x, dt.t+15, dt.z-7, 65);
Level.spawnMob(dt.x-7, dt.t+5, dt.z, 65);
Level.spawnMob(dt.x+6, dt.t+17, dt.z+3, 65);
Level.spawnMob(dt.x-4, dt.t+15, dt.z-6, 65);
Level.spawnMob(dt.x-5, dt.t+15, dt.z+5, 65);
ESP.antiLack(90);
}
if(dt.r==12){
yaw = Math.floor(Entity.getYaw(dt.p));
dt.s = -Math.sin(yaw/180*Math.PI);
dt.c = Math.cos(yaw/180*Math.PI);
for(var xx=dt.x+4*dt.s-1;xx<dt.x+4*dt.s+2;xx++)
for(var yy=dt.y+1;yy<dt.y+4;yy++)
for(var zz=dt.z+4*dt.c-1;zz<dt.z+4*dt.c+2;zz++)
setTile(xx, yy, zz, 12);
Level.spawnMob(dt.x+4*dt.s, dt.y+2.6, dt.z+4*dt.c, 65);
ESP.antiLack(90);
}
if(dt.r==13){
Level.spawnMob(dt.x+4*dt.s, dt.y+2.6, dt.z+4*dt.c, 33);
Level.spawnMob(dt.x+4*dt.s, dt.y+2.6, dt.z+4*dt.c, 33);
Level.spawnMob(dt.x+4*dt.s, dt.y+2.6, dt.z+4*dt.c, 33);
Level.spawnMob(dt.x+4*dt.s, dt.y+2.6, dt.z+4*dt.c, 33);
Level.spawnMob(dt.x+4*dt.s, dt.y+2.6, dt.z+4*dt.c, 33);
}

}


function makeStreetlights(tf){
var n;
if(tf==true)
n = 89;
else if(tf==false)
n = 0;
setTile(-48, 53, 125, n);
setTile(-45, 53, 74, n);
setTile(-42, 53, 17, n);
setTile(-42, 53, 35, n);
setTile(-42, 53, 91, n);
setTile(-41, 53, 100, n);
setTile(-40, 53, 113, n);
setTile(-40, 53, 120, n);
setTile(-38, 53, 53, n);
setTile(-34, 53, 88, n);
setTile(-33, 53, 124, n);
setTile(-32, 53, 28, n);
setTile(-31, 53, 65, n);
setTile(-30, 53, 108, n);
setTile(-28, 53, 42, n);
setTile(-28, 53, 75, n);
setTile(-28, 53, 91, n);
setTile(-28, 53, 117, n);
setTile(-27, 53, 98, n);
setTile(-23, 53, 28, n);
setTile(-22, 53, 51, n);
setTile(-22, 53, 82, n);
setTile(-20, 53, 17, n);
setTile(-20, 53, 62, n);
setTile(-19, 53, 126, n);
setTile(-18, 53, 93, n);
setTile(-15, 53, 41, n);
setTile(-14, 53, 33, n);
setTile(-14, 53, 111, n);
setTile(-13, 53, 21, n);
setTile(-12, 53, 68, n);
setTile(-12, 53, 87, n);
setTile(-11, 53, 56, n);
setTile(-11, 53, 77, n);
setTile(-6, 53, 94, n);
setTile(-5, 53, 14, n);
setTile(-4, 53, 27, n);
setTile(-4, 53, 126, n);
setTile(-3, 53, 44, n);
setTile(-3, 53, 82, n);
setTile(-2, 53, 66, n);
setTile(-2, 53, 104, n);
setTile(0, 53, 55, n);
setTile(2, 53, 116, n);
setTile(4, 53, 22, n);
setTile(4, 53, 33, n);
setTile(4, 53, 87, n);
setTile(6, 53, 123, n);
setTile(8, 53, 59, n);
setTile(8, 53, 102, n);
setTile(9, 53, 68, n);
setTile(9, 53, 76, n);
setTile(10, 53, 31, n);
setTile(10, 53, 39, n);
setTile(10, 53, 48, n);
setTile(11, 53, 116, n);
setTile(14, 53, 12, n);
setTile(14, 53, 89, n);
setTile(14, 53, 125, n);
setTile(15, 53, 56, n);
setTile(15, 53, 105, n);
setTile(16, 53, 23, n);
setTile(17, 53, 80, n);
setTile(18, 53, 64, n);
setTile(18, 53, 72, n);
setTile(19, 53, 39, n);
setTile(19, 53, 49, n);
setTile(20, 53, 101, n);
setTile(20, 53, 112, n);
setTile(21, 53, 123, n);
setTile(22, 53, 27, n);
setTile(23, 53, 91, n);
setTile(24, 53, 13, n);
setTile(24, 53, 56, n);
setTile(26, 53, 81, n);
setTile(28, 53, 39, n);
setTile(29, 53, 100, n);
setTile(29, 53, 112, n);
setTile(29, 53, 124, n);
setTile(30, 53, 20, n);
setTile(31, 53, 70, n);
setTile(32, 53, 58, n);
setTile(33, 53, 49, n);
setTile(34, 53, 82, n);
setTile(35, 53, 30, n);
setTile(35, 53, 92, n);
setTile(37, 53, 119, n);
setTile(40, 53, 54, n);
setTile(41, 53, 66, n);
setTile(41, 53, 107, n);
setTile(41, 53, 125, n);
setTile(42, 53, 9, n);
setTile(42, 53, 19, n);
setTile(43, 53, 38, n);
setTile(44, 53, 75, n);
setTile(44, 53, 95, n);
setTile(47, 53, 28, n);
setTile(47, 53, 48, n);
setTile(47, 53, 118, n);
setTile(51, 53, 40, n);
setTile(51, 53, 64, n);
setTile(51, 53, 84, n);
setTile(52, 53, 102, n);
setTile(54, 53, 15, n);
setTile(57, 53, 51, n);
setTile(57, 53, 95, n);
setTile(57, 53, 111, n);
setTile(58, 53, 66, n);
setTile(59, 53, 76, n);
setTile(61, 53, 8, n);
setTile(61, 53, 85, n);
setTile(61, 53, 123, n);
setTile(62, 53, 18, n);
setTile(62, 53, 30, n);
setTile(66, 53, 44, n);
setTile(66, 53, 57, n);
setTile(67, 53, 66, n);
setTile(68, 53, 102, n);
setTile(71, 53, 116, n);
setTile(72, 53, 74, n);
setTile(75, 53, 20, n);
setTile(75, 53, 34, n);
setTile(77, 53, 61, n);
setTile(77, 53, 123, n);
setTile(78, 53, 90, n);
setTile(79, 53, 10, n);
setTile(79, 53, 47, n);
setTile(79, 53, 102, n);
setTile(80, 53, 24, n);
setTile(82, 53, 111, n);
setTile(84, 53, 37, n);
setTile(84, 53, 55, n);
setTile(84, 53, 78, n);
setTile(87, 53, 100, n);
setTile(88, 53, 29, n);
setTile(88, 53, 124, n);
setTile(89, 53, 86, n);
setTile(90, 53, 11, n);
setTile(90, 53, 19, n);
setTile(90, 53, 68, n);
setTile(90, 53, 115, n);
setTile(93, 53, 104, n);
setTile(94, 53, 93, n);
setTile(95, 53, 25, n);
setTile(95, 53, 47, n);
setTile(97, 53, 69, n);
setTile(99, 53, 110, n);
setTile(100, 53, 38, n);
setTile(101, 53, 12, n);
setTile(101, 53, 59, n);
setTile(101, 53, 81, n);
setTile(101, 53, 123, n);
setTile(103, 53, 98, n);
setTile(104, 53, 20, n);
setTile(104, 53, 51, n);
setTile(105, 53, 116, n);
setTile(-20, 53, 106, n);

}


function spellStone(x, y, z, b){
r.n = 0;
if(b==234){
setTile(x, y, z, 233);
r.x = x;
r.y = y;
r.z = z;
while(true){
if(getTile(r.x+1, r.y, r.z)==49)
setTile(r.x+1, r.y, r.z, 89);
if(getTile(r.x-1, r.y, r.z)==49)
setTile(r.x-1, r.y, r.z, 89);
if(getTile(r.x, r.y+1, r.z)==49)
setTile(r.x, r.y+1, r.z, 89);
if(getTile(r.x, r.y-1, r.z)==49)
setTile(r.x, r.y-1, r.z, 89);
if(getTile(r.x, r.y, r.z+1)==49)
setTile(r.x, r.y, r.z+1, 89);
if(getTile(r.x, r.y, r.z-1)==49)
setTile(r.x, r.y, r.z-1, 89);
if(getTile(r.x+1, r.y, r.z)==235)
pushBlock(r.x+1, r.y, r.z, true);
if(getTile(r.x-1, r.y, r.z)==235)
pushBlock(r.x-1, r.y, r.z, true);
if(getTile(r.x, r.y+1, r.z)==235)
pushBlock(r.x, r.y+1, r.z, true);
if(getTile(r.x, r.y-1, r.z)==235)
pushBlock(r.x, r.y-1, r.z, true);
if(getTile(r.x, r.y, r.z+1)==235)
pushBlock(r.x, r.y, r.z+1, true);
if(getTile(r.x, r.y, r.z-1)==235)
pushBlock(r.x, r.y, r.z-1, true);
if(getTile(r.x+1, r.y, r.z)==232&&r.n!=1){
r.x++;
setTile(r.x, r.y, r.z, 236);
r.n = 2;
}
else if(getTile(r.x-1, r.y, r.z)==232&&r.n!=2){
r.x--;
setTile(r.x, r.y, r.z, 236);
r.n = 1;
}
else if(getTile(r.x, r.y+1, r.z)==232&&r.n!=3){
r.y++;
setTile(r.x, r.y, r.z, 236);
r.n = 4;
}
else if(getTile(r.x, r.y-1, r.z)==232&&r.n!=4){
r.y--;
setTile(r.x, r.y, r.z, 236);
r.n = 3;
}
else if(getTile(r.x, r.y, r.z+1)==232&&r.n!=5){
r.z++;
setTile(r.x, r.y, r.z, 236);
r.n = 6;
}
else if(getTile(r.x, r.y, r.z-1)==232&&r.n!=6){
r.z--;
setTile(r.x, r.y, r.z, 236);
r.n = 5;
}
else{
break;
}
}
preventDefault();
}
else if(b==233){
setTile(x, y, z, 234);
r.x = x;
r.y = y;
r.z = z;
while(true){
if(getTile(r.x+1, r.y, r.z)==89)
setTile(r.x+1, r.y, r.z, 49);
if(getTile(r.x-1, r.y, r.z)==89)
setTile(r.x-1, r.y, r.z, 49);
if(getTile(r.x, r.y+1, r.z)==89)
setTile(r.x, r.y+1, r.z, 49);
if(getTile(r.x, r.y-1, r.z)==89)
setTile(r.x, r.y-1, r.z, 49);
if(getTile(r.x, r.y, r.z+1)==89)
setTile(r.x, r.y, r.z+1, 49);
if(getTile(r.x, r.y, r.z-1)==89)
setTile(r.x, r.y, r.z-1, 49);
if(getTile(r.x+1, r.y, r.z)==235)
pushBlock(r.x+1, r.y, r.z, false);
if(getTile(r.x-1, r.y, r.z)==235)
pushBlock(r.x-1, r.y, r.z, false);
if(getTile(r.x, r.y+1, r.z)==235)
pushBlock(r.x, r.y+1, r.z, false);
if(getTile(r.x, r.y-1, r.z)==235)
pushBlock(r.x, r.y-1, r.z, false);
if(getTile(r.x, r.y, r.z+1)==235)
pushBlock(r.x, r.y, r.z+1, false);
if(getTile(r.x, r.y, r.z-1)==235)
pushBlock(r.x, r.y, r.z-1, false);
if(getTile(r.x+1, r.y, r.z)==236&&r.n!=1){
r.x++;
setTile(r.x, r.y, r.z, 232);
r.n = 2;
}
else if(getTile(r.x-1, r.y, r.z)==236&&r.n!=2){
r.x--;
setTile(r.x, r.y, r.z, 232);
r.n = 1;
}
else if(getTile(r.x, r.y+1, r.z)==236&&r.n!=3){
r.y++;
setTile(r.x, r.y, r.z, 232);
r.n = 4;
}
else if(getTile(r.x, r.y-1, r.z)==236&&r.n!=4){
r.y--;
setTile(r.x, r.y, r.z, 232);
r.n = 3;
}
else if(getTile(r.x, r.y, r.z+1)==236&&r.n!=5){
r.z++;
setTile(r.x, r.y, r.z, 232);
r.n = 6;
}
else if(getTile(r.x, r.y, r.z-1)==236&&r.n!=6){
r.z--;
setTile(r.x, r.y, r.z, 232);
r.n = 5;
}
else{
break;
}
}
preventDefault();
}
}


function pushBlock(x, y, z, tf){
if(tf){
if(blockCheck(x+1, y, z)&&getTile(x+2, y, z)==0){
setTile(x+2, y, z, getTile(x+1, y, z), Level.getData(x+1, y, z));
setTile(x+1, y, z, 85);
}
if(blockCheck(x-1, y, z)&&getTile(x-2, y, z)==0){
setTile(x-2, y, z, getTile(x-1, y, z), Level.getData(x-1, y, z));
setTile(x-1, y, z, 85);
}
if(blockCheck(x, y, z+1)&&getTile(x, y, z+2)==0){
setTile(x, y, z+2, getTile(x, y, z+1), Level.getData(x, y, z+1));
setTile(x, y, z+1, 85);
}
if(blockCheck(x, y, z-1)&&getTile(x, y, z-2)==0){
setTile(x, y, z-2, getTile(x, y, z-1), Level.getData(x, y, z-1));
setTile(x, y, z-1, 85);
}
}
else{
if(blockCheck(x+2, y, z)&&getTile(x+1, y, z)==85){
setTile(x+1, y, z, getTile(x+2, y, z), Level.getData(x+2, y, z));
setTile(x+2, y, z, 0);
}
if(blockCheck(x-2, y, z)&&getTile(x-1, y, z)==85){
setTile(x-1, y, z, getTile(x-2, y, z), Level.getData(x-2, y, z));
setTile(x-2, y, z, 0);
}
if(blockCheck(x, y, z+2)&&getTile(x, y, z+1)==85){
setTile(x, y, z+1, getTile(x, y, z+2), Level.getData(x, y, z+2));
setTile(x, y, z+2, 0);
}
if(blockCheck(x, y, z-2)&&getTile(x, y, z-1)==85){
setTile(x, y, z-1, getTile(x, y, z-2), Level.getData(x, y, z-2));
setTile(x, y, z-2, 0);
}
}

}


function blockCheck(x, y, z){
if(getTile(x, y, z)==0||getTile(x, y, z)==7||getTile(x, y, z)==85||getTile(x, y, z)==95||getTile(x, y, z)==232||getTile(x, y, z)==233||getTile(x, y, z)==234||getTile(x, y, z)==235||getTile(x, y, z)==236||getTile(x, y, z)==49||getTile(x, y, z)==89||getTile(x, y, z)==240||getTile(x, y, z)==241)
return false;
else
return true;
}


function randomPicking(tf){
var layout = new android.widget.LinearLayout(ctx);
layout.setOrientation(1);
var text = new Array();
ra.p = new Array();
var players = new Array();
for each(var e in Entity.getAll()){
if(ESP.isPlayer(e))
players.push(e);
}
ESP.reset();
var espArray = new Array(100);
for(var n in players){
if(checkFull(espArray)==100){
ESP.sbm("ESPs are full!");
break;
}
else{
var rrr = Math.floor(Math.random()*100);
if(espArray[rrr]==null){
espArray[rrr] = true;
}
else if(espArray[rrr]==true){
while(espArray[rrr]==true){
rrr = Math.floor(Math.random()*15);
if(espArray[rrr]==null){
espArray[rrr] = true;
break;
}
}
}
setESP(rrr, players[n]);
ra.p.push(players[n]);
text[n] = new android.widget.TextView(ctx);
text[n].setText(Player.getName(players[n])+" : "+ra.n[rrr]);
text[n].setTextSize(17);
layout.addView(text[n]);
}
}
if(tf==true){
var dialog = makeDialog("능력 렌덤 추첨", layout, "닫기", null);
dialog.show();
}
ra.t = 400;
}


function checkFull(arr){
var nn = 0;
for(var n=0;n<100;n++){
if(arr[n]==true)
nn++;
}
return nn;

}


function setESP(n, p, tf){
if (n==0) fire[0] = p;
else if (n==1) water[0] = p;
else if (n==2) tree[0] = p;
else if (n==3) creeper[0] = p;
else if (n==4) soil[0] = p;
else if (n==5) summon[0] = p;
else if (n==6) light[0] = p;
else if (n==7) dark[0] = p;
else if (n==8) ice[0] = p;
else if (n==9) sand[0] = p;
else if (n==10) blood[0] = p;
else if (n==11) air[0] = p;
else if (n==12) thunder[0] = p;
else if (n==13) elsa[0] = p;
else if (n==14) titan[0] = p;
else if (n==15) bind[0] = p;
else if (n==16) meca[0] = p;
else if (n==17) tnt[0] = p;
else if (n==18) trap[0] = p;
else if (n==19) heal[0] = p;
else if (n==20) nether[0] = p;
else if (n==21) cloud[0] = p;
else if (n==22) assassin[0] = p;
else if (n==23) arrow[0] = p;
else if (n==24) mage[0] = p;
else if (n==25) defense[0] = p;
else if (n==26) poison[0] = p;
else if (n==27) melt[0] = p;
else if (n==28) hfreeze[0] = p;
else if (n==29) builder[0] = p;
else if (n==30) soldier[0] = p;
else if (n==31) assault[0] = p;
else if (n==32) burst[0] = p;
else if (n==33) warrior[0] = p;
else if (n==34) ore = p;
else if (n==35) rich = p;
else if (n==36) tp = p;
else if (n==37) space = p;
else if (n==38) sattack = p;
else if (n==39) force = p;
else if (n==40) rein = p;
else if (n==41) magnet = p;
else if (n==42) steve = p;
else if (n==43) hero = p;
else if (n==44) hermit = p;
else if (n==45) clay = p;
else if (n==46) kirito = p;
else if (n==47) jungle = p;
else if (n==48) kanade = p;
else if (n==49) time = p;
else if (n==50) snipe = p;
else if (n==51) zombie = p;
else if (n==52) necro = p;
else if (n==53) asuna = p;
else if (n==54) holy = p;
else if (n==55) solar = p;
else if (n==56) lunar = p;
else if (n==57) has = p;
else if (n==58) random = p;
else if (n==59) zwei = p;
else if (n==60) deco = p;
else if (n==61) hsum = p;
else if (n==62) climate = p;
else if (n==63) raid = p;
else if (n==64) wind = p;
else if (n==65) energy = p;
else if (n==66) geno = p;
else if (n==67) server = p;
else if (n==68) out = p;
else if (n==69) rgun = p;
else if (n==70) copy = p;
else if (n==71) dragon = p;
else if (n==72) hawk = p;
else if (n==73) solid = p;
else if (n==74) gravity = p;
else if (n==75) sikill = p;
else if (n==76) hass = p;
else if (n==77) black = p;
else if (n==78) slash = p;
else if (n==79) night = p;
else if (n==80) gem = p;
else if (n==81) dra = p;
else if (n==82) mush = p;
else if (n==83) ender = p;
else if (n==84) taiga = p;
else if (n==85) ruin = p;
else if (n==86) swamp = p;
else if (n==87) asum = p;
else if (n==88) amage = p;
else if (n==89) puella = p;
else if (n==90) hbuild = p;
else if (n==91) scalar = p;
else if (n==92) vector = p;
else if (n==93) tensor = p;
else if (n==94) ameca = p;
else if (n==95) seal = p;
else if (n==96) angel = p;
else if (n==97) white = p;
else if (n==98) mental = p;
else if (n==99) world = p;
Entity.setHealth(p, 21+n);
if(ad==p)
ESP.sbm(ra.n[n]);

}


function makeForest(x, y, z){
for(var xx=x-12;xx<x+14;xx++)
for(var zz=z-14;zz<z+14;zz++)
setTile(xx, y+1, zz, 31);
setTile(x-12, y+1, z+1, 38);
setTile(x-12, y+1, z+7, 37);
for(var zz=z-5;zz<z;zz++){
setTile(x-12, y+4, zz, 18);
setTile(x-11, y+4, zz, 18);
setTile(x-11, y+5, zz, 18);
setTile(x-9, y+4, zz, 18);
}
setTile(x-12, y+5, z-5, 18);
setTile(x-12, y+5, z-4, 18);
setTile(x-12, y+5, z-3, 18);
setTile(x-12, y+5, z-2, 18);
setTile(x-11, y+1, z+7, 37);
for(var zz=z-8;zz<z-5;zz++){
setTile(x-11, y+3, zz, 18, 2);
setTile(x-11, y+4, zz, 18, 2);
}
setTile(x-11, y+3, z-5, 18, 2);
setTile(x-11, y+6, z-4, 18);
setTile(x-11, y+6, z-3, 18);
setTile(x-11, y+6, z-2, 18);
setTile(x-11, y+7, z-3, 18);
setTile(x-10, y+1, z-3, 17);
setTile(x-10, y+2, z-3, 17);
setTile(x-10, y+3, z-9, 18, 2);
setTile(x-10, y+3, z-8, 18, 2);
setTile(x-10, y+3, z-7, 18, 2);
setTile(x-10, y+3, z-6, 18, 2);
setTile(x-10, y+3, z-5, 18, 2);
setTile(x-10, y+3, z-3, 17);
setTile(x-10, y+3, z+7, 18);
setTile(x-10, y+3, z+8, 18);
setTile(x-10, y+3, z+9, 18);
setTile(x-10, y+3, z+10, 18);
setTile(x-10, y+4, z-9, 18, 2);
setTile(x-10, y+4, z-8, 18, 2);
setTile(x-10, y+4, z-7, 18, 2);
setTile(x-10, y+4, z-6, 18, 2);
setTile(x-10, y+4, z-5, 18);
setTile(x-10, y+4, z-4, 18);
setTile(x-10, y+4, z-3, 17);
setTile(x-10, y+4, z-2, 18);
setTile(x-10, y+4, z-1, 18);
setTile(x-10, y+4, z, 18);
setTile(x-10, y+4, z+1, 18);
setTile(x-10, y+4, z+2, 18);
setTile(x-10, y+4, z+3, 18);
setTile(x-10, y+4, z+7, 18);
setTile(x-10, y+4, z+8, 18);
setTile(x-10, y+4, z+9, 18);
setTile(x-10, y+5, z-7, 18, 2);
setTile(x-10, y+5, z-6, 18, 2);
setTile(x-10, y+5, z-5, 18);
setTile(x-10, y+5, z-4, 18);
setTile(x-10, y+5, z-3, 17);
setTile(x-10, y+5, z-2, 18);
setTile(x-10, y+5, z-1, 18);
setTile(x-10, y+5, z, 18);
setTile(x-10, y+5, z+1, 18);
setTile(x-10, y+5, z+2, 18);
setTile(x-10, y+6, z-7, 18, 2);
setTile(x-10, y+6, z-4, 18);
setTile(x-10, y+6, z-3, 17);
setTile(x-10, y+6, z-2, 18);
setTile(x-10, y+7, z-4, 18);
setTile(x-10, y+7, z-3, 18);
setTile(x-10, y+7, z-2, 18);
setTile(x-9, y+1, z-7, 17, 2);
setTile(x-9, y+1, z-1, 37);
setTile(x-9, y+2, z-7, 17, 2);
setTile(x-9, y+3, z-9, 18, 2);
setTile(x-9, y+3, z-8, 18, 2);
setTile(x-9, y+3, z-7, 17, 2);
setTile(x-9, y+3, z-6, 18, 2);
setTile(x-9, y+3, z-5, 18, 2);
setTile(x-9, y+3, z+2, 18, 2);
setTile(x-9, y+3, z+3, 18, 2);
setTile(x-9, y+3, z+4, 18, 2);
setTile(x-9, y+3, z+5, 18, 2);
setTile(x-9, y+3, z+6, 18);
setTile(x-9, y+3, z+7, 18);
setTile(x-9, y+3, z+8, 18);
setTile(x-9, y+3, z+9, 18);
setTile(x-9, y+3, z+10, 18);
setTile(x-9, y+4, z-10, 18);
setTile(x-9, y+4, z-9, 18);
setTile(x-9, y+4, z-8, 18);
setTile(x-9, y+4, z-7, 17, 2);
setTile(x-9, y+4, z-6, 18, 2);
setTile(x-9, y+4, z, 18);
setTile(x-9, y+4, z+1, 18);
setTile(x-9, y+4, z+2, 18);
setTile(x-9, y+4, z+3, 18);
setTile(x-9, y+4, z+4, 18, 2);
setTile(x-9, y+4, z+5, 18, 2);
setTile(x-9, y+4, z+6, 18);
setTile(x-9, y+4, z+7, 18);
setTile(x-9, y+4, z+8, 18);
setTile(x-9, y+4, z+9, 18);
setTile(x-9, y+4, z+10, 18);
setTile(x-9, y+5, z-10, 18);
setTile(x-9, y+5, z-9, 18);
setTile(x-9, y+5, z-8, 18);
setTile(x-9, y+5, z-7, 17, 2);
setTile(x-9, y+5, z-6, 18);
setTile(x-9, y+5, z-5, 18);
setTile(x-9, y+5, z-4, 18);
setTile(x-9, y+5, z-3, 18);
setTile(x-9, y+5, z-2, 18);
setTile(x-9, y+5, z-1, 18);
setTile(x-9, y+5, z, 18);
setTile(x-9, y+5, z+1, 18);
setTile(x-9, y+5, z+2, 18);
setTile(x-9, y+5, z+3, 18);
setTile(x-9, y+5, z+7, 18);
setTile(x-9, y+5, z+8, 18);
setTile(x-9, y+5, z+9, 18);
setTile(x-9, y+6, z-8, 18, 2);
setTile(x-9, y+6, z-7, 18, 2);
setTile(x-9, y+6, z-6, 18, 2);
setTile(x-9, y+6, z-4, 18);
setTile(x-9, y+6, z-3, 18);
setTile(x-9, y+6, z, 18);
setTile(x-9, y+6, z+1, 18);
setTile(x-9, y+6, z+2, 18);
setTile(x-9, y+6, z+8, 18);
setTile(x-9, y+7, z-3, 18);
setTile(x-9, y+7, z+1, 18);
setTile(x-8, y+1, z-12, 38);
setTile(x-8, y+1, z+1, 17);
setTile(x-8, y+1, z+3, 38);
setTile(x-8, y+1, z+8, 17);
setTile(x-8, y+1, z+9, 37);
setTile(x-8, y+2, z+1, 17);
setTile(x-8, y+2, z+8, 17);
setTile(x-8, y+3, z-9, 18, 2);
setTile(x-8, y+3, z-8, 18, 2);
setTile(x-8, y+3, z-7, 18, 2);
setTile(x-8, y+3, z-6, 18, 2);
setTile(x-8, y+3, z-5, 18, 2);
setTile(x-8, y+3, z-2, 18, 1);
setTile(x-8, y+3, z-1, 18, 1);
setTile(x-8, y+3, z, 18, 1);
setTile(x-8, y+3, z+1, 17);
setTile(x-8, y+3, z+2, 18, 2);
setTile(x-8, y+3, z+3, 18, 2);
setTile(x-8, y+3, z+4, 18, 2);
setTile(x-8, y+3, z+5, 18, 2);
setTile(x-8, y+3, z+6, 18);
setTile(x-8, y+3, z+7, 18);
setTile(x-8, y+3, z+8, 17);
setTile(x-8, y+3, z+9, 18);
setTile(x-8, y+3, z+10, 18);
setTile(x-8, y+4, z-10, 18);
setTile(x-8, y+4, z-9, 18);
setTile(x-8, y+4, z-8, 18);
setTile(x-8, y+4, z-7, 18);
setTile(x-8, y+4, z-6, 18);
setTile(x-8, y+4, z-5, 18);
setTile(x-8, y+4, z-4, 18);
setTile(x-8, y+4, z-3, 18);
setTile(x-8, y+4, z-2, 18);
setTile(x-8, y+4, z-1, 18);
setTile(x-8, y+4, z, 18);
setTile(x-8, y+4, z+1, 17);
setTile(x-8, y+4, z+2, 18);
setTile(x-8, y+4, z+3, 18);
setTile(x-8, y+4, z+4, 18, 2);
setTile(x-8, y+4, z+5, 18, 2);
setTile(x-8, y+4, z+6, 18);
setTile(x-8, y+4, z+7, 18);
setTile(x-8, y+4, z+8, 17);
setTile(x-8, y+4, z+9, 18);
setTile(x-8, y+4, z+10, 18);
setTile(x-8, y+5, z-10, 18);
setTile(x-8, y+5, z-9, 18);
setTile(x-8, y+5, z-8, 18);
setTile(x-8, y+5, z-7, 18);
setTile(x-8, y+5, z-6, 18);
setTile(x-8, y+5, z-5, 18);
setTile(x-8, y+5, z-4, 18);
setTile(x-8, y+5, z-3, 18);
setTile(x-8, y+5, z-2, 18);
setTile(x-8, y+5, z-1, 18);
setTile(x-8, y+5, z, 18);
setTile(x-8, y+5, z+1, 17);
setTile(x-8, y+5, z+2, 18);
setTile(x-8, y+5, z+3, 18);
setTile(x-8, y+5, z+4, 18, 2);
setTile(x-8, y+5, z+7, 18);
setTile(x-8, y+5, z+8, 17);
setTile(x-8, y+5, z+9, 18);
setTile(x-8, y+6, z-9, 18);
setTile(x-8, y+6, z-8, 18);
setTile(x-8, y+6, z-7, 18);
setTile(x-8, y+6, z, 18);
setTile(x-8, y+6, z+1, 17);
setTile(x-8, y+6, z+2, 18);
setTile(x-8, y+6, z+4, 18, 2);
setTile(x-8, y+6, z+7, 18);
setTile(x-8, y+6, z+8, 18);
setTile(x-8, y+6, z+9, 18);
setTile(x-8, y+7, z-8, 18);
setTile(x-8, y+7, z, 18);
setTile(x-8, y+7, z+1, 18);
setTile(x-8, y+7, z+2, 18);
setTile(x-7, y+1, z-8, 17);
setTile(x-7, y+1, z+4, 17, 2);
setTile(x-7, y+2, z-8, 17);
setTile(x-7, y+2, z-1, 18, 1);
setTile(x-7, y+2, z+4, 17, 2);
setTile(x-7, y+3, z-9, 18, 2);
setTile(x-7, y+3, z-8, 17);
setTile(x-7, y+3, z-7, 18, 2);
setTile(x-7, y+3, z-6, 18, 2);
setTile(x-7, y+3, z-3, 18, 1);
setTile(x-7, y+3, z-2, 18, 1);
setTile(x-7, y+3, z-1, 18, 1);
setTile(x-7, y+3, z, 18, 1);
setTile(x-7, y+3, z+1, 18, 1);
setTile(x-7, y+3, z+2, 18, 2);
setTile(x-7, y+3, z+3, 18, 2);
setTile(x-7, y+3, z+4, 17, 2);
setTile(x-7, y+3, z+5, 18, 2);
setTile(x-7, y+3, z+6, 18);
setTile(x-7, y+3, z+7, 18);
setTile(x-7, y+3, z+8, 18);
setTile(x-7, y+3, z+9, 18);
setTile(x-7, y+3, z+10, 18);
setTile(x-7, y+4, z-10, 18);
setTile(x-7, y+4, z-9, 18);
setTile(x-7, y+4, z-8, 17);
setTile(x-7, y+4, z-7, 18);
setTile(x-7, y+4, z-6, 18);
setTile(x-7, y+4, z-1, 18);
setTile(x-7, y+4, z, 18);
setTile(x-7, y+4, z+1, 18);
setTile(x-7, y+4, z+2, 18);
setTile(x-7, y+4, z+3, 18);
setTile(x-7, y+4, z+4, 17, 2);
setTile(x-7, y+4, z+5, 18, 2);
setTile(x-7, y+4, z+6, 18);
setTile(x-7, y+4, z+7, 18);
setTile(x-7, y+4, z+8, 18);
setTile(x-7, y+4, z+9, 18);
setTile(x-7, y+4, z+10, 18);
setTile(x-7, y+5, z-10, 18);
setTile(x-7, y+5, z-9, 18);
setTile(x-7, y+5, z-8, 17);
setTile(x-7, y+5, z-7, 18);
setTile(x-7, y+5, z-6, 18);
setTile(x-7, y+5, z-3, 18, 1);
setTile(x-7, y+5, z-2, 18, 1);
setTile(x-7, y+5, z-1, 18);
setTile(x-7, y+5, z, 18);
setTile(x-7, y+5, z+1, 18);
setTile(x-7, y+5, z+2, 18);
setTile(x-7, y+5, z+3, 18);
setTile(x-7, y+5, z+4, 17, 2);
setTile(x-7, y+5, z+5, 18, 2);
setTile(x-7, y+5, z+8, 18);
setTile(x-7, y+5, z+9, 18);
setTile(x-7, y+6, z-9, 18);
setTile(x-7, y+6, z-8, 17);
setTile(x-7, y+6, z-7, 18);
setTile(x-7, y+6, z-1, 18, 1);
setTile(x-7, y+6, z, 18);
setTile(x-7, y+6, z+1, 18);
setTile(x-7, y+6, z+3, 18, 2);
setTile(x-7, y+6, z+4, 18, 2);
setTile(x-7, y+6, z+5, 18, 2);
setTile(x-7, y+6, z+8, 18);
setTile(x-7, y+7, z-9, 18);
setTile(x-7, y+7, z-8, 18);
setTile(x-7, y+7, z-7, 18);
setTile(x-7, y+7, z+1, 18);
setTile(x-7, y+8, z-1, 18, 1);
setTile(x-6, y+1, z-1, 17, 1);
setTile(x-6, y+1, z, 38);
setTile(x-6, y+1, z+8, 38);
setTile(x-6, y+2, z-2, 18, 1);
setTile(x-6, y+2, z-1, 17, 1);
setTile(x-6, y+2, z, 18, 1);
setTile(x-6, y+2, z+4, 18);
setTile(x-6, y+2, z+5, 18);
setTile(x-6, y+2, z+6, 18);
setTile(x-6, y+3, z-3, 18, 1);
setTile(x-6, y+3, z-2, 18, 1);
setTile(x-6, y+3, z-1, 17, 1);
setTile(x-6, y+3, z, 18, 1);
setTile(x-6, y+3, z+1, 18, 1);
setTile(x-6, y+3, z+2, 18, 2);
setTile(x-6, y+3, z+3, 18, 2);
setTile(x-6, y+3, z+4, 18, 2);
setTile(x-6, y+3, z+5, 18, 2);
setTile(x-6, y+3, z+6, 18);
setTile(x-6, y+3, z+7, 18);
setTile(x-6, y+3, z+8, 18);
setTile(x-6, y+3, z+9, 18);
setTile(x-6, y+3, z+10, 18);
setTile(x-6, y+4, z-10, 18);
setTile(x-6, y+4, z-9, 18);
setTile(x-6, y+4, z-8, 18);
setTile(x-6, y+4, z-7, 18);
setTile(x-6, y+4, z-6, 18);
setTile(x-6, y+4, z-5, 18, 2);
setTile(x-6, y+4, z-4, 18, 2);
setTile(x-6, y+4, z-2, 18, 1);
setTile(x-6, y+4, z-1, 17, 1);
setTile(x-6, y+4, z, 18);
setTile(x-6, y+4, z+1, 18);
setTile(x-6, y+4, z+2, 18);
setTile(x-6, y+4, z+3, 18);
setTile(x-6, y+4, z+4, 18, 2);
setTile(x-6, y+4, z+5, 18, 2);
setTile(x-6, y+4, z+6, 18);
setTile(x-6, y+4, z+7, 18);
setTile(x-6, y+4, z+8, 18);
setTile(x-6, y+4, z+9, 18);
setTile(x-6, y+5, z-10, 18);
setTile(x-6, y+5, z-9, 18);
setTile(x-6, y+5, z-8, 18);
setTile(x-6, y+5, z-7, 18);
setTile(x-6, y+5, z-6, 18);
setTile(x-6, y+5, z-5, 18, 2);
setTile(x-6, y+5, z-4, 18, 2);
setTile(x-6, y+5, z-3, 18, 1);
setTile(x-6, y+5, z-2, 18, 1);
setTile(x-6, y+5, z-1, 17, 1);
setTile(x-6, y+5, z, 18);
setTile(x-6, y+5, z+1, 18);
setTile(x-6, y+5, z+2, 18);
setTile(x-6, y+5, z+3, 18);
setTile(x-6, y+5, z+4, 18, 2);
setTile(x-6, y+5, z+8, 18, 1);
setTile(x-6, y+5, z+9, 18, 1);
setTile(x-6, y+5, z+10, 18, 1);
setTile(x-6, y+6, z-9, 18);
setTile(x-6, y+6, z-8, 18);
setTile(x-6, y+6, z-7, 18);
setTile(x-6, y+6, z-2, 18, 1);
setTile(x-6, y+6, z-1, 18, 1);
setTile(x-6, y+6, z, 18, 1);
setTile(x-6, y+6, z+4, 18, 2);
setTile(x-6, y+7, z-8, 18);
setTile(x-6, y+7, z-1, 18, 1);
setTile(x-6, y+8, z-2, 18, 1);
setTile(x-6, y+8, z-1, 18, 1);
setTile(x-6, y+8, z, 18, 1);
setTile(x-5, y+1, z+12, 37);
setTile(x-5, y+2, z-1, 18, 1);
setTile(x-5, y+2, z+3, 18);
setTile(x-5, y+2, z+4, 18);
setTile(x-5, y+2, z+5, 18);
setTile(x-5, y+2, z+6, 18);
setTile(x-5, y+2, z+7, 18);
setTile(x-5, y+2, z+9, 18, 1);
setTile(x-5, y+3, z-11, 18);
setTile(x-5, y+3, z-10, 18);
setTile(x-5, y+3, z-9, 18);
setTile(x-5, y+3, z-8, 18);
setTile(x-5, y+3, z-4, 18);
setTile(x-5, y+3, z-3, 18);
setTile(x-5, y+3, z-2, 18);
setTile(x-5, y+3, z-1, 18, 1);
setTile(x-5, y+3, z, 18, 1);
setTile(x-5, y+3, z+1, 18, 1);
setTile(x-5, y+3, z+3, 18, 2);
setTile(x-5, y+3, z+4, 18, 2);
setTile(x-5, y+3, z+5, 18, 2);
setTile(x-5, y+3, z+6, 18);
setTile(x-5, y+3, z+7, 18, 1);
setTile(x-5, y+3, z+8, 18, 1);
setTile(x-5, y+3, z+9, 18, 1);
setTile(x-5, y+3, z+10, 18, 1);
setTile(x-5, y+3, z+11, 18, 1);
setTile(x-5, y+4, z-12, 18);
setTile(x-5, y+4, z-11, 18);
setTile(x-5, y+4, z-10, 18);
setTile(x-5, y+4, z-9, 18);
setTile(x-5, y+4, z-8, 18);
setTile(x-5, y+4, z-7, 18);
setTile(x-5, y+4, z-6, 18);
setTile(x-5, y+4, z-5, 18, 2);
setTile(x-5, y+4, z-4, 18);
setTile(x-5, y+4, z-3, 18);
setTile(x-5, y+4, z-2, 18);
setTile(x-5, y+4, z-1, 18, 1);
setTile(x-5, y+4, z+3, 18, 2);
setTile(x-5, y+4, z+4, 18, 2);
setTile(x-5, y+4, z+5, 18, 2);
setTile(x-5, y+4, z+9, 18, 1);
setTile(x-5, y+5, z-9, 18);
setTile(x-5, y+5, z-8, 18);
setTile(x-5, y+5, z-7, 18);
setTile(x-5, y+5, z-6, 18, 2);
setTile(x-5, y+5, z-5, 18, 2);
setTile(x-5, y+5, z-4, 18, 2);
setTile(x-5, y+5, z-3, 18, 1);
setTile(x-5, y+5, z-2, 18, 1);
setTile(x-5, y+5, z-1, 18, 1);
setTile(x-5, y+5, z, 18, 1);
setTile(x-5, y+5, z+1, 18, 1);
setTile(x-5, y+5, z+2, 18, 2);
setTile(x-5, y+5, z+5, 18);
setTile(x-5, y+5, z+7, 18, 1);
setTile(x-5, y+5, z+8, 18, 1);
setTile(x-5, y+5, z+9, 18, 1);
setTile(x-5, y+5, z+10, 18, 1);
setTile(x-5, y+5, z+11, 18, 1);
setTile(x-5, y+6, z-7, 18, 2);
setTile(x-5, y+6, z-6, 18, 2);
setTile(x-5, y+6, z-1, 18, 1);
setTile(x-5, y+6, z, 18, 2);
setTile(x-5, y+6, z+1, 18, 2);
setTile(x-5, y+6, z+9, 18, 1);
setTile(x-5, y+7, z-6, 18, 2);
setTile(x-5, y+8, z-1, 18, 1);
setTile(x-5, y+8, z+9, 18, 1);
setTile(x-4, y+1, z-6, 17, 2);
setTile(x-4, y+1, z+5, 17);
setTile(x-4, y+1, z+9, 17, 1);
setTile(x-4, y+1, z+10, 38);
setTile(x-4, y+2, z-6, 17, 2);
setTile(x-4, y+2, z+3, 18);
setTile(x-4, y+2, z+4, 18);
setTile(x-4, y+2, z+5, 17);
setTile(x-4, y+2, z+6, 18);
setTile(x-4, y+2, z+7, 18);
setTile(x-4, y+2, z+8, 18, 1);
setTile(x-4, y+2, z+9, 17, 1);
setTile(x-4, y+2, z+10, 18, 1);
setTile(x-4, y+3, z-12, 18);
setTile(x-4, y+3, z-11, 18);
setTile(x-4, y+3, z-10, 18);
setTile(x-4, y+3, z-9, 18);
setTile(x-4, y+3, z-8, 18);
setTile(x-4, y+3, z-6, 17, 2);
setTile(x-4, y+3, z-5, 18);
setTile(x-4, y+3, z-4, 18);
setTile(x-4, y+3, z-3, 18);
setTile(x-4, y+3, z-2, 18);
setTile(x-4, y+3, z-1, 18);
setTile(x-4, y+3, z, 18, 1);
setTile(x-4, y+3, z+3, 18);
setTile(x-4, y+3, z+4, 18);
setTile(x-4, y+3, z+5, 17);
setTile(x-4, y+3, z+6, 18);
setTile(x-4, y+3, z+7, 18, 1);
setTile(x-4, y+3, z+8, 18, 1);
setTile(x-4, y+3, z+9, 17, 1);
setTile(x-4, y+3, z+10, 18, 1);
setTile(x-4, y+3, z+11, 18, 1);
setTile(x-4, y+4, z-12, 18);
setTile(x-4, y+4, z-11, 18);
setTile(x-4, y+4, z-10, 18);
setTile(x-4, y+4, z-9, 18);
setTile(x-4, y+4, z-8, 18);
setTile(x-4, y+4, z-7, 18, 2);
setTile(x-4, y+4, z-6, 17, 2);
setTile(x-4, y+4, z-5, 18);
setTile(x-4, y+4, z-4, 18);
setTile(x-4, y+4, z-3, 18);
setTile(x-4, y+4, z-2, 18);
setTile(x-4, y+4, z-1, 18);
setTile(x-4, y+4, z+4, 18);
setTile(x-4, y+4, z+5, 17);
setTile(x-4, y+4, z+6, 18);
setTile(x-4, y+4, z+8, 18, 1);
setTile(x-4, y+4, z+9, 17, 1);
setTile(x-4, y+4, z+10, 18, 1);
setTile(x-4, y+5, z-11, 18);
setTile(x-4, y+5, z-10, 18);
setTile(x-4, y+5, z-8, 18, 2);
setTile(x-4, y+5, z-7, 18, 2);
setTile(x-4, y+5, z-6, 17, 2);
setTile(x-4, y+5, z-5, 18, 2);
setTile(x-4, y+5, z-4, 18, 2);
setTile(x-4, y+5, z-3, 18);
setTile(x-4, y+5, z-2, 18, 1);
setTile(x-4, y+5, z-1, 18, 1);
setTile(x-4, y+5, z, 18, 1);
setTile(x-4, y+5, z+1, 18, 2);
setTile(x-4, y+5, z+2, 18, 2);
setTile(x-4, y+5, z+4, 18);
setTile(x-4, y+5, z+5, 18);
setTile(x-4, y+5, z+6, 18);
setTile(x-4, y+5, z+7, 18, 1);
setTile(x-4, y+5, z+8, 18, 1);
setTile(x-4, y+5, z+9, 17, 1);
setTile(x-4, y+5, z+10, 18, 1);
setTile(x-4, y+5, z+11, 18, 1);
setTile(x-4, y+6, z-10, 18);
setTile(x-4, y+6, z-7, 18, 2);
setTile(x-4, y+6, z-6, 17, 2);
setTile(x-4, y+6, z-5, 18, 2);
setTile(x-4, y+6, z-3, 18);
setTile(x-4, y+6, z-2, 18, 2);
setTile(x-4, y+6, z-1, 18, 2);
setTile(x-4, y+6, z, 18, 2);
setTile(x-4, y+6, z+1, 18, 2);
setTile(x-4, y+6, z+2, 18, 2);
setTile(x-4, y+6, z+8, 18, 1);
setTile(x-4, y+6, z+9, 18, 1);
setTile(x-4, y+6, z+10, 18, 1);
setTile(x-4, y+7, z-7, 18, 2);
setTile(x-4, y+7, z-6, 18, 2);
setTile(x-4, y+7, z-5, 18, 2);
setTile(x-4, y+7, z-1, 18, 2);
setTile(x-4, y+7, z, 18, 2);
setTile(x-4, y+7, z+9, 18, 1);
setTile(x-4, y+8, z, 18, 2);
setTile(x-4, y+8, z+8, 18, 1);
setTile(x-4, y+8, z+9, 18, 1);
setTile(x-4, y+8, z+10, 18, 1);
setTile(x-3, y+1, z-10, 17);
setTile(x-3, y+1, z-3, 17);
setTile(x-3, y+1, z, 17, 2);
setTile(x-3, y+1, z+1, 37);
setTile(x-3, y+1, z+8, 37);
setTile(x-3, y+2, z-10, 17);
setTile(x-3, y+2, z-3, 17);
setTile(x-3, y+2, z, 17, 2);
setTile(x-3, y+2, z+3, 18);
setTile(x-3, y+2, z+4, 18);
setTile(x-3, y+2, z+5, 18);
setTile(x-3, y+2, z+6, 18);
setTile(x-3, y+2, z+7, 18);
setTile(x-3, y+2, z+9, 18, 1);
setTile(x-3, y+3, z-12, 18);
setTile(x-3, y+3, z-11, 18);
setTile(x-3, y+3, z-10, 17);
setTile(x-3, y+3, z-9, 18);
setTile(x-3, y+3, z-8, 18);
setTile(x-3, y+3, z-5, 18);
setTile(x-3, y+3, z-4, 18);
setTile(x-3, y+3, z-3, 17);
setTile(x-3, y+3, z-2, 18);
setTile(x-3, y+3, z-1, 18);
setTile(x-3, y+3, z, 17, 2);
setTile(x-3, y+3, z+3, 18);
setTile(x-3, y+3, z+4, 18);
setTile(x-3, y+3, z+5, 18);
setTile(x-3, y+3, z+6, 18);
setTile(x-3, y+3, z+7, 18, 1);
setTile(x-3, y+3, z+8, 18, 1);
setTile(x-3, y+3, z+9, 18, 1);
setTile(x-3, y+3, z+10, 18, 1);
setTile(x-3, y+3, z+11, 18, 1);
setTile(x-3, y+4, z-12, 18);
setTile(x-3, y+4, z-11, 18);
setTile(x-3, y+4, z-10, 17);
setTile(x-3, y+4, z-9, 18);
setTile(x-3, y+4, z-8, 18);
setTile(x-3, y+4, z-7, 18, 2);
setTile(x-3, y+4, z-6, 18, 2);
setTile(x-3, y+4, z-5, 18);
setTile(x-3, y+4, z-4, 18);
setTile(x-3, y+4, z-3, 17);
setTile(x-3, y+4, z-2, 18);
setTile(x-3, y+4, z-1, 18);
setTile(x-3, y+4, z, 17, 2);
setTile(x-3, y+4, z+4, 18);
setTile(x-3, y+4, z+5, 18);
setTile(x-3, y+4, z+6, 18);
setTile(x-3, y+4, z+9, 18, 1);
setTile(x-3, y+5, z-11, 18);
setTile(x-3, y+5, z-10, 17);
setTile(x-3, y+5, z-9, 18);
setTile(x-3, y+5, z-8, 18, 2);
setTile(x-3, y+5, z-7, 18, 2);
setTile(x-3, y+5, z-6, 18, 2);
setTile(x-3, y+5, z-5, 18, 2);
setTile(x-3, y+5, z-4, 18);
setTile(x-3, y+5, z-3, 17);
setTile(x-3, y+5, z-2, 18);
setTile(x-3, y+5, z-1, 18, 2);
setTile(x-3, y+5, z, 17, 2);
setTile(x-3, y+5, z+1, 18, 2);
setTile(x-3, y+5, z+2, 18, 2);
setTile(x-3, y+5, z+5, 18);
setTile(x-3, y+5, z+7, 18, 1);
setTile(x-3, y+5, z+8, 18, 1);
setTile(x-3, y+5, z+9, 18, 1);
setTile(x-3, y+5, z+10, 18, 1);
setTile(x-3, y+5, z+11, 18, 1);
setTile(x-3, y+6, z-11, 18);
setTile(x-3, y+6, z-10, 18);
setTile(x-3, y+6, z-9, 18);
setTile(x-3, y+6, z-6, 18, 2);
setTile(x-3, y+6, z-4, 18);
setTile(x-3, y+6, z-3, 18);
setTile(x-3, y+6, z-2, 18);
setTile(x-3, y+6, z-1, 18, 2);
setTile(x-3, y+6, z, 17, 2);
setTile(x-3, y+6, z+1, 18, 2);
setTile(x-3, y+6, z+2, 18, 2);
setTile(x-3, y+6, z+9, 18, 1);
setTile(x-3, y+7, z-6, 18, 2);
setTile(x-3, y+7, z-1, 18, 2);
setTile(x-3, y+7, z, 17, 2);
setTile(x-3, y+7, z+1, 18, 2);
setTile(x-3, y+8, z-1, 18, 2);
setTile(x-3, y+8, z, 18, 2);
setTile(x-3, y+8, z+1, 18, 2);
setTile(x-3, y+8, z+9, 18, 1);
setTile(x-2, y+1, z-3, 37);
setTile(x-2, y+1, z-2, 38);
setTile(x-2, y+1, z, 38);
setTile(x-2, y+1, z+3, 38);
setTile(x-2, y+1, z+5, 37);
setTile(x-2, y+2, z+4, 18);
setTile(x-2, y+2, z+5, 18);
setTile(x-2, y+2, z+6, 18);
setTile(x-2, y+2, z+7, 18);
setTile(x-2, y+3, z-12, 18);
setTile(x-2, y+3, z-11, 18);
setTile(x-2, y+3, z-10, 18);
setTile(x-2, y+3, z-9, 18);
setTile(x-2, y+3, z-8, 18);
setTile(x-2, y+3, z-5, 18);
setTile(x-2, y+3, z-4, 18);
setTile(x-2, y+3, z-3, 18);
setTile(x-2, y+3, z-2, 18);
setTile(x-2, y+3, z-1, 18, 4);
setTile(x-2, y+3, z+2, 18, 1);
setTile(x-2, y+3, z+3, 18, 1);
setTile(x-2, y+3, z+4, 18, 1);
setTile(x-2, y+3, z+5, 18);
setTile(x-2, y+3, z+6, 18);
setTile(x-2, y+3, z+8, 18, 1);
setTile(x-2, y+3, z+9, 18, 1);
setTile(x-2, y+3, z+10, 18, 1);
setTile(x-2, y+4, z-12, 18);
setTile(x-2, y+4, z-11, 18);
setTile(x-2, y+4, z-10, 18);
setTile(x-2, y+4, z-9, 18);
setTile(x-2, y+4, z-8, 18);
setTile(x-2, y+4, z-7, 18, 2);
setTile(x-2, y+4, z-6, 18, 2);
setTile(x-2, y+4, z-5, 18);
setTile(x-2, y+4, z-4, 18);
setTile(x-2, y+4, z-3, 18);
setTile(x-2, y+4, z-2, 18);
setTile(x-2, y+4, z-1, 18);
setTile(x-2, y+5, z-10, 18);
setTile(x-2, y+5, z-9, 18);
setTile(x-2, y+5, z-8, 18, 2);
setTile(x-2, y+5, z-7, 18, 2);
setTile(x-2, y+5, z-6, 18, 2);
setTile(x-2, y+5, z-5, 18, 2);
setTile(x-2, y+5, z-4, 18);
setTile(x-2, y+5, z-3, 18);
setTile(x-2, y+5, z-2, 18, 2);
setTile(x-2, y+5, z-1, 18, 2);
setTile(x-2, y+5, z, 18, 2);
setTile(x-2, y+5, z+1, 18, 2);
setTile(x-2, y+5, z+2, 18, 1);
setTile(x-2, y+5, z+3, 18, 1);
setTile(x-2, y+5, z+4, 18, 1);
setTile(x-2, y+5, z+8, 18, 1);
setTile(x-2, y+5, z+9, 18, 1);
setTile(x-2, y+5, z+10, 18, 1);
setTile(x-2, y+6, z-10, 18);
setTile(x-2, y+6, z-3, 18);
setTile(x-2, y+6, z-2, 18, 2);
setTile(x-2, y+6, z-1, 18, 2);
setTile(x-2, y+6, z, 18, 2);
setTile(x-2, y+6, z+1, 18, 2);
setTile(x-2, y+6, z+2, 18, 2);
setTile(x-2, y+7, z, 18, 2);
setTile(x-2, y+7, z+1, 18, 2);
setTile(x-2, y+8, z, 18, 2);
setTile(x-1, y+1, z-11, 37);
setTile(x-1, y+1, z-1, 38);
setTile(x-1, y+1, z+3, 37);
setTile(x-1, y+2, z-3, 18);
setTile(x-1, y+2, z-2, 18);
setTile(x-1, y+2, z-1, 18, 4);
setTile(x-1, y+2, z, 18, 12);
setTile(x-1, y+2, z+1, 18, 4);
setTile(x-1, y+3, z-12, 18);
setTile(x-1, y+3, z-11, 18);
setTile(x-1, y+3, z-10, 18);
setTile(x-1, y+3, z-9, 18);
setTile(x-1, y+3, z-7, 18, 1);
setTile(x-1, y+3, z-6, 18, 1);
setTile(x-1, y+3, z-5, 18, 1);
setTile(x-1, y+3, z-4, 18);
setTile(x-1, y+3, z-3, 18);
setTile(x-1, y+3, z-2, 18);
setTile(x-1, y+3, z-1, 18, 4);
setTile(x-1, y+3, z, 18, 4);
setTile(x-1, y+3, z+1, 18);
setTile(x-1, y+3, z+2, 18, 1);
setTile(x-1, y+3, z+3, 18, 1);
setTile(x-1, y+3, z+4, 18, 1);
setTile(x-1, y+3, z+5, 18, 1);
setTile(x-1, y+3, z+6, 18);
setTile(x-1, y+3, z+7, 18);
setTile(x-1, y+3, z+8, 18);
setTile(x-1, y+3, z+9, 18);
setTile(x-1, y+4, z-11, 18);
setTile(x-1, y+4, z-10, 18);
setTile(x-1, y+4, z-9, 18);
setTile(x-1, y+4, z-8, 18);
setTile(x-1, y+4, z-5, 18);
setTile(x-1, y+4, z-4, 18);
setTile(x-1, y+4, z-3, 18);
setTile(x-1, y+4, z-2, 18);
setTile(x-1, y+4, z-1, 18, 4);
setTile(x-1, y+4, z+3, 18, 1);
setTile(x-1, y+4, z+6, 18);
setTile(x-1, y+4, z+7, 18);
setTile(x-1, y+4, z+8, 18);
setTile(x-1, y+4, z+9, 18);
setTile(x-1, y+5, z-11, 18);
setTile(x-1, y+5, z-10, 18);
setTile(x-1, y+5, z-9, 18);
setTile(x-1, y+5, z-8, 18);
setTile(x-1, y+5, z-1, 18, 2);
setTile(x-1, y+5, z, 18, 6);
setTile(x-1, y+5, z+1, 18, 5);
setTile(x-1, y+5, z+2, 18, 1);
setTile(x-1, y+5, z+3, 18, 1);
setTile(x-1, y+5, z+4, 18, 1);
setTile(x-1, y+5, z+5, 18, 1);
setTile(x-1, y+6, z-2, 18, 2);
setTile(x-1, y+6, z-1, 18, 2);
setTile(x-1, y+6, z, 18, 2);
setTile(x-1, y+6, z+1, 18, 2);
setTile(x-1, y+6, z+3, 18, 1);
setTile(x-1, y+8, z+3, 18, 1);
setTile(x-1, y+9, z+7, 1);
setTile(x, y+1, z-1, 38);
setTile(x, y+1, z+3, 17, 1);
setTile(x, y+1, z+13, 38);
setTile(x, y+2, z-3, 18);
setTile(x, y+2, z-2, 18);
setTile(x, y+2, z-1, 18);
setTile(x, y+2, z, 18, 8);
setTile(x, y+2, z+1, 18);
setTile(x, y+2, z+3, 17, 1);
setTile(x, y+3, z-8, 18, 1);
setTile(x, y+3, z-7, 18, 1);
setTile(x, y+3, z-6, 18, 1);
setTile(x, y+3, z-5, 18, 1);
setTile(x, y+3, z-4, 18, 1);
setTile(x, y+3, z-3, 18);
setTile(x, y+3, z-2, 18);
setTile(x, y+3, z-1, 18, 4);
setTile(x, y+3, z, 18, 8);
setTile(x, y+3, z+1, 18);
setTile(x, y+3, z+2, 18, 1);
setTile(x, y+3, z+3, 17, 1);
setTile(x, y+3, z+4, 18, 1);
setTile(x, y+3, z+5, 18, 1);
setTile(x, y+3, z+6, 18);
setTile(x, y+3, z+7, 18);
setTile(x, y+3, z+8, 18);
setTile(x, y+3, z+9, 18);
setTile(x, y+3, z+10, 18);
setTile(x, y+4, z-11, 18);
setTile(x, y+4, z-10, 18);
setTile(x, y+4, z-9, 18);
setTile(x, y+4, z-8, 18);
setTile(x, y+4, z-7, 18);
setTile(x, y+4, z-6, 18, 1);
setTile(x, y+4, z-5, 18, 1);
setTile(x, y+4, z-4, 18, 1);
setTile(x, y+4, z-2, 18);
setTile(x, y+4, z-1, 18, 4);
setTile(x, y+4, z, 18, 8);
setTile(x, y+4, z+2, 18, 1);
setTile(x, y+4, z+3, 17, 1);
setTile(x, y+4, z+4, 18, 1);
setTile(x, y+4, z+6, 18);
setTile(x, y+4, z+7, 18);
setTile(x, y+4, z+8, 18);
setTile(x, y+4, z+9, 18);
setTile(x, y+4, z+10, 18);
setTile(x, y+5, z-11, 18);
setTile(x, y+5, z-10, 18);
setTile(x, y+5, z-9, 18);
setTile(x, y+5, z-8, 18);
setTile(x, y+5, z-7, 18);
setTile(x, y+5, z-1, 18);
setTile(x, y+5, z+1, 18, 1);
setTile(x, y+5, z+2, 18, 1);
setTile(x, y+5, z+3, 17, 1);
setTile(x, y+5, z+4, 18, 1);
setTile(x, y+5, z+5, 18, 1);
setTile(x, y+5, z+8, 18);
setTile(x, y+5, z+9, 18);
setTile(x, y+6, z-10, 18);
setTile(x, y+6, z-9, 18);
setTile(x, y+6, z-6, 18, 1);
setTile(x, y+6, z-5, 18, 1);
setTile(x, y+6, z-4, 18, 1);
setTile(x, y+6, z+2, 18, 1);
setTile(x, y+6, z+3, 17, 1);
setTile(x, y+6, z+4, 18, 1);
setTile(x, y+6, z+8, 18);
setTile(x, y+7, z-9, 18);
setTile(x, y+7, z+3, 18, 1);
setTile(x, y+8, z+2, 18, 1);
setTile(x, y+8, z+3, 18, 1);
setTile(x, y+8, z+4, 18, 1);
setTile(x+1, y+1, z-9, 17);
setTile(x+1, y+1, z-1, 17);
setTile(x+1, y+1, z+8, 17);
setTile(x+1, y+1, z+13, 38);
setTile(x+1, y+2, z-9, 17);
setTile(x+1, y+2, z-5, 18, 1);
setTile(x+1, y+2, z-3, 18);
setTile(x+1, y+2, z-2, 18);
setTile(x+1, y+2, z-1, 17);
setTile(x+1, y+2, z, 18, 4);
setTile(x+1, y+2, z+1, 18);
setTile(x+1, y+2, z+8, 17);
setTile(x+1, y+3, z-9, 17);
setTile(x+1, y+3, z-8, 18, 1);
setTile(x+1, y+3, z-7, 18, 1);
setTile(x+1, y+3, z-6, 18, 1);
setTile(x+1, y+3, z-5, 18, 1);
setTile(x+1, y+3, z-4, 18, 1);
setTile(x+1, y+3, z-3, 18);
setTile(x+1, y+3, z-2, 18);
setTile(x+1, y+3, z-1, 17);
setTile(x+1, y+3, z, 18);
setTile(x+1, y+3, z+1, 18);
setTile(x+1, y+3, z+2, 18, 1);
setTile(x+1, y+3, z+3, 18, 1);
setTile(x+1, y+3, z+4, 18, 1);
setTile(x+1, y+3, z+5, 18, 1);
setTile(x+1, y+3, z+6, 18);
setTile(x+1, y+3, z+7, 18);
setTile(x+1, y+3, z+8, 17);
setTile(x+1, y+3, z+9, 18);
setTile(x+1, y+3, z+10, 18);
setTile(x+1, y+4, z-11, 18);
setTile(x+1, y+4, z-10, 18);
setTile(x+1, y+4, z-9, 17);
setTile(x+1, y+4, z-8, 18);
setTile(x+1, y+4, z-7, 18);
setTile(x+1, y+4, z-6, 18, 1);
setTile(x+1, y+4, z-5, 18, 1);
setTile(x+1, y+4, z-4, 18, 1);
setTile(x+1, y+4, z-3, 18, 1);
setTile(x+1, y+4, z-2, 18);
setTile(x+1, y+4, z-1, 17);
setTile(x+1, y+4, z, 18, 4);
setTile(x+1, y+4, z+3, 18, 1);
setTile(x+1, y+4, z+6, 18);
setTile(x+1, y+4, z+7, 18, 2);
setTile(x+1, y+4, z+8, 17);
setTile(x+1, y+4, z+9, 18, 2);
setTile(x+1, y+4, z+10, 18, 2);
setTile(x+1, y+5, z-11, 18);
setTile(x+1, y+5, z-10, 18);
setTile(x+1, y+5, z-9, 17);
setTile(x+1, y+5, z-8, 18);
setTile(x+1, y+5, z-7, 18);
setTile(x+1, y+5, z-5, 18, 1);
setTile(x+1, y+5, z-2, 18);
setTile(x+1, y+5, z-1, 18, 4);
setTile(x+1, y+5, z, 18, 4);
setTile(x+1, y+5, z+1, 18, 1);
setTile(x+1, y+5, z+2, 18, 1);
setTile(x+1, y+5, z+3, 18, 1);
setTile(x+1, y+5, z+4, 18, 1);
setTile(x+1, y+5, z+5, 18, 1);
setTile(x+1, y+5, z+6, 18, 2);
setTile(x+1, y+5, z+7, 18, 2);
setTile(x+1, y+5, z+8, 17);
setTile(x+1, y+5, z+9, 18, 2);
setTile(x+1, y+6, z-10, 18);
setTile(x+1, y+6, z-9, 17);
setTile(x+1, y+6, z-8, 18);
setTile(x+1, y+6, z-7, 18, 1);
setTile(x+1, y+6, z-6, 18, 1);
setTile(x+1, y+6, z-5, 18, 1);
setTile(x+1, y+6, z-4, 18, 1);
setTile(x+1, y+6, z-3, 18, 1);
setTile(x+1, y+6, z+3, 18, 1);
setTile(x+1, y+6, z+7, 18);
setTile(x+1, y+6, z+8, 18);
setTile(x+1, y+6, z+9, 18);
setTile(x+1, y+7, z-10, 18);
setTile(x+1, y+7, z-9, 18);
setTile(x+1, y+7, z-8, 18);
setTile(x+1, y+7, z-5, 18, 1);
setTile(x+1, y+8, z+3, 18, 1);
setTile(x+1, y+9, z-5, 18, 1);
setTile(x+2, y+1, z-5, 17, 1);
setTile(x+2, y+2, z-6, 18, 1);
setTile(x+2, y+2, z-5, 17, 1);
setTile(x+2, y+2, z-4, 18, 1);
setTile(x+2, y+2, z-3, 18);
setTile(x+2, y+2, z-2, 18);
setTile(x+2, y+2, z-1, 18);
setTile(x+2, y+2, z, 18);
setTile(x+2, y+2, z+1, 18);
setTile(x+2, y+3, z-8, 18, 1);
setTile(x+2, y+3, z-7, 18, 1);
setTile(x+2, y+3, z-6, 18, 1);
setTile(x+2, y+3, z-5, 17, 1);
setTile(x+2, y+3, z-4, 18, 1);
setTile(x+2, y+3, z-3, 18);
setTile(x+2, y+3, z-2, 18);
setTile(x+2, y+3, z-1, 18);
setTile(x+2, y+3, z, 18);
setTile(x+2, y+3, z+1, 18);
setTile(x+2, y+3, z+2, 18, 1);
setTile(x+2, y+3, z+3, 18, 1);
setTile(x+2, y+3, z+4, 18, 1);
setTile(x+2, y+3, z+6, 18);
setTile(x+2, y+3, z+7, 18);
setTile(x+2, y+3, z+8, 18);
setTile(x+2, y+3, z+9, 18);
setTile(x+2, y+3, z+10, 18);
setTile(x+2, y+4, z-11, 18);
setTile(x+2, y+4, z-10, 18);
setTile(x+2, y+4, z-9, 18);
setTile(x+2, y+4, z-8, 18);
setTile(x+2, y+4, z-7, 18);
setTile(x+2, y+4, z-6, 18, 1);
setTile(x+2, y+4, z-5, 17, 1);
setTile(x+2, y+4, z-4, 18, 1);
setTile(x+2, y+4, z-3, 18, 1);
setTile(x+2, y+4, z-2, 18);
setTile(x+2, y+4, z-1, 18);
setTile(x+2, y+4, z+6, 18, 2);
setTile(x+2, y+4, z+7, 18, 2);
setTile(x+2, y+4, z+8, 18, 2);
setTile(x+2, y+4, z+9, 18, 2);
setTile(x+2, y+4, z+10, 18, 2);
setTile(x+2, y+5, z-11, 18);
setTile(x+2, y+5, z-10, 18);
setTile(x+2, y+5, z-9, 18);
setTile(x+2, y+5, z-8, 18);
setTile(x+2, y+5, z-7, 18);
setTile(x+2, y+5, z-6, 18, 1);
setTile(x+2, y+5, z-5, 17, 1);
setTile(x+2, y+5, z-4, 18, 1);
setTile(x+2, y+5, z-1, 18);
setTile(x+2, y+5, z+2, 18, 1);
setTile(x+2, y+5, z+3, 18, 1);
setTile(x+2, y+5, z+4, 18, 1);
setTile(x+2, y+5, z+6, 18, 2);
setTile(x+2, y+5, z+7, 18, 2);
setTile(x+2, y+5, z+8, 18, 2);
setTile(x+2, y+5, z+9, 18, 2);
setTile(x+2, y+5, z+10, 18, 2);
setTile(x+2, y+6, z-9, 18);
setTile(x+2, y+6, z-8, 18);
setTile(x+2, y+6, z-7, 18, 1);
setTile(x+2, y+6, z-6, 18, 1);
setTile(x+2, y+6, z-5, 17, 1);
setTile(x+2, y+6, z-4, 18, 1);
setTile(x+2, y+6, z-3, 18, 1);
setTile(x+2, y+6, z+7, 18, 2);
setTile(x+2, y+6, z+8, 18, 2);
setTile(x+2, y+7, z-9, 18);
setTile(x+2, y+7, z-6, 18, 1);
setTile(x+2, y+7, z-5, 17, 1);
setTile(x+2, y+7, z-4, 18, 1);
setTile(x+2, y+7, z+8, 18, 2);
setTile(x+2, y+8, z-5, 17, 1);
setTile(x+2, y+9, z-6, 18, 1);
setTile(x+2, y+9, z-5, 17, 1);
setTile(x+2, y+9, z-4, 18, 1);
setTile(x+2, y+10, z-5, 18, 1);
setTile(x+3, y+1, z+6, 38);
setTile(x+3, y+1, z+8, 17, 2);
setTile(x+3, y+2, z-5, 18, 1);
setTile(x+3, y+2, z-3, 18);
setTile(x+3, y+2, z-2, 18);
setTile(x+3, y+2, z-1, 18);
setTile(x+3, y+2, z, 18);
setTile(x+3, y+2, z+1, 18);
setTile(x+3, y+2, z+2, 18, 1);
setTile(x+3, y+2, z+3, 18, 1);
setTile(x+3, y+2, z+4, 18, 1);
setTile(x+3, y+2, z+8, 17, 2);
setTile(x+3, y+3, z-8, 18, 1);
setTile(x+3, y+3, z-7, 18, 1);
setTile(x+3, y+3, z-6, 18, 1);
setTile(x+3, y+3, z-5, 18, 1);
setTile(x+3, y+3, z-4, 18, 1);
setTile(x+3, y+3, z-3, 18);
setTile(x+3, y+3, z-2, 18);
setTile(x+3, y+3, z-1, 18);
setTile(x+3, y+3, z, 18);
setTile(x+3, y+3, z+1, 18);
setTile(x+3, y+3, z+6, 18);
setTile(x+3, y+3, z+7, 18);
setTile(x+3, y+3, z+8, 17, 2);
setTile(x+3, y+3, z+9, 18);
setTile(x+3, y+4, z-10, 18);
setTile(x+3, y+4, z-9, 18);
setTile(x+3, y+4, z-8, 18);
setTile(x+3, y+4, z-7, 18);
setTile(x+3, y+4, z-6, 18, 1);
setTile(x+3, y+4, z-5, 18, 1);
setTile(x+3, y+4, z-4, 18, 1);
setTile(x+3, y+4, z-3, 18);
setTile(x+3, y+4, z-2, 18);
setTile(x+3, y+4, z-1, 18);
setTile(x+3, y+4, z, 18);
setTile(x+3, y+4, z+2, 18, 1);
setTile(x+3, y+4, z+3, 18, 1);
setTile(x+3, y+4, z+4, 18, 1);
setTile(x+3, y+4, z+6, 18, 2);
setTile(x+3, y+4, z+7, 18, 2);
setTile(x+3, y+4, z+8, 17, 2);
setTile(x+3, y+4, z+9, 18, 2);
setTile(x+3, y+4, z+10, 18, 2);
setTile(x+3, y+5, z-11, 18);
setTile(x+3, y+5, z-10, 18);
setTile(x+3, y+5, z-9, 18);
setTile(x+3, y+5, z-8, 18);
setTile(x+3, y+5, z-7, 18, 4);
setTile(x+3, y+5, z-5, 18, 1);
setTile(x+3, y+5, z+6, 18, 2);
setTile(x+3, y+5, z+7, 18, 2);
setTile(x+3, y+5, z+8, 17, 2);
setTile(x+3, y+5, z+9, 18, 2);
setTile(x+3, y+5, z+10, 18, 2);
setTile(x+3, y+6, z-7, 18, 1);
setTile(x+3, y+6, z-6, 18, 1);
setTile(x+3, y+6, z-5, 18, 1);
setTile(x+3, y+6, z-4, 18, 1);
setTile(x+3, y+6, z-3, 18, 1);
setTile(x+3, y+6, z+7, 18, 2);
setTile(x+3, y+6, z+8, 17, 2);
setTile(x+3, y+6, z+9, 18, 2);
setTile(x+3, y+7, z-5, 18, 1);
setTile(x+3, y+7, z+7, 18, 2);
setTile(x+3, y+7, z+8, 18, 2);
setTile(x+3, y+7, z+9, 18, 2);
setTile(x+3, y+9, z-5, 18, 1);
setTile(x+4, y+1, z, 37);
setTile(x+4, y+1, z+7, 38);
setTile(x+4, y+2, z+1, 18, 1);
setTile(x+4, y+2, z+2, 18, 1);
setTile(x+4, y+2, z+3, 18, 1);
setTile(x+4, y+2, z+4, 18, 1);
setTile(x+4, y+2, z+5, 18, 1);
setTile(x+4, y+3, z-11, 18);
setTile(x+4, y+3, z-10, 18);
setTile(x+4, y+3, z-9, 18);
setTile(x+4, y+3, z-8, 18);
setTile(x+4, y+3, z-7, 18);
setTile(x+4, y+3, z-6, 18, 1);
setTile(x+4, y+3, z-5, 18, 1);
setTile(x+4, y+3, z-4, 18, 1);
setTile(x+4, y+3, z-3, 18);
setTile(x+4, y+3, z-2, 18);
setTile(x+4, y+3, z-1, 18);
setTile(x+4, y+3, z, 18);
setTile(x+4, y+3, z+1, 18);
setTile(x+4, y+3, z+3, 18, 1);
setTile(x+4, y+4, z-11, 18);
setTile(x+4, y+4, z-10, 18);
setTile(x+4, y+4, z-9, 18);
setTile(x+4, y+4, z-8, 18);
setTile(x+4, y+4, z-7, 18);
setTile(x+4, y+4, z-6, 18);
setTile(x+4, y+4, z-5, 18);
setTile(x+4, y+4, z-4, 18);
setTile(x+4, y+4, z-3, 18);
setTile(x+4, y+4, z-2, 18);
setTile(x+4, y+4, z-1, 18);
setTile(x+4, y+4, z, 18);
setTile(x+4, y+4, z+1, 18);
setTile(x+4, y+4, z+2, 18, 1);
setTile(x+4, y+4, z+3, 18, 1);
setTile(x+4, y+4, z+4, 18, 1);
setTile(x+4, y+4, z+5, 18, 1);
setTile(x+4, y+4, z+6, 18, 2);
setTile(x+4, y+4, z+7, 18, 2);
setTile(x+4, y+4, z+8, 18, 2);
setTile(x+4, y+4, z+9, 18, 2);
setTile(x+4, y+4, z+10, 18, 2);
setTile(x+4, y+5, z-6, 18);
setTile(x+4, y+5, z-5, 18);
setTile(x+4, y+5, z-4, 18);
setTile(x+4, y+5, z-1, 18);
setTile(x+4, y+5, z, 18);
setTile(x+4, y+5, z+3, 18, 1);
setTile(x+4, y+5, z+6, 18, 2);
setTile(x+4, y+5, z+7, 18, 2);
setTile(x+4, y+5, z+8, 18, 2);
setTile(x+4, y+5, z+9, 18, 2);
setTile(x+4, y+5, z+10, 18, 6);
setTile(x+4, y+6, z-6, 18, 1);
setTile(x+4, y+6, z-5, 18, 1);
setTile(x+4, y+6, z-4, 18, 1);
setTile(x+4, y+6, z-1, 18);
setTile(x+4, y+6, z+8, 18, 2);
setTile(x+4, y+6, z+9, 18, 2);
setTile(x+4, y+7, z+3, 18, 1);
setTile(x+4, y+7, z+8, 18, 2);
setTile(x+5, y+1, z-2, 38);
setTile(x+5, y+1, z-1, 17);
setTile(x+5, y+1, z+3, 17, 1);
setTile(x+5, y+1, z+7, 38);
setTile(x+5, y+1, z+9, 37);
setTile(x+5, y+2, z-1, 17);
setTile(x+5, y+2, z+1, 18, 1);
setTile(x+5, y+2, z+2, 18, 1);
setTile(x+5, y+2, z+3, 17, 1);
setTile(x+5, y+2, z+4, 18, 1);
setTile(x+5, y+2, z+5, 18, 1);
setTile(x+5, y+3, z-11, 18);
setTile(x+5, y+3, z-10, 18);
setTile(x+5, y+3, z-9, 18);
setTile(x+5, y+3, z-8, 18);
setTile(x+5, y+3, z-7, 18);
setTile(x+5, y+3, z-6, 18, 1);
setTile(x+5, y+3, z-5, 18, 1);
setTile(x+5, y+3, z-4, 18, 1);
setTile(x+5, y+3, z-3, 18);
setTile(x+5, y+3, z-2, 18);
setTile(x+5, y+3, z-1, 17);
setTile(x+5, y+3, z, 18);
setTile(x+5, y+3, z+1, 18);
setTile(x+5, y+3, z+2, 18, 1);
setTile(x+5, y+3, z+3, 17, 1);
setTile(x+5, y+3, z+4, 18, 1);
setTile(x+5, y+4, z-11, 18);
setTile(x+5, y+4, z-10, 18);
setTile(x+5, y+4, z-9, 18);
setTile(x+5, y+4, z-8, 18);
setTile(x+5, y+4, z-7, 18);
setTile(x+5, y+4, z-6, 18);
setTile(x+5, y+4, z-5, 18);
setTile(x+5, y+4, z-4, 18);
setTile(x+5, y+4, z-3, 18);
setTile(x+5, y+4, z-2, 18);
setTile(x+5, y+4, z-1, 17);
setTile(x+5, y+4, z, 18);
setTile(x+5, y+4, z+1, 18);
setTile(x+5, y+4, z+2, 18, 1);
setTile(x+5, y+4, z+3, 17, 1);
setTile(x+5, y+4, z+4, 18, 1);
setTile(x+5, y+4, z+5, 18, 1);
setTile(x+5, y+4, z+7, 18, 2);
setTile(x+5, y+4, z+8, 18, 2);
setTile(x+5, y+4, z+9, 18, 2);
setTile(x+5, y+4, z+10, 18, 2);
setTile(x+5, y+4, z+11, 18, 2);
setTile(x+5, y+4, z+12, 18, 2);
setTile(x+5, y+5, z-9, 18);
setTile(x+5, y+5, z-7, 18);
setTile(x+5, y+5, z-6, 18);
setTile(x+5, y+5, z-5, 18);
setTile(x+5, y+5, z-4, 18);
setTile(x+5, y+5, z-3, 18);
setTile(x+5, y+5, z-2, 18);
setTile(x+5, y+5, z-1, 17);
setTile(x+5, y+5, z, 18);
setTile(x+5, y+5, z+2, 18, 1);
setTile(x+5, y+5, z+3, 17, 1);
setTile(x+5, y+5, z+4, 18, 1);
setTile(x+5, y+5, z+6, 18, 2);
setTile(x+5, y+5, z+7, 18, 2);
setTile(x+5, y+5, z+8, 18, 2);
setTile(x+5, y+5, z+9, 18, 2);
setTile(x+5, y+5, z+10, 18, 2);
setTile(x+5, y+5, z+11, 18, 2);
setTile(x+5, y+6, z-9, 18);
setTile(x+5, y+6, z-6, 18);
setTile(x+5, y+6, z-5, 18);
setTile(x+5, y+6, z-2, 18);
setTile(x+5, y+6, z-1, 18);
setTile(x+5, y+6, z, 18);
setTile(x+5, y+6, z+3, 18, 1);
setTile(x+5, y+7, z-5, 18);
setTile(x+5, y+7, z+2, 18, 1);
setTile(x+5, y+7, z+3, 18, 1);
setTile(x+5, y+7, z+4, 18, 1);
setTile(x+6, y+1, z-12, 38);
setTile(x+6, y+1, z-9, 17);
setTile(x+6, y+1, z-5, 17);
setTile(x+6, y+2, z-9, 17);
setTile(x+6, y+2, z-5, 17);
setTile(x+6, y+2, z+1, 18, 1);
setTile(x+6, y+2, z+2, 18, 1);
setTile(x+6, y+2, z+3, 18, 1);
setTile(x+6, y+2, z+4, 18, 1);
setTile(x+6, y+2, z+5, 18, 1);
setTile(x+6, y+3, z-11, 18);
setTile(x+6, y+3, z-10, 18);
setTile(x+6, y+3, z-9, 17);
setTile(x+6, y+3, z-8, 18);
setTile(x+6, y+3, z-7, 18);
setTile(x+6, y+3, z-5, 17);
setTile(x+6, y+3, z-3, 18);
setTile(x+6, y+3, z-2, 18);
setTile(x+6, y+3, z-1, 18);
setTile(x+6, y+3, z, 18);
setTile(x+6, y+3, z+1, 18);
setTile(x+6, y+3, z+3, 18, 1);
setTile(x+6, y+4, z-11, 18);
setTile(x+6, y+4, z-10, 18);
setTile(x+6, y+4, z-9, 17);
setTile(x+6, y+4, z-8, 18);
setTile(x+6, y+4, z-7, 18);
setTile(x+6, y+4, z-6, 18);
setTile(x+6, y+4, z-5, 17);
setTile(x+6, y+4, z-4, 18);
setTile(x+6, y+4, z-3, 18);
setTile(x+6, y+4, z-2, 18);
setTile(x+6, y+4, z-1, 18);
setTile(x+6, y+4, z, 18);
setTile(x+6, y+4, z+1, 18);
setTile(x+6, y+4, z+2, 18, 1);
setTile(x+6, y+4, z+3, 18, 1);
setTile(x+6, y+4, z+4, 18, 1);
setTile(x+6, y+4, z+5, 18, 1);
setTile(x+6, y+4, z+6, 18);
setTile(x+6, y+4, z+7, 18);
setTile(x+6, y+4, z+8, 18, 2);
setTile(x+6, y+4, z+9, 18, 2);
setTile(x+6, y+4, z+10, 18, 2);
setTile(x+6, y+4, z+11, 18, 2);
setTile(x+6, y+4, z+12, 18, 2);
setTile(x+6, y+5, z-10, 18);
setTile(x+6, y+5, z-9, 17);
setTile(x+6, y+5, z-8, 18);
setTile(x+6, y+5, z-7, 18);
setTile(x+6, y+5, z-6, 18);
setTile(x+6, y+5, z-5, 17);
setTile(x+6, y+5, z-4, 18);
setTile(x+6, y+5, z-3, 18);
setTile(x+6, y+5, z-1, 18);
setTile(x+6, y+5, z+3, 18, 1);
setTile(x+6, y+5, z+5, 18);
setTile(x+6, y+5, z+6, 18);
setTile(x+6, y+5, z+7, 18);
setTile(x+6, y+5, z+8, 18, 2);
setTile(x+6, y+5, z+9, 18, 2);
setTile(x+6, y+5, z+10, 18, 2);
setTile(x+6, y+5, z+11, 18, 2);
setTile(x+6, y+5, z+12, 18, 2);
setTile(x+6, y+6, z-10, 18);
setTile(x+6, y+6, z-9, 18);
setTile(x+6, y+6, z-8, 18);
setTile(x+6, y+6, z-6, 18);
setTile(x+6, y+6, z-5, 17);
setTile(x+6, y+6, z-4, 18);
setTile(x+6, y+6, z-1, 18);
setTile(x+6, y+6, z+9, 18, 2);
setTile(x+6, y+6, z+10, 18, 2);
setTile(x+6, y+6, z+11, 18, 2);
setTile(x+6, y+7, z-6, 18);
setTile(x+6, y+7, z-5, 18);
setTile(x+6, y+7, z-4, 18, 4);
setTile(x+6, y+7, z+3, 18, 1);
setTile(x+6, y+7, z+10, 18, 2);
setTile(x+7, y+1, z-3, 38);
setTile(x+7, y+1, z+10, 17, 2);
setTile(x+7, y+2, z+2, 18, 1);
setTile(x+7, y+2, z+3, 18, 1);
setTile(x+7, y+2, z+4, 18, 1);
setTile(x+7, y+2, z+10, 17, 2);
setTile(x+7, y+3, z-11, 18);
setTile(x+7, y+3, z-10, 18);
setTile(x+7, y+3, z-9, 18);
setTile(x+7, y+3, z-8, 18);
setTile(x+7, y+3, z-7, 18);
setTile(x+7, y+3, z-4, 18);
setTile(x+7, y+3, z-3, 18);
setTile(x+7, y+3, z-2, 18);
setTile(x+7, y+3, z-1, 18);
setTile(x+7, y+3, z, 18);
setTile(x+7, y+3, z+10, 17, 2);
setTile(x+7, y+4, z-11, 18);
setTile(x+7, y+4, z-10, 18);
setTile(x+7, y+4, z-9, 18);
setTile(x+7, y+4, z-8, 18);
setTile(x+7, y+4, z-7, 18);
setTile(x+7, y+4, z-6, 18);
setTile(x+7, y+4, z-5, 18);
setTile(x+7, y+4, z-4, 18);
setTile(x+7, y+4, z-3, 18);
setTile(x+7, y+4, z-2, 18);
setTile(x+7, y+4, z-1, 18);
setTile(x+7, y+4, z, 18);
setTile(x+7, y+4, z+1, 18, 2);
setTile(x+7, y+4, z+2, 18, 2);
setTile(x+7, y+4, z+3, 18, 2);
setTile(x+7, y+4, z+4, 18, 1);
setTile(x+7, y+4, z+5, 18);
setTile(x+7, y+4, z+6, 18);
setTile(x+7, y+4, z+7, 18);
setTile(x+7, y+4, z+8, 18, 2);
setTile(x+7, y+4, z+9, 18, 2);
setTile(x+7, y+4, z+10, 17, 2);
setTile(x+7, y+4, z+11, 18, 2);
setTile(x+7, y+4, z+12, 18, 2);
setTile(x+7, y+5, z-9, 18);
setTile(x+7, y+5, z-8, 18, 2);
setTile(x+7, y+5, z-7, 18);
setTile(x+7, y+5, z-6, 18);
setTile(x+7, y+5, z-5, 18);
setTile(x+7, y+5, z-4, 18);
setTile(x+7, y+5, z-3, 18);
setTile(x+7, y+5, z-2, 18);
setTile(x+7, y+5, z-1, 18);
setTile(x+7, y+5, z, 18, 2);
setTile(x+7, y+5, z+1, 18, 2);
setTile(x+7, y+5, z+2, 18, 2);
setTile(x+7, y+5, z+3, 18, 2);
setTile(x+7, y+5, z+5, 18);
setTile(x+7, y+5, z+6, 18);
setTile(x+7, y+5, z+7, 18);
setTile(x+7, y+5, z+8, 18, 2);
setTile(x+7, y+5, z+9, 18, 2);
setTile(x+7, y+5, z+10, 17, 2);
setTile(x+7, y+5, z+11, 18, 2);
setTile(x+7, y+5, z+12, 18, 2);
setTile(x+7, y+6, z-9, 18);
setTile(x+7, y+6, z-7, 18, 2);
setTile(x+7, y+6, z-6, 18);
setTile(x+7, y+6, z-5, 18);
setTile(x+7, y+6, z-4, 18);
setTile(x+7, y+6, z-2, 18);
setTile(x+7, y+6, z+7, 18);
setTile(x+7, y+6, z+9, 18, 2);
setTile(x+7, y+6, z+10, 17, 2);
setTile(x+7, y+6, z+11, 18, 2);
setTile(x+7, y+7, z-5, 18);
setTile(x+7, y+7, z+7, 18);
setTile(x+7, y+7, z+9, 18, 2);
setTile(x+7, y+7, z+10, 18, 2);
setTile(x+7, y+7, z+11, 18, 2);
setTile(x+8, y+1, z-2, 17);
setTile(x+8, y+1, z-1, 37);
setTile(x+8, y+1, z+2, 37);
setTile(x+8, y+1, z+6, 37);
setTile(x+8, y+1, z+7, 17);
setTile(x+8, y+1, z+9, 38);
setTile(x+8, y+2, z-2, 17);
setTile(x+8, y+2, z+7, 17);
setTile(x+8, y+3, z-11, 18);
setTile(x+8, y+3, z-10, 18);
setTile(x+8, y+3, z-9, 18);
setTile(x+8, y+3, z-8, 18);
setTile(x+8, y+3, z-4, 18);
setTile(x+8, y+3, z-3, 18);
setTile(x+8, y+3, z-2, 17);
setTile(x+8, y+3, z-1, 18);
setTile(x+8, y+3, z, 18);
setTile(x+8, y+3, z+7, 17);
setTile(x+8, y+4, z-10, 18);
setTile(x+8, y+4, z-9, 18);
setTile(x+8, y+4, z-8, 18);
setTile(x+8, y+4, z-7, 18);
setTile(x+8, y+4, z-6, 18);
setTile(x+8, y+4, z-5, 18);
setTile(x+8, y+4, z-4, 18);
setTile(x+8, y+4, z-3, 18);
setTile(x+8, y+4, z-2, 17);
setTile(x+8, y+4, z-1, 18);
setTile(x+8, y+4, z, 18, 2);
setTile(x+8, y+4, z+1, 18, 2);
setTile(x+8, y+4, z+2, 18, 2);
setTile(x+8, y+4, z+3, 18, 2);
setTile(x+8, y+4, z+4, 18, 2);
setTile(x+8, y+4, z+5, 18);
setTile(x+8, y+4, z+6, 18);
setTile(x+8, y+4, z+7, 17);
setTile(x+8, y+4, z+8, 18, 2);
setTile(x+8, y+4, z+9, 18, 2);
setTile(x+8, y+4, z+10, 18, 2);
setTile(x+8, y+4, z+11, 18, 2);
setTile(x+8, y+4, z+12, 18, 2);
setTile(x+8, y+5, z-8, 18, 2);
setTile(x+8, y+5, z-7, 18, 2);
setTile(x+8, y+5, z-6, 18);
setTile(x+8, y+5, z-5, 18);
setTile(x+8, y+5, z-4, 18);
setTile(x+8, y+5, z-3, 18);
setTile(x+8, y+5, z-2, 17);
setTile(x+8, y+5, z-1, 18);
setTile(x+8, y+5, z, 18, 2);
setTile(x+8, y+5, z+1, 18, 2);
setTile(x+8, y+5, z+2, 18, 2);
setTile(x+8, y+5, z+3, 18, 2);
setTile(x+8, y+5, z+4, 18, 2);
setTile(x+8, y+5, z+5, 18);
setTile(x+8, y+5, z+6, 18);
setTile(x+8, y+5, z+7, 17);
setTile(x+8, y+5, z+8, 18, 6);
setTile(x+8, y+5, z+9, 18, 2);
setTile(x+8, y+5, z+10, 18, 2);
setTile(x+8, y+5, z+11, 18, 2);
setTile(x+8, y+5, z+12, 18, 2);
setTile(x+8, y+6, z-8, 18, 2);
setTile(x+8, y+6, z-7, 18, 2);
setTile(x+8, y+6, z-6, 18, 2);
setTile(x+8, y+6, z-5, 18, 2);
setTile(x+8, y+6, z-4, 18, 2);
setTile(x+8, y+6, z-3, 18);
setTile(x+8, y+6, z-2, 18);
setTile(x+8, y+6, z-1, 18);
setTile(x+8, y+6, z+1, 18, 2);
setTile(x+8, y+6, z+2, 18, 2);
setTile(x+8, y+6, z+6, 18);
setTile(x+8, y+6, z+7, 17);
setTile(x+8, y+6, z+8, 18);
setTile(x+8, y+6, z+9, 18, 2);
setTile(x+8, y+6, z+10, 18, 2);
setTile(x+8, y+7, z-6, 18, 2);
setTile(x+8, y+7, z-5, 18, 2);
setTile(x+8, y+7, z+2, 18, 2);
setTile(x+8, y+7, z+6, 18);
setTile(x+8, y+7, z+7, 18);
setTile(x+8, y+7, z+8, 18);
setTile(x+8, y+7, z+10, 18, 2);
setTile(x+8, y+8, z-6, 18, 2);
setTile(x+9, y+1, z-6, 17, 2);
setTile(x+9, y+1, z, 37);
setTile(x+9, y+1, z+2, 17, 2);
setTile(x+9, y+1, z+3, 37);
setTile(x+9, y+1, z+8, 38);
setTile(x+9, y+1, z+11, 37);
setTile(x+9, y+2, z-6, 17, 2);
setTile(x+9, y+2, z+2, 17, 2);
setTile(x+9, y+3, z-6, 17, 2);
setTile(x+9, y+3, z-4, 18);
setTile(x+9, y+3, z-3, 18);
setTile(x+9, y+3, z-2, 18);
setTile(x+9, y+3, z-1, 18);
setTile(x+9, y+3, z, 18);
setTile(x+9, y+3, z+2, 17, 2);
setTile(x+9, y+4, z-6, 17, 2);
setTile(x+9, y+4, z-4, 18);
setTile(x+9, y+4, z-3, 18);
setTile(x+9, y+4, z-2, 18);
setTile(x+9, y+4, z-1, 18);
setTile(x+9, y+4, z, 18, 2);
setTile(x+9, y+4, z+1, 18, 2);
setTile(x+9, y+4, z+2, 17, 2);
setTile(x+9, y+4, z+3, 18, 2);
setTile(x+9, y+4, z+4, 18, 2);
setTile(x+9, y+4, z+5, 18);
setTile(x+9, y+4, z+6, 18);
setTile(x+9, y+4, z+7, 18);
setTile(x+9, y+4, z+8, 18, 2);
setTile(x+9, y+4, z+9, 18, 2);
setTile(x+9, y+4, z+10, 18, 2);
setTile(x+9, y+4, z+11, 18, 2);
setTile(x+9, y+4, z+12, 18, 2);
setTile(x+9, y+5, z-8, 18, 2);
setTile(x+9, y+5, z-7, 18, 2);
setTile(x+9, y+5, z-6, 17, 2);
setTile(x+9, y+5, z-5, 18, 2);
setTile(x+9, y+5, z-4, 18, 6);
setTile(x+9, y+5, z-2, 18);
setTile(x+9, y+5, z-1, 18);
setTile(x+9, y+5, z, 18, 2);
setTile(x+9, y+5, z+1, 18, 2);
setTile(x+9, y+5, z+2, 17, 2);
setTile(x+9, y+5, z+3, 18, 2);
setTile(x+9, y+5, z+4, 18, 2);
setTile(x+9, y+5, z+5, 18);
setTile(x+9, y+5, z+6, 18);
setTile(x+9, y+5, z+7, 18);
setTile(x+9, y+5, z+8, 18, 2);
setTile(x+9, y+5, z+9, 18, 2);
setTile(x+9, y+5, z+10, 18, 2);
setTile(x+9, y+5, z+11, 18, 2);
setTile(x+9, y+5, z+12, 18, 2);
setTile(x+9, y+6, z-8, 18, 2);
setTile(x+9, y+6, z-7, 18, 2);
setTile(x+9, y+6, z-6, 17, 2);
setTile(x+9, y+6, z-5, 18, 2);
setTile(x+9, y+6, z-4, 18, 2);
setTile(x+9, y+6, z-2, 18);
setTile(x+9, y+6, z+1, 18, 2);
setTile(x+9, y+6, z+2, 17, 2);
setTile(x+9, y+6, z+3, 18, 2);
setTile(x+9, y+6, z+7, 18);
setTile(x+9, y+6, z+8, 18);
setTile(x+9, y+7, z-7, 18, 2);
setTile(x+9, y+7, z-6, 17, 2);
setTile(x+9, y+7, z-5, 18, 2);
setTile(x+9, y+7, z+1, 18, 2);
setTile(x+9, y+7, z+2, 18, 2);
setTile(x+9, y+7, z+3, 18, 2);
setTile(x+9, y+7, z+7, 18);
setTile(x+9, y+8, z-7, 18, 2);
setTile(x+9, y+8, z-6, 18, 2);
setTile(x+9, y+8, z-5, 18, 2);
setTile(x+10, y+1, z-10, 37);
setTile(x+10, y+1, z-7, 38);
setTile(x+10, y+1, z-5, 37);
setTile(x+10, y+1, z, 37);
setTile(x+10, y+1, z+2, 38);
setTile(x+10, y+1, z+5, 38);
setTile(x+10, y+1, z+8, 38);
setTile(x+10, y+3, z-3, 18);
setTile(x+10, y+3, z-2, 18);
setTile(x+10, y+3, z-1, 18);
setTile(x+10, y+3, z, 18);
setTile(x+10, y+4, z-3, 18);
setTile(x+10, y+4, z-2, 18);
setTile(x+10, y+4, z-1, 18);
setTile(x+10, y+4, z, 18, 2);
setTile(x+10, y+4, z+1, 18, 2);
setTile(x+10, y+4, z+2, 18, 2);
setTile(x+10, y+4, z+3, 18, 2);
setTile(x+10, y+4, z+4, 18, 2);
setTile(x+10, y+4, z+6, 18);
setTile(x+10, y+4, z+7, 18);
setTile(x+10, y+4, z+8, 18);
setTile(x+10, y+4, z+9, 18);
setTile(x+10, y+5, z-8, 18, 2);
setTile(x+10, y+5, z-7, 18, 2);
setTile(x+10, y+5, z-6, 18, 2);
setTile(x+10, y+5, z-5, 18, 2);
setTile(x+10, y+5, z-4, 18, 2);
setTile(x+10, y+5, z, 18, 2);
setTile(x+10, y+5, z+1, 18, 2);
setTile(x+10, y+5, z+2, 18, 2);
setTile(x+10, y+5, z+3, 18, 2);
setTile(x+10, y+5, z+4, 18, 2);
setTile(x+10, y+5, z+5, 18);
setTile(x+10, y+5, z+6, 18);
setTile(x+10, y+5, z+7, 18);
setTile(x+10, y+5, z+8, 18);
setTile(x+10, y+6, z-8, 18, 2);
setTile(x+10, y+6, z-7, 18, 2);
setTile(x+10, y+6, z-6, 18, 2);
setTile(x+10, y+6, z-5, 18, 6);
setTile(x+10, y+6, z-4, 18, 2);
setTile(x+10, y+6, z+2, 18, 2);
setTile(x+10, y+6, z+3, 18, 2);
setTile(x+10, y+7, z-7, 18, 2);
setTile(x+10, y+7, z-6, 18, 2);
setTile(x+10, y+7, z-5, 18, 2);
setTile(x+10, y+7, z+2, 18, 2);
setTile(x+10, y+8, z-6, 18, 2);
setTile(x+11, y+1, z-9, 37);
setTile(x+11, y+1, z+3, 38);
setTile(x+11, y+1, z+5, 37);
setTile(x+11, y+1, z+7, 38);
setTile(x+11, y+4, z+1, 18, 2);
setTile(x+11, y+4, z+2, 18, 2);
setTile(x+11, y+4, z+3, 18, 2);
setTile(x+11, y+4, z+4, 18, 2);
setTile(x+11, y+5, z-8, 18, 2);
setTile(x+11, y+5, z-7, 18, 2);
setTile(x+11, y+5, z-6, 18, 2);
setTile(x+11, y+5, z-5, 18, 2);
setTile(x+11, y+5, z, 18, 2);
setTile(x+11, y+5, z+1, 18, 2);
setTile(x+11, y+5, z+2, 18, 2);
setTile(x+11, y+5, z+3, 18, 2);
setTile(x+11, y+5, z+4, 18, 2);
setTile(x+11, y+6, z-7, 18, 2);
setTile(x+11, y+6, z-6, 18, 2);
setTile(x+11, y+6, z-5, 18, 2);
setTile(x+12, y+1, z+7, 37);
setTile(x+13, y+1, z-12, 38);
setTile(x+13, y+1, z+3, 38);
setTile(x+13, y+1, z+5, 38);
}


function makeDownloadDialog(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var menus = ["상징곡", "낮 BGM", "밤 BGM"];
var names = ["ESP", "We_Must_Fight", "Dark_Battle"];
var urls = ["sxv7s84zx4s2g98\/ESP", "zqi8kcf70c4gq82\/We_Must_Fight", "6hpl2fhiqwijzup\/Dark_Battle"];
var dialog = new android.app.AlertDialog.Builder(ctx, android.app.AlertDialog.THEME_HOLO_DARK);
dialog.setItems(menus, new android.content.DialogInterface.OnClickListener({
onClick: function(m, w){
ESP.download("https:\/\/www.dropbox.com\/s\/"+urls[w]+".mp3?dl=1", names[w]+".mp3");
}
}));
dialog.setTitle("추가 파일 다운로드");
dialog.setNegativeButton("취소", null);
dialog.show();
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}


function makeScreen(){
ctx.runOnUiThread(new java.lang.Runnable({
run: function(){
try{
var menu = new android.widget.PopupWindow();
var layout = new android.widget.LinearLayout(ctx);
layout.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch : function(v, ev){
if(ev.getAction()==android.view.MotionEvent.ACTION_DOWN){
ESP.save("btnX", ev.getRawX());
ESP.save("btnY", ev.getRawY());
if(btn!=null){
btn.dismiss();
btn = null;
}
ESP.addEMButton();
ESP.toast("수정되었습니다.");
menu.dismiss();
}
return true;
}
}));
menu.setContentView(layout);
menu.setWidth(ctx.getWindowManager().getDefaultDisplay().getWidth());
menu.setHeight(ctx.getWindowManager().getDefaultDisplay().getHeight());
menu.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.argb(120, 0, 0, 0)));
menu.showAtLocation(ctx.getWindow().getDecorView(),android.view.Gravity.CENTER|android.view.Gravity.CENTER, 0, 0);
}
catch(e){
clientMessage(e+", "+e.lineNumber);
}
}
}));
}


function leaveGame(){
//reseting data
mp = false;
mp2 = false;
mp3 = false;
auto = false;
anti3 = 0;
anti4 = false;
fill = false;

//removing em
ctx.runOnUiThread(new java.lang.Runnable({ run: function() {
if(btn!=null){
btn.dismiss();
btn = null;
}
if(menu!=null){
menu.dismiss();
menu = null;
ESP.toast("ESP Manager off");
}
if(btnTime!=null){
btnTime.dismiss();
btnTime = null;
}
if(menu2!=null){
menu2.dismiss();
menu2 = null;
}
if(menu3!=null){
menu3.dismiss();
menu3 = null;
}
if(menu4!=null){
menu4.dismiss();
menu4 = null;
}
if(menu5!=null){
menu5.dismiss();
menu5 = null;
}
if(menu6!=null){
menu6.dismiss();
menu6 = null;
}
if(menu7!=null){
menu7.dismiss();
menu7 = null;
}
if(menu8!=null){
menu8.dismiss();
menu8 = null;
}
if(menu9!=null){
menu9.dismiss();
menu9 = null;
}
if(menu10!=null){
menu10.dismiss();
menu10 = null;
}
if(btnSS!=null){
btnSS.dismiss();
btnSS = null;
}
if(menu11!=null){
menu11.dismiss();
menu11 = null;
}
if(menu12!=null){
menu12.dismiss();
menu12 = null;
}
if(menu13!=null){
menu13.dismiss();
menu13 = null;
}
if(btnPlayer!=null){
btnPlayer.dismiss();
btnPlayer = null;
}
if(menuP!=null){
menuP.dismiss();
menuP = null;
}
if(menuS!=null){
menuS.dismiss();
menuS = null;
}
if(menuH!=null){
menuH.dismiss();
menuH = null;
}
if(menuD!=null){
menuD.dismiss();
menuD = null;
}
}}));

//Saving EM Data
ESP.save("em", locate);
ESP.save("em2", emcolor);

//BGM off
if(bgmOnoff){
bgmPlayer(false);
bgmOnoff = false;
}

//passive off
passOnoff = false;

//else
multi = false;
while(banList[0]!=null){
banList.shift();
banData.shift();
}
town = false;
espOnoff = false;
streetLight = false;
exp.onoff = false;

}

